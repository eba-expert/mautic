<?php

namespace ContainerMOMedhB;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMautic_Campaign_Model_EventService extends AppKernelProdContainer
{
    /*
     * Gets the public 'mautic.campaign.model.event' shared service.
     *
     * @return \Mautic\CampaignBundle\Model\EventModel
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.user.model.user'] ?? $container->getMautic_User_Model_UserService());

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $b = ($container->services['mautic.core.model.notification'] ?? $container->getMautic_Core_Model_NotificationService());

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $c = ($container->services['mautic.campaign.model.campaign'] ?? $container->getMautic_Campaign_Model_CampaignService());

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $d = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $container->getLeadModelService());

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $e = ($container->services['mautic.campaign.executioner.realtime'] ?? $container->load('getMautic_Campaign_Executioner_RealtimeService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $f = ($container->services['mautic.campaign.executioner.kickoff'] ?? $container->load('getMautic_Campaign_Executioner_KickoffService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $g = ($container->services['mautic.campaign.executioner.scheduled'] ?? $container->load('getMautic_Campaign_Executioner_ScheduledService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $h = ($container->services['mautic.campaign.executioner.inactive'] ?? $container->load('getMautic_Campaign_Executioner_InactiveService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $i = ($container->services['mautic.campaign.event_executioner'] ?? $container->load('getMautic_Campaign_EventExecutionerService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $j = ($container->services['mautic.campaign.event_collector'] ?? $container->getMautic_Campaign_EventCollectorService());

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $k = ($container->services['mautic.campaign.dispatcher.action'] ?? $container->load('getMautic_Campaign_Dispatcher_ActionService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $l = ($container->services['mautic.campaign.dispatcher.condition'] ?? $container->load('getMautic_Campaign_Dispatcher_ConditionService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }
        $m = ($container->services['mautic.campaign.dispatcher.decision'] ?? $container->load('getMautic_Campaign_Dispatcher_DecisionService'));

        if (isset($container->services['mautic.campaign.model.event'])) {
            return $container->services['mautic.campaign.model.event'];
        }

        $container->services['mautic.campaign.model.event'] = $instance = new \Mautic\CampaignBundle\Model\EventModel($a, $b, $c, $d, ($container->services['mautic.helper.ip_lookup'] ?? $container->getMautic_Helper_IpLookupService()), $e, $f, $g, $h, $i, $j, $k, $l, $m, ($container->services['mautic.campaign.repository.lead_event_log'] ?? $container->getMautic_Campaign_Repository_LeadEventLogService()));

        $instance->setEntityManager(($container->services['doctrine.orm.default_entity_manager'] ?? $container->getDoctrine_Orm_DefaultEntityManagerService()));
        $instance->setSecurity(($container->services['mautic.security'] ?? $container->getMautic_SecurityService()));
        $instance->setDispatcher(($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()));
        $instance->setTranslator(($container->services['translator'] ?? $container->getTranslator2Service()));
        $instance->setUserHelper(($container->services['mautic.helper.user'] ?? $container->getMautic_Helper_UserService()));
        $instance->setCoreParametersHelper(($container->services['mautic.helper.core_parameters'] ?? ($container->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($container))));
        $instance->setRouter(($container->services['router'] ?? $container->getRouterService()));
        $instance->setLogger(($container->services['monolog.logger.mautic'] ?? $container->getMonolog_Logger_MauticService()));

        return $instance;
    }
}

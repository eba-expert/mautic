<?php

namespace ContainerTJJPQO2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class AppKernelProdContainer extends Container
{
    protected $containerDir;
    protected $targetDir;
    protected $parameters = [];
    private $buildParameters;
    protected $getService;

    public function __construct(array $buildParameters = [], $containerDir = __DIR__)
    {
        $this->getService = \Closure::fromCallable([$this, 'getService']);
        $this->buildParameters = $buildParameters;
        $this->containerDir = $containerDir;
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            '.container.private.form.factory' => 'get_Container_Private_Form_FactoryService',
            '.container.private.security.authorization_checker' => 'get_Container_Private_Security_AuthorizationCheckerService',
            '.container.private.security.csrf.token_manager' => 'get_Container_Private_Security_Csrf_TokenManagerService',
            '.container.private.security.token_storage' => 'get_Container_Private_Security_TokenStorageService',
            '.container.private.session' => 'get_Container_Private_SessionService',
            '.container.private.twig' => 'get_Container_Private_TwigService',
            '.container.private.validator' => 'get_Container_Private_ValidatorService',
            'MauticPlugin\\MauticCitrixBundle\\Twig\\Extension\\CitrixExtension' => 'getCitrixExtensionService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber' => 'getFocusSubscriberService',
            'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel' => 'getFocusModelService',
            'MauticPlugin\\MauticFocusBundle\\Twig\\Extension\\FocusBundleExtension' => 'getFocusBundleExtensionService',
            'Mautic\\ApiBundle\\EventListener\\ApiSubscriber' => 'getApiSubscriberService',
            'Mautic\\AssetBundle\\Helper\\TokenHelper' => 'getTokenHelperService',
            'Mautic\\AssetBundle\\Model\\AssetModel' => 'getAssetModelService',
            'Mautic\\CampaignBundle\\Model\\CampaignModel' => 'getCampaignModelService',
            'Mautic\\CategoryBundle\\Model\\CategoryModel' => 'getCategoryModelService',
            'Mautic\\ChannelBundle\\Model\\MessageQueueModel' => 'getMessageQueueModelService',
            'Mautic\\ChannelBundle\\Twig\\ChannelExtension' => 'getChannelExtensionService',
            'Mautic\\CoreBundle\\EventListener\\AssetsSubscriber' => 'getAssetsSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\CoreSubscriber' => 'getCoreSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\EnvironmentSubscriber' => 'getEnvironmentSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\RequestSubscriber' => 'getRequestSubscriberService',
            'Mautic\\CoreBundle\\Factory\\MauticFactory' => 'getMauticFactoryService',
            'Mautic\\CoreBundle\\Factory\\ModelFactory' => 'getModelFactoryService',
            'Mautic\\CoreBundle\\Helper\\AssetGenerationHelper' => 'getAssetGenerationHelperService',
            'Mautic\\CoreBundle\\Helper\\DateTimeHelper' => 'getDateTimeHelperService',
            'Mautic\\CoreBundle\\Helper\\EmojiHelper' => 'getEmojiHelperService',
            'Mautic\\CoreBundle\\Model\\AuditLogModel' => 'getAuditLogModelService',
            'Mautic\\CoreBundle\\Model\\NotificationModel' => 'getNotificationModelService',
            'Mautic\\CoreBundle\\Translation\\Translator' => 'getTranslatorService',
            'Mautic\\CoreBundle\\Twig\\Extension\\AnalyticsExtension' => 'getAnalyticsExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\AppExtension' => 'getAppExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\AssetExtension' => 'getAssetExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\BarChartExtension' => 'getBarChartExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension' => 'getButtonExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ClassExtension' => 'getClassExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ConfigExtension' => 'getConfigExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ContentExtension' => 'getContentExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\CoreHelpersExtension' => 'getCoreHelpersExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\DateExtension' => 'getDateExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\DateTimeExtension' => 'getDateTimeExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\DeviceExtension' => 'getDeviceExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\EmojiExtension' => 'getEmojiExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\EnumExtension' => 'getEnumExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ExceptionExtension' => 'getExceptionExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\FormExtension' => 'getFormExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\FormatterExtension' => 'getFormatterExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\GravatarExtension' => 'getGravatarExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\HtmlExtension' => 'getHtmlExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\InputExtension' => 'getInputExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\MautibotExtension' => 'getMautibotExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\MenuExtension' => 'getMenuExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\NumericExtension' => 'getNumericExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\ObjectExtension' => 'getObjectExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\SecurityExtension' => 'getSecurityExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\SerializerExtension' => 'getSerializerExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\SlotExtension' => 'getSlotExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\StorageExtension' => 'getStorageExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\TranslatorExtension' => 'getTranslatorExtensionService',
            'Mautic\\CoreBundle\\Twig\\Extension\\VersionExtension' => 'getVersionExtensionService',
            'Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper' => 'getAssetsHelperService',
            'Mautic\\CoreBundle\\Twig\\Helper\\SlotsHelper' => 'getSlotsHelperService',
            'Mautic\\EmailBundle\\Mailer\\Transport\\TransportFactory' => 'getTransportFactoryService',
            'Mautic\\EmailBundle\\Model\\EmailModel' => 'getEmailModelService',
            'Mautic\\EmailBundle\\Model\\SendEmailToContact' => 'getSendEmailToContactService',
            'Mautic\\FormBundle\\Entity\\FormRepository' => 'getFormRepositoryService',
            'Mautic\\FormBundle\\Model\\ActionModel' => 'getActionModelService',
            'Mautic\\FormBundle\\Model\\FieldModel' => 'getFieldModelService',
            'Mautic\\FormBundle\\Model\\FormModel' => 'getFormModelService',
            'Mautic\\FormBundle\\Model\\SubmissionModel' => 'getSubmissionModelService',
            'Mautic\\FormBundle\\Twig\\Extension\\FormFieldExtension' => 'getFormFieldExtensionService',
            'Mautic\\InstallBundle\\Twig\\TwigExtension' => 'getTwigExtensionService',
            'Mautic\\LeadBundle\\Entity\\DoNotContactRepository' => 'getDoNotContactRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadFieldRepository' => 'getLeadFieldRepositoryService',
            'Mautic\\LeadBundle\\Model\\CompanyModel' => 'getCompanyModelService',
            'Mautic\\LeadBundle\\Model\\DoNotContact' => 'getDoNotContactService',
            'Mautic\\LeadBundle\\Model\\FieldModel' => 'getFieldModel2Service',
            'Mautic\\LeadBundle\\Model\\IpAddressModel' => 'getIpAddressModelService',
            'Mautic\\LeadBundle\\Model\\LeadModel' => 'getLeadModelService',
            'Mautic\\LeadBundle\\Model\\ListModel' => 'getListModelService',
            'Mautic\\LeadBundle\\Twig\\Extension\\DncReasonExtension' => 'getDncReasonExtensionService',
            'Mautic\\LeadBundle\\Twig\\Extension\\FormFieldExtension' => 'getFormFieldExtension2Service',
            'Mautic\\LeadBundle\\Twig\\Extension\\LeadExtension' => 'getLeadExtensionService',
            'Mautic\\PageBundle\\Entity\\RedirectRepository' => 'getRedirectRepositoryService',
            'Mautic\\PageBundle\\Model\\PageModel' => 'getPageModelService',
            'Mautic\\PageBundle\\Model\\RedirectModel' => 'getRedirectModelService',
            'Mautic\\PageBundle\\Model\\TrackableModel' => 'getTrackableModelService',
            'Mautic\\PluginBundle\\Model\\PluginModel' => 'getPluginModelService',
            'Mautic\\UserBundle\\Controller\\SecurityController' => 'getSecurityControllerService',
            'Mautic\\UserBundle\\EventListener\\SAMLSubscriber' => 'getSAMLSubscriberService',
            'Mautic\\UserBundle\\Model\\RoleModel' => 'getRoleModelService',
            'Mautic\\UserBundle\\Model\\UserModel' => 'getUserModelService',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface' => 'getArgumentResolverInterfaceService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'grapesjsbuilder.integration.builder' => 'getGrapesjsbuilder_Integration_BuilderService',
            'http_kernel' => 'getHttpKernelService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'marketplace.service.config' => 'getMarketplace_Service_ConfigService',
            'mautic.asset.fixture.asset' => 'getMautic_Asset_Fixture_AssetService',
            'mautic.cache.provider' => 'getMautic_Cache_ProviderService',
            'mautic.campaign.event_collector' => 'getMautic_Campaign_EventCollectorService',
            'mautic.campaign.fixture.campaign' => 'getMautic_Campaign_Fixture_CampaignService',
            'mautic.campaign.membership.adder' => 'getMautic_Campaign_Membership_AdderService',
            'mautic.campaign.membership.builder' => 'getMautic_Campaign_Membership_BuilderService',
            'mautic.campaign.membership.event_dispatcher' => 'getMautic_Campaign_Membership_EventDispatcherService',
            'mautic.campaign.membership.manager' => 'getMautic_Campaign_Membership_ManagerService',
            'mautic.campaign.membership.remover' => 'getMautic_Campaign_Membership_RemoverService',
            'mautic.campaign.repository.lead' => 'getMautic_Campaign_Repository_LeadService',
            'mautic.campaign.repository.lead_event_log' => 'getMautic_Campaign_Repository_LeadEventLogService',
            'mautic.channel.helper.channel_list' => 'getMautic_Channel_Helper_ChannelListService',
            'mautic.cipher.openssl' => 'getMautic_Cipher_OpensslService',
            'mautic.citrix.fixture.load_citrix_data' => 'getMautic_Citrix_Fixture_LoadCitrixDataService',
            'mautic.company.deduper' => 'getMautic_Company_DeduperService',
            'mautic.configurator' => 'getMautic_ConfiguratorService',
            'mautic.core.errorhandler.subscriber' => 'getMautic_Core_Errorhandler_SubscriberService',
            'mautic.core.service.flashbag' => 'getMautic_Core_Service_FlashbagService',
            'mautic.core.service.log_processor' => 'getMautic_Core_Service_LogProcessorService',
            'mautic.core.subscriber.router' => 'getMautic_Core_Subscriber_RouterService',
            'mautic.core.validator.file_upload' => 'getMautic_Core_Validator_FileUploadService',
            'mautic.database.version.provider' => 'getMautic_Database_Version_ProviderService',
            'mautic.doctrine.loader.mautic_fixtures_loader' => 'getMautic_Doctrine_Loader_MauticFixturesLoaderService',
            'mautic.email.fixture.email' => 'getMautic_Email_Fixture_EmailService',
            'mautic.email.helper.stat' => 'getMautic_Email_Helper_StatService',
            'mautic.email.helper.stats_collection' => 'getMautic_Email_Helper_StatsCollectionService',
            'mautic.email.repository.stat' => 'getMautic_Email_Repository_StatService',
            'mautic.email.stats.helper_bounced' => 'getMautic_Email_Stats_HelperBouncedService',
            'mautic.email.stats.helper_clicked' => 'getMautic_Email_Stats_HelperClickedService',
            'mautic.email.stats.helper_container' => 'getMautic_Email_Stats_HelperContainerService',
            'mautic.email.stats.helper_failed' => 'getMautic_Email_Stats_HelperFailedService',
            'mautic.email.stats.helper_opened' => 'getMautic_Email_Stats_HelperOpenedService',
            'mautic.email.stats.helper_sent' => 'getMautic_Email_Stats_HelperSentService',
            'mautic.email.stats.helper_unsubscribed' => 'getMautic_Email_Stats_HelperUnsubscribedService',
            'mautic.filesystem' => 'getMautic_FilesystemService',
            'mautic.form.collector.field' => 'getMautic_Form_Collector_FieldService',
            'mautic.form.collector.mapped.object' => 'getMautic_Form_Collector_Mapped_ObjectService',
            'mautic.form.fixture.form' => 'getMautic_Form_Fixture_FormService',
            'mautic.form.fixture.form_result' => 'getMautic_Form_Fixture_FormResultService',
            'mautic.form.helper.form_uploader' => 'getMautic_Form_Helper_FormUploaderService',
            'mautic.form.service.field.value.transformer' => 'getMautic_Form_Service_Field_Value_TransformerService',
            'mautic.form.validator.upload_field_validator' => 'getMautic_Form_Validator_UploadFieldValidatorService',
            'mautic.generated.columns.provider' => 'getMautic_Generated_Columns_ProviderService',
            'mautic.helper.app_version' => 'getMautic_Helper_AppVersionService',
            'mautic.helper.bundle' => 'getMautic_Helper_BundleService',
            'mautic.helper.cache' => 'getMautic_Helper_CacheService',
            'mautic.helper.cache_storage' => 'getMautic_Helper_CacheStorageService',
            'mautic.helper.cookie' => 'getMautic_Helper_CookieService',
            'mautic.helper.core_parameters' => 'getMautic_Helper_CoreParametersService',
            'mautic.helper.encryption' => 'getMautic_Helper_EncryptionService',
            'mautic.helper.file_path_resolver' => 'getMautic_Helper_FilePathResolverService',
            'mautic.helper.file_uploader' => 'getMautic_Helper_FileUploaderService',
            'mautic.helper.form.field_helper' => 'getMautic_Helper_Form_FieldHelperService',
            'mautic.helper.input_helper' => 'getMautic_Helper_InputHelperService',
            'mautic.helper.integration' => 'getMautic_Helper_IntegrationService',
            'mautic.helper.ip_lookup' => 'getMautic_Helper_IpLookupService',
            'mautic.helper.mailbox' => 'getMautic_Helper_MailboxService',
            'mautic.helper.mailer' => 'getMautic_Helper_MailerService',
            'mautic.helper.menu' => 'getMautic_Helper_MenuService',
            'mautic.helper.paths' => 'getMautic_Helper_PathsService',
            'mautic.helper.random' => 'getMautic_Helper_RandomService',
            'mautic.helper.segment.count.cache' => 'getMautic_Helper_Segment_Count_CacheService',
            'mautic.helper.theme' => 'getMautic_Helper_ThemeService',
            'mautic.helper.twig.analytics' => 'getMautic_Helper_Twig_AnalyticsService',
            'mautic.helper.twig.avatar' => 'getMautic_Helper_Twig_AvatarService',
            'mautic.helper.twig.button' => 'getMautic_Helper_Twig_ButtonService',
            'mautic.helper.twig.config' => 'getMautic_Helper_Twig_ConfigService',
            'mautic.helper.twig.content' => 'getMautic_Helper_Twig_ContentService',
            'mautic.helper.twig.date' => 'getMautic_Helper_Twig_DateService',
            'mautic.helper.twig.default_avatar' => 'getMautic_Helper_Twig_DefaultAvatarService',
            'mautic.helper.twig.dnc_reason' => 'getMautic_Helper_Twig_DncReasonService',
            'mautic.helper.twig.formatter' => 'getMautic_Helper_Twig_FormatterService',
            'mautic.helper.twig.gravatar' => 'getMautic_Helper_Twig_GravatarService',
            'mautic.helper.twig.mautibot' => 'getMautic_Helper_Twig_MautibotService',
            'mautic.helper.twig.menu' => 'getMautic_Helper_Twig_MenuService',
            'mautic.helper.twig.security' => 'getMautic_Helper_Twig_SecurityService',
            'mautic.helper.update' => 'getMautic_Helper_UpdateService',
            'mautic.helper.update.release_parser' => 'getMautic_Helper_Update_ReleaseParserService',
            'mautic.helper.update_checks' => 'getMautic_Helper_UpdateChecksService',
            'mautic.helper.url' => 'getMautic_Helper_UrlService',
            'mautic.helper.user' => 'getMautic_Helper_UserService',
            'mautic.http.client' => 'getMautic_Http_ClientService',
            'mautic.install.configurator.step.check' => 'getMautic_Install_Configurator_Step_CheckService',
            'mautic.install.configurator.step.doctrine' => 'getMautic_Install_Configurator_Step_DoctrineService',
            'mautic.install.configurator.step.user' => 'getMautic_Install_Configurator_Step_UserService',
            'mautic.install.fixture.grape_js' => 'getMautic_Install_Fixture_GrapeJsService',
            'mautic.install.fixture.lead_field' => 'getMautic_Install_Fixture_LeadFieldService',
            'mautic.install.fixture.report_data' => 'getMautic_Install_Fixture_ReportDataService',
            'mautic.install.fixture.role' => 'getMautic_Install_Fixture_RoleService',
            'mautic.install.service' => 'getMautic_Install_ServiceService',
            'mautic.integration.grapesjsbuilder' => 'getMautic_Integration_GrapesjsbuilderService',
            'mautic.integrations.helper' => 'getMautic_Integrations_HelperService',
            'mautic.integrations.helper.builder_integrations' => 'getMautic_Integrations_Helper_BuilderIntegrationsService',
            'mautic.integrations.service.encryption' => 'getMautic_Integrations_Service_EncryptionService',
            'mautic.integrations.subscriber.controller' => 'getMautic_Integrations_Subscriber_ControllerService',
            'mautic.ip_lookup' => 'getMautic_IpLookupService',
            'mautic.ip_lookup.factory' => 'getMautic_IpLookup_FactoryService',
            'mautic.lead.factory.device_detector_factory' => 'getMautic_Lead_Factory_DeviceDetectorFactoryService',
            'mautic.lead.field.custom_field_column' => 'getMautic_Lead_Field_CustomFieldColumnService',
            'mautic.lead.field.custom_field_index' => 'getMautic_Lead_Field_CustomFieldIndexService',
            'mautic.lead.field.dispatcher.field_column_dispatcher' => 'getMautic_Lead_Field_Dispatcher_FieldColumnDispatcherService',
            'mautic.lead.field.dispatcher.field_save_dispatcher' => 'getMautic_Lead_Field_Dispatcher_FieldSaveDispatcherService',
            'mautic.lead.field.field_list' => 'getMautic_Lead_Field_FieldListService',
            'mautic.lead.field.fields_with_unique_identifier' => 'getMautic_Lead_Field_FieldsWithUniqueIdentifierService',
            'mautic.lead.field.lead_field_saver' => 'getMautic_Lead_Field_LeadFieldSaverService',
            'mautic.lead.field.schema_definition' => 'getMautic_Lead_Field_SchemaDefinitionService',
            'mautic.lead.field.settings.background_settings' => 'getMautic_Lead_Field_Settings_BackgroundSettingsService',
            'mautic.lead.fixture.categorizedleadlists' => 'getMautic_Lead_Fixture_CategorizedleadlistsService',
            'mautic.lead.fixture.category' => 'getMautic_Lead_Fixture_CategoryService',
            'mautic.lead.fixture.company' => 'getMautic_Lead_Fixture_CompanyService',
            'mautic.lead.fixture.contact' => 'getMautic_Lead_Fixture_ContactService',
            'mautic.lead.fixture.segment' => 'getMautic_Lead_Fixture_SegmentService',
            'mautic.lead.fixture.test.click' => 'getMautic_Lead_Fixture_Test_ClickService',
            'mautic.lead.fixture.test.dnc' => 'getMautic_Lead_Fixture_Test_DncService',
            'mautic.lead.fixture.test.page_hit' => 'getMautic_Lead_Fixture_Test_PageHitService',
            'mautic.lead.fixture.test.segment' => 'getMautic_Lead_Fixture_Test_SegmentService',
            'mautic.lead.fixture.test.tag' => 'getMautic_Lead_Fixture_Test_TagService',
            'mautic.lead.helper.contact_request_helper' => 'getMautic_Lead_Helper_ContactRequestHelperService',
            'mautic.lead.merger' => 'getMautic_Lead_MergerService',
            'mautic.lead.model.lead_segment.decorator.date.optionFactory' => 'getMautic_Lead_Model_LeadSegment_Decorator_Date_OptionFactoryService',
            'mautic.lead.model.lead_segment.timezoneResolver' => 'getMautic_Lead_Model_LeadSegment_TimezoneResolverService',
            'mautic.lead.model.lead_segment_decorator_base' => 'getMautic_Lead_Model_LeadSegmentDecoratorBaseService',
            'mautic.lead.model.lead_segment_decorator_company' => 'getMautic_Lead_Model_LeadSegmentDecoratorCompanyService',
            'mautic.lead.model.lead_segment_decorator_custom_mapped' => 'getMautic_Lead_Model_LeadSegmentDecoratorCustomMappedService',
            'mautic.lead.model.lead_segment_decorator_date' => 'getMautic_Lead_Model_LeadSegmentDecoratorDateService',
            'mautic.lead.model.lead_segment_decorator_factory' => 'getMautic_Lead_Model_LeadSegmentDecoratorFactoryService',
            'mautic.lead.model.lead_segment_filter_factory' => 'getMautic_Lead_Model_LeadSegmentFilterFactoryService',
            'mautic.lead.model.lead_segment_filter_operator' => 'getMautic_Lead_Model_LeadSegmentFilterOperatorService',
            'mautic.lead.model.lead_segment_schema_cache' => 'getMautic_Lead_Model_LeadSegmentSchemaCacheService',
            'mautic.lead.model.lead_segment_service' => 'getMautic_Lead_Model_LeadSegmentServiceService',
            'mautic.lead.model.random_parameter_name' => 'getMautic_Lead_Model_RandomParameterNameService',
            'mautic.lead.model.relative_date' => 'getMautic_Lead_Model_RelativeDateService',
            'mautic.lead.provider.fillterOperator' => 'getMautic_Lead_Provider_FillterOperatorService',
            'mautic.lead.repository.company' => 'getMautic_Lead_Repository_CompanyService',
            'mautic.lead.repository.field' => 'getMautic_Lead_Repository_FieldService',
            'mautic.lead.repository.lead' => 'getMautic_Lead_Repository_LeadService',
            'mautic.lead.repository.lead_device' => 'getMautic_Lead_Repository_LeadDeviceService',
            'mautic.lead.repository.lead_segment_filter_descriptor' => 'getMautic_Lead_Repository_LeadSegmentFilterDescriptorService',
            'mautic.lead.repository.lead_segment_query_builder' => 'getMautic_Lead_Repository_LeadSegmentQueryBuilderService',
            'mautic.lead.repository.list_lead' => 'getMautic_Lead_Repository_ListLeadService',
            'mautic.lead.repository.merged_records' => 'getMautic_Lead_Repository_MergedRecordsService',
            'mautic.lead.segment.stat.chart.query.factory' => 'getMautic_Lead_Segment_Stat_Chart_Query_FactoryService',
            'mautic.lead.service.contact_tracking_service' => 'getMautic_Lead_Service_ContactTrackingServiceService',
            'mautic.lead.service.device_creator_service' => 'getMautic_Lead_Service_DeviceCreatorServiceService',
            'mautic.lead.service.device_tracking_service' => 'getMautic_Lead_Service_DeviceTrackingServiceService',
            'mautic.monolog.handler' => 'getMautic_Monolog_HandlerService',
            'mautic.page.fixture.page' => 'getMautic_Page_Fixture_PageService',
            'mautic.page.fixture.page_category' => 'getMautic_Page_Fixture_PageCategoryService',
            'mautic.page.fixture.page_hit' => 'getMautic_Page_Fixture_PageHitService',
            'mautic.page.helper.token' => 'getMautic_Page_Helper_TokenService',
            'mautic.permission.manager' => 'getMautic_Permission_ManagerService',
            'mautic.permission.repository' => 'getMautic_Permission_RepositoryService',
            'mautic.plugin.integrations.repository.integration' => 'getMautic_Plugin_Integrations_Repository_IntegrationService',
            'mautic.queue.service' => 'getMautic_Queue_ServiceService',
            'mautic.schema.helper.column' => 'getMautic_Schema_Helper_ColumnService',
            'mautic.schema.helper.index' => 'getMautic_Schema_Helper_IndexService',
            'mautic.schema.helper.table' => 'getMautic_Schema_Helper_TableService',
            'mautic.security' => 'getMautic_SecurityService',
            'mautic.stats.aggregate.collector' => 'getMautic_Stats_Aggregate_CollectorService',
            'mautic.tracker.contact' => 'getMautic_Tracker_ContactService',
            'mautic.tracker.device' => 'getMautic_Tracker_DeviceService',
            'mautic.update.checks.database' => 'getMautic_Update_Checks_DatabaseService',
            'mautic.update.checks.php' => 'getMautic_Update_Checks_PhpService',
            'mautic.user.fixture.role' => 'getMautic_User_Fixture_RoleService',
            'mautic.user.fixture.user' => 'getMautic_User_Fixture_UserService',
            'mautic.user.manager' => 'getMautic_User_ManagerService',
            'mautic.user.model.user_token_service' => 'getMautic_User_Model_UserTokenServiceService',
            'mautic.user.provider' => 'getMautic_User_ProviderService',
            'mautic.user.repository' => 'getMautic_User_RepositoryService',
            'mautic.user.repository.user_token' => 'getMautic_User_Repository_UserTokenService',
            'mautic.validator.email' => 'getMautic_Validator_EmailService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'monolog.logger.mautic' => 'getMonolog_Logger_MauticService',
            'oneup_uploader.templating.uploader_helper' => 'getOneupUploader_Templating_UploaderHelperService',
            'oneup_uploader.twig.extension.uploader' => 'getOneupUploader_Twig_Extension_UploaderService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'symfony.filesystem' => 'getSymfony_FilesystemService',
            'symfony.finder' => 'getSymfony_FinderService',
            'translator' => 'getTranslator2Service',
            'translator.default' => 'getTranslator_DefaultService',
            'cache_clearer' => 'getCacheClearerService',
            'filesystem' => 'getFilesystemService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'form.factory' => 'getForm_FactoryService',
            'form.type.file' => 'getForm_Type_FileService',
            'validator' => 'getValidatorService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'twig' => 'getTwigService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'session' => 'getSessionService',
        ];
        $this->fileMap = [
            '.container.private.cache_clearer' => 'get_Container_Private_CacheClearerService',
            '.container.private.filesystem' => 'get_Container_Private_FilesystemService',
            '.container.private.form.type.file' => 'get_Container_Private_Form_Type_FileService',
            '.container.private.security.password_encoder' => 'get_Container_Private_Security_PasswordEncoderService',
            'FM\\ElfinderBundle\\Controller\\ElFinderController' => 'getElFinderControllerService',
            'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\FileManagerController' => 'getFileManagerControllerService',
            'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\GrapesJsController' => 'getGrapesJsControllerService',
            'MauticPlugin\\GrapesJsBuilderBundle\\Entity\\GrapesJsBuilderRepository' => 'getGrapesJsBuilderRepositoryService',
            'MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\AssetsSubscriber' => 'getAssetsSubscriber2Service',
            'MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\EmailSubscriber' => 'getEmailSubscriberService',
            'MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\InjectCustomContentSubscriber' => 'getInjectCustomContentSubscriberService',
            'MauticPlugin\\GrapesJsBuilderBundle\\GrapesJsBuilderBundle' => 'getGrapesJsBuilderBundleService',
            'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel' => 'getGrapesJsBuilderModelService',
            'MauticPlugin\\MauticCitrixBundle\\CitrixEvents' => 'getCitrixEventsService',
            'MauticPlugin\\MauticCitrixBundle\\Command\\SyncCommand' => 'getSyncCommandService',
            'MauticPlugin\\MauticCitrixBundle\\Controller\\PublicController' => 'getPublicControllerService',
            'MauticPlugin\\MauticCitrixBundle\\Entity\\CitrixEventRepository' => 'getCitrixEventRepositoryService',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber2Service',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\IntegrationRequestSubscriber' => 'getIntegrationRequestSubscriberService',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriberService',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriberService',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixActionType' => 'getCitrixActionTypeService',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignActionType' => 'getCitrixCampaignActionTypeService',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignEventType' => 'getCitrixCampaignEventTypeService',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixListType' => 'getCitrixListTypeService',
            'MauticPlugin\\MauticCitrixBundle\\Helper\\CitrixHelper' => 'getCitrixHelperService',
            'MauticPlugin\\MauticCitrixBundle\\MauticCitrixBundle' => 'getMauticCitrixBundleService',
            'MauticPlugin\\MauticClearbitBundle\\Controller\\ClearbitController' => 'getClearbitControllerService',
            'MauticPlugin\\MauticClearbitBundle\\Controller\\PublicController' => 'getPublicController2Service',
            'MauticPlugin\\MauticClearbitBundle\\EventListener\\ButtonSubscriber' => 'getButtonSubscriberService',
            'MauticPlugin\\MauticClearbitBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber2Service',
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\BatchLookupType' => 'getBatchLookupTypeService',
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\LookupType' => 'getLookupTypeService',
            'MauticPlugin\\MauticClearbitBundle\\MauticClearbitBundle' => 'getMauticClearbitBundleService',
            'MauticPlugin\\MauticCloudStorageBundle\\EventListener\\RemoteAssetBrowseSubscriber' => 'getRemoteAssetBrowseSubscriberService',
            'MauticPlugin\\MauticCloudStorageBundle\\MauticCloudStorageBundle' => 'getMauticCloudStorageBundleService',
            'MauticPlugin\\MauticCrmBundle\\Controller\\PublicController' => 'getPublicController3Service',
            'MauticPlugin\\MauticCrmBundle\\EventListener\\LeadListSubscriber' => 'getLeadListSubscriberService',
            'MauticPlugin\\MauticCrmBundle\\Form\\Type\\IntegrationCampaignsTaskType' => 'getIntegrationCampaignsTaskTypeService',
            'MauticPlugin\\MauticCrmBundle\\MauticCrmBundle' => 'getMauticCrmBundleService',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\ConstantContactType' => 'getConstantContactTypeService',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\IcontactType' => 'getIcontactTypeService',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\MailchimpType' => 'getMailchimpTypeService',
            'MauticPlugin\\MauticEmailMarketingBundle\\MauticEmailMarketingBundle' => 'getMauticEmailMarketingBundleService',
            'MauticPlugin\\MauticFocusBundle\\Controller\\AjaxController' => 'getAjaxControllerService',
            'MauticPlugin\\MauticFocusBundle\\Controller\\Api\\FocusApiController' => 'getFocusApiControllerService',
            'MauticPlugin\\MauticFocusBundle\\Controller\\FocusController' => 'getFocusControllerService',
            'MauticPlugin\\MauticFocusBundle\\Controller\\PublicController' => 'getPublicController4Service',
            'MauticPlugin\\MauticFocusBundle\\Entity\\FocusRepository' => 'getFocusRepositoryService',
            'MauticPlugin\\MauticFocusBundle\\Entity\\StatRepository' => 'getStatRepositoryService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriberService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\FormSubscriber' => 'getFormSubscriberService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\PageSubscriber' => 'getPageSubscriberService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\StatSubscriber' => 'getStatSubscriberService',
            'MauticPlugin\\MauticFocusBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber2Service',
            'MauticPlugin\\MauticFocusBundle\\FocusEvents' => 'getFocusEventsService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ColorType' => 'getColorTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ContentType' => 'getContentTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusListType' => 'getFocusListTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusPropertiesType' => 'getFocusPropertiesTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusShowType' => 'getFocusShowTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusType' => 'getFocusTypeService',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\PropertiesType' => 'getPropertiesTypeService',
            'MauticPlugin\\MauticFocusBundle\\MauticFocusBundle' => 'getMauticFocusBundleService',
            'MauticPlugin\\MauticFullContactBundle\\Controller\\FullContactController' => 'getFullContactControllerService',
            'MauticPlugin\\MauticFullContactBundle\\Controller\\PublicController' => 'getPublicController5Service',
            'MauticPlugin\\MauticFullContactBundle\\EventListener\\ButtonSubscriber' => 'getButtonSubscriber2Service',
            'MauticPlugin\\MauticFullContactBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber3Service',
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\BatchLookupType' => 'getBatchLookupType2Service',
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\LookupType' => 'getLookupType2Service',
            'MauticPlugin\\MauticFullContactBundle\\MauticFullContactBundle' => 'getMauticFullContactBundleService',
            'MauticPlugin\\MauticGmailBundle\\MauticGmailBundle' => 'getMauticGmailBundleService',
            'MauticPlugin\\MauticOutlookBundle\\MauticOutlookBundle' => 'getMauticOutlookBundleService',
            'MauticPlugin\\MauticSocialBundle\\Command\\MauticSocialMonitoringCommand' => 'getMauticSocialMonitoringCommandService',
            'MauticPlugin\\MauticSocialBundle\\Command\\MonitorTwitterHashtagsCommand' => 'getMonitorTwitterHashtagsCommandService',
            'MauticPlugin\\MauticSocialBundle\\Command\\MonitorTwitterMentionsCommand' => 'getMonitorTwitterMentionsCommandService',
            'MauticPlugin\\MauticSocialBundle\\Controller\\AjaxController' => 'getAjaxController2Service',
            'MauticPlugin\\MauticSocialBundle\\Controller\\Api\\TweetApiController' => 'getTweetApiControllerService',
            'MauticPlugin\\MauticSocialBundle\\Controller\\JsController' => 'getJsControllerService',
            'MauticPlugin\\MauticSocialBundle\\Controller\\MonitoringController' => 'getMonitoringControllerService',
            'MauticPlugin\\MauticSocialBundle\\Controller\\TweetController' => 'getTweetControllerService',
            'MauticPlugin\\MauticSocialBundle\\Entity\\LeadRepository' => 'getLeadRepositoryService',
            'MauticPlugin\\MauticSocialBundle\\Entity\\MonitoringRepository' => 'getMonitoringRepositoryService',
            'MauticPlugin\\MauticSocialBundle\\Entity\\PostCountRepository' => 'getPostCountRepositoryService',
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetRepository' => 'getTweetRepositoryService',
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetStatRepository' => 'getTweetStatRepositoryService',
            'MauticPlugin\\MauticSocialBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber2Service',
            'MauticPlugin\\MauticSocialBundle\\EventListener\\ChannelSubscriber' => 'getChannelSubscriberService',
            'MauticPlugin\\MauticSocialBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriberService',
            'MauticPlugin\\MauticSocialBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber2Service',
            'MauticPlugin\\MauticSocialBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber3Service',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\ConfigType' => 'getConfigTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\FacebookType' => 'getFacebookTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\MonitoringType' => 'getMonitoringTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\SocialLoginType' => 'getSocialLoginTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetListType' => 'getTweetListTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetSendType' => 'getTweetSendTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetType' => 'getTweetTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterAbstractType' => 'getTwitterAbstractTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterCustomType' => 'getTwitterCustomTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterHashtagType' => 'getTwitterHashtagTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterMentionType' => 'getTwitterMentionTypeService',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterType' => 'getTwitterTypeService',
            'MauticPlugin\\MauticSocialBundle\\MauticSocialBundle' => 'getMauticSocialBundleService',
            'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel' => 'getMonitoringModelService',
            'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel' => 'getPostCountModelService',
            'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel' => 'getTweetModelService',
            'MauticPlugin\\MauticSocialBundle\\SocialEvents' => 'getSocialEventsService',
            'MauticPlugin\\MauticTagManagerBundle\\Controller\\TagController' => 'getTagControllerService',
            'MauticPlugin\\MauticTagManagerBundle\\Entity\\TagRepository' => 'getTagRepositoryService',
            'MauticPlugin\\MauticTagManagerBundle\\Form\\Type\\TagEntityType' => 'getTagEntityTypeService',
            'MauticPlugin\\MauticTagManagerBundle\\MauticTagManagerBundle' => 'getMauticTagManagerBundleService',
            'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel' => 'getTagModelService',
            'MauticPlugin\\MauticZapierBundle\\MauticZapierBundle' => 'getMauticZapierBundleService',
            'Mautic\\ApiBundle\\ApiEvents' => 'getApiEventsService',
            'Mautic\\ApiBundle\\Controller\\ClientController' => 'getClientControllerService',
            'Mautic\\ApiBundle\\Controller\\CommonApiController' => 'getCommonApiControllerService',
            'Mautic\\ApiBundle\\Controller\\FetchCommonApiController' => 'getFetchCommonApiControllerService',
            'Mautic\\ApiBundle\\Controller\\oAuth2\\AuthorizeController' => 'getAuthorizeControllerService',
            'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController' => 'getSecurityController2Service',
            'Mautic\\ApiBundle\\Entity\\oAuth2\\ClientRepository' => 'getClientRepositoryService',
            'Mautic\\ApiBundle\\EventListener\\ClientSubscriber' => 'getClientSubscriberService',
            'Mautic\\ApiBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber2Service',
            'Mautic\\ApiBundle\\EventListener\\RateLimitGenerateKeySubscriber' => 'getRateLimitGenerateKeySubscriberService',
            'Mautic\\ApiBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriberService',
            'Mautic\\ApiBundle\\Form\\Type\\ClientType' => 'getClientTypeService',
            'Mautic\\ApiBundle\\Form\\Type\\ConfigType' => 'getConfigType2Service',
            'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallback' => 'getOAuthCallbackService',
            'Mautic\\ApiBundle\\Helper\\RequestHelper' => 'getRequestHelperService',
            'Mautic\\ApiBundle\\MauticApiBundle' => 'getMauticApiBundleService',
            'Mautic\\ApiBundle\\Model\\ClientModel' => 'getClientModelService',
            'Mautic\\AssetBundle\\AssetEvents' => 'getAssetEventsService',
            'Mautic\\AssetBundle\\Controller\\AjaxController' => 'getAjaxController3Service',
            'Mautic\\AssetBundle\\Controller\\Api\\AssetApiController' => 'getAssetApiControllerService',
            'Mautic\\AssetBundle\\Controller\\AssetController' => 'getAssetControllerService',
            'Mautic\\AssetBundle\\Controller\\PublicController' => 'getPublicController6Service',
            'Mautic\\AssetBundle\\Entity\\AssetRepository' => 'getAssetRepositoryService',
            'Mautic\\AssetBundle\\Entity\\DownloadRepository' => 'getDownloadRepositoryService',
            'Mautic\\AssetBundle\\EventListener\\AssetSubscriber' => 'getAssetSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\BuilderSubscriber' => 'getBuilderSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber3Service',
            'Mautic\\AssetBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber3Service',
            'Mautic\\AssetBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\DetermineWinnerSubscriber' => 'getDetermineWinnerSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber3Service',
            'Mautic\\AssetBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber3Service',
            'Mautic\\AssetBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber4Service',
            'Mautic\\AssetBundle\\EventListener\\PageSubscriber' => 'getPageSubscriber2Service',
            'Mautic\\AssetBundle\\EventListener\\PointSubscriber' => 'getPointSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriberService',
            'Mautic\\AssetBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber2Service',
            'Mautic\\AssetBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber4Service',
            'Mautic\\AssetBundle\\EventListener\\UploadSubscriber' => 'getUploadSubscriberService',
            'Mautic\\AssetBundle\\Form\\Type\\AssetListType' => 'getAssetListTypeService',
            'Mautic\\AssetBundle\\Form\\Type\\AssetType' => 'getAssetTypeService',
            'Mautic\\AssetBundle\\Form\\Type\\CampaignEventAssetDownloadType' => 'getCampaignEventAssetDownloadTypeService',
            'Mautic\\AssetBundle\\Form\\Type\\ConfigType' => 'getConfigType3Service',
            'Mautic\\AssetBundle\\Form\\Type\\FormSubmitActionDownloadFileType' => 'getFormSubmitActionDownloadFileTypeService',
            'Mautic\\AssetBundle\\Form\\Type\\PointActionAssetDownloadType' => 'getPointActionAssetDownloadTypeService',
            'Mautic\\AssetBundle\\Helper\\PointActionHelper' => 'getPointActionHelperService',
            'Mautic\\AssetBundle\\MauticAssetBundle' => 'getMauticAssetBundleService',
            'Mautic\\CacheBundle\\Command\\ClearCacheCommand' => 'getClearCacheCommandService',
            'Mautic\\CacheBundle\\Exceptions\\InvalidArgumentException' => 'getInvalidArgumentExceptionService',
            'Mautic\\CacheBundle\\MauticCacheBundle' => 'getMauticCacheBundleService',
            'Mautic\\CampaignBundle\\CampaignEvents' => 'getCampaignEventsService',
            'Mautic\\CampaignBundle\\Command\\ExecuteEventCommand' => 'getExecuteEventCommandService',
            'Mautic\\CampaignBundle\\Command\\SummarizeCommand' => 'getSummarizeCommandService',
            'Mautic\\CampaignBundle\\Command\\TriggerCampaignCommand' => 'getTriggerCampaignCommandService',
            'Mautic\\CampaignBundle\\Command\\UpdateLeadCampaignsCommand' => 'getUpdateLeadCampaignsCommandService',
            'Mautic\\CampaignBundle\\Command\\ValidateEventCommand' => 'getValidateEventCommandService',
            'Mautic\\CampaignBundle\\Controller\\AjaxController' => 'getAjaxController4Service',
            'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController' => 'getCampaignApiControllerService',
            'Mautic\\CampaignBundle\\Controller\\Api\\EventApiController' => 'getEventApiControllerService',
            'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController' => 'getEventLogApiControllerService',
            'Mautic\\CampaignBundle\\Controller\\CampaignController' => 'getCampaignControllerService',
            'Mautic\\CampaignBundle\\Controller\\EventController' => 'getEventControllerService',
            'Mautic\\CampaignBundle\\Controller\\SourceController' => 'getSourceControllerService',
            'Mautic\\CampaignBundle\\Entity\\CampaignRepository' => 'getCampaignRepositoryService',
            'Mautic\\CampaignBundle\\Entity\\EventRepository' => 'getEventRepositoryService',
            'Mautic\\CampaignBundle\\Entity\\FailedLeadEventLogRepository' => 'getFailedLeadEventLogRepositoryService',
            'Mautic\\CampaignBundle\\Entity\\LeadEventLogRepository' => 'getLeadEventLogRepositoryService',
            'Mautic\\CampaignBundle\\Entity\\LeadRepository' => 'getLeadRepository2Service',
            'Mautic\\CampaignBundle\\Entity\\SummaryRepository' => 'getSummaryRepositoryService',
            'Mautic\\CampaignBundle\\EventListener\\CampaignActionChangeMembershipSubscriber' => 'getCampaignActionChangeMembershipSubscriberService',
            'Mautic\\CampaignBundle\\EventListener\\CampaignActionJumpToEventSubscriber' => 'getCampaignActionJumpToEventSubscriberService',
            'Mautic\\CampaignBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber4Service',
            'Mautic\\CampaignBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber4Service',
            'Mautic\\CampaignBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber2Service',
            'Mautic\\CampaignBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber5Service',
            'Mautic\\CampaignBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber2Service',
            'Mautic\\CampaignBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber2Service',
            'Mautic\\CampaignBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber3Service',
            'Mautic\\CampaignBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber5Service',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\CampaignNotExecutableException' => 'getCampaignNotExecutableExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\CannotProcessEventException' => 'getCannotProcessEventExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\ConditionFailedException' => 'getConditionFailedExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\DecisionNotApplicableException' => 'getDecisionNotApplicableExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\IntervalNotConfiguredException' => 'getIntervalNotConfiguredExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\NoContactsFoundException' => 'getNoContactsFoundExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Exception\\NoEventsFoundException' => 'getNoEventsFoundExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Result\\Counter' => 'getCounterService',
            'Mautic\\CampaignBundle\\Executioner\\Result\\EvaluatedContacts' => 'getEvaluatedContactsService',
            'Mautic\\CampaignBundle\\Executioner\\Result\\Responses' => 'getResponsesService',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Exception\\ExecutionProhibitedException' => 'getExecutionProhibitedExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Exception\\NotSchedulableException' => 'getNotSchedulableExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Exception\\NotTimeYetException' => 'getNotTimeYetExceptionService',
            'Mautic\\CampaignBundle\\Executioner\\TestInactiveExecutioner' => 'getTestInactiveExecutionerService',
            'Mautic\\CampaignBundle\\Executioner\\TestScheduledExecutioner' => 'getTestScheduledExecutionerService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventAddRemoveLeadType' => 'getCampaignEventAddRemoveLeadTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventJumpToEventType' => 'getCampaignEventJumpToEventTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventLeadChangeType' => 'getCampaignEventLeadChangeTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignLeadSourceType' => 'getCampaignLeadSourceTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignListType' => 'getCampaignListTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignType' => 'getCampaignTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\ConfigType' => 'getConfigType4Service',
            'Mautic\\CampaignBundle\\Form\\Type\\EventCanvasSettingsType' => 'getEventCanvasSettingsTypeService',
            'Mautic\\CampaignBundle\\Form\\Type\\EventType' => 'getEventTypeService',
            'Mautic\\CampaignBundle\\Helper\\CampaignEventHelper' => 'getCampaignEventHelperService',
            'Mautic\\CampaignBundle\\Helper\\ChannelExtractor' => 'getChannelExtractorService',
            'Mautic\\CampaignBundle\\MauticCampaignBundle' => 'getMauticCampaignBundleService',
            'Mautic\\CampaignBundle\\Model\\EventLogModel' => 'getEventLogModelService',
            'Mautic\\CampaignBundle\\Model\\EventModel' => 'getEventModelService',
            'Mautic\\CampaignBundle\\Model\\SummaryModel' => 'getSummaryModelService',
            'Mautic\\CategoryBundle\\CategoryEvents' => 'getCategoryEventsService',
            'Mautic\\CategoryBundle\\Controller\\AjaxController' => 'getAjaxController5Service',
            'Mautic\\CategoryBundle\\Controller\\Api\\CategoryApiController' => 'getCategoryApiControllerService',
            'Mautic\\CategoryBundle\\Controller\\BatchContactController' => 'getBatchContactControllerService',
            'Mautic\\CategoryBundle\\Controller\\CategoryController' => 'getCategoryControllerService',
            'Mautic\\CategoryBundle\\Entity\\CategoryRepository' => 'getCategoryRepositoryService',
            'Mautic\\CategoryBundle\\EventListener\\ButtonSubscriber' => 'getButtonSubscriber3Service',
            'Mautic\\CategoryBundle\\EventListener\\CategorySubscriber' => 'getCategorySubscriberService',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryBundlesType' => 'getCategoryBundlesTypeService',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryListType' => 'getCategoryListTypeService',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryType' => 'getCategoryTypeService',
            'Mautic\\CategoryBundle\\MauticCategoryBundle' => 'getMauticCategoryBundleService',
            'Mautic\\CategoryBundle\\Model\\ContactActionModel' => 'getContactActionModelService',
            'Mautic\\ChannelBundle\\ChannelEvents' => 'getChannelEventsService',
            'Mautic\\ChannelBundle\\Command\\ProcessMarketingMessagesQueueCommand' => 'getProcessMarketingMessagesQueueCommandService',
            'Mautic\\ChannelBundle\\Command\\SendChannelBroadcastCommand' => 'getSendChannelBroadcastCommandService',
            'Mautic\\ChannelBundle\\Controller\\AjaxController' => 'getAjaxController6Service',
            'Mautic\\ChannelBundle\\Controller\\Api\\MessageApiController' => 'getMessageApiControllerService',
            'Mautic\\ChannelBundle\\Controller\\BatchContactController' => 'getBatchContactController2Service',
            'Mautic\\ChannelBundle\\Controller\\MessageController' => 'getMessageControllerService',
            'Mautic\\ChannelBundle\\Entity\\MessageQueueRepository' => 'getMessageQueueRepositoryService',
            'Mautic\\ChannelBundle\\Entity\\MessageRepository' => 'getMessageRepositoryService',
            'Mautic\\ChannelBundle\\EventListener\\ButtonSubscriber' => 'getButtonSubscriber4Service',
            'Mautic\\ChannelBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber5Service',
            'Mautic\\ChannelBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber6Service',
            'Mautic\\ChannelBundle\\EventListener\\MessageSubscriber' => 'getMessageSubscriberService',
            'Mautic\\ChannelBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber3Service',
            'Mautic\\ChannelBundle\\Form\\Type\\ChannelType' => 'getChannelTypeService',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageListType' => 'getMessageListTypeService',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageSendType' => 'getMessageSendTypeService',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageType' => 'getMessageTypeService',
            'Mautic\\ChannelBundle\\MauticChannelBundle' => 'getMauticChannelBundleService',
            'Mautic\\ChannelBundle\\Model\\ChannelActionModel' => 'getChannelActionModelService',
            'Mautic\\ChannelBundle\\Model\\FrequencyActionModel' => 'getFrequencyActionModelService',
            'Mautic\\ChannelBundle\\Model\\MessageModel' => 'getMessageModelService',
            'Mautic\\ConfigBundle\\ConfigEvents' => 'getConfigEventsService',
            'Mautic\\ConfigBundle\\Controller\\ConfigController' => 'getConfigControllerService',
            'Mautic\\ConfigBundle\\Controller\\SysinfoController' => 'getSysinfoControllerService',
            'Mautic\\ConfigBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber5Service',
            'Mautic\\ConfigBundle\\Form\\DataTransformer\\DsnTransformerFactory' => 'getDsnTransformerFactoryService',
            'Mautic\\ConfigBundle\\Form\\Helper\\RestrictionHelper' => 'getRestrictionHelperService',
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigFileType' => 'getConfigFileTypeService',
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigType' => 'getConfigType5Service',
            'Mautic\\ConfigBundle\\Form\\Type\\DsnType' => 'getDsnTypeService',
            'Mautic\\ConfigBundle\\Form\\Type\\EscapeTransformer' => 'getEscapeTransformerService',
            'Mautic\\ConfigBundle\\Mapper\\ConfigMapper' => 'getConfigMapperService',
            'Mautic\\ConfigBundle\\Mapper\\Helper\\ConfigHelper' => 'getConfigHelperService',
            'Mautic\\ConfigBundle\\Mapper\\Helper\\RestrictionHelper' => 'getRestrictionHelper2Service',
            'Mautic\\ConfigBundle\\MauticConfigBundle' => 'getMauticConfigBundleService',
            'Mautic\\ConfigBundle\\Model\\SysinfoModel' => 'getSysinfoModelService',
            'Mautic\\ConfigBundle\\Service\\ConfigChangeLogger' => 'getConfigChangeLoggerService',
            'Mautic\\CoreBundle\\Command\\ApplyUpdatesCommand' => 'getApplyUpdatesCommandService',
            'Mautic\\CoreBundle\\Command\\CleanupMaintenanceCommand' => 'getCleanupMaintenanceCommandService',
            'Mautic\\CoreBundle\\Command\\ConvertConfigCommand' => 'getConvertConfigCommandService',
            'Mautic\\CoreBundle\\Command\\FindUpdatesCommand' => 'getFindUpdatesCommandService',
            'Mautic\\CoreBundle\\Command\\GenerateProductionAssetsCommand' => 'getGenerateProductionAssetsCommandService',
            'Mautic\\CoreBundle\\Command\\InstallDataCommand' => 'getInstallDataCommandService',
            'Mautic\\CoreBundle\\Command\\MaxMindDoNotSellPurgeCommand' => 'getMaxMindDoNotSellPurgeCommandService',
            'Mautic\\CoreBundle\\Command\\PullTransifexCommand' => 'getPullTransifexCommandService',
            'Mautic\\CoreBundle\\Command\\PushTransifexCommand' => 'getPushTransifexCommandService',
            'Mautic\\CoreBundle\\Command\\UnusedIpDeleteCommand' => 'getUnusedIpDeleteCommandService',
            'Mautic\\CoreBundle\\Command\\UpdateDoNotSellListCommand' => 'getUpdateDoNotSellListCommandService',
            'Mautic\\CoreBundle\\Command\\UpdateIpDataStoreCommand' => 'getUpdateIpDataStoreCommandService',
            'Mautic\\CoreBundle\\Console\\Output\\ConsoleDatetimeOutput' => 'getConsoleDatetimeOutputService',
            'Mautic\\CoreBundle\\Controller\\AjaxController' => 'getAjaxController7Service',
            'Mautic\\CoreBundle\\Controller\\Api\\FileApiController' => 'getFileApiControllerService',
            'Mautic\\CoreBundle\\Controller\\Api\\StatsApiController' => 'getStatsApiControllerService',
            'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController' => 'getThemeApiControllerService',
            'Mautic\\CoreBundle\\Controller\\CommonController' => 'getCommonControllerService',
            'Mautic\\CoreBundle\\Controller\\DefaultController' => 'getDefaultControllerService',
            'Mautic\\CoreBundle\\Controller\\ExceptionController' => 'getExceptionControllerService',
            'Mautic\\CoreBundle\\Controller\\FileController' => 'getFileControllerService',
            'Mautic\\CoreBundle\\Controller\\FormController' => 'getFormControllerService',
            'Mautic\\CoreBundle\\Controller\\JsController' => 'getJsController2Service',
            'Mautic\\CoreBundle\\Controller\\ThemeController' => 'getThemeControllerService',
            'Mautic\\CoreBundle\\Controller\\UpdateController' => 'getUpdateControllerService',
            'Mautic\\CoreBundle\\CoreEvents' => 'getCoreEventsService',
            'Mautic\\CoreBundle\\Entity\\AuditLogRepository' => 'getAuditLogRepositoryService',
            'Mautic\\CoreBundle\\Entity\\CommonRepository' => 'getCommonRepositoryService',
            'Mautic\\CoreBundle\\Entity\\IpAddressRepository' => 'getIpAddressRepositoryService',
            'Mautic\\CoreBundle\\Entity\\NotificationRepository' => 'getNotificationRepositoryService',
            'Mautic\\CoreBundle\\ErrorHandler\\ErrorHandler' => 'getErrorHandlerService',
            'Mautic\\CoreBundle\\EventListener\\BuildJsSubscriber' => 'getBuildJsSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber6Service',
            'Mautic\\CoreBundle\\EventListener\\ConfigThemeSubscriber' => 'getConfigThemeSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\ConsoleErrorListener' => 'getConsoleErrorListenerService',
            'Mautic\\CoreBundle\\EventListener\\ConsoleTerminateListener' => 'getConsoleTerminateListenerService',
            'Mautic\\CoreBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber3Service',
            'Mautic\\CoreBundle\\EventListener\\EditorFontsSubscriber' => 'getEditorFontsSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\MaintenanceSubscriber' => 'getMaintenanceSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\MigrationCommandSubscriber' => 'getMigrationCommandSubscriberService',
            'Mautic\\CoreBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber6Service',
            'Mautic\\CoreBundle\\Factory\\TransifexFactory' => 'getTransifexFactoryService',
            'Mautic\\CoreBundle\\Form\\ChoiceLoader\\EntityLookupChoiceLoader' => 'getEntityLookupChoiceLoaderService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\ArrayLinebreakTransformer' => 'getArrayLinebreakTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\ArrayStringTransformer' => 'getArrayStringTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\BarStringTransformer' => 'getBarStringTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\DatetimeToStringTransformer' => 'getDatetimeToStringTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\EmojiToHtmlTransformer' => 'getEmojiToHtmlTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\IdToEntityModelTransformer' => 'getIdToEntityModelTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\NullToEmptyTransformer' => 'getNullToEmptyTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\SecondsConversionTransformer' => 'getSecondsConversionTransformerService',
            'Mautic\\CoreBundle\\Form\\DataTransformer\\SortableListTransformer' => 'getSortableListTransformerService',
            'Mautic\\CoreBundle\\Form\\EventListener\\CleanFormSubscriber' => 'getCleanFormSubscriberService',
            'Mautic\\CoreBundle\\Form\\Type\\BooleanType' => 'getBooleanTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\BuilderSectionType' => 'getBuilderSectionTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\ButtonGroupType' => 'getButtonGroupTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\ConfigThemeType' => 'getConfigThemeTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\CountryType' => 'getCountryTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\DatePickerType' => 'getDatePickerTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\DateRangeType' => 'getDateRangeTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryType' => 'getDynamicContentFilterEntryTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterType' => 'getDynamicContentFilterTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicListType' => 'getDynamicListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\EntityLookupType' => 'getEntityLookupTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\FormButtonsType' => 'getFormButtonsTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\GatedVideoType' => 'getGatedVideoTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\IpLookupDownloadDataStoreButtonType' => 'getIpLookupDownloadDataStoreButtonTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\LocaleType' => 'getLocaleTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\LookupType' => 'getLookupType3Service',
            'Mautic\\CoreBundle\\Form\\Type\\MultiselectType' => 'getMultiselectTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType' => 'getPublishDownDateTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType' => 'getPublishUpDateTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\RegionType' => 'getRegionTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SelectType' => 'getSelectTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotButtonType' => 'getSlotButtonTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotCategoryListType' => 'getSlotCategoryListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotChannelFrequencyType' => 'getSlotChannelFrequencyTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotCodeModeType' => 'getSlotCodeModeTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotDwcType' => 'getSlotDwcTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotDynamicContentType' => 'getSlotDynamicContentTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCaptionType' => 'getSlotImageCaptionTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCardType' => 'getSlotImageCardTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageType' => 'getSlotImageTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotPreferredChannelType' => 'getSlotPreferredChannelTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSavePrefsButtonType' => 'getSlotSavePrefsButtonTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSegmentListType' => 'getSlotSegmentListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSeparatorType' => 'getSlotSeparatorTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialFollowType' => 'getSlotSocialFollowTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialShareType' => 'getSlotSocialShareTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSuccessMessageType' => 'getSlotSuccessMessageTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotTextType' => 'getSlotTextTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SlotType' => 'getSlotTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SortableListType' => 'getSortableListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\SortableValueLabelListType' => 'getSortableValueLabelListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\StandAloneButtonType' => 'getStandAloneButtonTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\TelType' => 'getTelTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\ThemeListType' => 'getThemeListTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\ThemeUploadType' => 'getThemeUploadTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\TimeFormatType' => 'getTimeFormatTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\TimezoneType' => 'getTimezoneTypeService',
            'Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType' => 'getYesNoButtonGroupTypeService',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependency' => 'getCircularDependencyService',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncoding' => 'getFileEncodingService',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => 'getFileEncodingValidatorService',
            'Mautic\\CoreBundle\\Helper\\ArrayHelper' => 'getArrayHelperService',
            'Mautic\\CoreBundle\\Helper\\ClickthroughHelper' => 'getClickthroughHelperService',
            'Mautic\\CoreBundle\\Helper\\ColorHelper' => 'getColorHelperService',
            'Mautic\\CoreBundle\\Helper\\CsvHelper' => 'getCsvHelperService',
            'Mautic\\CoreBundle\\Helper\\DataExporterHelper' => 'getDataExporterHelperService',
            'Mautic\\CoreBundle\\Helper\\DateTime\\DateTimeLocalization' => 'getDateTimeLocalizationService',
            'Mautic\\CoreBundle\\Helper\\DateTime\\DateTimeToken' => 'getDateTimeTokenService',
            'Mautic\\CoreBundle\\Helper\\EmailAddressHelper' => 'getEmailAddressHelperService',
            'Mautic\\CoreBundle\\Helper\\EmojiMap\\HtmlToUnicodeEmojiMap' => 'getHtmlToUnicodeEmojiMapService',
            'Mautic\\CoreBundle\\Helper\\EmojiMap\\ShortToUnicodeEmojiMap' => 'getShortToUnicodeEmojiMapService',
            'Mautic\\CoreBundle\\Helper\\EmojiMap\\UnicodeToHtmlEmojiMap' => 'getUnicodeToHtmlEmojiMapService',
            'Mautic\\CoreBundle\\Helper\\EmojiMap\\UnicodeToShortEmojiMap' => 'getUnicodeToShortEmojiMapService',
            'Mautic\\CoreBundle\\Helper\\FileHelper' => 'getFileHelperService',
            'Mautic\\CoreBundle\\Helper\\IntHelper' => 'getIntHelperService',
            'Mautic\\CoreBundle\\Helper\\LanguageHelper' => 'getLanguageHelperService',
            'Mautic\\CoreBundle\\Helper\\ListParser\\ArrayListParser' => 'getArrayListParserService',
            'Mautic\\CoreBundle\\Helper\\ListParser\\BarListParser' => 'getBarListParserService',
            'Mautic\\CoreBundle\\Helper\\ListParser\\Exception\\FormatNotSupportedException' => 'getFormatNotSupportedExceptionService',
            'Mautic\\CoreBundle\\Helper\\ListParser\\JsonListParser' => 'getJsonListParserService',
            'Mautic\\CoreBundle\\Helper\\ListParser\\ValueListParser' => 'getValueListParserService',
            'Mautic\\CoreBundle\\Helper\\PRedisConnectionHelper' => 'getPRedisConnectionHelperService',
            'Mautic\\CoreBundle\\Helper\\ParamsLoaderHelper' => 'getParamsLoaderHelperService',
            'Mautic\\CoreBundle\\Helper\\PhpVersionHelper' => 'getPhpVersionHelperService',
            'Mautic\\CoreBundle\\Helper\\ProgressBarHelper' => 'getProgressBarHelperService',
            'Mautic\\CoreBundle\\Helper\\SearchStringHelper' => 'getSearchStringHelperService',
            'Mautic\\CoreBundle\\Helper\\Serializer' => 'getSerializerService',
            'Mautic\\CoreBundle\\Helper\\TrackingPixelHelper' => 'getTrackingPixelHelperService',
            'Mautic\\CoreBundle\\Helper\\Tree\\JsPlumbFormatter' => 'getJsPlumbFormatterService',
            'Mautic\\CoreBundle\\Helper\\UTF8Helper' => 'getUTF8HelperService',
            'Mautic\\CoreBundle\\Helper\\Update\\Exception\\CouldNotFetchLatestVersionException' => 'getCouldNotFetchLatestVersionExceptionService',
            'Mautic\\CoreBundle\\Helper\\Update\\Exception\\LatestVersionSupportedException' => 'getLatestVersionSupportedExceptionService',
            'Mautic\\CoreBundle\\Helper\\Update\\Exception\\MetadataNotFoundException' => 'getMetadataNotFoundExceptionService',
            'Mautic\\CoreBundle\\Helper\\Update\\Exception\\UpdateCacheDataNeedsToBeRefreshedException' => 'getUpdateCacheDataNeedsToBeRefreshedExceptionService',
            'Mautic\\CoreBundle\\Helper\\Update\\Exception\\UpdatePackageNotFoundException' => 'getUpdatePackageNotFoundExceptionService',
            'Mautic\\CoreBundle\\IpLookup\\ExtremeIpLookup' => 'getExtremeIpLookupService',
            'Mautic\\CoreBundle\\IpLookup\\GeobytesLookup' => 'getGeobytesLookupService',
            'Mautic\\CoreBundle\\IpLookup\\GeoipsLookup' => 'getGeoipsLookupService',
            'Mautic\\CoreBundle\\IpLookup\\IP2LocationAPILookup' => 'getIP2LocationAPILookupService',
            'Mautic\\CoreBundle\\IpLookup\\IP2LocationBinLookup' => 'getIP2LocationBinLookupService',
            'Mautic\\CoreBundle\\IpLookup\\IpinfodbLookup' => 'getIpinfodbLookupService',
            'Mautic\\CoreBundle\\IpLookup\\IpstackLookup' => 'getIpstackLookupService',
            'Mautic\\CoreBundle\\IpLookup\\MaxmindCountryLookup' => 'getMaxmindCountryLookupService',
            'Mautic\\CoreBundle\\IpLookup\\MaxmindDownloadLookup' => 'getMaxmindDownloadLookupService',
            'Mautic\\CoreBundle\\IpLookup\\MaxmindOmniLookup' => 'getMaxmindOmniLookupService',
            'Mautic\\CoreBundle\\IpLookup\\MaxmindPrecisionLookup' => 'getMaxmindPrecisionLookupService',
            'Mautic\\CoreBundle\\IpLookup\\TelizeLookup' => 'getTelizeLookupService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\ApiEnvVars' => 'getApiEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\ConfigEnvVars' => 'getConfigEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\ElFinderEnvVars' => 'getElFinderEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\MigrationsEnvVars' => 'getMigrationsEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\SAMLEnvVars' => 'getSAMLEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\SessionEnvVars' => 'getSessionEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\SiteUrlEnvVars' => 'getSiteUrlEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\EnvVars\\TwigEnvVars' => 'getTwigEnvVarsService',
            'Mautic\\CoreBundle\\Loader\\ParameterLoader' => 'getParameterLoaderService',
            'Mautic\\CoreBundle\\MauticCoreBundle' => 'getMauticCoreBundleService',
            'Mautic\\CoreBundle\\Model\\FormModel' => 'getFormModel2Service',
            'Mautic\\CoreBundle\\Service\\ProcessQueue' => 'getProcessQueueService',
            'Mautic\\DashboardBundle\\Controller\\AjaxController' => 'getAjaxController8Service',
            'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController' => 'getWidgetApiControllerService',
            'Mautic\\DashboardBundle\\Controller\\DashboardController' => 'getDashboardControllerService',
            'Mautic\\DashboardBundle\\DashboardEvents' => 'getDashboardEventsService',
            'Mautic\\DashboardBundle\\Entity\\WidgetRepository' => 'getWidgetRepositoryService',
            'Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber4Service',
            'Mautic\\DashboardBundle\\Form\\Type\\UploadType' => 'getUploadTypeService',
            'Mautic\\DashboardBundle\\Form\\Type\\WidgetType' => 'getWidgetTypeService',
            'Mautic\\DashboardBundle\\MauticDashboardBundle' => 'getMauticDashboardBundleService',
            'Mautic\\DashboardBundle\\Model\\DashboardModel' => 'getDashboardModelService',
            'Mautic\\DynamicContentBundle\\Controller\\AjaxController' => 'getAjaxController9Service',
            'Mautic\\DynamicContentBundle\\Controller\\Api\\DynamicContentApiController' => 'getDynamicContentApiControllerService',
            'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController' => 'getDynamicContentApiController2Service',
            'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController' => 'getDynamicContentControllerService',
            'Mautic\\DynamicContentBundle\\DynamicContentEvents' => 'getDynamicContentEventsService',
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentLeadDataRepository' => 'getDynamicContentLeadDataRepositoryService',
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentRepository' => 'getDynamicContentRepositoryService',
            'Mautic\\DynamicContentBundle\\Entity\\StatRepository' => 'getStatRepository2Service',
            'Mautic\\DynamicContentBundle\\EventListener\\BuildJsSubscriber' => 'getBuildJsSubscriber2Service',
            'Mautic\\DynamicContentBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber6Service',
            'Mautic\\DynamicContentBundle\\EventListener\\ChannelSubscriber' => 'getChannelSubscriber2Service',
            'Mautic\\DynamicContentBundle\\EventListener\\DynamicContentSubscriber' => 'getDynamicContentSubscriberService',
            'Mautic\\DynamicContentBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber7Service',
            'Mautic\\DynamicContentBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber7Service',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentDecisionType' => 'getDynamicContentDecisionTypeService',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentListType' => 'getDynamicContentListTypeService',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentSendType' => 'getDynamicContentSendTypeService',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentType' => 'getDynamicContentTypeService',
            'Mautic\\DynamicContentBundle\\MauticDynamicContentBundle' => 'getMauticDynamicContentBundleService',
            'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel' => 'getDynamicContentModelService',
            'Mautic\\EmailBundle\\Command\\ProcessFetchEmailCommand' => 'getProcessFetchEmailCommandService',
            'Mautic\\EmailBundle\\Controller\\AjaxController' => 'getAjaxController10Service',
            'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController' => 'getEmailApiControllerService',
            'Mautic\\EmailBundle\\Controller\\EmailController' => 'getEmailControllerService',
            'Mautic\\EmailBundle\\Controller\\EmailGraphStatsController' => 'getEmailGraphStatsControllerService',
            'Mautic\\EmailBundle\\Controller\\PublicController' => 'getPublicController7Service',
            'Mautic\\EmailBundle\\EmailEvents' => 'getEmailEventsService',
            'Mautic\\EmailBundle\\Entity\\CopyRepository' => 'getCopyRepositoryService',
            'Mautic\\EmailBundle\\Entity\\EmailReplyRepository' => 'getEmailReplyRepositoryService',
            'Mautic\\EmailBundle\\Entity\\EmailRepository' => 'getEmailRepositoryService',
            'Mautic\\EmailBundle\\Entity\\StatDeviceRepository' => 'getStatDeviceRepositoryService',
            'Mautic\\EmailBundle\\Entity\\StatRepository' => 'getStatRepository3Service',
            'Mautic\\EmailBundle\\EventListener\\BroadcastSubscriber' => 'getBroadcastSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\BuilderSubscriber' => 'getBuilderSubscriber2Service',
            'Mautic\\EmailBundle\\EventListener\\CampaignConditionSubscriber' => 'getCampaignConditionSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber7Service',
            'Mautic\\EmailBundle\\EventListener\\ChannelSubscriber' => 'getChannelSubscriber3Service',
            'Mautic\\EmailBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber7Service',
            'Mautic\\EmailBundle\\EventListener\\DashboardBestHoursSubscriber' => 'getDashboardBestHoursSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber5Service',
            'Mautic\\EmailBundle\\EventListener\\DateTimeTokenSubscriber' => 'getDateTimeTokenSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\DetermineWinnerSubscriber' => 'getDetermineWinnerSubscriber2Service',
            'Mautic\\EmailBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber4Service',
            'Mautic\\EmailBundle\\EventListener\\EmailToUserSubscriber' => 'getEmailToUserSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber4Service',
            'Mautic\\EmailBundle\\EventListener\\GeneratedColumnSubscriber' => 'getGeneratedColumnSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\GraphAggregateStatsSubscriber' => 'getGraphAggregateStatsSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber8Service',
            'Mautic\\EmailBundle\\EventListener\\MessageQueueSubscriber' => 'getMessageQueueSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\PageSubscriber' => 'getPageSubscriber3Service',
            'Mautic\\EmailBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber3Service',
            'Mautic\\EmailBundle\\EventListener\\ProcessBounceSubscriber' => 'getProcessBounceSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\ProcessReplySubscriber' => 'getProcessReplySubscriberService',
            'Mautic\\EmailBundle\\EventListener\\ProcessUnsubscribeSubscriber' => 'getProcessUnsubscribeSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\QueueSubscriber' => 'getQueueSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber4Service',
            'Mautic\\EmailBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber4Service',
            'Mautic\\EmailBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber8Service',
            'Mautic\\EmailBundle\\EventListener\\TokenSubscriber' => 'getTokenSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\TrackingSubscriber' => 'getTrackingSubscriberService',
            'Mautic\\EmailBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriberService',
            'Mautic\\EmailBundle\\Form\\Type\\AbTestPropertiesType' => 'getAbTestPropertiesTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\BatchSendType' => 'getBatchSendTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredEmailType' => 'getConfigMonitoredEmailTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredMailboxesType' => 'getConfigMonitoredMailboxesTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigType' => 'getConfigType6Service',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardBestHoursWidgetType' => 'getDashboardBestHoursWidgetTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardEmailsInTimeWidgetType' => 'getDashboardEmailsInTimeWidgetTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardMostHitEmailRedirectsWidgetType' => 'getDashboardMostHitEmailRedirectsWidgetTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardSentEmailToContactsWidgetType' => 'getDashboardSentEmailToContactsWidgetTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailClickDecisionType' => 'getEmailClickDecisionTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailListType' => 'getEmailListTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailOpenType' => 'getEmailOpenTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailSendType' => 'getEmailSendTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailToUserType' => 'getEmailToUserTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailType' => 'getEmailTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\EmailUtmTagsType' => 'getEmailUtmTagsTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\ExampleSendType' => 'getExampleSendTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\FormSubmitActionUserEmailType' => 'getFormSubmitActionUserEmailTypeService',
            'Mautic\\EmailBundle\\Form\\Type\\VariantType' => 'getVariantTypeService',
            'Mautic\\EmailBundle\\Helper\\PlainTextHelper' => 'getPlainTextHelperService',
            'Mautic\\EmailBundle\\Helper\\PointEventHelper' => 'getPointEventHelperService',
            'Mautic\\EmailBundle\\Helper\\UrlMatcher' => 'getUrlMatcherService',
            'Mautic\\EmailBundle\\Mailer\\Exception\\BatchQueueMaxException' => 'getBatchQueueMaxExceptionService',
            'Mautic\\EmailBundle\\Mailer\\Message\\MauticMessage' => 'getMauticMessageService',
            'Mautic\\EmailBundle\\Mailer\\Transport\\InvalidTransport' => 'getInvalidTransportService',
            'Mautic\\EmailBundle\\MauticEmailBundle' => 'getMauticEmailBundleService',
            'Mautic\\EmailBundle\\Model\\SendEmailToUser' => 'getSendEmailToUserService',
            'Mautic\\EmailBundle\\Model\\TransportCallback' => 'getTransportCallbackService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Attachment' => 'getAttachmentService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\BounceNotFound' => 'getBounceNotFoundService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\CategoryNotFound' => 'getCategoryNotFoundService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\FeedbackLoopNotFound' => 'getFeedbackLoopNotFoundService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\NotConfiguredException' => 'getNotConfiguredExceptionService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\ReplyNotFound' => 'getReplyNotFoundService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Exception\\UnsubscriptionNotFound' => 'getUnsubscriptionNotFoundService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Message' => 'getMessageService',
            'Mautic\\EmailBundle\\MonitoredEmail\\Search\\Result' => 'getResultService',
            'Mautic\\EmailBundle\\Stat\\Exception\\StatNotFoundException' => 'getStatNotFoundExceptionService',
            'Mautic\\EmailBundle\\Stats\\Exception\\InvalidStatHelperException' => 'getInvalidStatHelperExceptionService',
            'Mautic\\EmailBundle\\Stats\\FetchOptions\\EmailStatOptions' => 'getEmailStatOptionsService',
            'Mautic\\EmailBundle\\Validator\\Dsn' => 'getDsnService',
            'Mautic\\EmailBundle\\Validator\\DsnValidator' => 'getDsnValidatorService',
            'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenList' => 'getEmailOrEmailTokenListService',
            'Mautic\\EmailBundle\\Validator\\MultipleEmailsValid' => 'getMultipleEmailsValidService',
            'Mautic\\FormBundle\\Collection\\FieldCollection' => 'getFieldCollectionService',
            'Mautic\\FormBundle\\Collection\\MappedObjectCollection' => 'getMappedObjectCollectionService',
            'Mautic\\FormBundle\\Collection\\ObjectCollection' => 'getObjectCollectionService',
            'Mautic\\FormBundle\\Controller\\ActionController' => 'getActionControllerService',
            'Mautic\\FormBundle\\Controller\\AjaxController' => 'getAjaxController11Service',
            'Mautic\\FormBundle\\Controller\\Api\\FormApiController' => 'getFormApiControllerService',
            'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController' => 'getSubmissionApiControllerService',
            'Mautic\\FormBundle\\Controller\\FieldController' => 'getFieldControllerService',
            'Mautic\\FormBundle\\Controller\\FormController' => 'getFormController2Service',
            'Mautic\\FormBundle\\Controller\\PublicController' => 'getPublicController8Service',
            'Mautic\\FormBundle\\Controller\\ResultController' => 'getResultControllerService',
            'Mautic\\FormBundle\\Entity\\ActionRepository' => 'getActionRepositoryService',
            'Mautic\\FormBundle\\Entity\\FieldRepository' => 'getFieldRepositoryService',
            'Mautic\\FormBundle\\Entity\\SubmissionRepository' => 'getSubmissionRepositoryService',
            'Mautic\\FormBundle\\Enum\\ConditionalFieldEnum' => 'getConditionalFieldEnumService',
            'Mautic\\FormBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber8Service',
            'Mautic\\FormBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber8Service',
            'Mautic\\FormBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber6Service',
            'Mautic\\FormBundle\\EventListener\\DetermineWinnerSubscriber' => 'getDetermineWinnerSubscriber3Service',
            'Mautic\\FormBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber5Service',
            'Mautic\\FormBundle\\EventListener\\FormConditionalSubscriber' => 'getFormConditionalSubscriberService',
            'Mautic\\FormBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber5Service',
            'Mautic\\FormBundle\\EventListener\\FormValidationSubscriber' => 'getFormValidationSubscriberService',
            'Mautic\\FormBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber9Service',
            'Mautic\\FormBundle\\EventListener\\PageSubscriber' => 'getPageSubscriber4Service',
            'Mautic\\FormBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber4Service',
            'Mautic\\FormBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber5Service',
            'Mautic\\FormBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber5Service',
            'Mautic\\FormBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber9Service',
            'Mautic\\FormBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriber2Service',
            'Mautic\\FormBundle\\FormEvents' => 'getFormEventsService',
            'Mautic\\FormBundle\\Form\\Type\\ActionType' => 'getActionTypeService',
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormFieldValueType' => 'getCampaignEventFormFieldValueTypeService',
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormSubmitType' => 'getCampaignEventFormSubmitTypeService',
            'Mautic\\FormBundle\\Form\\Type\\ConfigFormType' => 'getConfigFormTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldCaptchaType' => 'getFormFieldCaptchaTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldConditionType' => 'getFormFieldConditionTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldEmailType' => 'getFormFieldEmailTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldFileType' => 'getFormFieldFileTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldGroupType' => 'getFormFieldGroupTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldHTMLType' => 'getFormFieldHTMLTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPageBreakType' => 'getFormFieldPageBreakTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPlaceholderType' => 'getFormFieldPlaceholderTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldSelectType' => 'getFormFieldSelectTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTelType' => 'getFormFieldTelTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTextType' => 'getFormFieldTextTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormListType' => 'getFormListTypeService',
            'Mautic\\FormBundle\\Form\\Type\\FormType' => 'getFormTypeService',
            'Mautic\\FormBundle\\Form\\Type\\PointActionFormSubmitType' => 'getPointActionFormSubmitTypeService',
            'Mautic\\FormBundle\\Helper\\PointActionHelper' => 'getPointActionHelper2Service',
            'Mautic\\FormBundle\\MauticFormBundle' => 'getMauticFormBundleService',
            'Mautic\\FormBundle\\Model\\SubmissionResultLoader' => 'getSubmissionResultLoaderService',
            'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraint' => 'getFileExtensionConstraintService',
            'Mautic\\FormBundle\\Validator\\Constraint\\PhoneNumberConstraint' => 'getPhoneNumberConstraintService',
            'Mautic\\FormBundle\\Validator\\Constraint\\PhoneNumberConstraintValidator' => 'getPhoneNumberConstraintValidatorService',
            'Mautic\\InstallBundle\\Command\\InstallCommand' => 'getInstallCommandService',
            'Mautic\\InstallBundle\\Configurator\\Form\\CheckStepType' => 'getCheckStepTypeService',
            'Mautic\\InstallBundle\\Configurator\\Form\\DoctrineStepType' => 'getDoctrineStepTypeService',
            'Mautic\\InstallBundle\\Configurator\\Form\\UserStepType' => 'getUserStepTypeService',
            'Mautic\\InstallBundle\\Controller\\InstallController' => 'getInstallControllerService',
            'Mautic\\InstallBundle\\MauticInstallBundle' => 'getMauticInstallBundleService',
            'Mautic\\IntegrationsBundle\\Command\\SyncCommand' => 'getSyncCommand2Service',
            'Mautic\\IntegrationsBundle\\Controller\\AuthController' => 'getAuthControllerService',
            'Mautic\\IntegrationsBundle\\Controller\\ConfigController' => 'getConfigController2Service',
            'Mautic\\IntegrationsBundle\\Controller\\FieldPaginationController' => 'getFieldPaginationControllerService',
            'Mautic\\IntegrationsBundle\\Controller\\UpdateFieldController' => 'getUpdateFieldControllerService',
            'Mautic\\IntegrationsBundle\\Entity\\FieldChangeRepository' => 'getFieldChangeRepositoryService',
            'Mautic\\IntegrationsBundle\\Entity\\ObjectMappingRepository' => 'getObjectMappingRepositoryService',
            'Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber' => 'getCompanyObjectSubscriberService',
            'Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber' => 'getContactObjectSubscriberService',
            'Mautic\\IntegrationsBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber6Service',
            'Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber10Service',
            'Mautic\\IntegrationsBundle\\EventListener\\TimelineSubscriber' => 'getTimelineSubscriberService',
            'Mautic\\IntegrationsBundle\\EventListener\\UIContactIntegrationsTabSubscriber' => 'getUIContactIntegrationsTabSubscriberService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\ActivityListType' => 'getActivityListTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationConfigType' => 'getIntegrationConfigTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationFeatureSettingsType' => 'getIntegrationFeatureSettingsTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsFieldMappingsType' => 'getIntegrationSyncSettingsFieldMappingsTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldMappingType' => 'getIntegrationSyncSettingsObjectFieldMappingTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldType' => 'getIntegrationSyncSettingsObjectFieldTypeService',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsType' => 'getIntegrationSyncSettingsTypeService',
            'Mautic\\IntegrationsBundle\\IntegrationEvents' => 'getIntegrationEventsService',
            'Mautic\\IntegrationsBundle\\IntegrationsBundle' => 'getIntegrationsBundleService',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Object\\Company' => 'getCompanyService',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Object\\Contact' => 'getContactService',
            'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\Modes\\BestEvidence' => 'getBestEvidenceService',
            'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\Modes\\FuzzyEvidence' => 'getFuzzyEvidenceService',
            'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\Modes\\HardEvidence' => 'getHardEvidenceService',
            'Mautic\\IntegrationsBundle\\Sync\\ValueNormalizer\\ValueNormalizer' => 'getValueNormalizerService',
            'Mautic\\LeadBundle\\Command\\ContactScheduledExportCommand' => 'getContactScheduledExportCommandService',
            'Mautic\\LeadBundle\\Command\\DeduplicateCommand' => 'getDeduplicateCommandService',
            'Mautic\\LeadBundle\\Command\\DeduplicateIdsCommand' => 'getDeduplicateIdsCommandService',
            'Mautic\\LeadBundle\\Command\\ImportCommand' => 'getImportCommandService',
            'Mautic\\LeadBundle\\Command\\UpdateLeadListsCommand' => 'getUpdateLeadListsCommandService',
            'Mautic\\LeadBundle\\Controller\\AjaxController' => 'getAjaxController12Service',
            'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController' => 'getCompanyApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\DeviceApiController' => 'getDeviceApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\FieldApiController' => 'getFieldApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController' => 'getLeadApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\ListApiController' => 'getListApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\NoteApiController' => 'getNoteApiControllerService',
            'Mautic\\LeadBundle\\Controller\\Api\\TagApiController' => 'getTagApiControllerService',
            'Mautic\\LeadBundle\\Controller\\AuditlogController' => 'getAuditlogControllerService',
            'Mautic\\LeadBundle\\Controller\\BatchSegmentController' => 'getBatchSegmentControllerService',
            'Mautic\\LeadBundle\\Controller\\CompanyController' => 'getCompanyControllerService',
            'Mautic\\LeadBundle\\Controller\\FieldController' => 'getFieldController2Service',
            'Mautic\\LeadBundle\\Controller\\ImportController' => 'getImportControllerService',
            'Mautic\\LeadBundle\\Controller\\LeadController' => 'getLeadControllerService',
            'Mautic\\LeadBundle\\Controller\\ListController' => 'getListControllerService',
            'Mautic\\LeadBundle\\Controller\\NoteController' => 'getNoteControllerService',
            'Mautic\\LeadBundle\\Controller\\TimelineController' => 'getTimelineControllerService',
            'Mautic\\LeadBundle\\Deduplicate\\Helper\\MergeValueHelper' => 'getMergeValueHelperService',
            'Mautic\\LeadBundle\\Entity\\CompanyChangeLogRepository' => 'getCompanyChangeLogRepositoryService',
            'Mautic\\LeadBundle\\Entity\\CompanyLeadRepository' => 'getCompanyLeadRepositoryService',
            'Mautic\\LeadBundle\\Entity\\CompanyRepository' => 'getCompanyRepositoryService',
            'Mautic\\LeadBundle\\Entity\\ContactExportSchedulerRepository' => 'getContactExportSchedulerRepositoryService',
            'Mautic\\LeadBundle\\Entity\\FrequencyRuleRepository' => 'getFrequencyRuleRepositoryService',
            'Mautic\\LeadBundle\\Entity\\ImportRepository' => 'getImportRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadCategoryRepository' => 'getLeadCategoryRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadDeviceRepository' => 'getLeadDeviceRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadEventLogRepository' => 'getLeadEventLogRepository2Service',
            'Mautic\\LeadBundle\\Entity\\LeadListRepository' => 'getLeadListRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadNoteRepository' => 'getLeadNoteRepositoryService',
            'Mautic\\LeadBundle\\Entity\\LeadRepository' => 'getLeadRepository3Service',
            'Mautic\\LeadBundle\\Entity\\ListLeadRepository' => 'getListLeadRepositoryService',
            'Mautic\\LeadBundle\\Entity\\MergeRecordRepository' => 'getMergeRecordRepositoryService',
            'Mautic\\LeadBundle\\Entity\\PointsChangeLogRepository' => 'getPointsChangeLogRepositoryService',
            'Mautic\\LeadBundle\\Entity\\StagesChangeLogRepository' => 'getStagesChangeLogRepositoryService',
            'Mautic\\LeadBundle\\Entity\\TagRepository' => 'getTagRepository2Service',
            'Mautic\\LeadBundle\\Entity\\UtmTagRepository' => 'getUtmTagRepositoryService',
            'Mautic\\LeadBundle\\EventListener\\ButtonSubscriber' => 'getButtonSubscriber5Service',
            'Mautic\\LeadBundle\\EventListener\\CampaignActionDNCSubscriber' => 'getCampaignActionDNCSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\CampaignActionDeleteContactSubscriber' => 'getCampaignActionDeleteContactSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber9Service',
            'Mautic\\LeadBundle\\EventListener\\CompanySubscriber' => 'getCompanySubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber9Service',
            'Mautic\\LeadBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber7Service',
            'Mautic\\LeadBundle\\EventListener\\DoNotContactSubscriber' => 'getDoNotContactSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\EmailSubscriber' => 'getEmailSubscriber7Service',
            'Mautic\\LeadBundle\\EventListener\\FilterOperatorSubscriber' => 'getFilterOperatorSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber6Service',
            'Mautic\\LeadBundle\\EventListener\\GeneratedColumnSubscriber' => 'getGeneratedColumnSubscriber2Service',
            'Mautic\\LeadBundle\\EventListener\\ImportCompanySubscriber' => 'getImportCompanySubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ImportContactSubscriber' => 'getImportContactSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ImportSubscriber' => 'getImportSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber11Service',
            'Mautic\\LeadBundle\\EventListener\\MaintenanceSubscriber' => 'getMaintenanceSubscriber2Service',
            'Mautic\\LeadBundle\\EventListener\\OwnerSubscriber' => 'getOwnerSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber5Service',
            'Mautic\\LeadBundle\\EventListener\\ReportDNCSubscriber' => 'getReportDNCSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ReportDevicesSubscriber' => 'getReportDevicesSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ReportNormalizeSubscriber' => 'getReportNormalizeSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber6Service',
            'Mautic\\LeadBundle\\EventListener\\ReportUtmTagSubscriber' => 'getReportUtmTagSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber6Service',
            'Mautic\\LeadBundle\\EventListener\\SegmentLogReportSubscriber' => 'getSegmentLogReportSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber' => 'getSegmentOperatorQuerySubscriberService',
            'Mautic\\LeadBundle\\EventListener\\SegmentReportSubscriber' => 'getSegmentReportSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\SegmentSubscriber' => 'getSegmentSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\SetContactAvatarFormSubscriber' => 'getSetContactAvatarFormSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber10Service',
            'Mautic\\LeadBundle\\EventListener\\TimelineEventLogCampaignSubscriber' => 'getTimelineEventLogCampaignSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\TimelineEventLogSegmentSubscriber' => 'getTimelineEventLogSegmentSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\TimelineEventLogSubscriber' => 'getTimelineEventLogSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber' => 'getTypeOperatorSubscriberService',
            'Mautic\\LeadBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriber3Service',
            'Mautic\\LeadBundle\\Field\\Command\\CreateCustomFieldCommand' => 'getCreateCustomFieldCommandService',
            'Mautic\\LeadBundle\\Field\\Exception\\AbortColumnCreateException' => 'getAbortColumnCreateExceptionService',
            'Mautic\\LeadBundle\\Field\\Exception\\ColumnAlreadyCreatedException' => 'getColumnAlreadyCreatedExceptionService',
            'Mautic\\LeadBundle\\Field\\Exception\\CustomFieldLimitException' => 'getCustomFieldLimitExceptionService',
            'Mautic\\LeadBundle\\Field\\Exception\\LeadFieldWasNotFoundException' => 'getLeadFieldWasNotFoundExceptionService',
            'Mautic\\LeadBundle\\Field\\Exception\\NoUserException' => 'getNoUserExceptionService',
            'Mautic\\LeadBundle\\Form\\DataTransformer\\FieldFilterTransformer' => 'getFieldFilterTransformerService',
            'Mautic\\LeadBundle\\Form\\DataTransformer\\FieldToOrderTransformer' => 'getFieldToOrderTransformerService',
            'Mautic\\LeadBundle\\Form\\DataTransformer\\TagEntityModelTransformer' => 'getTagEntityModelTransformerService',
            'Mautic\\LeadBundle\\Form\\FieldAliasToFqcnMap' => 'getFieldAliasToFqcnMapService',
            'Mautic\\LeadBundle\\Form\\Type\\ActionAddUtmTagsType' => 'getActionAddUtmTagsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ActionRemoveDoNotContact' => 'getActionRemoveDoNotContactService',
            'Mautic\\LeadBundle\\Form\\Type\\AddToCompanyActionType' => 'getAddToCompanyActionTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\BatchType' => 'getBatchTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionAddDNCType' => 'getCampaignActionAddDNCTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionRemoveDNCType' => 'getCampaignActionRemoveDNCTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignConditionLeadPageHitType' => 'getCampaignConditionLeadPageHitTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadCampaignsType' => 'getCampaignEventLeadCampaignsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDNCType' => 'getCampaignEventLeadDNCTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDeviceType' => 'getCampaignEventLeadDeviceTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadFieldValueType' => 'getCampaignEventLeadFieldValueTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadOwnerType' => 'getCampaignEventLeadOwnerTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadSegmentsType' => 'getCampaignEventLeadSegmentsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadStagesType' => 'getCampaignEventLeadStagesTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadTagsType' => 'getCampaignEventLeadTagsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ChangeOwnerType' => 'getChangeOwnerTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyChangeScoreActionType' => 'getCompanyChangeScoreActionTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyListType' => 'getCompanyListTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyMergeType' => 'getCompanyMergeTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyType' => 'getCompanyTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ConfigCompanyType' => 'getConfigCompanyTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ConfigType' => 'getConfigType7Service',
            'Mautic\\LeadBundle\\Form\\Type\\ContactChannelsType' => 'getContactChannelsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ContactColumnsType' => 'getContactColumnsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ContactFrequencyType' => 'getContactFrequencyTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsInTimeWidgetType' => 'getDashboardLeadsInTimeWidgetTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsLifetimeWidgetType' => 'getDashboardLeadsLifetimeWidgetTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardSegmentsBuildTime' => 'getDashboardSegmentsBuildTimeService',
            'Mautic\\LeadBundle\\Form\\Type\\DeviceType' => 'getDeviceTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\DncType' => 'getDncTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\EmailType' => 'getEmailType2Service',
            'Mautic\\LeadBundle\\Form\\Type\\FieldType' => 'getFieldTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\FilterPropertiesType' => 'getFilterPropertiesTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\FilterType' => 'getFilterTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\FormSubmitActionPointsChangeType' => 'getFormSubmitActionPointsChangeTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadCategoryType' => 'getLeadCategoryTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadFieldsType' => 'getLeadFieldsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportFieldType' => 'getLeadImportFieldTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportType' => 'getLeadImportTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadListType' => 'getLeadListTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\LeadType' => 'getLeadTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ListActionType' => 'getListActionTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ListType' => 'getListTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\MergeType' => 'getMergeTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\ModifyLeadTagsType' => 'getModifyLeadTagsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\NoteType' => 'getNoteTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\OwnerType' => 'getOwnerTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\PointActionType' => 'getPointActionTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\PreferenceChannelsType' => 'getPreferenceChannelsTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\SegmentConfigType' => 'getSegmentConfigTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\StageType' => 'getStageTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\TagEntityType' => 'getTagEntityType2Service',
            'Mautic\\LeadBundle\\Form\\Type\\TagType' => 'getTagTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\UpdateCompanyActionType' => 'getUpdateCompanyActionTypeService',
            'Mautic\\LeadBundle\\Form\\Type\\UpdateLeadActionType' => 'getUpdateLeadActionTypeService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddress' => 'getEmailAddressService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeyword' => 'getFieldAliasKeywordService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => 'getFieldAliasKeywordValidatorService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccess' => 'getLeadListAccessService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUse' => 'getSegmentInUseService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueCustomField' => 'getUniqueCustomFieldService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueCustomFieldValidator' => 'getUniqueCustomFieldValidatorService',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAlias' => 'getUniqueUserAliasService',
            'Mautic\\LeadBundle\\Helper\\CampaignEventHelper' => 'getCampaignEventHelper2Service',
            'Mautic\\LeadBundle\\Helper\\CustomFieldHelper' => 'getCustomFieldHelperService',
            'Mautic\\LeadBundle\\Helper\\CustomFieldValueHelper' => 'getCustomFieldValueHelperService',
            'Mautic\\LeadBundle\\Helper\\FormFieldHelper' => 'getFormFieldHelperService',
            'Mautic\\LeadBundle\\Helper\\IdentifyCompanyHelper' => 'getIdentifyCompanyHelperService',
            'Mautic\\LeadBundle\\Helper\\PointEventHelper' => 'getPointEventHelper2Service',
            'Mautic\\LeadBundle\\Helper\\Progress' => 'getProgressService',
            'Mautic\\LeadBundle\\Helper\\TokenHelper' => 'getTokenHelper2Service',
            'Mautic\\LeadBundle\\LeadEvents' => 'getLeadEventsService',
            'Mautic\\LeadBundle\\MauticLeadBundle' => 'getMauticLeadBundleService',
            'Mautic\\LeadBundle\\Model\\CompanyReportData' => 'getCompanyReportDataService',
            'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel' => 'getContactExportSchedulerModelService',
            'Mautic\\LeadBundle\\Model\\DeviceModel' => 'getDeviceModelService',
            'Mautic\\LeadBundle\\Model\\ImportModel' => 'getImportModelService',
            'Mautic\\LeadBundle\\Model\\NoteModel' => 'getNoteModelService',
            'Mautic\\LeadBundle\\Model\\SegmentActionModel' => 'getSegmentActionModelService',
            'Mautic\\LeadBundle\\Model\\TagModel' => 'getTagModel2Service',
            'Mautic\\LeadBundle\\Segment\\ContactSegmentFilters' => 'getContactSegmentFiltersService',
            'Mautic\\LeadBundle\\Segment\\Exception\\FieldNotFoundException' => 'getFieldNotFoundExceptionService',
            'Mautic\\LeadBundle\\Segment\\Exception\\InvalidUseException' => 'getInvalidUseExceptionService',
            'Mautic\\LeadBundle\\Segment\\Exception\\PluginHandledFilterException' => 'getPluginHandledFilterExceptionService',
            'Mautic\\LeadBundle\\Segment\\Exception\\SegmentNotFoundException' => 'getSegmentNotFoundExceptionService',
            'Mautic\\LeadBundle\\Segment\\Exception\\SegmentQueryException' => 'getSegmentQueryExceptionService',
            'Mautic\\LeadBundle\\Validator\\Constraints\\Length' => 'getLengthService',
            'Mautic\\MarketplaceBundle\\Collection\\MaintainerCollection' => 'getMaintainerCollectionService',
            'Mautic\\MarketplaceBundle\\Collection\\PackageCollection' => 'getPackageCollectionService',
            'Mautic\\MarketplaceBundle\\Collection\\VersionCollection' => 'getVersionCollectionService',
            'Mautic\\MarketplaceBundle\\Command\\InstallCommand' => 'getInstallCommand2Service',
            'Mautic\\MarketplaceBundle\\Command\\ListCommand' => 'getListCommandService',
            'Mautic\\MarketplaceBundle\\Command\\RemoveCommand' => 'getRemoveCommandService',
            'Mautic\\MarketplaceBundle\\Controller\\AjaxController' => 'getAjaxController13Service',
            'Mautic\\MarketplaceBundle\\Controller\\CacheController' => 'getCacheControllerService',
            'Mautic\\MarketplaceBundle\\Controller\\Package\\DetailController' => 'getDetailControllerService',
            'Mautic\\MarketplaceBundle\\Controller\\Package\\InstallController' => 'getInstallController2Service',
            'Mautic\\MarketplaceBundle\\Controller\\Package\\ListController' => 'getListController2Service',
            'Mautic\\MarketplaceBundle\\Controller\\Package\\RemoveController' => 'getRemoveControllerService',
            'Mautic\\MarketplaceBundle\\EventListener\\MenuSubscriber' => 'getMenuSubscriberService',
            'Mautic\\MarketplaceBundle\\MarketplaceBundle' => 'getMarketplaceBundleService',
            'Mautic\\MarketplaceBundle\\Model\\PackageModel' => 'getPackageModelService',
            'Mautic\\MessengerBundle\\Controller\\AjaxController' => 'getAjaxController14Service',
            'Mautic\\NotificationBundle\\Controller\\AjaxController' => 'getAjaxController15Service',
            'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController' => 'getNotificationApiControllerService',
            'Mautic\\NotificationBundle\\Controller\\AppCallbackController' => 'getAppCallbackControllerService',
            'Mautic\\NotificationBundle\\Controller\\JsController' => 'getJsController3Service',
            'Mautic\\NotificationBundle\\Controller\\MobileNotificationController' => 'getMobileNotificationControllerService',
            'Mautic\\NotificationBundle\\Controller\\NotificationController' => 'getNotificationControllerService',
            'Mautic\\NotificationBundle\\Controller\\PopupController' => 'getPopupControllerService',
            'Mautic\\NotificationBundle\\Entity\\NotificationRepository' => 'getNotificationRepository2Service',
            'Mautic\\NotificationBundle\\Entity\\PushIDRepository' => 'getPushIDRepositoryService',
            'Mautic\\NotificationBundle\\Entity\\StatRepository' => 'getStatRepository4Service',
            'Mautic\\NotificationBundle\\EventListener\\BuildJsSubscriber' => 'getBuildJsSubscriber3Service',
            'Mautic\\NotificationBundle\\EventListener\\CampaignConditionSubscriber' => 'getCampaignConditionSubscriber2Service',
            'Mautic\\NotificationBundle\\EventListener\\ChannelSubscriber' => 'getChannelSubscriber4Service',
            'Mautic\\NotificationBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber10Service',
            'Mautic\\NotificationBundle\\EventListener\\NotificationSubscriber' => 'getNotificationSubscriberService',
            'Mautic\\NotificationBundle\\EventListener\\PageSubscriber' => 'getPageSubscriber5Service',
            'Mautic\\NotificationBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber7Service',
            'Mautic\\NotificationBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber11Service',
            'Mautic\\NotificationBundle\\Form\\Type\\ConfigType' => 'getConfigType8Service',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationDetailsType' => 'getMobileNotificationDetailsTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationListType' => 'getMobileNotificationListTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationSendType' => 'getMobileNotificationSendTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationType' => 'getMobileNotificationTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationConfigType' => 'getNotificationConfigTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationListType' => 'getNotificationListTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationSendType' => 'getNotificationSendTypeService',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationType' => 'getNotificationTypeService',
            'Mautic\\NotificationBundle\\MauticNotificationBundle' => 'getMauticNotificationBundleService',
            'Mautic\\NotificationBundle\\Model\\NotificationModel' => 'getNotificationModel2Service',
            'Mautic\\NotificationBundle\\NotificationEvents' => 'getNotificationEventsService',
            'Mautic\\PageBundle\\Controller\\AjaxController' => 'getAjaxController16Service',
            'Mautic\\PageBundle\\Controller\\Api\\PageApiController' => 'getPageApiControllerService',
            'Mautic\\PageBundle\\Controller\\PageController' => 'getPageControllerService',
            'Mautic\\PageBundle\\Controller\\PublicController' => 'getPublicController9Service',
            'Mautic\\PageBundle\\Entity\\HitRepository' => 'getHitRepositoryService',
            'Mautic\\PageBundle\\Entity\\PageRepository' => 'getPageRepositoryService',
            'Mautic\\PageBundle\\Entity\\TrackableRepository' => 'getTrackableRepositoryService',
            'Mautic\\PageBundle\\Entity\\VideoHitRepository' => 'getVideoHitRepositoryService',
            'Mautic\\PageBundle\\EventListener\\BuildJsSubscriber' => 'getBuildJsSubscriber4Service',
            'Mautic\\PageBundle\\EventListener\\BuilderSubscriber' => 'getBuilderSubscriber3Service',
            'Mautic\\PageBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber10Service',
            'Mautic\\PageBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber11Service',
            'Mautic\\PageBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber8Service',
            'Mautic\\PageBundle\\EventListener\\DateTimeTokenSubscriber' => 'getDateTimeTokenSubscriber2Service',
            'Mautic\\PageBundle\\EventListener\\DetermineWinnerSubscriber' => 'getDetermineWinnerSubscriber4Service',
            'Mautic\\PageBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber12Service',
            'Mautic\\PageBundle\\EventListener\\MaintenanceSubscriber' => 'getMaintenanceSubscriber3Service',
            'Mautic\\PageBundle\\EventListener\\PageSubscriber' => 'getPageSubscriber6Service',
            'Mautic\\PageBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber6Service',
            'Mautic\\PageBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber8Service',
            'Mautic\\PageBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber7Service',
            'Mautic\\PageBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber12Service',
            'Mautic\\PageBundle\\EventListener\\TokenSubscriber' => 'getTokenSubscriber2Service',
            'Mautic\\PageBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriber4Service',
            'Mautic\\PageBundle\\Form\\Type\\AbTestPropertiesType' => 'getAbTestPropertiesType2Service',
            'Mautic\\PageBundle\\Form\\Type\\CampaignEventPageHitType' => 'getCampaignEventPageHitTypeService',
            'Mautic\\PageBundle\\Form\\Type\\ConfigTrackingPageType' => 'getConfigTrackingPageTypeService',
            'Mautic\\PageBundle\\Form\\Type\\ConfigType' => 'getConfigType9Service',
            'Mautic\\PageBundle\\Form\\Type\\DashboardHitsInTimeWidgetType' => 'getDashboardHitsInTimeWidgetTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PageListType' => 'getPageListTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PagePublishDatesType' => 'getPagePublishDatesTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PageType' => 'getPageTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PointActionPageHitType' => 'getPointActionPageHitTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PointActionUrlHitType' => 'getPointActionUrlHitTypeService',
            'Mautic\\PageBundle\\Form\\Type\\PreferenceCenterListType' => 'getPreferenceCenterListTypeService',
            'Mautic\\PageBundle\\Form\\Type\\RedirectListType' => 'getRedirectListTypeService',
            'Mautic\\PageBundle\\Form\\Type\\TrackingPixelSendType' => 'getTrackingPixelSendTypeService',
            'Mautic\\PageBundle\\Form\\Type\\VariantType' => 'getVariantType2Service',
            'Mautic\\PageBundle\\Helper\\PointActionHelper' => 'getPointActionHelper3Service',
            'Mautic\\PageBundle\\MauticPageBundle' => 'getMauticPageBundleService',
            'Mautic\\PageBundle\\Model\\Tracking404Model' => 'getTracking404ModelService',
            'Mautic\\PageBundle\\Model\\VideoModel' => 'getVideoModelService',
            'Mautic\\PageBundle\\PageEvents' => 'getPageEventsService',
            'Mautic\\PluginBundle\\Command\\FetchLeadsCommand' => 'getFetchLeadsCommandService',
            'Mautic\\PluginBundle\\Command\\PushLeadActivityCommand' => 'getPushLeadActivityCommandService',
            'Mautic\\PluginBundle\\Command\\ReloadCommand' => 'getReloadCommandService',
            'Mautic\\PluginBundle\\Controller\\AjaxController' => 'getAjaxController17Service',
            'Mautic\\PluginBundle\\Controller\\AuthController' => 'getAuthController2Service',
            'Mautic\\PluginBundle\\Controller\\PluginController' => 'getPluginControllerService',
            'Mautic\\PluginBundle\\Entity\\IntegrationEntityRepository' => 'getIntegrationEntityRepositoryService',
            'Mautic\\PluginBundle\\Entity\\IntegrationRepository' => 'getIntegrationRepositoryService',
            'Mautic\\PluginBundle\\Entity\\PluginRepository' => 'getPluginRepositoryService',
            'Mautic\\PluginBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber11Service',
            'Mautic\\PluginBundle\\EventListener\\FormSubscriber' => 'getFormSubscriber7Service',
            'Mautic\\PluginBundle\\EventListener\\IntegrationSubscriber' => 'getIntegrationSubscriberService',
            'Mautic\\PluginBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber13Service',
            'Mautic\\PluginBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber7Service',
            'Mautic\\PluginBundle\\Form\\Type\\CompanyFieldsType' => 'getCompanyFieldsTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\DetailsType' => 'getDetailsTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\FeatureSettingsType' => 'getFeatureSettingsTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\FieldsType' => 'getFieldsTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationCampaignsType' => 'getIntegrationCampaignsTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationConfigType' => 'getIntegrationConfigType2Service',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationsListType' => 'getIntegrationsListTypeService',
            'Mautic\\PluginBundle\\Form\\Type\\KeysType' => 'getKeysTypeService',
            'Mautic\\PluginBundle\\Helper\\Cleaner' => 'getCleanerService',
            'Mautic\\PluginBundle\\Helper\\EventHelper' => 'getEventHelperService',
            'Mautic\\PluginBundle\\MauticPluginBundle' => 'getMauticPluginBundleService',
            'Mautic\\PluginBundle\\Model\\IntegrationEntityModel' => 'getIntegrationEntityModelService',
            'Mautic\\PluginBundle\\PluginEvents' => 'getPluginEventsService',
            'Mautic\\PointBundle\\Controller\\AjaxController' => 'getAjaxController18Service',
            'Mautic\\PointBundle\\Controller\\Api\\PointApiController' => 'getPointApiControllerService',
            'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController' => 'getTriggerApiControllerService',
            'Mautic\\PointBundle\\Controller\\PointController' => 'getPointControllerService',
            'Mautic\\PointBundle\\Controller\\TriggerController' => 'getTriggerControllerService',
            'Mautic\\PointBundle\\Controller\\TriggerEventController' => 'getTriggerEventControllerService',
            'Mautic\\PointBundle\\Entity\\LeadPointLogRepository' => 'getLeadPointLogRepositoryService',
            'Mautic\\PointBundle\\Entity\\LeadTriggerLogRepository' => 'getLeadTriggerLogRepositoryService',
            'Mautic\\PointBundle\\Entity\\PointRepository' => 'getPointRepositoryService',
            'Mautic\\PointBundle\\Entity\\TriggerEventRepository' => 'getTriggerEventRepositoryService',
            'Mautic\\PointBundle\\Entity\\TriggerRepository' => 'getTriggerRepositoryService',
            'Mautic\\PointBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber9Service',
            'Mautic\\PointBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber14Service',
            'Mautic\\PointBundle\\EventListener\\PointSubscriber' => 'getPointSubscriber8Service',
            'Mautic\\PointBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber8Service',
            'Mautic\\PointBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber13Service',
            'Mautic\\PointBundle\\Form\\Type\\GenericPointSettingsType' => 'getGenericPointSettingsTypeService',
            'Mautic\\PointBundle\\Form\\Type\\PointActionType' => 'getPointActionType2Service',
            'Mautic\\PointBundle\\Form\\Type\\PointType' => 'getPointTypeService',
            'Mautic\\PointBundle\\Form\\Type\\TriggerEventType' => 'getTriggerEventTypeService',
            'Mautic\\PointBundle\\Form\\Type\\TriggerType' => 'getTriggerTypeService',
            'Mautic\\PointBundle\\Helper\\EventHelper' => 'getEventHelper2Service',
            'Mautic\\PointBundle\\MauticPointBundle' => 'getMauticPointBundleService',
            'Mautic\\PointBundle\\Model\\PointModel' => 'getPointModelService',
            'Mautic\\PointBundle\\Model\\TriggerEventModel' => 'getTriggerEventModelService',
            'Mautic\\PointBundle\\Model\\TriggerModel' => 'getTriggerModelService',
            'Mautic\\PointBundle\\PointEvents' => 'getPointEventsService',
            'Mautic\\QueueBundle\\Command\\ConsumeQueueCommand' => 'getConsumeQueueCommandService',
            'Mautic\\QueueBundle\\EventListener\\BeanstalkdSubscriber' => 'getBeanstalkdSubscriberService',
            'Mautic\\QueueBundle\\EventListener\\RabbitMqSubscriber' => 'getRabbitMqSubscriberService',
            'Mautic\\QueueBundle\\Helper\\QueueRequestHelper' => 'getQueueRequestHelperService',
            'Mautic\\QueueBundle\\QueueEvents' => 'getQueueEventsService',
            'Mautic\\QueueBundle\\Queue\\QueueConsumerResults' => 'getQueueConsumerResultsService',
            'Mautic\\QueueBundle\\Queue\\QueueName' => 'getQueueNameService',
            'Mautic\\QueueBundle\\Queue\\QueueProtocol' => 'getQueueProtocolService',
            'Mautic\\ReportBundle\\Builder\\InvalidReportQueryException' => 'getInvalidReportQueryExceptionService',
            'Mautic\\ReportBundle\\Controller\\AjaxController' => 'getAjaxController19Service',
            'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController' => 'getReportApiControllerService',
            'Mautic\\ReportBundle\\Controller\\ReportController' => 'getReportControllerService',
            'Mautic\\ReportBundle\\Controller\\ScheduleController' => 'getScheduleControllerService',
            'Mautic\\ReportBundle\\Entity\\ReportRepository' => 'getReportRepositoryService',
            'Mautic\\ReportBundle\\Entity\\SchedulerRepository' => 'getSchedulerRepositoryService',
            'Mautic\\ReportBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber12Service',
            'Mautic\\ReportBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber10Service',
            'Mautic\\ReportBundle\\EventListener\\ReportSubscriber' => 'getReportSubscriber9Service',
            'Mautic\\ReportBundle\\EventListener\\SchedulerSubscriber' => 'getSchedulerSubscriberService',
            'Mautic\\ReportBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber9Service',
            'Mautic\\ReportBundle\\Form\\Type\\AggregatorType' => 'getAggregatorTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\ConfigType' => 'getConfigType10Service',
            'Mautic\\ReportBundle\\Form\\Type\\DynamicFiltersType' => 'getDynamicFiltersTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\FilterSelectorType' => 'getFilterSelectorTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\ReportFiltersType' => 'getReportFiltersTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\ReportSettingsType' => 'getReportSettingsTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\ReportType' => 'getReportTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\ReportWidgetType' => 'getReportWidgetTypeService',
            'Mautic\\ReportBundle\\Form\\Type\\TableOrderType' => 'getTableOrderTypeService',
            'Mautic\\ReportBundle\\MauticReportBundle' => 'getMauticReportBundleService',
            'Mautic\\ReportBundle\\Model\\CsvExporter' => 'getCsvExporterService',
            'Mautic\\ReportBundle\\Model\\ExcelExporter' => 'getExcelExporterService',
            'Mautic\\ReportBundle\\Model\\ExportHandler' => 'getExportHandlerService',
            'Mautic\\ReportBundle\\Model\\ExportResponse' => 'getExportResponseService',
            'Mautic\\ReportBundle\\Model\\ReportExportOptions' => 'getReportExportOptionsService',
            'Mautic\\ReportBundle\\Model\\ReportExporter' => 'getReportExporterService',
            'Mautic\\ReportBundle\\Model\\ReportFileWriter' => 'getReportFileWriterService',
            'Mautic\\ReportBundle\\Model\\ReportModel' => 'getReportModelService',
            'Mautic\\ReportBundle\\Model\\ScheduleModel' => 'getScheduleModelService',
            'Mautic\\ReportBundle\\ReportEvents' => 'getReportEventsService',
            'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerDailyBuilder' => 'getSchedulerDailyBuilderService',
            'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerMonthBuilder' => 'getSchedulerMonthBuilderService',
            'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerNowBuilder' => 'getSchedulerNowBuilderService',
            'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerWeeklyBuilder' => 'getSchedulerWeeklyBuilderService',
            'Mautic\\ReportBundle\\Scheduler\\Command\\ExportSchedulerCommand' => 'getExportSchedulerCommandService',
            'Mautic\\ReportBundle\\Scheduler\\Enum\\SchedulerEnum' => 'getSchedulerEnumService',
            'Mautic\\ReportBundle\\Scheduler\\EventListener\\ReportSchedulerSubscriber' => 'getReportSchedulerSubscriberService',
            'Mautic\\ReportBundle\\Scheduler\\Exception\\InvalidSchedulerException' => 'getInvalidSchedulerExceptionService',
            'Mautic\\ReportBundle\\Scheduler\\Exception\\NoScheduleException' => 'getNoScheduleExceptionService',
            'Mautic\\ReportBundle\\Scheduler\\Exception\\NotSupportedScheduleTypeException' => 'getNotSupportedScheduleTypeExceptionService',
            'Mautic\\ReportBundle\\Scheduler\\Exception\\ScheduleNotValidException' => 'getScheduleNotValidExceptionService',
            'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValid' => 'getScheduleIsValidService',
            'Mautic\\SmsBundle\\Broadcast\\BroadcastResult' => 'getBroadcastResultService',
            'Mautic\\SmsBundle\\Controller\\AjaxController' => 'getAjaxController20Service',
            'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController' => 'getSmsApiControllerService',
            'Mautic\\SmsBundle\\Controller\\ReplyController' => 'getReplyControllerService',
            'Mautic\\SmsBundle\\Controller\\SmsController' => 'getSmsControllerService',
            'Mautic\\SmsBundle\\Entity\\SmsRepository' => 'getSmsRepositoryService',
            'Mautic\\SmsBundle\\Entity\\StatRepository' => 'getStatRepository5Service',
            'Mautic\\SmsBundle\\EventListener\\BroadcastSubscriber' => 'getBroadcastSubscriber2Service',
            'Mautic\\SmsBundle\\EventListener\\CampaignReplySubscriber' => 'getCampaignReplySubscriberService',
            'Mautic\\SmsBundle\\EventListener\\CampaignSendSubscriber' => 'getCampaignSendSubscriberService',
            'Mautic\\SmsBundle\\EventListener\\ChannelSubscriber' => 'getChannelSubscriber5Service',
            'Mautic\\SmsBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber13Service',
            'Mautic\\SmsBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber15Service',
            'Mautic\\SmsBundle\\EventListener\\MessageQueueSubscriber' => 'getMessageQueueSubscriber2Service',
            'Mautic\\SmsBundle\\EventListener\\ReplySubscriber' => 'getReplySubscriberService',
            'Mautic\\SmsBundle\\EventListener\\SmsSubscriber' => 'getSmsSubscriberService',
            'Mautic\\SmsBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber14Service',
            'Mautic\\SmsBundle\\EventListener\\StopSubscriber' => 'getStopSubscriberService',
            'Mautic\\SmsBundle\\EventListener\\TrackingSubscriber' => 'getTrackingSubscriber2Service',
            'Mautic\\SmsBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriber5Service',
            'Mautic\\SmsBundle\\Form\\Type\\CampaignReplyType' => 'getCampaignReplyTypeService',
            'Mautic\\SmsBundle\\Form\\Type\\ConfigType' => 'getConfigType11Service',
            'Mautic\\SmsBundle\\Form\\Type\\SmsListType' => 'getSmsListTypeService',
            'Mautic\\SmsBundle\\Form\\Type\\SmsSendType' => 'getSmsSendTypeService',
            'Mautic\\SmsBundle\\Form\\Type\\SmsType' => 'getSmsTypeService',
            'Mautic\\SmsBundle\\MauticSmsBundle' => 'getMauticSmsBundleService',
            'Mautic\\SmsBundle\\Model\\SmsModel' => 'getSmsModelService',
            'Mautic\\SmsBundle\\SmsEvents' => 'getSmsEventsService',
            'Mautic\\StageBundle\\Controller\\AjaxController' => 'getAjaxController21Service',
            'Mautic\\StageBundle\\Controller\\Api\\StageApiController' => 'getStageApiControllerService',
            'Mautic\\StageBundle\\Controller\\StageController' => 'getStageControllerService',
            'Mautic\\StageBundle\\Entity\\LeadStageLogRepository' => 'getLeadStageLogRepositoryService',
            'Mautic\\StageBundle\\Entity\\StageRepository' => 'getStageRepositoryService',
            'Mautic\\StageBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber12Service',
            'Mautic\\StageBundle\\EventListener\\DashboardSubscriber' => 'getDashboardSubscriber11Service',
            'Mautic\\StageBundle\\EventListener\\LeadSubscriber' => 'getLeadSubscriber16Service',
            'Mautic\\StageBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber10Service',
            'Mautic\\StageBundle\\EventListener\\StageSubscriber' => 'getStageSubscriberService',
            'Mautic\\StageBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber15Service',
            'Mautic\\StageBundle\\Form\\Type\\GenericStageActionType' => 'getGenericStageActionTypeService',
            'Mautic\\StageBundle\\Form\\Type\\StageActionChangeType' => 'getStageActionChangeTypeService',
            'Mautic\\StageBundle\\Form\\Type\\StageActionListType' => 'getStageActionListTypeService',
            'Mautic\\StageBundle\\Form\\Type\\StageActionType' => 'getStageActionTypeService',
            'Mautic\\StageBundle\\Form\\Type\\StageListType' => 'getStageListTypeService',
            'Mautic\\StageBundle\\Form\\Type\\StageType' => 'getStageType2Service',
            'Mautic\\StageBundle\\Helper\\EventHelper' => 'getEventHelper3Service',
            'Mautic\\StageBundle\\MauticStageBundle' => 'getMauticStageBundleService',
            'Mautic\\StageBundle\\Model\\StageModel' => 'getStageModelService',
            'Mautic\\StageBundle\\StageEvents' => 'getStageEventsService',
            'Mautic\\StatsBundle\\Aggregate\\Helper\\CalculatorHelper' => 'getCalculatorHelperService',
            'Mautic\\StatsBundle\\MauticStatsBundle' => 'getMauticStatsBundleService',
            'Mautic\\StatsBundle\\StatEvents' => 'getStatEventsService',
            'Mautic\\UserBundle\\Controller\\Api\\RoleApiController' => 'getRoleApiControllerService',
            'Mautic\\UserBundle\\Controller\\Api\\UserApiController' => 'getUserApiControllerService',
            'Mautic\\UserBundle\\Controller\\ProfileController' => 'getProfileControllerService',
            'Mautic\\UserBundle\\Controller\\PublicController' => 'getPublicController10Service',
            'Mautic\\UserBundle\\Controller\\RoleController' => 'getRoleControllerService',
            'Mautic\\UserBundle\\Controller\\UserController' => 'getUserControllerService',
            'Mautic\\UserBundle\\Entity\\PermissionRepository' => 'getPermissionRepositoryService',
            'Mautic\\UserBundle\\Entity\\RoleRepository' => 'getRoleRepositoryService',
            'Mautic\\UserBundle\\Entity\\UserRepository' => 'getUserRepositoryService',
            'Mautic\\UserBundle\\Entity\\UserTokenRepository' => 'getUserTokenRepositoryService',
            'Mautic\\UserBundle\\Enum\\UserTokenAuthorizator' => 'getUserTokenAuthorizatorService',
            'Mautic\\UserBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber14Service',
            'Mautic\\UserBundle\\EventListener\\SearchSubscriber' => 'getSearchSubscriber11Service',
            'Mautic\\UserBundle\\EventListener\\SecuritySubscriber' => 'getSecuritySubscriberService',
            'Mautic\\UserBundle\\EventListener\\UserSubscriber' => 'getUserSubscriberService',
            'Mautic\\UserBundle\\Form\\Type\\ConfigType' => 'getConfigType12Service',
            'Mautic\\UserBundle\\Form\\Type\\ContactType' => 'getContactTypeService',
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetConfirmType' => 'getPasswordResetConfirmTypeService',
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetType' => 'getPasswordResetTypeService',
            'Mautic\\UserBundle\\Form\\Type\\PermissionListType' => 'getPermissionListTypeService',
            'Mautic\\UserBundle\\Form\\Type\\PermissionsType' => 'getPermissionsTypeService',
            'Mautic\\UserBundle\\Form\\Type\\RoleListType' => 'getRoleListTypeService',
            'Mautic\\UserBundle\\Form\\Type\\RoleType' => 'getRoleTypeService',
            'Mautic\\UserBundle\\Form\\Type\\UserListType' => 'getUserListTypeService',
            'Mautic\\UserBundle\\Form\\Type\\UserType' => 'getUserTypeService',
            'Mautic\\UserBundle\\Hash\\UserHash' => 'getUserHashService',
            'Mautic\\UserBundle\\MauticUserBundle' => 'getMauticUserBundleService',
            'Mautic\\UserBundle\\Security\\Authenticator\\PreAuthAuthenticator' => 'getPreAuthAuthenticatorService',
            'Mautic\\UserBundle\\Security\\Firewall\\AuthenticationListener' => 'getAuthenticationListenerService',
            'Mautic\\UserBundle\\UserEvents' => 'getUserEventsService',
            'Mautic\\WebhookBundle\\Command\\DeleteWebhookLogsCommand' => 'getDeleteWebhookLogsCommandService',
            'Mautic\\WebhookBundle\\Command\\ProcessWebhookQueuesCommand' => 'getProcessWebhookQueuesCommandService',
            'Mautic\\WebhookBundle\\Controller\\AjaxController' => 'getAjaxController22Service',
            'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController' => 'getWebhookApiControllerService',
            'Mautic\\WebhookBundle\\Controller\\WebhookController' => 'getWebhookControllerService',
            'Mautic\\WebhookBundle\\Entity\\EventRepository' => 'getEventRepository2Service',
            'Mautic\\WebhookBundle\\Entity\\LogRepository' => 'getLogRepositoryService',
            'Mautic\\WebhookBundle\\Entity\\WebhookQueueRepository' => 'getWebhookQueueRepositoryService',
            'Mautic\\WebhookBundle\\Entity\\WebhookRepository' => 'getWebhookRepositoryService',
            'Mautic\\WebhookBundle\\EventListener\\CampaignSubscriber' => 'getCampaignSubscriber13Service',
            'Mautic\\WebhookBundle\\EventListener\\ConfigSubscriber' => 'getConfigSubscriber15Service',
            'Mautic\\WebhookBundle\\EventListener\\StatsSubscriber' => 'getStatsSubscriber16Service',
            'Mautic\\WebhookBundle\\EventListener\\WebhookSubscriber' => 'getWebhookSubscriber6Service',
            'Mautic\\WebhookBundle\\Form\\Type\\CampaignEventSendWebhookType' => 'getCampaignEventSendWebhookTypeService',
            'Mautic\\WebhookBundle\\Form\\Type\\ConfigType' => 'getConfigType13Service',
            'Mautic\\WebhookBundle\\Form\\Type\\WebhookType' => 'getWebhookTypeService',
            'Mautic\\WebhookBundle\\MauticWebhookBundle' => 'getMauticWebhookBundleService',
            'Mautic\\WebhookBundle\\Model\\WebhookModel' => 'getWebhookModelService',
            'Mautic\\WebhookBundle\\WebhookEvents' => 'getWebhookEventsService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'doctrine.dbal.unbuffered_connection' => 'getDoctrine_Dbal_UnbufferedConnectionService',
            'error_controller' => 'getErrorControllerService',
            'fm_elfinder.loader' => 'getFmElfinder_LoaderService',
            'fos_oauth_server.controller.authorize' => 'getFosOauthServer_Controller_AuthorizeService',
            'fos_oauth_server.controller.token' => 'getFosOauthServer_Controller_TokenService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'grapesjsbuilder.config' => 'getGrapesjsbuilder_ConfigService',
            'grapesjsbuilder.helper.filemanager' => 'getGrapesjsbuilder_Helper_FilemanagerService',
            'grapesjsbuilder.integration.configuration' => 'getGrapesjsbuilder_Integration_ConfigurationService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'lightsaml.container.build' => 'getLightsaml_Container_BuildService',
            'ligthsaml.profile.acs' => 'getLigthsaml_Profile_AcsService',
            'ligthsaml.profile.login_factory' => 'getLigthsaml_Profile_LoginFactoryService',
            'ligthsaml.profile.metadata' => 'getLigthsaml_Profile_MetadataService',
            'marketplace.api.connection' => 'getMarketplace_Api_ConnectionService',
            'marketplace.permissions' => 'getMarketplace_PermissionsService',
            'marketplace.service.allowlist' => 'getMarketplace_Service_AllowlistService',
            'marketplace.service.plugin_collector' => 'getMarketplace_Service_PluginCollectorService',
            'marketplace.service.route_provider' => 'getMarketplace_Service_RouteProviderService',
            'mautic.api.helper.entity_result' => 'getMautic_Api_Helper_EntityResultService',
            'mautic.api.oauth.event_listener' => 'getMautic_Api_Oauth_EventListenerService',
            'mautic.asset.permissions' => 'getMautic_Asset_PermissionsService',
            'mautic.asset.repository.download' => 'getMautic_Asset_Repository_DownloadService',
            'mautic.asset.upload.error.handler' => 'getMautic_Asset_Upload_Error_HandlerService',
            'mautic.cache.adapter.filesystem' => 'getMautic_Cache_Adapter_FilesystemService',
            'mautic.cache.adapter.memcached' => 'getMautic_Cache_Adapter_MemcachedService',
            'mautic.cache.adapter.redis' => 'getMautic_Cache_Adapter_RedisService',
            'mautic.cache.clear_cache_subscriber' => 'getMautic_Cache_ClearCacheSubscriberService',
            'mautic.cache.warmer.middleware' => 'getMautic_Cache_Warmer_MiddlewareService',
            'mautic.campaign.contact_finder.inactive' => 'getMautic_Campaign_ContactFinder_InactiveService',
            'mautic.campaign.contact_finder.kickoff' => 'getMautic_Campaign_ContactFinder_KickoffService',
            'mautic.campaign.contact_finder.scheduled' => 'getMautic_Campaign_ContactFinder_ScheduledService',
            'mautic.campaign.dispatcher.action' => 'getMautic_Campaign_Dispatcher_ActionService',
            'mautic.campaign.dispatcher.condition' => 'getMautic_Campaign_Dispatcher_ConditionService',
            'mautic.campaign.dispatcher.decision' => 'getMautic_Campaign_Dispatcher_DecisionService',
            'mautic.campaign.event_executioner' => 'getMautic_Campaign_EventExecutionerService',
            'mautic.campaign.event_logger' => 'getMautic_Campaign_EventLoggerService',
            'mautic.campaign.executioner.action' => 'getMautic_Campaign_Executioner_ActionService',
            'mautic.campaign.executioner.condition' => 'getMautic_Campaign_Executioner_ConditionService',
            'mautic.campaign.executioner.decision' => 'getMautic_Campaign_Executioner_DecisionService',
            'mautic.campaign.executioner.inactive' => 'getMautic_Campaign_Executioner_InactiveService',
            'mautic.campaign.executioner.kickoff' => 'getMautic_Campaign_Executioner_KickoffService',
            'mautic.campaign.executioner.realtime' => 'getMautic_Campaign_Executioner_RealtimeService',
            'mautic.campaign.executioner.scheduled' => 'getMautic_Campaign_Executioner_ScheduledService',
            'mautic.campaign.helper.decision' => 'getMautic_Campaign_Helper_DecisionService',
            'mautic.campaign.helper.inactivity' => 'getMautic_Campaign_Helper_InactivityService',
            'mautic.campaign.helper.notification' => 'getMautic_Campaign_Helper_NotificationService',
            'mautic.campaign.helper.removed_contact_tracker' => 'getMautic_Campaign_Helper_RemovedContactTrackerService',
            'mautic.campaign.legacy_event_dispatcher' => 'getMautic_Campaign_LegacyEventDispatcherService',
            'mautic.campaign.repository.campaign' => 'getMautic_Campaign_Repository_CampaignService',
            'mautic.campaign.repository.event' => 'getMautic_Campaign_Repository_EventService',
            'mautic.campaign.repository.summary' => 'getMautic_Campaign_Repository_SummaryService',
            'mautic.campaign.scheduler' => 'getMautic_Campaign_SchedulerService',
            'mautic.campaign.scheduler.datetime' => 'getMautic_Campaign_Scheduler_DatetimeService',
            'mautic.campaign.scheduler.interval' => 'getMautic_Campaign_Scheduler_IntervalService',
            'mautic.campaign.service.campaign' => 'getMautic_Campaign_Service_CampaignService',
            'mautic.channel.repository.message_queue' => 'getMautic_Channel_Repository_MessageQueueService',
            'mautic.citrix.campaignbundle.subscriber' => 'getMautic_Citrix_Campaignbundle_SubscriberService',
            'mautic.citrix.formbundle.subscriber' => 'getMautic_Citrix_Formbundle_SubscriberService',
            'mautic.citrix.model.citrix' => 'getMautic_Citrix_Model_CitrixService',
            'mautic.core.service.bulk_notification' => 'getMautic_Core_Service_BulkNotificationService',
            'mautic.core.service.local_file_adapter' => 'getMautic_Core_Service_LocalFileAdapterService',
            'mautic.dashboard.widget' => 'getMautic_Dashboard_WidgetService',
            'mautic.di.env_processor.int_nullable' => 'getMautic_Di_EnvProcessor_IntNullableService',
            'mautic.di.env_processor.mailerdsn' => 'getMautic_Di_EnvProcessor_MailerdsnService',
            'mautic.di.env_processor.mauticconst' => 'getMautic_Di_EnvProcessor_MauticconstService',
            'mautic.di.env_processor.nullable' => 'getMautic_Di_EnvProcessor_NullableService',
            'mautic.dynamicContent.repository.stat' => 'getMautic_DynamicContent_Repository_StatService',
            'mautic.email.fetcher' => 'getMautic_Email_FetcherService',
            'mautic.email.helper.request.storage' => 'getMautic_Email_Helper_Request_StorageService',
            'mautic.email.repository.email' => 'getMautic_Email_Repository_EmailService',
            'mautic.email.repository.emailReply' => 'getMautic_Email_Repository_EmailReplyService',
            'mautic.email.validator.email_or_token_list_validator' => 'getMautic_Email_Validator_EmailOrTokenListValidatorService',
            'mautic.email.validator.multiple_emails_valid_validator' => 'getMautic_Email_Validator_MultipleEmailsValidValidatorService',
            'mautic.exception.listener' => 'getMautic_Exception_ListenerService',
            'mautic.focus.helper.iframe_availability_checker' => 'getMautic_Focus_Helper_IframeAvailabilityCheckerService',
            'mautic.focus.helper.token' => 'getMautic_Focus_Helper_TokenService',
            'mautic.form.collector.already.mapped.field' => 'getMautic_Form_Collector_Already_Mapped_FieldService',
            'mautic.form.collector.object' => 'getMautic_Form_Collector_ObjectService',
            'mautic.form.helper.properties.accessor' => 'getMautic_Form_Helper_Properties_AccessorService',
            'mautic.form.helper.token' => 'getMautic_Form_Helper_TokenService',
            'mautic.form.list.validator.circular' => 'getMautic_Form_List_Validator_CircularService',
            'mautic.form.repository.form' => 'getMautic_Form_Repository_FormService',
            'mautic.form.repository.submission' => 'getMautic_Form_Repository_SubmissionService',
            'mautic.form.type.coreconfig' => 'getMautic_Form_Type_CoreconfigService',
            'mautic.form.type.dwc_entry_filters' => 'getMautic_Form_Type_DwcEntryFiltersService',
            'mautic.form.type.dynamic_content_filter_entry_filters' => 'getMautic_Form_Type_DynamicContentFilterEntryFiltersService',
            'mautic.form.type.field' => 'getMautic_Form_Type_FieldService',
            'mautic.form.type.form_submitaction_repost' => 'getMautic_Form_Type_FormSubmitactionRepostService',
            'mautic.form.type.form_submitaction_sendemail' => 'getMautic_Form_Type_FormSubmitactionSendemailService',
            'mautic.form.validator.constraint.file_extension_constraint_validator' => 'getMautic_Form_Validator_Constraint_FileExtensionConstraintValidatorService',
            'mautic.generated.columns.doctrine.listener' => 'getMautic_Generated_Columns_Doctrine_ListenerService',
            'mautic.helper.command' => 'getMautic_Helper_CommandService',
            'mautic.helper.composer' => 'getMautic_Helper_ComposerService',
            'mautic.helper.dynamicContent' => 'getMautic_Helper_DynamicContentService',
            'mautic.helper.export' => 'getMautic_Helper_ExportService',
            'mautic.helper.field.alias' => 'getMautic_Helper_Field_AliasService',
            'mautic.helper.file_properties' => 'getMautic_Helper_FilePropertiesService',
            'mautic.helper.hash' => 'getMautic_Helper_HashService',
            'mautic.helper.maxmind_do_not_sell_download' => 'getMautic_Helper_MaxmindDoNotSellDownloadService',
            'mautic.helper.notification' => 'getMautic_Helper_NotificationService',
            'mautic.helper.phone_number' => 'getMautic_Helper_PhoneNumberService',
            'mautic.helper.sms' => 'getMautic_Helper_SmsService',
            'mautic.helper.token_builder' => 'getMautic_Helper_TokenBuilderService',
            'mautic.helper.token_builder.factory' => 'getMautic_Helper_TokenBuilder_FactoryService',
            'mautic.helper.trailing_slash' => 'getMautic_Helper_TrailingSlashService',
            'mautic.helper.twig.version' => 'getMautic_Helper_Twig_VersionService',
            'mautic.install.leadcolumns' => 'getMautic_Install_LeadcolumnsService',
            'mautic.integration.amazons3' => 'getMautic_Integration_Amazons3Service',
            'mautic.integration.clearbit' => 'getMautic_Integration_ClearbitService',
            'mautic.integration.connectwise' => 'getMautic_Integration_ConnectwiseService',
            'mautic.integration.constantcontact' => 'getMautic_Integration_ConstantcontactService',
            'mautic.integration.dynamics' => 'getMautic_Integration_DynamicsService',
            'mautic.integration.facebook' => 'getMautic_Integration_FacebookService',
            'mautic.integration.foursquare' => 'getMautic_Integration_FoursquareService',
            'mautic.integration.fullcontact' => 'getMautic_Integration_FullcontactService',
            'mautic.integration.gmail' => 'getMautic_Integration_GmailService',
            'mautic.integration.gotoassist' => 'getMautic_Integration_GotoassistService',
            'mautic.integration.gotomeeting' => 'getMautic_Integration_GotomeetingService',
            'mautic.integration.gototraining' => 'getMautic_Integration_GototrainingService',
            'mautic.integration.gotowebinar' => 'getMautic_Integration_GotowebinarService',
            'mautic.integration.hubspot' => 'getMautic_Integration_HubspotService',
            'mautic.integration.icontact' => 'getMautic_Integration_IcontactService',
            'mautic.integration.instagram' => 'getMautic_Integration_InstagramService',
            'mautic.integration.mailchimp' => 'getMautic_Integration_MailchimpService',
            'mautic.integration.onesignal' => 'getMautic_Integration_OnesignalService',
            'mautic.integration.outlook' => 'getMautic_Integration_OutlookService',
            'mautic.integration.salesforce' => 'getMautic_Integration_SalesforceService',
            'mautic.integration.sugarcrm' => 'getMautic_Integration_SugarcrmService',
            'mautic.integration.tagmanager' => 'getMautic_Integration_TagmanagerService',
            'mautic.integration.twilio' => 'getMautic_Integration_TwilioService',
            'mautic.integration.twitter' => 'getMautic_Integration_TwitterService',
            'mautic.integration.vtiger' => 'getMautic_Integration_VtigerService',
            'mautic.integration.zoho' => 'getMautic_Integration_ZohoService',
            'mautic.integrations.auth_provider.api_key' => 'getMautic_Integrations_AuthProvider_ApiKeyService',
            'mautic.integrations.auth_provider.basic_auth' => 'getMautic_Integrations_AuthProvider_BasicAuthService',
            'mautic.integrations.auth_provider.oauth1atwolegged' => 'getMautic_Integrations_AuthProvider_Oauth1atwoleggedService',
            'mautic.integrations.auth_provider.oauth2threelegged' => 'getMautic_Integrations_AuthProvider_Oauth2threeleggedService',
            'mautic.integrations.auth_provider.oauth2twolegged' => 'getMautic_Integrations_AuthProvider_Oauth2twoleggedService',
            'mautic.integrations.auth_provider.token_persistence_factory' => 'getMautic_Integrations_AuthProvider_TokenPersistenceFactoryService',
            'mautic.integrations.helper.auth_integrations' => 'getMautic_Integrations_Helper_AuthIntegrationsService',
            'mautic.integrations.helper.company_object' => 'getMautic_Integrations_Helper_CompanyObjectService',
            'mautic.integrations.helper.config_integrations' => 'getMautic_Integrations_Helper_ConfigIntegrationsService',
            'mautic.integrations.helper.contact_object' => 'getMautic_Integrations_Helper_ContactObjectService',
            'mautic.integrations.helper.field_validator' => 'getMautic_Integrations_Helper_FieldValidatorService',
            'mautic.integrations.helper.sync_date' => 'getMautic_Integrations_Helper_SyncDateService',
            'mautic.integrations.helper.sync_integrations' => 'getMautic_Integrations_Helper_SyncIntegrationsService',
            'mautic.integrations.helper.sync_judge' => 'getMautic_Integrations_Helper_SyncJudgeService',
            'mautic.integrations.helper.sync_mapping' => 'getMautic_Integrations_Helper_SyncMappingService',
            'mautic.integrations.helper.variable_expresser' => 'getMautic_Integrations_Helper_VariableExpresserService',
            'mautic.integrations.internal.field_validator' => 'getMautic_Integrations_Internal_FieldValidatorService',
            'mautic.integrations.internal.object_provider' => 'getMautic_Integrations_Internal_ObjectProviderService',
            'mautic.integrations.internal.reference_resolver' => 'getMautic_Integrations_Internal_ReferenceResolverService',
            'mautic.integrations.repository.field_change' => 'getMautic_Integrations_Repository_FieldChangeService',
            'mautic.integrations.repository.object_mapping' => 'getMautic_Integrations_Repository_ObjectMappingService',
            'mautic.integrations.sync.data_exchange.mautic' => 'getMautic_Integrations_Sync_DataExchange_MauticService',
            'mautic.integrations.sync.data_exchange.mautic.field_builder' => 'getMautic_Integrations_Sync_DataExchange_Mautic_FieldBuilderService',
            'mautic.integrations.sync.data_exchange.mautic.field_helper' => 'getMautic_Integrations_Sync_DataExchange_Mautic_FieldHelperService',
            'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder' => 'getMautic_Integrations_Sync_DataExchange_Mautic_FullObjectReportBuilderService',
            'mautic.integrations.sync.data_exchange.mautic.order_executioner' => 'getMautic_Integrations_Sync_DataExchange_Mautic_OrderExecutionerService',
            'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder' => 'getMautic_Integrations_Sync_DataExchange_Mautic_PartialObjectReportBuilderService',
            'mautic.integrations.sync.helper.relations' => 'getMautic_Integrations_Sync_Helper_RelationsService',
            'mautic.integrations.sync.integration_process' => 'getMautic_Integrations_Sync_IntegrationProcessService',
            'mautic.integrations.sync.integration_process.object_change_generator' => 'getMautic_Integrations_Sync_IntegrationProcess_ObjectChangeGeneratorService',
            'mautic.integrations.sync.internal_process' => 'getMautic_Integrations_Sync_InternalProcessService',
            'mautic.integrations.sync.internal_process.object_change_generator' => 'getMautic_Integrations_Sync_InternalProcess_ObjectChangeGeneratorService',
            'mautic.integrations.sync.notification.bulk_notification' => 'getMautic_Integrations_Sync_Notification_BulkNotificationService',
            'mautic.integrations.sync.notification.handler_company' => 'getMautic_Integrations_Sync_Notification_HandlerCompanyService',
            'mautic.integrations.sync.notification.handler_contact' => 'getMautic_Integrations_Sync_Notification_HandlerContactService',
            'mautic.integrations.sync.notification.handler_container' => 'getMautic_Integrations_Sync_Notification_HandlerContainerService',
            'mautic.integrations.sync.notification.helper.owner_provider' => 'getMautic_Integrations_Sync_Notification_Helper_OwnerProviderService',
            'mautic.integrations.sync.notification.helper_company' => 'getMautic_Integrations_Sync_Notification_HelperCompanyService',
            'mautic.integrations.sync.notification.helper_route' => 'getMautic_Integrations_Sync_Notification_HelperRouteService',
            'mautic.integrations.sync.notification.helper_user' => 'getMautic_Integrations_Sync_Notification_HelperUserService',
            'mautic.integrations.sync.notification.helper_user_notification' => 'getMautic_Integrations_Sync_Notification_HelperUserNotificationService',
            'mautic.integrations.sync.notification.helper_user_summary_notification' => 'getMautic_Integrations_Sync_Notification_HelperUserSummaryNotificationService',
            'mautic.integrations.sync.notification.user_notification_builder' => 'getMautic_Integrations_Sync_Notification_UserNotificationBuilderService',
            'mautic.integrations.sync.notification.writer' => 'getMautic_Integrations_Sync_Notification_WriterService',
            'mautic.integrations.sync.notifier' => 'getMautic_Integrations_Sync_NotifierService',
            'mautic.integrations.sync.service' => 'getMautic_Integrations_Sync_ServiceService',
            'mautic.integrations.sync.sync_process.value_helper' => 'getMautic_Integrations_Sync_SyncProcess_ValueHelperService',
            'mautic.integrations.token.parser' => 'getMautic_Integrations_Token_ParserService',
            'mautic.lead.columns.dictionary' => 'getMautic_Lead_Columns_DictionaryService',
            'mautic.lead.constraint.alias' => 'getMautic_Lead_Constraint_AliasService',
            'mautic.lead.contact_scheduled_export.subscriber' => 'getMautic_Lead_ContactScheduledExport_SubscriberService',
            'mautic.lead.deduper' => 'getMautic_Lead_DeduperService',
            'mautic.lead.doctrine.subscriber' => 'getMautic_Lead_Doctrine_SubscriberService',
            'mautic.lead.event.dispatcher' => 'getMautic_Lead_Event_DispatcherService',
            'mautic.lead.export_scheduled_audit_log_subscriber' => 'getMautic_Lead_ExportScheduledAuditLogSubscriberService',
            'mautic.lead.export_scheduled_logger_subscriber' => 'getMautic_Lead_ExportScheduledLoggerSubscriberService',
            'mautic.lead.export_scheduled_notification_subscriber' => 'getMautic_Lead_ExportScheduledNotificationSubscriberService',
            'mautic.lead.field.dispatcher.field_column_background_dispatcher' => 'getMautic_Lead_Field_Dispatcher_FieldColumnBackgroundDispatcherService',
            'mautic.lead.field.identifier_fields' => 'getMautic_Lead_Field_IdentifierFieldsService',
            'mautic.lead.field.notification.custom_field' => 'getMautic_Lead_Field_Notification_CustomFieldService',
            'mautic.lead.field.settings.background_service' => 'getMautic_Lead_Field_Settings_BackgroundServiceService',
            'mautic.lead.helper.primary_company' => 'getMautic_Lead_Helper_PrimaryCompanyService',
            'mautic.lead.provider.fieldChoices' => 'getMautic_Lead_Provider_FieldChoicesService',
            'mautic.lead.provider.formAdjustments' => 'getMautic_Lead_Provider_FormAdjustmentsService',
            'mautic.lead.provider.typeOperator' => 'getMautic_Lead_Provider_TypeOperatorService',
            'mautic.lead.query.builder.basic' => 'getMautic_Lead_Query_Builder_BasicService',
            'mautic.lead.query.builder.channel_click.value' => 'getMautic_Lead_Query_Builder_ChannelClick_ValueService',
            'mautic.lead.query.builder.complex_relation.value' => 'getMautic_Lead_Query_Builder_ComplexRelation_ValueService',
            'mautic.lead.query.builder.foreign.func' => 'getMautic_Lead_Query_Builder_Foreign_FuncService',
            'mautic.lead.query.builder.foreign.value' => 'getMautic_Lead_Query_Builder_Foreign_ValueService',
            'mautic.lead.query.builder.special.dnc' => 'getMautic_Lead_Query_Builder_Special_DncService',
            'mautic.lead.query.builder.special.integration' => 'getMautic_Lead_Query_Builder_Special_IntegrationService',
            'mautic.lead.query.builder.special.leadlist' => 'getMautic_Lead_Query_Builder_Special_LeadlistService',
            'mautic.lead.query.builder.special.sessions' => 'getMautic_Lead_Query_Builder_Special_SessionsService',
            'mautic.lead.reportbundle.fields_builder' => 'getMautic_Lead_Reportbundle_FieldsBuilderService',
            'mautic.lead.repository.company_lead' => 'getMautic_Lead_Repository_CompanyLeadService',
            'mautic.lead.repository.dnc' => 'getMautic_Lead_Repository_DncService',
            'mautic.lead.repository.frequency_rule' => 'getMautic_Lead_Repository_FrequencyRuleService',
            'mautic.lead.repository.lead_event_log' => 'getMautic_Lead_Repository_LeadEventLogService',
            'mautic.lead.repository.lead_list' => 'getMautic_Lead_Repository_LeadListService',
            'mautic.lead.repository.points_change_log' => 'getMautic_Lead_Repository_PointsChangeLogService',
            'mautic.lead.repository.stages_lead_log' => 'getMautic_Lead_Repository_StagesLeadLogService',
            'mautic.lead.segment.operator_options' => 'getMautic_Lead_Segment_OperatorOptionsService',
            'mautic.lead.segment.stat.campaign.share' => 'getMautic_Lead_Segment_Stat_Campaign_ShareService',
            'mautic.lead.segment.stat.dependencies' => 'getMautic_Lead_Segment_Stat_DependenciesService',
            'mautic.lead.serializer.subscriber' => 'getMautic_Lead_Serializer_SubscriberService',
            'mautic.lead.service.segment_dependency_tree_factory' => 'getMautic_Lead_Service_SegmentDependencyTreeFactoryService',
            'mautic.lead.validator.custom_field' => 'getMautic_Lead_Validator_CustomFieldService',
            'mautic.lead.validator.length' => 'getMautic_Lead_Validator_LengthService',
            'mautic.lead_list.constraint.in_use' => 'getMautic_LeadList_Constraint_InUseService',
            'mautic.maxmind.doNotSellList' => 'getMautic_Maxmind_DoNotSellListService',
            'mautic.menu.admin' => 'getMautic_Menu_AdminService',
            'mautic.menu.builder' => 'getMautic_Menu_BuilderService',
            'mautic.menu.extra' => 'getMautic_Menu_ExtraService',
            'mautic.menu.main' => 'getMautic_Menu_MainService',
            'mautic.menu.profile' => 'getMautic_Menu_ProfileService',
            'mautic.menu_renderer' => 'getMautic_MenuRendererService',
            'mautic.message.processor.bounce' => 'getMautic_Message_Processor_BounceService',
            'mautic.message.processor.feedbackloop' => 'getMautic_Message_Processor_FeedbackloopService',
            'mautic.message.processor.replier' => 'getMautic_Message_Processor_ReplierService',
            'mautic.message.processor.unsubscribe' => 'getMautic_Message_Processor_UnsubscribeService',
            'mautic.message.search.contact' => 'getMautic_Message_Search_ContactService',
            'mautic.native.connector' => 'getMautic_Native_ConnectorService',
            'mautic.notification.api' => 'getMautic_Notification_ApiService',
            'mautic.notification.campaignbundle.subscriber' => 'getMautic_Notification_Campaignbundle_SubscriberService',
            'mautic.notification.repository.stat' => 'getMautic_Notification_Repository_StatService',
            'mautic.page.helper.factory' => 'getMautic_Page_Helper_FactoryService',
            'mautic.page.helper.tracking' => 'getMautic_Page_Helper_TrackingService',
            'mautic.page.repository.hit' => 'getMautic_Page_Repository_HitService',
            'mautic.page.repository.page' => 'getMautic_Page_Repository_PageService',
            'mautic.page.repository.redirect' => 'getMautic_Page_Repository_RedirectService',
            'mautic.plugin.clearbit.lookup_helper' => 'getMautic_Plugin_Clearbit_LookupHelperService',
            'mautic.plugin.facade.reload' => 'getMautic_Plugin_Facade_ReloadService',
            'mautic.plugin.fullcontact.lookup_helper' => 'getMautic_Plugin_Fullcontact_LookupHelperService',
            'mautic.plugin.helper.reload' => 'getMautic_Plugin_Helper_ReloadService',
            'mautic.point.repository.lead_point_log' => 'getMautic_Point_Repository_LeadPointLogService',
            'mautic.point.repository.lead_trigger_log' => 'getMautic_Point_Repository_LeadTriggerLogService',
            'mautic.queue.helper.rabbitmq_consumer' => 'getMautic_Queue_Helper_RabbitmqConsumerService',
            'mautic.report.helper.report' => 'getMautic_Report_Helper_ReportService',
            'mautic.report.model.file_handler' => 'getMautic_Report_Model_FileHandlerService',
            'mautic.report.model.message_schedule' => 'getMautic_Report_Model_MessageScheduleService',
            'mautic.report.model.report_data_adapter' => 'getMautic_Report_Model_ReportDataAdapterService',
            'mautic.report.model.scheduler_builder' => 'getMautic_Report_Model_SchedulerBuilderService',
            'mautic.report.model.scheduler_date_builder' => 'getMautic_Report_Model_SchedulerDateBuilderService',
            'mautic.report.model.scheduler_planner' => 'getMautic_Report_Model_SchedulerPlannerService',
            'mautic.report.model.scheduler_template_factory' => 'getMautic_Report_Model_SchedulerTemplateFactoryService',
            'mautic.report.model.send_schedule' => 'getMautic_Report_Model_SendScheduleService',
            'mautic.report.validator.schedule_is_valid_validator' => 'getMautic_Report_Validator_ScheduleIsValidValidatorService',
            'mautic.route_loader' => 'getMautic_RouteLoaderService',
            'mautic.security.authentication_handler' => 'getMautic_Security_AuthenticationHandlerService',
            'mautic.security.logout_handler' => 'getMautic_Security_LogoutHandlerService',
            'mautic.security.saml.credential_store' => 'getMautic_Security_Saml_CredentialStoreService',
            'mautic.security.saml.entity_descriptor_store' => 'getMautic_Security_Saml_EntityDescriptorStoreService',
            'mautic.security.saml.id_store' => 'getMautic_Security_Saml_IdStoreService',
            'mautic.security.saml.trust_store' => 'getMautic_Security_Saml_TrustStoreService',
            'mautic.security.saml.user_creator' => 'getMautic_Security_Saml_UserCreatorService',
            'mautic.security.saml.username_mapper' => 'getMautic_Security_Saml_UsernameMapperService',
            'mautic.sms.broadcast.executioner' => 'getMautic_Sms_Broadcast_ExecutionerService',
            'mautic.sms.broadcast.query' => 'getMautic_Sms_Broadcast_QueryService',
            'mautic.sms.callback_handler_container' => 'getMautic_Sms_CallbackHandlerContainerService',
            'mautic.sms.helper.contact' => 'getMautic_Sms_Helper_ContactService',
            'mautic.sms.helper.reply' => 'getMautic_Sms_Helper_ReplyService',
            'mautic.sms.repository.stat' => 'getMautic_Sms_Repository_StatService',
            'mautic.sms.transport.twilio' => 'getMautic_Sms_Transport_TwilioService',
            'mautic.sms.transport_chain' => 'getMautic_Sms_TransportChainService',
            'mautic.sms.twilio.callback' => 'getMautic_Sms_Twilio_CallbackService',
            'mautic.sms.twilio.configuration' => 'getMautic_Sms_Twilio_ConfigurationService',
            'mautic.sms.twilio.transport' => 'getMautic_Sms_Twilio_TransportService',
            'mautic.social.helper.campaign' => 'getMautic_Social_Helper_CampaignService',
            'mautic.social.helper.twitter_command' => 'getMautic_Social_Helper_TwitterCommandService',
            'mautic.stage.repository.lead_stage_log' => 'getMautic_Stage_Repository_LeadStageLogService',
            'mautic.stage.repository.stage' => 'getMautic_Stage_Repository_StageService',
            'mautic.sync.logger' => 'getMautic_Sync_LoggerService',
            'mautic.tagmanager.repository.tag' => 'getMautic_Tagmanager_Repository_TagService',
            'mautic.tblprefix_subscriber' => 'getMautic_TblprefixSubscriberService',
            'mautic.translation.loader' => 'getMautic_Translation_LoaderService',
            'mautic.update.step.checks' => 'getMautic_Update_Step_ChecksService',
            'mautic.update.step.delete_cache' => 'getMautic_Update_Step_DeleteCacheService',
            'mautic.update.step.finalize' => 'getMautic_Update_Step_FinalizeService',
            'mautic.update.step.install_new_files' => 'getMautic_Update_Step_InstallNewFilesService',
            'mautic.update.step.remove_deleted_files' => 'getMautic_Update_Step_RemoveDeletedFilesService',
            'mautic.update.step.update_schema' => 'getMautic_Update_Step_UpdateSchemaService',
            'mautic.update.step.update_translations' => 'getMautic_Update_Step_UpdateTranslationsService',
            'mautic.update.step_provider' => 'getMautic_Update_StepProviderService',
            'mautic.user.form_guard_authenticator' => 'getMautic_User_FormGuardAuthenticatorService',
            'mautic.validator.emailaddress' => 'getMautic_Validator_EmailaddressService',
            'mautic.validator.leadlistaccess' => 'getMautic_Validator_LeadlistaccessService',
            'mautic.validator.oauthcallback' => 'getMautic_Validator_OauthcallbackService',
            'mautic.webhook.campaign.helper' => 'getMautic_Webhook_Campaign_HelperService',
            'mautic.webhook.http.client' => 'getMautic_Webhook_Http_ClientService',
            'mautic.webhook.notificator.webhookkillnotificator' => 'getMautic_Webhook_Notificator_WebhookkillnotificatorService',
            'mautic.webhook.repository.queue' => 'getMautic_Webhook_Repository_QueueService',
            'mautic_integration.service.transport' => 'getMauticIntegration_Service_TransportService',
            'oneup_uploader.chunk_manager' => 'getOneupUploader_ChunkManagerService',
            'oneup_uploader.controller.mautic' => 'getOneupUploader_Controller_MauticService',
            'oneup_uploader.namer.uniqid' => 'getOneupUploader_Namer_UniqidService',
            'oneup_uploader.orphanage_manager' => 'getOneupUploader_OrphanageManagerService',
            'oneup_uploader.routing.loader' => 'getOneupUploader_Routing_LoaderService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
        ];
        $this->aliases = [
            'Doctrine\\ORM\\EntityManager' => 'mautic.permission.manager',
            'Doctrine\\ORM\\EntityRepository' => 'mautic.tagmanager.repository.tag',
            'GuzzleHttp\\Client' => 'mautic.http.client',
            'Knp\\Menu\\MenuItem' => 'mautic.menu.profile',
            'MauticPlugin\\GrapesJsBuilderBundle\\Helper\\FileManager' => 'grapesjsbuilder.helper.filemanager',
            'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Config' => 'grapesjsbuilder.config',
            'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\GrapesJsBuilderIntegration' => 'mautic.integration.grapesjsbuilder',
            'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Support\\BuilderSupport' => 'grapesjsbuilder.integration.builder',
            'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Support\\ConfigSupport' => 'grapesjsbuilder.integration.configuration',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\CampaignSubscriber' => 'mautic.citrix.campaignbundle.subscriber',
            'MauticPlugin\\MauticCitrixBundle\\EventListener\\FormSubscriber' => 'mautic.citrix.formbundle.subscriber',
            'MauticPlugin\\MauticCitrixBundle\\Integration\\GotoassistIntegration' => 'mautic.integration.gotoassist',
            'MauticPlugin\\MauticCitrixBundle\\Integration\\GotomeetingIntegration' => 'mautic.integration.gotomeeting',
            'MauticPlugin\\MauticCitrixBundle\\Integration\\GototrainingIntegration' => 'mautic.integration.gototraining',
            'MauticPlugin\\MauticCitrixBundle\\Integration\\GotowebinarIntegration' => 'mautic.integration.gotowebinar',
            'MauticPlugin\\MauticCitrixBundle\\Model\\CitrixModel' => 'mautic.citrix.model.citrix',
            'MauticPlugin\\MauticCitrixBundle\\Tests\\DataFixtures\\ORM\\LoadCitrixData' => 'mautic.citrix.fixture.load_citrix_data',
            'MauticPlugin\\MauticClearbitBundle\\Helper\\LookupHelper' => 'mautic.plugin.clearbit.lookup_helper',
            'MauticPlugin\\MauticClearbitBundle\\Integration\\ClearbitIntegration' => 'mautic.integration.clearbit',
            'MauticPlugin\\MauticCloudStorageBundle\\Integration\\AmazonS3Integration' => 'mautic.integration.amazons3',
            'MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration' => 'mautic.integration.connectwise',
            'MauticPlugin\\MauticCrmBundle\\Integration\\DynamicsIntegration' => 'mautic.integration.dynamics',
            'MauticPlugin\\MauticCrmBundle\\Integration\\HubspotIntegration' => 'mautic.integration.hubspot',
            'MauticPlugin\\MauticCrmBundle\\Integration\\SalesforceIntegration' => 'mautic.integration.salesforce',
            'MauticPlugin\\MauticCrmBundle\\Integration\\SugarcrmIntegration' => 'mautic.integration.sugarcrm',
            'MauticPlugin\\MauticCrmBundle\\Integration\\VtigerIntegration' => 'mautic.integration.vtiger',
            'MauticPlugin\\MauticCrmBundle\\Integration\\ZohoIntegration' => 'mautic.integration.zoho',
            'MauticPlugin\\MauticCrmBundle\\Services\\Transport' => 'mautic_integration.service.transport',
            'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\ConstantContactIntegration' => 'mautic.integration.constantcontact',
            'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\IcontactIntegration' => 'mautic.integration.icontact',
            'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\MailchimpIntegration' => 'mautic.integration.mailchimp',
            'MauticPlugin\\MauticFocusBundle\\Helper\\IframeAvailabilityChecker' => 'mautic.focus.helper.iframe_availability_checker',
            'MauticPlugin\\MauticFocusBundle\\Helper\\TokenHelper' => 'mautic.focus.helper.token',
            'MauticPlugin\\MauticFullContactBundle\\Helper\\LookupHelper' => 'mautic.plugin.fullcontact.lookup_helper',
            'MauticPlugin\\MauticFullContactBundle\\Integration\\FullContactIntegration' => 'mautic.integration.fullcontact',
            'MauticPlugin\\MauticGmailBundle\\Integration\\GmailIntegration' => 'mautic.integration.gmail',
            'MauticPlugin\\MauticOutlookBundle\\Integration\\OutlookIntegration' => 'mautic.integration.outlook',
            'MauticPlugin\\MauticSocialBundle\\Helper\\CampaignEventHelper' => 'mautic.social.helper.campaign',
            'MauticPlugin\\MauticSocialBundle\\Helper\\TwitterCommandHelper' => 'mautic.social.helper.twitter_command',
            'MauticPlugin\\MauticSocialBundle\\Integration\\FacebookIntegration' => 'mautic.integration.facebook',
            'MauticPlugin\\MauticSocialBundle\\Integration\\FoursquareIntegration' => 'mautic.integration.foursquare',
            'MauticPlugin\\MauticSocialBundle\\Integration\\InstagramIntegration' => 'mautic.integration.instagram',
            'MauticPlugin\\MauticSocialBundle\\Integration\\TwitterIntegration' => 'mautic.integration.twitter',
            'MauticPlugin\\MauticTagManagerBundle\\Integration\\TagManagerIntegration' => 'mautic.integration.tagmanager',
            'Mautic\\ApiBundle\\EventListener\\PreAuthorizationEventListener' => 'mautic.api.oauth.event_listener',
            'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator' => 'mautic.validator.oauthcallback',
            'Mautic\\ApiBundle\\Helper\\EntityResultHelper' => 'mautic.api.helper.entity_result',
            'Mautic\\AssetBundle\\DataFixtures\\ORM\\LoadAssetData' => 'mautic.asset.fixture.asset',
            'Mautic\\AssetBundle\\ErrorHandler\\DropzoneErrorHandler' => 'mautic.asset.upload.error.handler',
            'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions' => 'mautic.asset.permissions',
            'Mautic\\CacheBundle\\Cache\\Adapter\\FilesystemTagAwareAdapter' => 'mautic.cache.adapter.filesystem',
            'Mautic\\CacheBundle\\Cache\\Adapter\\MemcachedTagAwareAdapter' => 'mautic.cache.adapter.memcached',
            'Mautic\\CacheBundle\\Cache\\Adapter\\RedisTagAwareAdapter' => 'mautic.cache.adapter.redis',
            'Mautic\\CacheBundle\\Cache\\CacheProvider' => 'mautic.cache.provider',
            'Mautic\\CacheBundle\\EventListener\\CacheClearSubscriber' => 'mautic.cache.clear_cache_subscriber',
            'Mautic\\CampaignBundle\\DataFixtures\\ORM\\CampaignData' => 'mautic.campaign.fixture.campaign',
            'Mautic\\CampaignBundle\\EventCollector\\EventCollector' => 'mautic.campaign.event_collector',
            'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\InactiveContactFinder' => 'mautic.campaign.contact_finder.inactive',
            'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\KickoffContactFinder' => 'mautic.campaign.contact_finder.kickoff',
            'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\ScheduledContactFinder' => 'mautic.campaign.contact_finder.scheduled',
            'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ActionDispatcher' => 'mautic.campaign.dispatcher.action',
            'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ConditionDispatcher' => 'mautic.campaign.dispatcher.condition',
            'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\DecisionDispatcher' => 'mautic.campaign.dispatcher.decision',
            'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\LegacyEventDispatcher' => 'mautic.campaign.legacy_event_dispatcher',
            'Mautic\\CampaignBundle\\Executioner\\EventExecutioner' => 'mautic.campaign.event_executioner',
            'Mautic\\CampaignBundle\\Executioner\\Event\\ActionExecutioner' => 'mautic.campaign.executioner.action',
            'Mautic\\CampaignBundle\\Executioner\\Event\\ConditionExecutioner' => 'mautic.campaign.executioner.condition',
            'Mautic\\CampaignBundle\\Executioner\\Event\\DecisionExecutioner' => 'mautic.campaign.executioner.decision',
            'Mautic\\CampaignBundle\\Executioner\\Helper\\DecisionHelper' => 'mautic.campaign.helper.decision',
            'Mautic\\CampaignBundle\\Executioner\\Helper\\InactiveHelper' => 'mautic.campaign.helper.inactivity',
            'Mautic\\CampaignBundle\\Executioner\\Helper\\NotificationHelper' => 'mautic.campaign.helper.notification',
            'Mautic\\CampaignBundle\\Executioner\\InactiveExecutioner' => 'mautic.campaign.executioner.inactive',
            'Mautic\\CampaignBundle\\Executioner\\KickoffExecutioner' => 'mautic.campaign.executioner.kickoff',
            'Mautic\\CampaignBundle\\Executioner\\Logger\\EventLogger' => 'mautic.campaign.event_logger',
            'Mautic\\CampaignBundle\\Executioner\\RealTimeExecutioner' => 'mautic.campaign.executioner.realtime',
            'Mautic\\CampaignBundle\\Executioner\\ScheduledExecutioner' => 'mautic.campaign.executioner.scheduled',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\EventScheduler' => 'mautic.campaign.scheduler',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\DateTime' => 'mautic.campaign.scheduler.datetime',
            'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\Interval' => 'mautic.campaign.scheduler.interval',
            'Mautic\\CampaignBundle\\Helper\\RemovedContactTracker' => 'mautic.campaign.helper.removed_contact_tracker',
            'Mautic\\CampaignBundle\\Membership\\Action\\Adder' => 'mautic.campaign.membership.adder',
            'Mautic\\CampaignBundle\\Membership\\Action\\Remover' => 'mautic.campaign.membership.remover',
            'Mautic\\CampaignBundle\\Membership\\EventDispatcher' => 'mautic.campaign.membership.event_dispatcher',
            'Mautic\\CampaignBundle\\Membership\\MembershipBuilder' => 'mautic.campaign.membership.builder',
            'Mautic\\CampaignBundle\\Membership\\MembershipManager' => 'mautic.campaign.membership.manager',
            'Mautic\\CampaignBundle\\Service\\Campaign' => 'mautic.campaign.service.campaign',
            'Mautic\\ChannelBundle\\Helper\\ChannelListHelper' => 'mautic.channel.helper.channel_list',
            'Mautic\\CoreBundle\\Cache\\MiddlewareCacheWarmer' => 'mautic.cache.warmer.middleware',
            'Mautic\\CoreBundle\\Configurator\\Configurator' => 'mautic.configurator',
            'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\IntNullableProcessor' => 'mautic.di.env_processor.int_nullable',
            'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\MauticConstProcessor' => 'mautic.di.env_processor.mauticconst',
            'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\NullableProcessor' => 'mautic.di.env_processor.nullable',
            'Mautic\\CoreBundle\\Doctrine\\Helper\\ColumnSchemaHelper' => 'mautic.schema.helper.column',
            'Mautic\\CoreBundle\\Doctrine\\Helper\\IndexSchemaHelper' => 'mautic.schema.helper.index',
            'Mautic\\CoreBundle\\Doctrine\\Helper\\TableSchemaHelper' => 'mautic.schema.helper.table',
            'Mautic\\CoreBundle\\Doctrine\\Loader\\MauticFixturesLoader' => 'mautic.doctrine.loader.mautic_fixtures_loader',
            'Mautic\\CoreBundle\\Doctrine\\Provider\\GeneratedColumnsProvider' => 'mautic.generated.columns.provider',
            'Mautic\\CoreBundle\\Doctrine\\Provider\\GeneratedColumnsProviderInterface' => 'mautic.generated.columns.provider',
            'Mautic\\CoreBundle\\Doctrine\\Provider\\VersionProvider' => 'mautic.database.version.provider',
            'Mautic\\CoreBundle\\Doctrine\\Provider\\VersionProviderInterface' => 'mautic.database.version.provider',
            'Mautic\\CoreBundle\\EventListener\\DoctrineEventsSubscriber' => 'mautic.tblprefix_subscriber',
            'Mautic\\CoreBundle\\EventListener\\DoctrineGeneratedColumnsListener' => 'mautic.generated.columns.doctrine.listener',
            'Mautic\\CoreBundle\\EventListener\\ErrorHandlingListener' => 'mautic.core.errorhandler.subscriber',
            'Mautic\\CoreBundle\\EventListener\\ExceptionListener' => 'mautic.exception.listener',
            'Mautic\\CoreBundle\\EventListener\\RouterSubscriber' => 'mautic.core.subscriber.router',
            'Mautic\\CoreBundle\\Factory\\IpLookupFactory' => 'mautic.ip_lookup.factory',
            'Mautic\\CoreBundle\\Factory\\PageHelperFactory' => 'mautic.page.helper.factory',
            'Mautic\\CoreBundle\\Form\\Type\\ConfigType' => 'mautic.form.type.coreconfig',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType' => 'mautic.form.type.dynamic_content_filter_entry_filters',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator' => 'mautic.form.list.validator.circular',
            'Mautic\\CoreBundle\\Helper\\AppVersion' => 'mautic.helper.app_version',
            'Mautic\\CoreBundle\\Helper\\BuilderTokenHelper' => 'mautic.helper.token_builder',
            'Mautic\\CoreBundle\\Helper\\BuilderTokenHelperFactory' => 'mautic.helper.token_builder.factory',
            'Mautic\\CoreBundle\\Helper\\BundleHelper' => 'mautic.helper.bundle',
            'Mautic\\CoreBundle\\Helper\\CacheHelper' => 'mautic.helper.cache',
            'Mautic\\CoreBundle\\Helper\\CacheStorageHelper' => 'mautic.helper.cache_storage',
            'Mautic\\CoreBundle\\Helper\\CommandHelper' => 'mautic.helper.command',
            'Mautic\\CoreBundle\\Helper\\ComposerHelper' => 'mautic.helper.composer',
            'Mautic\\CoreBundle\\Helper\\CookieHelper' => 'mautic.helper.cookie',
            'Mautic\\CoreBundle\\Helper\\CoreParametersHelper' => 'mautic.helper.core_parameters',
            'Mautic\\CoreBundle\\Helper\\EncryptionHelper' => 'mautic.helper.encryption',
            'Mautic\\CoreBundle\\Helper\\ExportHelper' => 'mautic.helper.export',
            'Mautic\\CoreBundle\\Helper\\FilePathResolver' => 'mautic.helper.file_path_resolver',
            'Mautic\\CoreBundle\\Helper\\FileProperties' => 'mautic.helper.file_properties',
            'Mautic\\CoreBundle\\Helper\\FileUploader' => 'mautic.helper.file_uploader',
            'Mautic\\CoreBundle\\Helper\\Filesystem' => 'mautic.filesystem',
            'Mautic\\CoreBundle\\Helper\\HashHelper\\HashHelper' => 'mautic.helper.hash',
            'Mautic\\CoreBundle\\Helper\\InputHelper' => 'mautic.helper.input_helper',
            'Mautic\\CoreBundle\\Helper\\IpLookupHelper' => 'mautic.helper.ip_lookup',
            'Mautic\\CoreBundle\\Helper\\MaxMindDoNotSellDownloadHelper' => 'mautic.helper.maxmind_do_not_sell_download',
            'Mautic\\CoreBundle\\Helper\\PathsHelper' => 'mautic.helper.paths',
            'Mautic\\CoreBundle\\Helper\\PhoneNumberHelper' => 'mautic.helper.phone_number',
            'Mautic\\CoreBundle\\Helper\\PreUpdateCheckHelper' => 'mautic.helper.update_checks',
            'Mautic\\CoreBundle\\Helper\\RandomHelper\\RandomHelper' => 'mautic.helper.random',
            'Mautic\\CoreBundle\\Helper\\ThemeHelper' => 'mautic.helper.theme',
            'Mautic\\CoreBundle\\Helper\\TrailingSlashHelper' => 'mautic.helper.trailing_slash',
            'Mautic\\CoreBundle\\Helper\\UpdateHelper' => 'mautic.helper.update',
            'Mautic\\CoreBundle\\Helper\\Update\\Github\\ReleaseParser' => 'mautic.helper.update.release_parser',
            'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckDatabaseDriverAndVersion' => 'mautic.update.checks.database',
            'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckPhpVersion' => 'mautic.update.checks.php',
            'Mautic\\CoreBundle\\Helper\\UrlHelper' => 'mautic.helper.url',
            'Mautic\\CoreBundle\\Helper\\UserHelper' => 'mautic.helper.user',
            'Mautic\\CoreBundle\\IpLookup\\AbstractLookup' => 'mautic.ip_lookup',
            'Mautic\\CoreBundle\\IpLookup\\DoNotSellList\\MaxMindDoNotSellList' => 'mautic.maxmind.doNotSellList',
            'Mautic\\CoreBundle\\Loader\\RouteLoader' => 'mautic.route_loader',
            'Mautic\\CoreBundle\\Loader\\TranslationLoader' => 'mautic.translation.loader',
            'Mautic\\CoreBundle\\Menu\\MenuBuilder' => 'mautic.menu.builder',
            'Mautic\\CoreBundle\\Menu\\MenuHelper' => 'mautic.helper.menu',
            'Mautic\\CoreBundle\\Menu\\MenuRenderer' => 'mautic.menu_renderer',
            'Mautic\\CoreBundle\\Monolog\\Handler\\FileLogHandler' => 'mautic.monolog.handler',
            'Mautic\\CoreBundle\\Monolog\\LogProcessor' => 'mautic.core.service.log_processor',
            'Mautic\\CoreBundle\\Security\\Cryptography\\Cipher\\Symmetric\\OpenSSLCipher' => 'mautic.cipher.openssl',
            'Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions' => 'mautic.security',
            'Mautic\\CoreBundle\\Service\\BulkNotification' => 'mautic.core.service.bulk_notification',
            'Mautic\\CoreBundle\\Service\\FlashBag' => 'mautic.core.service.flashbag',
            'Mautic\\CoreBundle\\Service\\LocalFileAdapterService' => 'mautic.core.service.local_file_adapter',
            'Mautic\\CoreBundle\\Twig\\Helper\\AnalyticsHelper' => 'mautic.helper.twig.analytics',
            'Mautic\\CoreBundle\\Twig\\Helper\\ButtonHelper' => 'mautic.helper.twig.button',
            'Mautic\\CoreBundle\\Twig\\Helper\\ConfigHelper' => 'mautic.helper.twig.config',
            'Mautic\\CoreBundle\\Twig\\Helper\\ContentHelper' => 'mautic.helper.twig.content',
            'Mautic\\CoreBundle\\Twig\\Helper\\DateHelper' => 'mautic.helper.twig.date',
            'Mautic\\CoreBundle\\Twig\\Helper\\FormatterHelper' => 'mautic.helper.twig.formatter',
            'Mautic\\CoreBundle\\Twig\\Helper\\GravatarHelper' => 'mautic.helper.twig.gravatar',
            'Mautic\\CoreBundle\\Twig\\Helper\\MautibotHelper' => 'mautic.helper.twig.mautibot',
            'Mautic\\CoreBundle\\Twig\\Helper\\MenuHelper' => 'mautic.helper.twig.menu',
            'Mautic\\CoreBundle\\Twig\\Helper\\SecurityHelper' => 'mautic.helper.twig.security',
            'Mautic\\CoreBundle\\Twig\\Helper\\VersionHelper' => 'mautic.helper.twig.version',
            'Mautic\\CoreBundle\\Update\\StepProvider' => 'mautic.update.step_provider',
            'Mautic\\CoreBundle\\Update\\Step\\DeleteCacheStep' => 'mautic.update.step.delete_cache',
            'Mautic\\CoreBundle\\Update\\Step\\FinalizeUpdateStep' => 'mautic.update.step.finalize',
            'Mautic\\CoreBundle\\Update\\Step\\InstallNewFilesStep' => 'mautic.update.step.install_new_files',
            'Mautic\\CoreBundle\\Update\\Step\\PreUpdateChecksStep' => 'mautic.update.step.checks',
            'Mautic\\CoreBundle\\Update\\Step\\RemoveDeletedFilesStep' => 'mautic.update.step.remove_deleted_files',
            'Mautic\\CoreBundle\\Update\\Step\\UpdateSchemaStep' => 'mautic.update.step.update_schema',
            'Mautic\\CoreBundle\\Update\\Step\\UpdateTranslationsStep' => 'mautic.update.step.update_translations',
            'Mautic\\CoreBundle\\Validator\\FileUploadValidator' => 'mautic.core.validator.file_upload',
            'Mautic\\DashboardBundle\\Dashboard\\Widget' => 'mautic.dashboard.widget',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType' => 'mautic.form.type.dwc_entry_filters',
            'Mautic\\DynamicContentBundle\\Helper\\DynamicContentHelper' => 'mautic.helper.dynamicContent',
            'Mautic\\EmailBundle\\DataFixtures\\ORM\\LoadEmailData' => 'mautic.email.fixture.email',
            'Mautic\\EmailBundle\\DependencyInjection\\EnvProcessor\\MailerDsnEnvVarProcessor' => 'mautic.di.env_processor.mailerdsn',
            'Mautic\\EmailBundle\\Helper\\EmailValidator' => 'mautic.validator.email',
            'Mautic\\EmailBundle\\Helper\\MailHelper' => 'mautic.helper.mailer',
            'Mautic\\EmailBundle\\Helper\\RequestStorageHelper' => 'mautic.email.helper.request.storage',
            'Mautic\\EmailBundle\\Helper\\StatsCollectionHelper' => 'mautic.email.helper.stats_collection',
            'Mautic\\EmailBundle\\MonitoredEmail\\Fetcher' => 'mautic.email.fetcher',
            'Mautic\\EmailBundle\\MonitoredEmail\\Mailbox' => 'mautic.helper.mailbox',
            'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce' => 'mautic.message.processor.bounce',
            'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\FeedbackLoop' => 'mautic.message.processor.feedbackloop',
            'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Reply' => 'mautic.message.processor.replier',
            'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Unsubscribe' => 'mautic.message.processor.unsubscribe',
            'Mautic\\EmailBundle\\MonitoredEmail\\Search\\ContactFinder' => 'mautic.message.search.contact',
            'Mautic\\EmailBundle\\Stat\\StatHelper' => 'mautic.email.helper.stat',
            'Mautic\\EmailBundle\\Stats\\Helper\\BouncedHelper' => 'mautic.email.stats.helper_bounced',
            'Mautic\\EmailBundle\\Stats\\Helper\\ClickedHelper' => 'mautic.email.stats.helper_clicked',
            'Mautic\\EmailBundle\\Stats\\Helper\\FailedHelper' => 'mautic.email.stats.helper_failed',
            'Mautic\\EmailBundle\\Stats\\Helper\\OpenedHelper' => 'mautic.email.stats.helper_opened',
            'Mautic\\EmailBundle\\Stats\\Helper\\SentHelper' => 'mautic.email.stats.helper_sent',
            'Mautic\\EmailBundle\\Stats\\Helper\\UnsubscribedHelper' => 'mautic.email.stats.helper_unsubscribed',
            'Mautic\\EmailBundle\\Stats\\StatHelperContainer' => 'mautic.email.stats.helper_container',
            'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator' => 'mautic.email.validator.email_or_token_list_validator',
            'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator' => 'mautic.email.validator.multiple_emails_valid_validator',
            'Mautic\\FormBundle\\Collector\\AlreadyMappedFieldCollector' => 'mautic.form.collector.already.mapped.field',
            'Mautic\\FormBundle\\Collector\\FieldCollector' => 'mautic.form.collector.field',
            'Mautic\\FormBundle\\Collector\\MappedObjectCollector' => 'mautic.form.collector.mapped.object',
            'Mautic\\FormBundle\\Collector\\ObjectCollector' => 'mautic.form.collector.object',
            'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormData' => 'mautic.form.fixture.form',
            'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormResultData' => 'mautic.form.fixture.form_result',
            'Mautic\\FormBundle\\Event\\Service\\FieldValueTransformer' => 'mautic.form.service.field.value.transformer',
            'Mautic\\FormBundle\\Form\\Type\\FieldType' => 'mautic.form.type.field',
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType' => 'mautic.form.type.form_submitaction_sendemail',
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType' => 'mautic.form.type.form_submitaction_repost',
            'Mautic\\FormBundle\\Helper\\FormFieldHelper' => 'mautic.helper.form.field_helper',
            'Mautic\\FormBundle\\Helper\\FormUploader' => 'mautic.form.helper.form_uploader',
            'Mautic\\FormBundle\\Helper\\PropertiesAccessor' => 'mautic.form.helper.properties.accessor',
            'Mautic\\FormBundle\\Helper\\TokenHelper' => 'mautic.form.helper.token',
            'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator' => 'mautic.form.validator.constraint.file_extension_constraint_validator',
            'Mautic\\FormBundle\\Validator\\UploadFieldValidator' => 'mautic.form.validator.upload_field_validator',
            'Mautic\\InstallBundle\\Configurator\\Step\\CheckStep' => 'mautic.install.configurator.step.check',
            'Mautic\\InstallBundle\\Configurator\\Step\\DoctrineStep' => 'mautic.install.configurator.step.doctrine',
            'Mautic\\InstallBundle\\Configurator\\Step\\UserStep' => 'mautic.install.configurator.step.user',
            'Mautic\\InstallBundle\\EventListener\\DoctrineEventSubscriber' => 'mautic.install.leadcolumns',
            'Mautic\\InstallBundle\\InstallFixtures\\ORM\\GrapesJsData' => 'mautic.install.fixture.grape_js',
            'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LeadFieldData' => 'mautic.install.fixture.lead_field',
            'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LoadReportData' => 'mautic.install.fixture.report_data',
            'Mautic\\InstallBundle\\InstallFixtures\\ORM\\RoleData' => 'mautic.install.fixture.role',
            'Mautic\\InstallBundle\\Install\\InstallService' => 'mautic.install.service',
            'Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory' => 'mautic.integrations.auth_provider.api_key',
            'Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\HttpFactory' => 'mautic.integrations.auth_provider.basic_auth',
            'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth1aTwoLegged\\HttpFactory' => 'mautic.integrations.auth_provider.oauth1atwolegged',
            'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\HttpFactory' => 'mautic.integrations.auth_provider.oauth2threelegged',
            'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory' => 'mautic.integrations.auth_provider.oauth2twolegged',
            'Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory' => 'mautic.integrations.auth_provider.token_persistence_factory',
            'Mautic\\IntegrationsBundle\\EventListener\\ControllerSubscriber' => 'mautic.integrations.subscriber.controller',
            'Mautic\\IntegrationsBundle\\Facade\\EncryptionService' => 'mautic.integrations.service.encryption',
            'Mautic\\IntegrationsBundle\\Helper\\AuthIntegrationsHelper' => 'mautic.integrations.helper.auth_integrations',
            'Mautic\\IntegrationsBundle\\Helper\\BuilderIntegrationsHelper' => 'mautic.integrations.helper.builder_integrations',
            'Mautic\\IntegrationsBundle\\Helper\\ConfigIntegrationsHelper' => 'mautic.integrations.helper.config_integrations',
            'Mautic\\IntegrationsBundle\\Helper\\FieldValidationHelper' => 'mautic.integrations.helper.field_validator',
            'Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper' => 'mautic.integrations.helper',
            'Mautic\\IntegrationsBundle\\Helper\\SyncIntegrationsHelper' => 'mautic.integrations.helper.sync_integrations',
            'Mautic\\IntegrationsBundle\\Helper\\TokenParser' => 'mautic.integrations.token.parser',
            'Mautic\\IntegrationsBundle\\Sync\\Helper\\MappingHelper' => 'mautic.integrations.helper.sync_mapping',
            'Mautic\\IntegrationsBundle\\Sync\\Helper\\RelationsHelper' => 'mautic.integrations.sync.helper.relations',
            'Mautic\\IntegrationsBundle\\Sync\\Helper\\SyncDateHelper' => 'mautic.integrations.helper.sync_date',
            'Mautic\\IntegrationsBundle\\Sync\\Logger\\DebugLogger' => 'mautic.sync.logger',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\BulkNotification' => 'mautic.integrations.sync.notification.bulk_notification',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\CompanyNotificationHandler' => 'mautic.integrations.sync.notification.handler_company',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\ContactNotificationHandler' => 'mautic.integrations.sync.notification.handler_contact',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\HandlerContainer' => 'mautic.integrations.sync.notification.handler_container',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\CompanyHelper' => 'mautic.integrations.sync.notification.helper_company',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\OwnerProvider' => 'mautic.integrations.sync.notification.helper.owner_provider',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\RouteHelper' => 'mautic.integrations.sync.notification.helper_route',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserHelper' => 'mautic.integrations.sync.notification.helper_user',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationBuilder' => 'mautic.integrations.sync.notification.user_notification_builder',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationHelper' => 'mautic.integrations.sync.notification.helper_user_notification',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserSummaryNotificationHelper' => 'mautic.integrations.sync.notification.helper_user_summary_notification',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Notifier' => 'mautic.integrations.sync.notifier',
            'Mautic\\IntegrationsBundle\\Sync\\Notification\\Writer' => 'mautic.integrations.sync.notification.writer',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Helper\\FieldHelper' => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\FieldValidator' => 'mautic.integrations.internal.field_validator',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\OrderExecutioner' => 'mautic.integrations.sync.data_exchange.mautic.order_executioner',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\ReferenceResolver' => 'mautic.integrations.internal.reference_resolver',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\CompanyObjectHelper' => 'mautic.integrations.helper.company_object',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\ContactObjectHelper' => 'mautic.integrations.helper.contact_object',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectProvider' => 'mautic.integrations.internal.object_provider',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FieldBuilder' => 'mautic.integrations.sync.data_exchange.mautic.field_builder',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FullObjectReportBuilder' => 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\PartialObjectReportBuilder' => 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder',
            'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\MauticSyncDataExchange' => 'mautic.integrations.sync.data_exchange.mautic',
            'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\SyncJudge' => 'mautic.integrations.helper.sync_judge',
            'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Helper\\ValueHelper' => 'mautic.integrations.sync.sync_process.value_helper',
            'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\IntegrationSyncProcess' => 'mautic.integrations.sync.integration_process',
            'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\ObjectChangeGenerator' => 'mautic.integrations.sync.integration_process.object_change_generator',
            'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\MauticSyncProcess' => 'mautic.integrations.sync.internal_process',
            'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\ObjectChangeGenerator' => 'mautic.integrations.sync.internal_process.object_change_generator',
            'Mautic\\IntegrationsBundle\\Sync\\SyncService\\SyncService' => 'mautic.integrations.sync.service',
            'Mautic\\IntegrationsBundle\\Sync\\VariableExpresser\\VariableExpresserHelper' => 'mautic.integrations.helper.variable_expresser',
            'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategorizedLeadListData' => 'mautic.lead.fixture.categorizedleadlists',
            'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategoryData' => 'mautic.lead.fixture.category',
            'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCompanyData' => 'mautic.lead.fixture.company',
            'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadData' => 'mautic.lead.fixture.contact',
            'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadListData' => 'mautic.lead.fixture.segment',
            'Mautic\\LeadBundle\\Deduplicate\\CompanyDeduper' => 'mautic.company.deduper',
            'Mautic\\LeadBundle\\Deduplicate\\ContactDeduper' => 'mautic.lead.deduper',
            'Mautic\\LeadBundle\\Deduplicate\\ContactMerger' => 'mautic.lead.merger',
            'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerAuditLogSubscriber' => 'mautic.lead.export_scheduled_audit_log_subscriber',
            'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerLoggerSubscriber' => 'mautic.lead.export_scheduled_logger_subscriber',
            'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerNotificationSubscriber' => 'mautic.lead.export_scheduled_notification_subscriber',
            'Mautic\\LeadBundle\\EventListener\\ContactScheduledExportSubscriber' => 'mautic.lead.contact_scheduled_export.subscriber',
            'Mautic\\LeadBundle\\EventListener\\DoctrineSubscriber' => 'mautic.lead.doctrine.subscriber',
            'Mautic\\LeadBundle\\EventListener\\SerializerSubscriber' => 'mautic.lead.serializer.subscriber',
            'Mautic\\LeadBundle\\Field\\BackgroundService' => 'mautic.lead.field.settings.background_service',
            'Mautic\\LeadBundle\\Field\\CustomFieldColumn' => 'mautic.lead.field.custom_field_column',
            'Mautic\\LeadBundle\\Field\\CustomFieldIndex' => 'mautic.lead.field.custom_field_index',
            'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnBackgroundJobDispatcher' => 'mautic.lead.field.dispatcher.field_column_background_dispatcher',
            'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnDispatcher' => 'mautic.lead.field.dispatcher.field_column_dispatcher',
            'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldSaveDispatcher' => 'mautic.lead.field.dispatcher.field_save_dispatcher',
            'Mautic\\LeadBundle\\Field\\FieldList' => 'mautic.lead.field.field_list',
            'Mautic\\LeadBundle\\Field\\FieldsWithUniqueIdentifier' => 'mautic.lead.field.fields_with_unique_identifier',
            'Mautic\\LeadBundle\\Field\\IdentifierFields' => 'mautic.lead.field.identifier_fields',
            'Mautic\\LeadBundle\\Field\\LeadFieldSaver' => 'mautic.lead.field.lead_field_saver',
            'Mautic\\LeadBundle\\Field\\Notification\\CustomFieldNotification' => 'mautic.lead.field.notification.custom_field',
            'Mautic\\LeadBundle\\Field\\SchemaDefinition' => 'mautic.lead.field.schema_definition',
            'Mautic\\LeadBundle\\Field\\Settings\\BackgroundSettings' => 'mautic.lead.field.settings.background_settings',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator' => 'mautic.validator.emailaddress',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator' => 'mautic.validator.leadlistaccess',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator' => 'mautic.lead_list.constraint.in_use',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator' => 'mautic.lead.constraint.alias',
            'Mautic\\LeadBundle\\Helper\\ContactRequestHelper' => 'mautic.lead.helper.contact_request_helper',
            'Mautic\\LeadBundle\\Helper\\FieldAliasHelper' => 'mautic.helper.field.alias',
            'Mautic\\LeadBundle\\Helper\\LeadChangeEventDispatcher' => 'mautic.lead.event.dispatcher',
            'Mautic\\LeadBundle\\Helper\\PrimaryCompanyHelper' => 'mautic.lead.helper.primary_company',
            'Mautic\\LeadBundle\\Helper\\SegmentCountCacheHelper' => 'mautic.helper.segment.count.cache',
            'Mautic\\LeadBundle\\Provider\\FieldChoicesProvider' => 'mautic.lead.provider.fieldChoices',
            'Mautic\\LeadBundle\\Provider\\FilterOperatorProvider' => 'mautic.lead.provider.fillterOperator',
            'Mautic\\LeadBundle\\Provider\\FormAdjustmentsProvider' => 'mautic.lead.provider.formAdjustments',
            'Mautic\\LeadBundle\\Provider\\TypeOperatorProvider' => 'mautic.lead.provider.typeOperator',
            'Mautic\\LeadBundle\\Report\\FieldsBuilder' => 'mautic.lead.reportbundle.fields_builder',
            'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterFactory' => 'mautic.lead.model.lead_segment_filter_factory',
            'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterOperator' => 'mautic.lead.model.lead_segment_filter_operator',
            'Mautic\\LeadBundle\\Segment\\ContactSegmentService' => 'mautic.lead.model.lead_segment_service',
            'Mautic\\LeadBundle\\Segment\\Decorator\\BaseDecorator' => 'mautic.lead.model.lead_segment_decorator_base',
            'Mautic\\LeadBundle\\Segment\\Decorator\\CompanyDecorator' => 'mautic.lead.model.lead_segment_decorator_company',
            'Mautic\\LeadBundle\\Segment\\Decorator\\CustomMappedDecorator' => 'mautic.lead.model.lead_segment_decorator_custom_mapped',
            'Mautic\\LeadBundle\\Segment\\Decorator\\DateDecorator' => 'mautic.lead.model.lead_segment_decorator_date',
            'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\DateOptionFactory' => 'mautic.lead.model.lead_segment.decorator.date.optionFactory',
            'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\TimezoneResolver' => 'mautic.lead.model.lead_segment.timezoneResolver',
            'Mautic\\LeadBundle\\Segment\\Decorator\\DecoratorFactory' => 'mautic.lead.model.lead_segment_decorator_factory',
            'Mautic\\LeadBundle\\Segment\\OperatorOptions' => 'mautic.lead.segment.operator_options',
            'Mautic\\LeadBundle\\Segment\\Query\\ContactSegmentQueryBuilder' => 'mautic.lead.repository.lead_segment_query_builder',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\BaseFilterQueryBuilder' => 'mautic.lead.query.builder.basic',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ChannelClickQueryBuilder' => 'mautic.lead.query.builder.channel_click.value',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ComplexRelationValueFilterQueryBuilder' => 'mautic.lead.query.builder.complex_relation.value',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\DoNotContactFilterQueryBuilder' => 'mautic.lead.query.builder.special.dnc',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignFuncFilterQueryBuilder' => 'mautic.lead.query.builder.foreign.func',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignValueFilterQueryBuilder' => 'mautic.lead.query.builder.foreign.value',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\IntegrationCampaignFilterQueryBuilder' => 'mautic.lead.query.builder.special.integration',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SegmentReferenceFilterQueryBuilder' => 'mautic.lead.query.builder.special.leadlist',
            'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SessionsFilterQueryBuilder' => 'mautic.lead.query.builder.special.sessions',
            'Mautic\\LeadBundle\\Segment\\RandomParameterName' => 'mautic.lead.model.random_parameter_name',
            'Mautic\\LeadBundle\\Segment\\RelativeDate' => 'mautic.lead.model.relative_date',
            'Mautic\\LeadBundle\\Segment\\Stat\\SegmentCampaignShare' => 'mautic.lead.segment.stat.campaign.share',
            'Mautic\\LeadBundle\\Segment\\Stat\\SegmentChartQueryFactory' => 'mautic.lead.segment.stat.chart.query.factory',
            'Mautic\\LeadBundle\\Segment\\Stat\\SegmentDependencies' => 'mautic.lead.segment.stat.dependencies',
            'Mautic\\LeadBundle\\Segment\\TableSchemaColumnsCache' => 'mautic.lead.model.lead_segment_schema_cache',
            'Mautic\\LeadBundle\\Services\\ContactColumnsDictionary' => 'mautic.lead.columns.dictionary',
            'Mautic\\LeadBundle\\Services\\ContactSegmentFilterDictionary' => 'mautic.lead.repository.lead_segment_filter_descriptor',
            'Mautic\\LeadBundle\\Services\\SegmentDependencyTreeFactory' => 'mautic.lead.service.segment_dependency_tree_factory',
            'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadClickData' => 'mautic.lead.fixture.test.click',
            'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadDncData' => 'mautic.lead.fixture.test.dnc',
            'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadPageHitData' => 'mautic.lead.fixture.test.page_hit',
            'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadSegmentsData' => 'mautic.lead.fixture.test.segment',
            'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadTagData' => 'mautic.lead.fixture.test.tag',
            'Mautic\\LeadBundle\\Tracker\\ContactTracker' => 'mautic.tracker.contact',
            'Mautic\\LeadBundle\\Tracker\\DeviceTracker' => 'mautic.tracker.device',
            'Mautic\\LeadBundle\\Tracker\\Factory\\DeviceDetectorFactory\\DeviceDetectorFactory' => 'mautic.lead.factory.device_detector_factory',
            'Mautic\\LeadBundle\\Tracker\\Service\\ContactTrackingService\\ContactTrackingService' => 'mautic.lead.service.contact_tracking_service',
            'Mautic\\LeadBundle\\Tracker\\Service\\DeviceCreatorService\\DeviceCreatorService' => 'mautic.lead.service.device_creator_service',
            'Mautic\\LeadBundle\\Tracker\\Service\\DeviceTrackingService\\DeviceTrackingService' => 'mautic.lead.service.device_tracking_service',
            'Mautic\\LeadBundle\\Twig\\Helper\\AvatarHelper' => 'mautic.helper.twig.avatar',
            'Mautic\\LeadBundle\\Twig\\Helper\\DefaultAvatarHelper' => 'mautic.helper.twig.default_avatar',
            'Mautic\\LeadBundle\\Twig\\Helper\\DncReasonHelper' => 'mautic.helper.twig.dnc_reason',
            'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator' => 'mautic.lead.validator.length',
            'Mautic\\LeadBundle\\Validator\\CustomFieldValidator' => 'mautic.lead.validator.custom_field',
            'Mautic\\MarketplaceBundle\\Api\\Connection' => 'marketplace.api.connection',
            'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions' => 'marketplace.permissions',
            'Mautic\\MarketplaceBundle\\Service\\Allowlist' => 'marketplace.service.allowlist',
            'Mautic\\MarketplaceBundle\\Service\\Config' => 'marketplace.service.config',
            'Mautic\\MarketplaceBundle\\Service\\PluginCollector' => 'marketplace.service.plugin_collector',
            'Mautic\\MarketplaceBundle\\Service\\RouteProvider' => 'marketplace.service.route_provider',
            'Mautic\\NotificationBundle\\Api\\OneSignalApi' => 'mautic.notification.api',
            'Mautic\\NotificationBundle\\EventListener\\CampaignSubscriber' => 'mautic.notification.campaignbundle.subscriber',
            'Mautic\\NotificationBundle\\Helper\\NotificationHelper' => 'mautic.helper.notification',
            'Mautic\\NotificationBundle\\Integration\\OneSignalIntegration' => 'mautic.integration.onesignal',
            'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageCategoryData' => 'mautic.page.fixture.page_category',
            'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageData' => 'mautic.page.fixture.page',
            'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageHitData' => 'mautic.page.fixture.page_hit',
            'Mautic\\PageBundle\\Helper\\TokenHelper' => 'mautic.page.helper.token',
            'Mautic\\PageBundle\\Helper\\TrackingHelper' => 'mautic.page.helper.tracking',
            'Mautic\\PluginBundle\\Facade\\ReloadFacade' => 'mautic.plugin.facade.reload',
            'Mautic\\PluginBundle\\Helper\\IntegrationHelper' => 'mautic.helper.integration',
            'Mautic\\PluginBundle\\Helper\\ReloadHelper' => 'mautic.plugin.helper.reload',
            'Mautic\\QueueBundle\\Helper\\RabbitMqConsumer' => 'mautic.queue.helper.rabbitmq_consumer',
            'Mautic\\QueueBundle\\Queue\\QueueService' => 'mautic.queue.service',
            'Mautic\\ReportBundle\\Adapter\\ReportDataAdapter' => 'mautic.report.model.report_data_adapter',
            'Mautic\\ReportBundle\\Helper\\ReportHelper' => 'mautic.report.helper.report',
            'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerBuilder' => 'mautic.report.model.scheduler_builder',
            'Mautic\\ReportBundle\\Scheduler\\Date\\DateBuilder' => 'mautic.report.model.scheduler_date_builder',
            'Mautic\\ReportBundle\\Scheduler\\Factory\\SchedulerTemplateFactory' => 'mautic.report.model.scheduler_template_factory',
            'Mautic\\ReportBundle\\Scheduler\\Model\\FileHandler' => 'mautic.report.model.file_handler',
            'Mautic\\ReportBundle\\Scheduler\\Model\\MessageSchedule' => 'mautic.report.model.message_schedule',
            'Mautic\\ReportBundle\\Scheduler\\Model\\SchedulerPlanner' => 'mautic.report.model.scheduler_planner',
            'Mautic\\ReportBundle\\Scheduler\\Model\\SendSchedule' => 'mautic.report.model.send_schedule',
            'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator' => 'mautic.report.validator.schedule_is_valid_validator',
            'Mautic\\SmsBundle\\Api\\TwilioApi' => 'mautic.sms.transport.twilio',
            'Mautic\\SmsBundle\\Broadcast\\BroadcastExecutioner' => 'mautic.sms.broadcast.executioner',
            'Mautic\\SmsBundle\\Broadcast\\BroadcastQuery' => 'mautic.sms.broadcast.query',
            'Mautic\\SmsBundle\\Callback\\HandlerContainer' => 'mautic.sms.callback_handler_container',
            'Mautic\\SmsBundle\\Helper\\ContactHelper' => 'mautic.sms.helper.contact',
            'Mautic\\SmsBundle\\Helper\\ReplyHelper' => 'mautic.sms.helper.reply',
            'Mautic\\SmsBundle\\Helper\\SmsHelper' => 'mautic.helper.sms',
            'Mautic\\SmsBundle\\Integration\\TwilioIntegration' => 'mautic.integration.twilio',
            'Mautic\\SmsBundle\\Integration\\Twilio\\Configuration' => 'mautic.sms.twilio.configuration',
            'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioCallback' => 'mautic.sms.twilio.callback',
            'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioTransport' => 'mautic.sms.twilio.transport',
            'Mautic\\SmsBundle\\Sms\\TransportChain' => 'mautic.sms.transport_chain',
            'Mautic\\StatsBundle\\Aggregate\\Collector' => 'mautic.stats.aggregate.collector',
            'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadRoleData' => 'mautic.user.fixture.role',
            'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadUserData' => 'mautic.user.fixture.user',
            'Mautic\\UserBundle\\Entity\\UserTokenRepositoryInterface' => 'Mautic\\UserBundle\\Entity\\UserTokenRepository',
            'Mautic\\UserBundle\\EventListener\\LogoutListener' => 'mautic.security.logout_handler',
            'Mautic\\UserBundle\\Model\\UserToken\\UserTokenService' => 'mautic.user.model.user_token_service',
            'Mautic\\UserBundle\\Security\\Authentication\\AuthenticationHandler' => 'mautic.security.authentication_handler',
            'Mautic\\UserBundle\\Security\\Authenticator\\FormAuthenticator' => 'mautic.user.form_guard_authenticator',
            'Mautic\\UserBundle\\Security\\Provider\\UserProvider' => 'mautic.user.provider',
            'Mautic\\UserBundle\\Security\\SAML\\Store\\CredentialsStore' => 'mautic.security.saml.credential_store',
            'Mautic\\UserBundle\\Security\\SAML\\Store\\EntityDescriptorStore' => 'mautic.security.saml.entity_descriptor_store',
            'Mautic\\UserBundle\\Security\\SAML\\Store\\IdStore' => 'mautic.security.saml.id_store',
            'Mautic\\UserBundle\\Security\\SAML\\Store\\TrustOptionsStore' => 'mautic.security.saml.trust_store',
            'Mautic\\UserBundle\\Security\\SAML\\User\\UserCreator' => 'mautic.security.saml.user_creator',
            'Mautic\\UserBundle\\Security\\SAML\\User\\UserMapper' => 'mautic.security.saml.username_mapper',
            'Mautic\\WebhookBundle\\Helper\\CampaignHelper' => 'mautic.webhook.campaign.helper',
            'Mautic\\WebhookBundle\\Http\\Client' => 'mautic.webhook.http.client',
            'Mautic\\WebhookBundle\\Notificator\\WebhookKillNotificator' => 'mautic.webhook.notificator.webhookkillnotificator',
            'Oneup\\UploaderBundle\\Templating\\Helper\\UploaderHelper' => 'oneup_uploader.templating.uploader_helper',
            'Psr\\Http\\Client\\ClientInterface' => 'mautic.http.client',
            'Symfony\\Component\\Filesystem\\Filesystem' => 'symfony.filesystem',
            'Symfony\\Component\\Finder\\Finder' => 'symfony.finder',
            'Symfony\\Contracts\\HttpClient\\HttpClientInterface' => 'mautic.native.connector',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'grapesjsbuilder.model' => 'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel',
            'jms_serializer.authorization_checker' => '.container.private.security.authorization_checker',
            'jms_serializer.instances.default' => 'jms_serializer',
            'marketplace.model.package' => 'Mautic\\MarketplaceBundle\\Model\\PackageModel',
            'mautic.api.model.client' => 'Mautic\\ApiBundle\\Model\\ClientModel',
            'mautic.asset.helper.token' => 'Mautic\\AssetBundle\\Helper\\TokenHelper',
            'mautic.asset.model.asset' => 'Mautic\\AssetBundle\\Model\\AssetModel',
            'mautic.campaign.model.campaign' => 'Mautic\\CampaignBundle\\Model\\CampaignModel',
            'mautic.campaign.model.event' => 'Mautic\\CampaignBundle\\Model\\EventModel',
            'mautic.campaign.model.event_log' => 'Mautic\\CampaignBundle\\Model\\EventLogModel',
            'mautic.campaign.model.summary' => 'Mautic\\CampaignBundle\\Model\\SummaryModel',
            'mautic.category.model.category' => 'Mautic\\CategoryBundle\\Model\\CategoryModel',
            'mautic.category.model.contact.action' => 'Mautic\\CategoryBundle\\Model\\ContactActionModel',
            'mautic.channel.model.channel.action' => 'Mautic\\ChannelBundle\\Model\\ChannelActionModel',
            'mautic.channel.model.frequency.action' => 'Mautic\\ChannelBundle\\Model\\FrequencyActionModel',
            'mautic.channel.model.message' => 'Mautic\\ChannelBundle\\Model\\MessageModel',
            'mautic.channel.model.queue' => 'Mautic\\ChannelBundle\\Model\\MessageQueueModel',
            'mautic.config' => 'mautic.helper.core_parameters',
            'mautic.config.config_change_logger' => 'Mautic\\ConfigBundle\\Service\\ConfigChangeLogger',
            'mautic.config.form.escape_transformer' => 'Mautic\\ConfigBundle\\Form\\Type\\EscapeTransformer',
            'mautic.config.form.restriction_helper' => 'Mautic\\ConfigBundle\\Form\\Helper\\RestrictionHelper',
            'mautic.config.mapper' => 'Mautic\\ConfigBundle\\Mapper\\ConfigMapper',
            'mautic.config.model.sysinfo' => 'Mautic\\ConfigBundle\\Model\\SysinfoModel',
            'mautic.core.model.auditlog' => 'Mautic\\CoreBundle\\Model\\AuditLogModel',
            'mautic.core.model.form' => 'Mautic\\CoreBundle\\Model\\FormModel',
            'mautic.core.model.notification' => 'Mautic\\CoreBundle\\Model\\NotificationModel',
            'mautic.dashboard.model.dashboard' => 'Mautic\\DashboardBundle\\Model\\DashboardModel',
            'mautic.dynamicContent.model.dynamicContent' => 'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel',
            'mautic.email.model.email' => 'Mautic\\EmailBundle\\Model\\EmailModel',
            'mautic.email.model.send_email_to_contacts' => 'Mautic\\EmailBundle\\Model\\SendEmailToContact',
            'mautic.email.model.send_email_to_user' => 'Mautic\\EmailBundle\\Model\\SendEmailToUser',
            'mautic.email.model.transport_callback' => 'Mautic\\EmailBundle\\Model\\TransportCallback',
            'mautic.factory' => 'Mautic\\CoreBundle\\Factory\\MauticFactory',
            'mautic.focus.model.focus' => 'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel',
            'mautic.form.model.action' => 'Mautic\\FormBundle\\Model\\ActionModel',
            'mautic.form.model.field' => 'Mautic\\FormBundle\\Model\\FieldModel',
            'mautic.form.model.form' => 'Mautic\\FormBundle\\Model\\FormModel',
            'mautic.form.model.submission' => 'Mautic\\FormBundle\\Model\\SubmissionModel',
            'mautic.form.model.submission_result_loader' => 'Mautic\\FormBundle\\Model\\SubmissionResultLoader',
            'mautic.helper.assetgeneration' => 'Mautic\\CoreBundle\\Helper\\AssetGenerationHelper',
            'mautic.helper.email.address' => 'Mautic\\CoreBundle\\Helper\\EmailAddressHelper',
            'mautic.helper.language' => 'Mautic\\CoreBundle\\Helper\\LanguageHelper',
            'mautic.lead.model.company' => 'Mautic\\LeadBundle\\Model\\CompanyModel',
            'mautic.lead.model.company_report_data' => 'Mautic\\LeadBundle\\Model\\CompanyReportData',
            'mautic.lead.model.device' => 'Mautic\\LeadBundle\\Model\\DeviceModel',
            'mautic.lead.model.dnc' => 'Mautic\\LeadBundle\\Model\\DoNotContact',
            'mautic.lead.model.export_scheduler' => 'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel',
            'mautic.lead.model.field' => 'Mautic\\LeadBundle\\Model\\FieldModel',
            'mautic.lead.model.import' => 'Mautic\\LeadBundle\\Model\\ImportModel',
            'mautic.lead.model.ipaddress' => 'Mautic\\LeadBundle\\Model\\IpAddressModel',
            'mautic.lead.model.lead' => 'Mautic\\LeadBundle\\Model\\LeadModel',
            'mautic.lead.model.list' => 'Mautic\\LeadBundle\\Model\\ListModel',
            'mautic.lead.model.note' => 'Mautic\\LeadBundle\\Model\\NoteModel',
            'mautic.lead.model.segment.action' => 'Mautic\\LeadBundle\\Model\\SegmentActionModel',
            'mautic.lead.model.tag' => 'Mautic\\LeadBundle\\Model\\TagModel',
            'mautic.model.factory' => 'Mautic\\CoreBundle\\Factory\\ModelFactory',
            'mautic.notification.model.notification' => 'Mautic\\NotificationBundle\\Model\\NotificationModel',
            'mautic.page.model.page' => 'Mautic\\PageBundle\\Model\\PageModel',
            'mautic.page.model.redirect' => 'Mautic\\PageBundle\\Model\\RedirectModel',
            'mautic.page.model.trackable' => 'Mautic\\PageBundle\\Model\\TrackableModel',
            'mautic.page.model.tracking.404' => 'Mautic\\PageBundle\\Model\\Tracking404Model',
            'mautic.page.model.video' => 'Mautic\\PageBundle\\Model\\VideoModel',
            'mautic.plugin.model.integration_entity' => 'Mautic\\PluginBundle\\Model\\IntegrationEntityModel',
            'mautic.plugin.model.plugin' => 'Mautic\\PluginBundle\\Model\\PluginModel',
            'mautic.point.model.point' => 'Mautic\\PointBundle\\Model\\PointModel',
            'mautic.point.model.trigger' => 'Mautic\\PointBundle\\Model\\TriggerModel',
            'mautic.point.model.triggerevent' => 'Mautic\\PointBundle\\Model\\TriggerEventModel',
            'mautic.report.model.csv_exporter' => 'Mautic\\ReportBundle\\Model\\CsvExporter',
            'mautic.report.model.excel_exporter' => 'Mautic\\ReportBundle\\Model\\ExcelExporter',
            'mautic.report.model.export_handler' => 'Mautic\\ReportBundle\\Model\\ExportHandler',
            'mautic.report.model.report' => 'Mautic\\ReportBundle\\Model\\ReportModel',
            'mautic.report.model.report_export_options' => 'Mautic\\ReportBundle\\Model\\ReportExportOptions',
            'mautic.report.model.report_exporter' => 'Mautic\\ReportBundle\\Model\\ReportExporter',
            'mautic.report.model.report_file_writer' => 'Mautic\\ReportBundle\\Model\\ReportFileWriter',
            'mautic.report.model.schedule_model' => 'Mautic\\ReportBundle\\Model\\ScheduleModel',
            'mautic.sms.api' => 'mautic.sms.twilio.transport',
            'mautic.sms.model.sms' => 'Mautic\\SmsBundle\\Model\\SmsModel',
            'mautic.social.model.monitoring' => 'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel',
            'mautic.social.model.postcount' => 'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel',
            'mautic.social.model.tweet' => 'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel',
            'mautic.stage.model.stage' => 'Mautic\\StageBundle\\Model\\StageModel',
            'mautic.tagmanager.model.tag' => 'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel',
            'mautic.user.model.role' => 'Mautic\\UserBundle\\Model\\RoleModel',
            'mautic.user.model.user' => 'Mautic\\UserBundle\\Model\\UserModel',
            'mautic.webhook.model.webhook' => 'Mautic\\WebhookBundle\\Model\\WebhookModel',
            'sms_api' => 'mautic.sms.twilio.transport',
            'transifex.factory' => 'Mautic\\CoreBundle\\Factory\\TransifexFactory',
            'twig.helper.assets' => 'Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true)
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    /*
     * Gets the public '.container.private.form.factory' shared service.
     *
     * @return \Symfony\Component\Form\FormFactory
     */
    protected function get_Container_Private_Form_FactoryService()
    {
        $a = ($this->privates['form.registry'] ?? $this->getForm_RegistryService());

        if (isset($this->services['.container.private.form.factory'])) {
            return $this->services['.container.private.form.factory'];
        }

        return $this->services['.container.private.form.factory'] = new \Symfony\Component\Form\FormFactory($a);
    }

    /*
     * Gets the public '.container.private.security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected function get_Container_Private_Security_AuthorizationCheckerService()
    {
        $a = ($this->privates['security.access.decision_manager'] ?? $this->getSecurity_Access_DecisionManagerService());

        if (isset($this->services['.container.private.security.authorization_checker'])) {
            return $this->services['.container.private.security.authorization_checker'];
        }

        return $this->services['.container.private.security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($this->services['.container.private.security.token_storage'] ?? $this->get_Container_Private_Security_TokenStorageService()), $a, false);
    }

    /*
     * Gets the public '.container.private.security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected function get_Container_Private_Security_Csrf_TokenManagerService()
    {
        return $this->services['.container.private.security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), ($this->privates['security.csrf.token_storage'] ?? $this->getSecurity_Csrf_TokenStorageService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public '.container.private.security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected function get_Container_Private_Security_TokenStorageService()
    {
        return $this->services['.container.private.security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($this->privates['security.untracked_token_storage'] ?? ($this->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage())), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /*
     * Gets the public '.container.private.session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    protected function get_Container_Private_SessionService()
    {
        $a = ($this->privates['session.factory'] ?? $this->getSession_FactoryService());

        if (isset($this->services['.container.private.session'])) {
            return $this->services['.container.private.session'];
        }

        return $this->services['.container.private.session'] = $a->createSession();
    }

    /*
     * Gets the public '.container.private.twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected function get_Container_Private_TwigService()
    {
        $a = new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 4));
        $a->addPath((\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles'), 'bundles');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CoreBundle'), 'MauticCore');
        $a->addPath((\dirname(__DIR__, 4).'/themes'), 'themes');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/symfony/security-bundle/Resources/views'), 'Security');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/symfony/security-bundle/Resources/views'), '!Security');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-bundle/Resources/views'), '!Doctrine');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), 'DoctrineMigrations');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), '!DoctrineMigrations');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu-bundle/src/Resources/views'), 'KnpMenu');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu-bundle/src/Resources/views'), '!KnpMenu');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/views'), 'FOSOAuthServer');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/views'), '!FOSOAuthServer');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/jms/serializer-bundle/Resources/views'), 'JMSSerializer');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/jms/serializer-bundle/Resources/views'), '!JMSSerializer');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/lightsaml/sp-bundle/src/LightSaml/SpBundle/Resources/views'), 'LightSamlSp');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/lightsaml/sp-bundle/src/LightSaml/SpBundle/Resources/views'), '!LightSamlSp');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle/Resources/views'), 'NoxlogicRateLimit');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle/Resources/views'), '!NoxlogicRateLimit');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/helios-ag/fm-elfinder-bundle/src/Resources/views'), 'FMElfinder');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/helios-ag/fm-elfinder-bundle/src/Resources/views'), '!FMElfinder');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ApiBundle/Resources/views'), 'MauticApi');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ApiBundle/Resources/views'), '!MauticApi');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/AssetBundle/Resources/views'), 'MauticAsset');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/AssetBundle/Resources/views'), '!MauticAsset');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CampaignBundle/Resources/views'), 'MauticCampaign');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CampaignBundle/Resources/views'), '!MauticCampaign');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CategoryBundle/Resources/views'), 'MauticCategory');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CategoryBundle/Resources/views'), '!MauticCategory');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ChannelBundle/Resources/views'), 'MauticChannel');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ChannelBundle/Resources/views'), '!MauticChannel');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ConfigBundle/Resources/views'), 'MauticConfig');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ConfigBundle/Resources/views'), '!MauticConfig');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CoreBundle/Resources/views'), 'MauticCore');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/CoreBundle/Resources/views'), '!MauticCore');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/DashboardBundle/Resources/views'), 'MauticDashboard');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/DashboardBundle/Resources/views'), '!MauticDashboard');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle/Resources/views'), 'MauticDynamicContent');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle/Resources/views'), '!MauticDynamicContent');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/EmailBundle/Resources/views'), 'MauticEmail');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/EmailBundle/Resources/views'), '!MauticEmail');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/FormBundle/Resources/views'), 'MauticForm');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/FormBundle/Resources/views'), '!MauticForm');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/InstallBundle/Resources/views'), 'MauticInstall');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/InstallBundle/Resources/views'), '!MauticInstall');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle/Resources/views'), 'Integrations');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle/Resources/views'), '!Integrations');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/LeadBundle/Resources/views'), 'MauticLead');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/LeadBundle/Resources/views'), '!MauticLead');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle/Resources/views'), 'Marketplace');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle/Resources/views'), '!Marketplace');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/MessengerBundle/Resources/views'), 'MauticMessenger');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/MessengerBundle/Resources/views'), '!MauticMessenger');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/NotificationBundle/Resources/views'), 'MauticNotification');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/NotificationBundle/Resources/views'), '!MauticNotification');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PageBundle/Resources/views'), 'MauticPage');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PageBundle/Resources/views'), '!MauticPage');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PluginBundle/Resources/views'), 'MauticPlugin');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PluginBundle/Resources/views'), '!MauticPlugin');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PointBundle/Resources/views'), 'MauticPoint');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/PointBundle/Resources/views'), '!MauticPoint');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ReportBundle/Resources/views'), 'MauticReport');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/ReportBundle/Resources/views'), '!MauticReport');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/SmsBundle/Resources/views'), 'MauticSms');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/SmsBundle/Resources/views'), '!MauticSms');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/StageBundle/Resources/views'), 'MauticStage');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/StageBundle/Resources/views'), '!MauticStage');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/UserBundle/Resources/views'), 'MauticUser');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/UserBundle/Resources/views'), '!MauticUser');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/WebhookBundle/Resources/views'), 'MauticWebhook');
        $a->addPath((\dirname(__DIR__, 4).'/app/bundles/WebhookBundle/Resources/views'), '!MauticWebhook');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle/Resources/views'), 'GrapesJsBuilder');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle/Resources/views'), '!GrapesJsBuilder');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticFullContactBundle/Resources/views'), 'MauticFullContact');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticFullContactBundle/Resources/views'), '!MauticFullContact');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticClearbitBundle/Resources/views'), 'MauticClearbit');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticClearbitBundle/Resources/views'), '!MauticClearbit');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticOutlookBundle/Resources/views'), 'MauticOutlook');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticOutlookBundle/Resources/views'), '!MauticOutlook');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle/Resources/views'), 'MauticTagManager');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle/Resources/views'), '!MauticTagManager');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticCrmBundle/Resources/views'), 'MauticCrm');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticCrmBundle/Resources/views'), '!MauticCrm');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticFocusBundle/Resources/views'), 'MauticFocus');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticFocusBundle/Resources/views'), '!MauticFocus');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticSocialBundle/Resources/views'), 'MauticSocial');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticSocialBundle/Resources/views'), '!MauticSocial');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticEmailMarketingBundle/Resources/views'), 'MauticEmailMarketing');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticEmailMarketingBundle/Resources/views'), '!MauticEmailMarketing');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle/Resources/views'), 'MauticCitrix');
        $a->addPath((\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle/Resources/views'), '!MauticCitrix');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');
        $a->addPath((\dirname(__DIR__, 5).'/vendor/symfony/twig-bridge/Resources/views/Form'));

        $this->services['.container.private.twig'] = $instance = new \Twig\Environment($a, ['cache' => $this->getEnv('resolve:MAUTIC_TWIG_CACHE_DIR'), 'auto_reload' => true, 'strict_variables' => true, 'autoescape' => 'name', 'charset' => 'UTF-8', 'debug' => false]);

        $b = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));
        $c = ($this->services['.container.private.security.token_storage'] ?? $this->get_Container_Private_Security_TokenStorageService());
        $d = ($this->services['translator'] ?? $this->getTranslator2Service());
        $e = ($this->services['router'] ?? $this->getRouterService());
        $f = new \Symfony\Bridge\Twig\AppVariable();
        $f->setEnvironment('prod');
        $f->setDebug(false);
        if ($this->has('.container.private.security.token_storage')) {
            $f->setTokenStorage($c);
        }
        if ($this->has('request_stack')) {
            $f->setRequestStack($b);
        }

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CsrfExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService())));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(($this->services['.container.private.security.authorization_checker'] ?? $this->get_Container_Private_Security_AuthorizationCheckerService()), new \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator($b, ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService()), $c)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($d));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(($this->privates['assets.packages'] ?? $this->getAssets_PackagesService())));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($e));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($this->privates['debug.stopwatch'] ?? ($this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(new \Symfony\Component\HttpFoundation\UrlHelper($b, $e)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension($d));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension(($this->privates['knp_menu.helper'] ?? $this->getKnpMenu_HelperService()), ($this->services['knp_menu.matcher'] ?? $this->getKnpMenu_MatcherService()), ($this->privates['knp_menu.manipulator'] ?? ($this->privates['knp_menu.manipulator'] = new \Knp\Menu\Util\MenuManipulator()))));
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerRuntimeExtension('jms_'));
        $instance->addExtension(($this->services['oneup_uploader.twig.extension.uploader'] ?? $this->getOneupUploader_Twig_Extension_UploaderService()));
        $instance->addExtension(new \FM\ElfinderBundle\Twig\Extension\FMElfinderExtension($instance));
        $instance->addExtension(new \Exercise\HTMLPurifierBundle\Twig\HTMLPurifierExtension());
        $instance->addExtension(($this->services['Mautic\\ChannelBundle\\Twig\\ChannelExtension'] ?? $this->getChannelExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\AnalyticsExtension'] ?? $this->getAnalyticsExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\AppExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\AppExtension'] = new \Mautic\CoreBundle\Twig\Extension\AppExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\AssetExtension'] ?? $this->getAssetExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\BarChartExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\BarChartExtension'] = new \Mautic\CoreBundle\Twig\Extension\BarChartExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'] ?? $this->getButtonExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ClassExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ClassExtension'] = new \Mautic\CoreBundle\Twig\Extension\ClassExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ConfigExtension'] ?? $this->getConfigExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ContentExtension'] ?? $this->getContentExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\CoreHelpersExtension'] ?? $this->getCoreHelpersExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\DateExtension'] ?? $this->getDateExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\DateTimeExtension'] ?? $this->getDateTimeExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\DeviceExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\DeviceExtension'] = new \Mautic\CoreBundle\Twig\Extension\DeviceExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\EmojiExtension'] ?? $this->getEmojiExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\EnumExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\EnumExtension'] = new \Mautic\CoreBundle\Twig\Extension\EnumExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ExceptionExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ExceptionExtension'] = new \Mautic\CoreBundle\Twig\Extension\ExceptionExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\FormExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\FormExtension'] = new \Mautic\CoreBundle\Twig\Extension\FormExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\FormatterExtension'] ?? $this->getFormatterExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\GravatarExtension'] ?? $this->getGravatarExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\HtmlExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\HtmlExtension'] = new \Mautic\CoreBundle\Twig\Extension\HtmlExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\InputExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\InputExtension'] = new \Mautic\CoreBundle\Twig\Extension\InputExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\MautibotExtension'] ?? $this->getMautibotExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\MenuExtension'] ?? $this->getMenuExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\NumericExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\NumericExtension'] = new \Mautic\CoreBundle\Twig\Extension\NumericExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ObjectExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ObjectExtension'] = new \Mautic\CoreBundle\Twig\Extension\ObjectExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\SecurityExtension'] ?? $this->getSecurityExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\SerializerExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\SerializerExtension'] = new \Mautic\CoreBundle\Twig\Extension\SerializerExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\SlotExtension'] ?? $this->getSlotExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\StorageExtension'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Extension\\StorageExtension'] = new \Mautic\CoreBundle\Twig\Extension\StorageExtension())));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\TranslatorExtension'] ?? $this->getTranslatorExtensionService()));
        $instance->addExtension(($this->services['Mautic\\CoreBundle\\Twig\\Extension\\VersionExtension'] ?? $this->getVersionExtensionService()));
        $instance->addExtension(($this->services['Mautic\\FormBundle\\Twig\\Extension\\FormFieldExtension'] ?? ($this->services['Mautic\\FormBundle\\Twig\\Extension\\FormFieldExtension'] = new \Mautic\FormBundle\Twig\Extension\FormFieldExtension())));
        $instance->addExtension(($this->services['Mautic\\InstallBundle\\Twig\\TwigExtension'] ?? ($this->services['Mautic\\InstallBundle\\Twig\\TwigExtension'] = new \Mautic\InstallBundle\Twig\TwigExtension())));
        $instance->addExtension(($this->services['Mautic\\LeadBundle\\Twig\\Extension\\DncReasonExtension'] ?? $this->getDncReasonExtensionService()));
        $instance->addExtension(($this->services['Mautic\\LeadBundle\\Twig\\Extension\\FormFieldExtension'] ?? ($this->services['Mautic\\LeadBundle\\Twig\\Extension\\FormFieldExtension'] = new \Mautic\LeadBundle\Twig\Extension\FormFieldExtension())));
        $instance->addExtension(($this->services['Mautic\\LeadBundle\\Twig\\Extension\\LeadExtension'] ?? $this->getLeadExtensionService()));
        $instance->addExtension(($this->services['MauticPlugin\\MauticFocusBundle\\Twig\\Extension\\FocusBundleExtension'] ?? ($this->services['MauticPlugin\\MauticFocusBundle\\Twig\\Extension\\FocusBundleExtension'] = new \MauticPlugin\MauticFocusBundle\Twig\Extension\FocusBundleExtension())));
        $instance->addExtension(($this->services['MauticPlugin\\MauticCitrixBundle\\Twig\\Extension\\CitrixExtension'] ?? ($this->services['MauticPlugin\\MauticCitrixBundle\\Twig\\Extension\\CitrixExtension'] = new \MauticPlugin\MauticCitrixBundle\Twig\Extension\CitrixExtension())));
        $instance->addGlobal('app', $f);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', true],
            'JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => ['privates', 'jms_serializer.twig_extension.serializer_runtime_helper', 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService', true],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', true],
            'Symfony\\Component\\Form\\FormRenderer' => ['privates', 'twig.form.renderer', 'getTwig_Form_RendererService', true],
            'Exercise\\HTMLPurifierBundle\\Twig\\HTMLPurifierRuntime' => ['privates', 'exercise_html_purifier.twig.runtime', 'getExerciseHtmlPurifier_Twig_RuntimeService', true],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Component\\Form\\FormRenderer' => '?',
            'Exercise\\HTMLPurifierBundle\\Twig\\HTMLPurifierRuntime' => '?',
        ])));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public '.container.private.validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected function get_Container_Private_ValidatorService()
    {
        $a = ($this->privates['validator.builder'] ?? $this->getValidator_BuilderService());

        if (isset($this->services['.container.private.validator'])) {
            return $this->services['.container.private.validator'];
        }

        return $this->services['.container.private.validator'] = $a->getValidator();
    }

    /*
     * Gets the public 'MauticPlugin\MauticCitrixBundle\Twig\Extension\CitrixExtension' shared autowired service.
     *
     * @return \MauticPlugin\MauticCitrixBundle\Twig\Extension\CitrixExtension
     */
    protected function getCitrixExtensionService()
    {
        return $this->services['MauticPlugin\\MauticCitrixBundle\\Twig\\Extension\\CitrixExtension'] = new \MauticPlugin\MauticCitrixBundle\Twig\Extension\CitrixExtension();
    }

    /*
     * Gets the public 'MauticPlugin\MauticFocusBundle\EventListener\FocusSubscriber' shared autowired service.
     *
     * @return \MauticPlugin\MauticFocusBundle\EventListener\FocusSubscriber
     */
    protected function getFocusSubscriberService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'];
        }
        $b = ($this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'] ?? $this->getAuditLogModelService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'];
        }
        $c = ($this->services['Mautic\\PageBundle\\Model\\TrackableModel'] ?? $this->getTrackableModelService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'];
        }
        $d = ($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'] ?? $this->getFocusModelService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'];
        }

        return $this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'] = new \MauticPlugin\MauticFocusBundle\EventListener\FocusSubscriber($a, ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), $b, $c, ($this->services['mautic.page.helper.token'] ?? $this->getMautic_Page_Helper_TokenService()), ($this->services['Mautic\\AssetBundle\\Helper\\TokenHelper'] ?? $this->getTokenHelperService()), $d, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'MauticPlugin\MauticFocusBundle\Model\FocusModel' shared autowired service.
     *
     * @return \MauticPlugin\MauticFocusBundle\Model\FocusModel
     */
    protected function getFocusModelService()
    {
        $a = ($this->services['Mautic\\FormBundle\\Model\\FormModel'] ?? $this->getFormModelService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $b = ($this->services['Mautic\\PageBundle\\Model\\TrackableModel'] ?? $this->getTrackableModelService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $c = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $d = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $e = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $f = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $g = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }
        $h = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'])) {
            return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'];
        }

        return $this->services['MauticPlugin\\MauticFocusBundle\\Model\\FocusModel'] = new \MauticPlugin\MauticFocusBundle\Model\FocusModel($a, $b, $c, $d, $e, $f, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $g, $h, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'MauticPlugin\MauticFocusBundle\Twig\Extension\FocusBundleExtension' shared autowired service.
     *
     * @return \MauticPlugin\MauticFocusBundle\Twig\Extension\FocusBundleExtension
     */
    protected function getFocusBundleExtensionService()
    {
        return $this->services['MauticPlugin\\MauticFocusBundle\\Twig\\Extension\\FocusBundleExtension'] = new \MauticPlugin\MauticFocusBundle\Twig\Extension\FocusBundleExtension();
    }

    /*
     * Gets the public 'Mautic\ApiBundle\EventListener\ApiSubscriber' shared autowired service.
     *
     * @return \Mautic\ApiBundle\EventListener\ApiSubscriber
     */
    protected function getApiSubscriberService()
    {
        return $this->services['Mautic\\ApiBundle\\EventListener\\ApiSubscriber'] = new \Mautic\ApiBundle\EventListener\ApiSubscriber(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()));
    }

    /*
     * Gets the public 'Mautic\AssetBundle\Helper\TokenHelper' shared autowired service.
     *
     * @return \Mautic\AssetBundle\Helper\TokenHelper
     */
    protected function getTokenHelperService()
    {
        $a = ($this->services['Mautic\\AssetBundle\\Model\\AssetModel'] ?? $this->getAssetModelService());

        if (isset($this->services['Mautic\\AssetBundle\\Helper\\TokenHelper'])) {
            return $this->services['Mautic\\AssetBundle\\Helper\\TokenHelper'];
        }

        return $this->services['Mautic\\AssetBundle\\Helper\\TokenHelper'] = new \Mautic\AssetBundle\Helper\TokenHelper($a);
    }

    /*
     * Gets the public 'Mautic\AssetBundle\Model\AssetModel' shared autowired service.
     *
     * @return \Mautic\AssetBundle\Model\AssetModel
     */
    protected function getAssetModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\AssetBundle\\Model\\AssetModel'])) {
            return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'];
        }
        $b = ($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'] ?? $this->getCategoryModelService());

        if (isset($this->services['Mautic\\AssetBundle\\Model\\AssetModel'])) {
            return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'];
        }
        $c = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\AssetBundle\\Model\\AssetModel'])) {
            return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\AssetBundle\\Model\\AssetModel'])) {
            return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'];
        }
        $e = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\AssetBundle\\Model\\AssetModel'])) {
            return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'];
        }

        return $this->services['Mautic\\AssetBundle\\Model\\AssetModel'] = new \Mautic\AssetBundle\Model\AssetModel($a, $b, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), ($this->services['mautic.lead.service.device_creator_service'] ?? ($this->services['mautic.lead.service.device_creator_service'] = new \Mautic\LeadBundle\Tracker\Service\DeviceCreatorService\DeviceCreatorService())), ($this->services['mautic.lead.factory.device_detector_factory'] ?? $this->getMautic_Lead_Factory_DeviceDetectorFactoryService()), ($this->services['mautic.lead.service.device_tracking_service'] ?? $this->getMautic_Lead_Service_DeviceTrackingServiceService()), $c, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $d, $e, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\CampaignBundle\Model\CampaignModel' shared autowired service.
     *
     * @return \Mautic\CampaignBundle\Model\CampaignModel
     */
    protected function getCampaignModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $b = ($this->services['Mautic\\FormBundle\\Model\\FormModel'] ?? $this->getFormModelService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $c = ($this->services['mautic.campaign.event_collector'] ?? $this->getMautic_Campaign_EventCollectorService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $d = ($this->services['mautic.campaign.membership.builder'] ?? $this->getMautic_Campaign_Membership_BuilderService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $e = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $f = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }
        $g = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'])) {
            return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'];
        }

        return $this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'] = new \Mautic\CampaignBundle\Model\CampaignModel($a, $b, $c, $d, $e, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $f, $g, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\CategoryBundle\Model\CategoryModel' shared autowired service.
     *
     * @return \Mautic\CategoryBundle\Model\CategoryModel
     */
    protected function getCategoryModelService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'])) {
            return $this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'];
        }
        $b = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'])) {
            return $this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'];
        }

        return $this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'] = new \Mautic\CategoryBundle\Model\CategoryModel(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $a, $b, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\ChannelBundle\Model\MessageQueueModel' shared autowired service.
     *
     * @return \Mautic\ChannelBundle\Model\MessageQueueModel
     */
    protected function getMessageQueueModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'])) {
            return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'])) {
            return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'];
        }
        $c = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'])) {
            return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'])) {
            return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'];
        }
        $e = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'])) {
            return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'];
        }

        return $this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'] = new \Mautic\ChannelBundle\Model\MessageQueueModel($a, $b, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $c, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $d, $e, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'Mautic\ChannelBundle\Twig\ChannelExtension' shared autowired service.
     *
     * @return \Mautic\ChannelBundle\Twig\ChannelExtension
     */
    protected function getChannelExtensionService()
    {
        $a = ($this->services['mautic.channel.helper.channel_list'] ?? $this->getMautic_Channel_Helper_ChannelListService());

        if (isset($this->services['Mautic\\ChannelBundle\\Twig\\ChannelExtension'])) {
            return $this->services['Mautic\\ChannelBundle\\Twig\\ChannelExtension'];
        }

        return $this->services['Mautic\\ChannelBundle\\Twig\\ChannelExtension'] = new \Mautic\ChannelBundle\Twig\ChannelExtension(($this->services['mautic.helper.twig.dnc_reason'] ?? $this->getMautic_Helper_Twig_DncReasonService()), $a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\EventListener\AssetsSubscriber' shared autowired service.
     *
     * @return \Mautic\CoreBundle\EventListener\AssetsSubscriber
     */
    protected function getAssetsSubscriberService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] ?? $this->getAssetsHelperService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'];
        }

        return $this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'] = new \Mautic\CoreBundle\EventListener\AssetsSubscriber($a, $b);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\EventListener\CoreSubscriber' shared autowired service.
     *
     * @return \Mautic\CoreBundle\EventListener\CoreSubscriber
     */
    protected function getCoreSubscriberService()
    {
        $a = ($this->services['mautic.helper.menu'] ?? $this->getMautic_Helper_MenuService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }
        $b = ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] ?? $this->getAssetsHelperService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }
        $c = ($this->services['Mautic\\UserBundle\\Model\\UserModel'] ?? $this->getUserModelService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'];
        }

        return $this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] = new \Mautic\CoreBundle\EventListener\CoreSubscriber(($this->services['mautic.helper.bundle'] ?? $this->getMautic_Helper_BundleService()), $a, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), $b, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['.container.private.security.authorization_checker'] ?? $this->get_Container_Private_Security_AuthorizationCheckerService()), $c, $d, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['Mautic\\FormBundle\\Entity\\FormRepository'] ?? $this->getFormRepositoryService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\EventListener\EnvironmentSubscriber' shared autowired service.
     *
     * @return \Mautic\CoreBundle\EventListener\EnvironmentSubscriber
     */
    protected function getEnvironmentSubscriberService()
    {
        return $this->services['Mautic\\CoreBundle\\EventListener\\EnvironmentSubscriber'] = new \Mautic\CoreBundle\EventListener\EnvironmentSubscriber(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\EventListener\RequestSubscriber' shared autowired service.
     *
     * @return \Mautic\CoreBundle\EventListener\RequestSubscriber
     */
    protected function getRequestSubscriberService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['Mautic\\CoreBundle\\EventListener\\RequestSubscriber'])) {
            return $this->services['Mautic\\CoreBundle\\EventListener\\RequestSubscriber'];
        }

        return $this->services['Mautic\\CoreBundle\\EventListener\\RequestSubscriber'] = new \Mautic\CoreBundle\EventListener\RequestSubscriber(($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()), ($this->services['translator'] ?? $this->getTranslator2Service()), $a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Factory\MauticFactory' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Factory\MauticFactory
     */
    protected function getMauticFactoryService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Factory\\ModelFactory'] ?? $this->getModelFactoryService());

        if (isset($this->services['Mautic\\CoreBundle\\Factory\\MauticFactory'])) {
            return $this->services['Mautic\\CoreBundle\\Factory\\MauticFactory'];
        }

        return $this->services['Mautic\\CoreBundle\\Factory\\MauticFactory'] = new \Mautic\CoreBundle\Factory\MauticFactory($this, $a, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), ($this->services['.container.private.security.authorization_checker'] ?? $this->get_Container_Private_Security_AuthorizationCheckerService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['doctrine'] ?? $this->getDoctrineService()), ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Factory\ModelFactory' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Factory\ModelFactory
     */
    protected function getModelFactoryService()
    {
        return $this->services['Mautic\\CoreBundle\\Factory\\ModelFactory'] = new \Mautic\CoreBundle\Factory\ModelFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel' => ['services', 'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel', 'getGrapesJsBuilderModelService', true],
            'MauticPlugin\\MauticCitrixBundle\\Model\\CitrixModel' => ['services', 'mautic.citrix.model.citrix', 'getMautic_Citrix_Model_CitrixService', true],
            'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel' => ['services', 'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel', 'getFocusModelService', false],
            'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel', 'getMonitoringModelService', true],
            'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel', 'getPostCountModelService', true],
            'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel', 'getTweetModelService', true],
            'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel' => ['services', 'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel', 'getTagModelService', true],
            'Mautic\\ApiBundle\\Model\\ClientModel' => ['services', 'Mautic\\ApiBundle\\Model\\ClientModel', 'getClientModelService', true],
            'Mautic\\AssetBundle\\Model\\AssetModel' => ['services', 'Mautic\\AssetBundle\\Model\\AssetModel', 'getAssetModelService', false],
            'Mautic\\CampaignBundle\\Model\\CampaignModel' => ['services', 'Mautic\\CampaignBundle\\Model\\CampaignModel', 'getCampaignModelService', false],
            'Mautic\\CampaignBundle\\Model\\EventLogModel' => ['services', 'Mautic\\CampaignBundle\\Model\\EventLogModel', 'getEventLogModelService', true],
            'Mautic\\CampaignBundle\\Model\\EventModel' => ['services', 'Mautic\\CampaignBundle\\Model\\EventModel', 'getEventModelService', true],
            'Mautic\\CampaignBundle\\Model\\SummaryModel' => ['services', 'Mautic\\CampaignBundle\\Model\\SummaryModel', 'getSummaryModelService', true],
            'Mautic\\CategoryBundle\\Model\\CategoryModel' => ['services', 'Mautic\\CategoryBundle\\Model\\CategoryModel', 'getCategoryModelService', false],
            'Mautic\\ChannelBundle\\Model\\MessageModel' => ['services', 'Mautic\\ChannelBundle\\Model\\MessageModel', 'getMessageModelService', true],
            'Mautic\\ChannelBundle\\Model\\MessageQueueModel' => ['services', 'Mautic\\ChannelBundle\\Model\\MessageQueueModel', 'getMessageQueueModelService', false],
            'Mautic\\CoreBundle\\Model\\AuditLogModel' => ['services', 'Mautic\\CoreBundle\\Model\\AuditLogModel', 'getAuditLogModelService', false],
            'Mautic\\CoreBundle\\Model\\FormModel' => ['services', 'Mautic\\CoreBundle\\Model\\FormModel', 'getFormModel2Service', true],
            'Mautic\\CoreBundle\\Model\\NotificationModel' => ['services', 'Mautic\\CoreBundle\\Model\\NotificationModel', 'getNotificationModelService', false],
            'Mautic\\DashboardBundle\\Model\\DashboardModel' => ['services', 'Mautic\\DashboardBundle\\Model\\DashboardModel', 'getDashboardModelService', true],
            'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel' => ['services', 'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel', 'getDynamicContentModelService', true],
            'Mautic\\EmailBundle\\Model\\EmailModel' => ['services', 'Mautic\\EmailBundle\\Model\\EmailModel', 'getEmailModelService', false],
            'Mautic\\FormBundle\\Model\\ActionModel' => ['services', 'Mautic\\FormBundle\\Model\\ActionModel', 'getActionModelService', false],
            'Mautic\\FormBundle\\Model\\FieldModel' => ['services', 'Mautic\\FormBundle\\Model\\FieldModel', 'getFieldModelService', false],
            'Mautic\\FormBundle\\Model\\FormModel' => ['services', 'Mautic\\FormBundle\\Model\\FormModel', 'getFormModelService', false],
            'Mautic\\FormBundle\\Model\\SubmissionModel' => ['services', 'Mautic\\FormBundle\\Model\\SubmissionModel', 'getSubmissionModelService', false],
            'Mautic\\LeadBundle\\Model\\CompanyModel' => ['services', 'Mautic\\LeadBundle\\Model\\CompanyModel', 'getCompanyModelService', false],
            'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel' => ['services', 'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel', 'getContactExportSchedulerModelService', true],
            'Mautic\\LeadBundle\\Model\\DeviceModel' => ['services', 'Mautic\\LeadBundle\\Model\\DeviceModel', 'getDeviceModelService', true],
            'Mautic\\LeadBundle\\Model\\DoNotContact' => ['services', 'Mautic\\LeadBundle\\Model\\DoNotContact', 'getDoNotContactService', false],
            'Mautic\\LeadBundle\\Model\\FieldModel' => ['services', 'Mautic\\LeadBundle\\Model\\FieldModel', 'getFieldModel2Service', false],
            'Mautic\\LeadBundle\\Model\\ImportModel' => ['services', 'Mautic\\LeadBundle\\Model\\ImportModel', 'getImportModelService', true],
            'Mautic\\LeadBundle\\Model\\LeadModel' => ['services', 'Mautic\\LeadBundle\\Model\\LeadModel', 'getLeadModelService', false],
            'Mautic\\LeadBundle\\Model\\ListModel' => ['services', 'Mautic\\LeadBundle\\Model\\ListModel', 'getListModelService', false],
            'Mautic\\LeadBundle\\Model\\NoteModel' => ['services', 'Mautic\\LeadBundle\\Model\\NoteModel', 'getNoteModelService', true],
            'Mautic\\LeadBundle\\Model\\TagModel' => ['services', 'Mautic\\LeadBundle\\Model\\TagModel', 'getTagModel2Service', true],
            'Mautic\\NotificationBundle\\Model\\NotificationModel' => ['services', 'Mautic\\NotificationBundle\\Model\\NotificationModel', 'getNotificationModel2Service', true],
            'Mautic\\PageBundle\\Model\\PageModel' => ['services', 'Mautic\\PageBundle\\Model\\PageModel', 'getPageModelService', false],
            'Mautic\\PageBundle\\Model\\RedirectModel' => ['services', 'Mautic\\PageBundle\\Model\\RedirectModel', 'getRedirectModelService', false],
            'Mautic\\PageBundle\\Model\\TrackableModel' => ['services', 'Mautic\\PageBundle\\Model\\TrackableModel', 'getTrackableModelService', false],
            'Mautic\\PageBundle\\Model\\VideoModel' => ['services', 'Mautic\\PageBundle\\Model\\VideoModel', 'getVideoModelService', true],
            'Mautic\\PluginBundle\\Model\\IntegrationEntityModel' => ['services', 'Mautic\\PluginBundle\\Model\\IntegrationEntityModel', 'getIntegrationEntityModelService', true],
            'Mautic\\PluginBundle\\Model\\PluginModel' => ['services', 'Mautic\\PluginBundle\\Model\\PluginModel', 'getPluginModelService', false],
            'Mautic\\PointBundle\\Model\\PointModel' => ['services', 'Mautic\\PointBundle\\Model\\PointModel', 'getPointModelService', true],
            'Mautic\\PointBundle\\Model\\TriggerEventModel' => ['services', 'Mautic\\PointBundle\\Model\\TriggerEventModel', 'getTriggerEventModelService', true],
            'Mautic\\PointBundle\\Model\\TriggerModel' => ['services', 'Mautic\\PointBundle\\Model\\TriggerModel', 'getTriggerModelService', true],
            'Mautic\\ReportBundle\\Model\\ReportModel' => ['services', 'Mautic\\ReportBundle\\Model\\ReportModel', 'getReportModelService', true],
            'Mautic\\SmsBundle\\Model\\SmsModel' => ['services', 'Mautic\\SmsBundle\\Model\\SmsModel', 'getSmsModelService', true],
            'Mautic\\StageBundle\\Model\\StageModel' => ['services', 'Mautic\\StageBundle\\Model\\StageModel', 'getStageModelService', true],
            'Mautic\\UserBundle\\Model\\RoleModel' => ['services', 'Mautic\\UserBundle\\Model\\RoleModel', 'getRoleModelService', false],
            'Mautic\\UserBundle\\Model\\UserModel' => ['services', 'Mautic\\UserBundle\\Model\\UserModel', 'getUserModelService', false],
            'Mautic\\WebhookBundle\\Model\\WebhookModel' => ['services', 'Mautic\\WebhookBundle\\Model\\WebhookModel', 'getWebhookModelService', true],
            'grapesjsbuilder.model' => ['services', 'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel', 'getGrapesJsBuilderModelService', true],
            'mautic.api.model.client' => ['services', 'Mautic\\ApiBundle\\Model\\ClientModel', 'getClientModelService', true],
            'mautic.asset.model.asset' => ['services', 'Mautic\\AssetBundle\\Model\\AssetModel', 'getAssetModelService', false],
            'mautic.campaign.model.campaign' => ['services', 'Mautic\\CampaignBundle\\Model\\CampaignModel', 'getCampaignModelService', false],
            'mautic.campaign.model.event' => ['services', 'Mautic\\CampaignBundle\\Model\\EventModel', 'getEventModelService', true],
            'mautic.campaign.model.event_log' => ['services', 'Mautic\\CampaignBundle\\Model\\EventLogModel', 'getEventLogModelService', true],
            'mautic.campaign.model.summary' => ['services', 'Mautic\\CampaignBundle\\Model\\SummaryModel', 'getSummaryModelService', true],
            'mautic.category.model.category' => ['services', 'Mautic\\CategoryBundle\\Model\\CategoryModel', 'getCategoryModelService', false],
            'mautic.channel.model.message' => ['services', 'Mautic\\ChannelBundle\\Model\\MessageModel', 'getMessageModelService', true],
            'mautic.channel.model.queue' => ['services', 'Mautic\\ChannelBundle\\Model\\MessageQueueModel', 'getMessageQueueModelService', false],
            'mautic.citrix.model.citrix' => ['services', 'mautic.citrix.model.citrix', 'getMautic_Citrix_Model_CitrixService', true],
            'mautic.core.model.auditlog' => ['services', 'Mautic\\CoreBundle\\Model\\AuditLogModel', 'getAuditLogModelService', false],
            'mautic.core.model.form' => ['services', 'Mautic\\CoreBundle\\Model\\FormModel', 'getFormModel2Service', true],
            'mautic.core.model.notification' => ['services', 'Mautic\\CoreBundle\\Model\\NotificationModel', 'getNotificationModelService', false],
            'mautic.dashboard.model.dashboard' => ['services', 'Mautic\\DashboardBundle\\Model\\DashboardModel', 'getDashboardModelService', true],
            'mautic.dynamicContent.model.dynamicContent' => ['services', 'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel', 'getDynamicContentModelService', true],
            'mautic.email.model.email' => ['services', 'Mautic\\EmailBundle\\Model\\EmailModel', 'getEmailModelService', false],
            'mautic.focus.model.focus' => ['services', 'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel', 'getFocusModelService', false],
            'mautic.form.model.action' => ['services', 'Mautic\\FormBundle\\Model\\ActionModel', 'getActionModelService', false],
            'mautic.form.model.field' => ['services', 'Mautic\\FormBundle\\Model\\FieldModel', 'getFieldModelService', false],
            'mautic.form.model.form' => ['services', 'Mautic\\FormBundle\\Model\\FormModel', 'getFormModelService', false],
            'mautic.form.model.submission' => ['services', 'Mautic\\FormBundle\\Model\\SubmissionModel', 'getSubmissionModelService', false],
            'mautic.lead.model.company' => ['services', 'Mautic\\LeadBundle\\Model\\CompanyModel', 'getCompanyModelService', false],
            'mautic.lead.model.device' => ['services', 'Mautic\\LeadBundle\\Model\\DeviceModel', 'getDeviceModelService', true],
            'mautic.lead.model.dnc' => ['services', 'Mautic\\LeadBundle\\Model\\DoNotContact', 'getDoNotContactService', false],
            'mautic.lead.model.export_scheduler' => ['services', 'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel', 'getContactExportSchedulerModelService', true],
            'mautic.lead.model.field' => ['services', 'Mautic\\LeadBundle\\Model\\FieldModel', 'getFieldModel2Service', false],
            'mautic.lead.model.import' => ['services', 'Mautic\\LeadBundle\\Model\\ImportModel', 'getImportModelService', true],
            'mautic.lead.model.lead' => ['services', 'Mautic\\LeadBundle\\Model\\LeadModel', 'getLeadModelService', false],
            'mautic.lead.model.list' => ['services', 'Mautic\\LeadBundle\\Model\\ListModel', 'getListModelService', false],
            'mautic.lead.model.note' => ['services', 'Mautic\\LeadBundle\\Model\\NoteModel', 'getNoteModelService', true],
            'mautic.lead.model.tag' => ['services', 'Mautic\\LeadBundle\\Model\\TagModel', 'getTagModel2Service', true],
            'mautic.notification.model.notification' => ['services', 'Mautic\\NotificationBundle\\Model\\NotificationModel', 'getNotificationModel2Service', true],
            'mautic.page.model.page' => ['services', 'Mautic\\PageBundle\\Model\\PageModel', 'getPageModelService', false],
            'mautic.page.model.redirect' => ['services', 'Mautic\\PageBundle\\Model\\RedirectModel', 'getRedirectModelService', false],
            'mautic.page.model.trackable' => ['services', 'Mautic\\PageBundle\\Model\\TrackableModel', 'getTrackableModelService', false],
            'mautic.page.model.video' => ['services', 'Mautic\\PageBundle\\Model\\VideoModel', 'getVideoModelService', true],
            'mautic.plugin.model.integration_entity' => ['services', 'Mautic\\PluginBundle\\Model\\IntegrationEntityModel', 'getIntegrationEntityModelService', true],
            'mautic.plugin.model.plugin' => ['services', 'Mautic\\PluginBundle\\Model\\PluginModel', 'getPluginModelService', false],
            'mautic.point.model.point' => ['services', 'Mautic\\PointBundle\\Model\\PointModel', 'getPointModelService', true],
            'mautic.point.model.trigger' => ['services', 'Mautic\\PointBundle\\Model\\TriggerModel', 'getTriggerModelService', true],
            'mautic.point.model.triggerevent' => ['services', 'Mautic\\PointBundle\\Model\\TriggerEventModel', 'getTriggerEventModelService', true],
            'mautic.report.model.report' => ['services', 'Mautic\\ReportBundle\\Model\\ReportModel', 'getReportModelService', true],
            'mautic.sms.model.sms' => ['services', 'Mautic\\SmsBundle\\Model\\SmsModel', 'getSmsModelService', true],
            'mautic.social.model.monitoring' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel', 'getMonitoringModelService', true],
            'mautic.social.model.postcount' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel', 'getPostCountModelService', true],
            'mautic.social.model.tweet' => ['services', 'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel', 'getTweetModelService', true],
            'mautic.stage.model.stage' => ['services', 'Mautic\\StageBundle\\Model\\StageModel', 'getStageModelService', true],
            'mautic.tagmanager.model.tag' => ['services', 'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel', 'getTagModelService', true],
            'mautic.user.model.role' => ['services', 'Mautic\\UserBundle\\Model\\RoleModel', 'getRoleModelService', false],
            'mautic.user.model.user' => ['services', 'Mautic\\UserBundle\\Model\\UserModel', 'getUserModelService', false],
            'mautic.webhook.model.webhook' => ['services', 'Mautic\\WebhookBundle\\Model\\WebhookModel', 'getWebhookModelService', true],
        ], [
            'MauticPlugin\\GrapesJsBuilderBundle\\Model\\GrapesJsBuilderModel' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Model\\CitrixModel' => '?',
            'MauticPlugin\\MauticFocusBundle\\Model\\FocusModel' => '?',
            'MauticPlugin\\MauticSocialBundle\\Model\\MonitoringModel' => '?',
            'MauticPlugin\\MauticSocialBundle\\Model\\PostCountModel' => '?',
            'MauticPlugin\\MauticSocialBundle\\Model\\TweetModel' => '?',
            'MauticPlugin\\MauticTagManagerBundle\\Model\\TagModel' => '?',
            'Mautic\\ApiBundle\\Model\\ClientModel' => '?',
            'Mautic\\AssetBundle\\Model\\AssetModel' => '?',
            'Mautic\\CampaignBundle\\Model\\CampaignModel' => '?',
            'Mautic\\CampaignBundle\\Model\\EventLogModel' => '?',
            'Mautic\\CampaignBundle\\Model\\EventModel' => '?',
            'Mautic\\CampaignBundle\\Model\\SummaryModel' => '?',
            'Mautic\\CategoryBundle\\Model\\CategoryModel' => '?',
            'Mautic\\ChannelBundle\\Model\\MessageModel' => '?',
            'Mautic\\ChannelBundle\\Model\\MessageQueueModel' => '?',
            'Mautic\\CoreBundle\\Model\\AuditLogModel' => '?',
            'Mautic\\CoreBundle\\Model\\FormModel' => '?',
            'Mautic\\CoreBundle\\Model\\NotificationModel' => '?',
            'Mautic\\DashboardBundle\\Model\\DashboardModel' => '?',
            'Mautic\\DynamicContentBundle\\Model\\DynamicContentModel' => '?',
            'Mautic\\EmailBundle\\Model\\EmailModel' => '?',
            'Mautic\\FormBundle\\Model\\ActionModel' => '?',
            'Mautic\\FormBundle\\Model\\FieldModel' => '?',
            'Mautic\\FormBundle\\Model\\FormModel' => '?',
            'Mautic\\FormBundle\\Model\\SubmissionModel' => '?',
            'Mautic\\LeadBundle\\Model\\CompanyModel' => '?',
            'Mautic\\LeadBundle\\Model\\ContactExportSchedulerModel' => '?',
            'Mautic\\LeadBundle\\Model\\DeviceModel' => '?',
            'Mautic\\LeadBundle\\Model\\DoNotContact' => '?',
            'Mautic\\LeadBundle\\Model\\FieldModel' => '?',
            'Mautic\\LeadBundle\\Model\\ImportModel' => '?',
            'Mautic\\LeadBundle\\Model\\LeadModel' => '?',
            'Mautic\\LeadBundle\\Model\\ListModel' => '?',
            'Mautic\\LeadBundle\\Model\\NoteModel' => '?',
            'Mautic\\LeadBundle\\Model\\TagModel' => '?',
            'Mautic\\NotificationBundle\\Model\\NotificationModel' => '?',
            'Mautic\\PageBundle\\Model\\PageModel' => '?',
            'Mautic\\PageBundle\\Model\\RedirectModel' => '?',
            'Mautic\\PageBundle\\Model\\TrackableModel' => '?',
            'Mautic\\PageBundle\\Model\\VideoModel' => '?',
            'Mautic\\PluginBundle\\Model\\IntegrationEntityModel' => '?',
            'Mautic\\PluginBundle\\Model\\PluginModel' => '?',
            'Mautic\\PointBundle\\Model\\PointModel' => '?',
            'Mautic\\PointBundle\\Model\\TriggerEventModel' => '?',
            'Mautic\\PointBundle\\Model\\TriggerModel' => '?',
            'Mautic\\ReportBundle\\Model\\ReportModel' => '?',
            'Mautic\\SmsBundle\\Model\\SmsModel' => '?',
            'Mautic\\StageBundle\\Model\\StageModel' => '?',
            'Mautic\\UserBundle\\Model\\RoleModel' => '?',
            'Mautic\\UserBundle\\Model\\UserModel' => '?',
            'Mautic\\WebhookBundle\\Model\\WebhookModel' => '?',
            'grapesjsbuilder.model' => '?',
            'mautic.api.model.client' => '?',
            'mautic.asset.model.asset' => '?',
            'mautic.campaign.model.campaign' => '?',
            'mautic.campaign.model.event' => '?',
            'mautic.campaign.model.event_log' => '?',
            'mautic.campaign.model.summary' => '?',
            'mautic.category.model.category' => '?',
            'mautic.channel.model.message' => '?',
            'mautic.channel.model.queue' => '?',
            'mautic.citrix.model.citrix' => '?',
            'mautic.core.model.auditlog' => '?',
            'mautic.core.model.form' => '?',
            'mautic.core.model.notification' => '?',
            'mautic.dashboard.model.dashboard' => '?',
            'mautic.dynamicContent.model.dynamicContent' => '?',
            'mautic.email.model.email' => '?',
            'mautic.focus.model.focus' => '?',
            'mautic.form.model.action' => '?',
            'mautic.form.model.field' => '?',
            'mautic.form.model.form' => '?',
            'mautic.form.model.submission' => '?',
            'mautic.lead.model.company' => '?',
            'mautic.lead.model.device' => '?',
            'mautic.lead.model.dnc' => '?',
            'mautic.lead.model.export_scheduler' => '?',
            'mautic.lead.model.field' => '?',
            'mautic.lead.model.import' => '?',
            'mautic.lead.model.lead' => '?',
            'mautic.lead.model.list' => '?',
            'mautic.lead.model.note' => '?',
            'mautic.lead.model.tag' => '?',
            'mautic.notification.model.notification' => '?',
            'mautic.page.model.page' => '?',
            'mautic.page.model.redirect' => '?',
            'mautic.page.model.trackable' => '?',
            'mautic.page.model.video' => '?',
            'mautic.plugin.model.integration_entity' => '?',
            'mautic.plugin.model.plugin' => '?',
            'mautic.point.model.point' => '?',
            'mautic.point.model.trigger' => '?',
            'mautic.point.model.triggerevent' => '?',
            'mautic.report.model.report' => '?',
            'mautic.sms.model.sms' => '?',
            'mautic.social.model.monitoring' => '?',
            'mautic.social.model.postcount' => '?',
            'mautic.social.model.tweet' => '?',
            'mautic.stage.model.stage' => '?',
            'mautic.tagmanager.model.tag' => '?',
            'mautic.user.model.role' => '?',
            'mautic.user.model.user' => '?',
            'mautic.webhook.model.webhook' => '?',
        ]));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Helper\AssetGenerationHelper' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Helper\AssetGenerationHelper
     */
    protected function getAssetGenerationHelperService()
    {
        return $this->services['Mautic\\CoreBundle\\Helper\\AssetGenerationHelper'] = new \Mautic\CoreBundle\Helper\AssetGenerationHelper(($this->services['mautic.helper.bundle'] ?? $this->getMautic_Helper_BundleService()), ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.helper.app_version'] ?? ($this->services['mautic.helper.app_version'] = new \Mautic\CoreBundle\Helper\AppVersion())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Helper\DateTimeHelper' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Helper\DateTimeHelper
     */
    protected function getDateTimeHelperService()
    {
        return $this->services['Mautic\\CoreBundle\\Helper\\DateTimeHelper'] = new \Mautic\CoreBundle\Helper\DateTimeHelper();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Helper\EmojiHelper' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Helper\EmojiHelper
     */
    protected function getEmojiHelperService()
    {
        return $this->services['Mautic\\CoreBundle\\Helper\\EmojiHelper'] = new \Mautic\CoreBundle\Helper\EmojiHelper();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Model\AuditLogModel' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Model\AuditLogModel
     */
    protected function getAuditLogModelService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'];
        }

        return $this->services['Mautic\\CoreBundle\\Model\\AuditLogModel'] = new \Mautic\CoreBundle\Model\AuditLogModel($a, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Model\NotificationModel' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Model\NotificationModel
     */
    protected function getNotificationModelService()
    {
        $a = ($this->services['mautic.helper.update'] ?? $this->getMautic_Helper_UpdateService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\NotificationModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\NotificationModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\NotificationModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\NotificationModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\CoreBundle\\Model\\NotificationModel'])) {
            return $this->services['Mautic\\CoreBundle\\Model\\NotificationModel'];
        }

        $this->services['Mautic\\CoreBundle\\Model\\NotificationModel'] = $instance = new \Mautic\CoreBundle\Model\NotificationModel(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));

        $instance->setDisableUpdates(false);

        return $instance;
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Translation\Translator' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Translation\Translator
     */
    protected function getTranslatorService()
    {
        return $this->services['Mautic\\CoreBundle\\Translation\\Translator'] = new \Mautic\CoreBundle\Translation\Translator(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\AnalyticsExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\AnalyticsExtension
     */
    protected function getAnalyticsExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\AnalyticsExtension'] = new \Mautic\CoreBundle\Twig\Extension\AnalyticsExtension(($this->services['mautic.helper.twig.analytics'] ?? $this->getMautic_Helper_Twig_AnalyticsService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\AppExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\AppExtension
     */
    protected function getAppExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\AppExtension'] = new \Mautic\CoreBundle\Twig\Extension\AppExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\AssetExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\AssetExtension
     */
    protected function getAssetExtensionService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] ?? $this->getAssetsHelperService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\AssetExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\AssetExtension'];
        }

        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\AssetExtension'] = new \Mautic\CoreBundle\Twig\Extension\AssetExtension($a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\BarChartExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\BarChartExtension
     */
    protected function getBarChartExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\BarChartExtension'] = new \Mautic\CoreBundle\Twig\Extension\BarChartExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ButtonExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ButtonExtension
     */
    protected function getButtonExtensionService()
    {
        $a = ($this->services['mautic.helper.twig.button'] ?? $this->getMautic_Helper_Twig_ButtonService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'];
        }
        $b = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'];
        }

        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ButtonExtension'] = new \Mautic\CoreBundle\Twig\Extension\ButtonExtension($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $b, ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ClassExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ClassExtension
     */
    protected function getClassExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ClassExtension'] = new \Mautic\CoreBundle\Twig\Extension\ClassExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ConfigExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ConfigExtension
     */
    protected function getConfigExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ConfigExtension'] = new \Mautic\CoreBundle\Twig\Extension\ConfigExtension(($this->services['mautic.helper.twig.config'] ?? $this->getMautic_Helper_Twig_ConfigService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ContentExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ContentExtension
     */
    protected function getContentExtensionService()
    {
        $a = ($this->services['mautic.helper.twig.content'] ?? $this->getMautic_Helper_Twig_ContentService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\ContentExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ContentExtension'];
        }

        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ContentExtension'] = new \Mautic\CoreBundle\Twig\Extension\ContentExtension($a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\CoreHelpersExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\CoreHelpersExtension
     */
    protected function getCoreHelpersExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\CoreHelpersExtension'] = new \Mautic\CoreBundle\Twig\Extension\CoreHelpersExtension(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\DateExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\DateExtension
     */
    protected function getDateExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\DateExtension'] = new \Mautic\CoreBundle\Twig\Extension\DateExtension(($this->services['mautic.helper.twig.date'] ?? $this->getMautic_Helper_Twig_DateService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\DateTimeExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\DateTimeExtension
     */
    protected function getDateTimeExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\DateTimeExtension'] = new \Mautic\CoreBundle\Twig\Extension\DateTimeExtension(($this->services['Mautic\\CoreBundle\\Helper\\DateTimeHelper'] ?? ($this->services['Mautic\\CoreBundle\\Helper\\DateTimeHelper'] = new \Mautic\CoreBundle\Helper\DateTimeHelper())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\DeviceExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\DeviceExtension
     */
    protected function getDeviceExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\DeviceExtension'] = new \Mautic\CoreBundle\Twig\Extension\DeviceExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\EmojiExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\EmojiExtension
     */
    protected function getEmojiExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\EmojiExtension'] = new \Mautic\CoreBundle\Twig\Extension\EmojiExtension(($this->services['Mautic\\CoreBundle\\Helper\\EmojiHelper'] ?? ($this->services['Mautic\\CoreBundle\\Helper\\EmojiHelper'] = new \Mautic\CoreBundle\Helper\EmojiHelper())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\EnumExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\EnumExtension
     */
    protected function getEnumExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\EnumExtension'] = new \Mautic\CoreBundle\Twig\Extension\EnumExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ExceptionExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ExceptionExtension
     */
    protected function getExceptionExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ExceptionExtension'] = new \Mautic\CoreBundle\Twig\Extension\ExceptionExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\FormExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\FormExtension
     */
    protected function getFormExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\FormExtension'] = new \Mautic\CoreBundle\Twig\Extension\FormExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\FormatterExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\FormatterExtension
     */
    protected function getFormatterExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\FormatterExtension'] = new \Mautic\CoreBundle\Twig\Extension\FormatterExtension(($this->services['mautic.helper.twig.formatter'] ?? $this->getMautic_Helper_Twig_FormatterService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\GravatarExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\GravatarExtension
     */
    protected function getGravatarExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\GravatarExtension'] = new \Mautic\CoreBundle\Twig\Extension\GravatarExtension(($this->services['mautic.helper.twig.gravatar'] ?? $this->getMautic_Helper_Twig_GravatarService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\HtmlExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\HtmlExtension
     */
    protected function getHtmlExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\HtmlExtension'] = new \Mautic\CoreBundle\Twig\Extension\HtmlExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\InputExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\InputExtension
     */
    protected function getInputExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\InputExtension'] = new \Mautic\CoreBundle\Twig\Extension\InputExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\MautibotExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\MautibotExtension
     */
    protected function getMautibotExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\MautibotExtension'] = new \Mautic\CoreBundle\Twig\Extension\MautibotExtension(($this->services['mautic.helper.twig.mautibot'] ?? ($this->services['mautic.helper.twig.mautibot'] = new \Mautic\CoreBundle\Twig\Helper\MautibotHelper())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\MenuExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\MenuExtension
     */
    protected function getMenuExtensionService()
    {
        $a = ($this->services['mautic.helper.twig.menu'] ?? $this->getMautic_Helper_Twig_MenuService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\MenuExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\MenuExtension'];
        }

        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\MenuExtension'] = new \Mautic\CoreBundle\Twig\Extension\MenuExtension($a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\NumericExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\NumericExtension
     */
    protected function getNumericExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\NumericExtension'] = new \Mautic\CoreBundle\Twig\Extension\NumericExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\ObjectExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\ObjectExtension
     */
    protected function getObjectExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\ObjectExtension'] = new \Mautic\CoreBundle\Twig\Extension\ObjectExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\SecurityExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\SecurityExtension
     */
    protected function getSecurityExtensionService()
    {
        $a = ($this->services['mautic.helper.twig.security'] ?? $this->getMautic_Helper_Twig_SecurityService());

        if (isset($this->services['Mautic\\CoreBundle\\Twig\\Extension\\SecurityExtension'])) {
            return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\SecurityExtension'];
        }

        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\SecurityExtension'] = new \Mautic\CoreBundle\Twig\Extension\SecurityExtension($a);
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\SerializerExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\SerializerExtension
     */
    protected function getSerializerExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\SerializerExtension'] = new \Mautic\CoreBundle\Twig\Extension\SerializerExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\SlotExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\SlotExtension
     */
    protected function getSlotExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\SlotExtension'] = new \Mautic\CoreBundle\Twig\Extension\SlotExtension(($this->services['Mautic\\CoreBundle\\Twig\\Helper\\SlotsHelper'] ?? ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\SlotsHelper'] = new \Mautic\CoreBundle\Twig\Helper\SlotsHelper())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\StorageExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\StorageExtension
     */
    protected function getStorageExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\StorageExtension'] = new \Mautic\CoreBundle\Twig\Extension\StorageExtension();
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\TranslatorExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\TranslatorExtension
     */
    protected function getTranslatorExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\TranslatorExtension'] = new \Mautic\CoreBundle\Twig\Extension\TranslatorExtension(($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Extension\VersionExtension' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Extension\VersionExtension
     */
    protected function getVersionExtensionService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Extension\\VersionExtension'] = new \Mautic\CoreBundle\Twig\Extension\VersionExtension(($this->services['mautic.helper.app_version'] ?? ($this->services['mautic.helper.app_version'] = new \Mautic\CoreBundle\Helper\AppVersion())));
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Helper\AssetsHelper' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\AssetsHelper
     */
    protected function getAssetsHelperService()
    {
        $this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] = $instance = new \Mautic\CoreBundle\Twig\Helper\AssetsHelper(($this->privates['assets.packages'] ?? $this->getAssets_PackagesService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));

        $instance->setPathsHelper(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()));
        $instance->setAssetHelper(($this->services['Mautic\\CoreBundle\\Helper\\AssetGenerationHelper'] ?? $this->getAssetGenerationHelperService()));
        $instance->setBuilderIntegrationsHelper(($this->services['mautic.integrations.helper.builder_integrations'] ?? $this->getMautic_Integrations_Helper_BuilderIntegrationsService()));
        $instance->setInstallService(($this->services['mautic.install.service'] ?? $this->getMautic_Install_ServiceService()));
        $instance->setSiteUrl($this->getEnv('nullable:resolve:MAUTIC_SITE_URL'));
        $instance->setVersion($this->getEnv('nullable:resolve:MAUTIC_SECRET_KEY'), '5.0.0-alpha1');

        return $instance;
    }

    /*
     * Gets the public 'Mautic\CoreBundle\Twig\Helper\SlotsHelper' shared autowired service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\SlotsHelper
     */
    protected function getSlotsHelperService()
    {
        return $this->services['Mautic\\CoreBundle\\Twig\\Helper\\SlotsHelper'] = new \Mautic\CoreBundle\Twig\Helper\SlotsHelper();
    }

    /*
     * Gets the public 'Mautic\EmailBundle\Mailer\Transport\TransportFactory' shared autowired service.
     *
     * @return \Mautic\EmailBundle\Mailer\Transport\TransportFactory
     */
    protected function getTransportFactoryService()
    {
        return $this->services['Mautic\\EmailBundle\\Mailer\\Transport\\TransportFactory'] = new \Mautic\EmailBundle\Mailer\Transport\TransportFactory(new \Symfony\Component\Mailer\Transport(new RewindableGenerator(function () {
            yield 0 => ($this->privates['mailer.transport_factory.null'] ?? $this->load('getMailer_TransportFactory_NullService'));
            yield 1 => ($this->privates['mailer.transport_factory.sendmail'] ?? $this->load('getMailer_TransportFactory_SendmailService'));
            yield 2 => ($this->privates['mailer.transport_factory.native'] ?? $this->load('getMailer_TransportFactory_NativeService'));
            yield 3 => ($this->privates['mailer.transport_factory.smtp'] ?? $this->load('getMailer_TransportFactory_SmtpService'));
        }, 4)));
    }

    /*
     * Gets the public 'Mautic\EmailBundle\Model\EmailModel' shared autowired service.
     *
     * @return \Mautic\EmailBundle\Model\EmailModel
     */
    protected function getEmailModelService()
    {
        $a = ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $b = ($this->services['mautic.helper.theme'] ?? $this->getMautic_Helper_ThemeService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $c = ($this->services['mautic.helper.mailer'] ?? $this->getMautic_Helper_MailerService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $d = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $e = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $f = ($this->services['Mautic\\PageBundle\\Model\\TrackableModel'] ?? $this->getTrackableModelService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $g = ($this->services['Mautic\\UserBundle\\Model\\UserModel'] ?? $this->getUserModelService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $h = ($this->services['Mautic\\ChannelBundle\\Model\\MessageQueueModel'] ?? $this->getMessageQueueModelService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $i = ($this->services['Mautic\\EmailBundle\\Model\\SendEmailToContact'] ?? $this->getSendEmailToContactService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $j = ($this->services['mautic.helper.cache_storage'] ?? $this->getMautic_Helper_CacheStorageService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $k = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $l = ($this->services['mautic.email.helper.stats_collection'] ?? $this->getMautic_Email_Helper_StatsCollectionService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $m = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $n = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $o = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }
        $p = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\EmailModel'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'];
        }

        return $this->services['Mautic\\EmailBundle\\Model\\EmailModel'] = new \Mautic\EmailBundle\Model\EmailModel($a, $b, ($this->services['mautic.helper.mailbox'] ?? $this->getMautic_Helper_MailboxService()), $c, $d, $e, $f, $g, $h, $i, ($this->services['mautic.tracker.device'] ?? $this->getMautic_Tracker_DeviceService()), ($this->services['Mautic\\PageBundle\\Entity\\RedirectRepository'] ?? $this->getRedirectRepositoryService()), $j, $k, ($this->services['Mautic\\LeadBundle\\Model\\DoNotContact'] ?? $this->getDoNotContactService()), $l, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $m, $n, $o, $p, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\EmailBundle\Model\SendEmailToContact' shared autowired service.
     *
     * @return \Mautic\EmailBundle\Model\SendEmailToContact
     */
    protected function getSendEmailToContactService()
    {
        $a = ($this->services['mautic.helper.mailer'] ?? $this->getMautic_Helper_MailerService());

        if (isset($this->services['Mautic\\EmailBundle\\Model\\SendEmailToContact'])) {
            return $this->services['Mautic\\EmailBundle\\Model\\SendEmailToContact'];
        }

        return $this->services['Mautic\\EmailBundle\\Model\\SendEmailToContact'] = new \Mautic\EmailBundle\Model\SendEmailToContact($a, ($this->services['mautic.email.helper.stat'] ?? $this->getMautic_Email_Helper_StatService()), ($this->services['Mautic\\LeadBundle\\Model\\DoNotContact'] ?? $this->getDoNotContactService()), ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Entity\FormRepository' shared autowired service.
     *
     * @return \Mautic\FormBundle\Entity\FormRepository
     */
    protected function getFormRepositoryService()
    {
        return $this->services['Mautic\\FormBundle\\Entity\\FormRepository'] = new \Mautic\FormBundle\Entity\FormRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Model\ActionModel' shared autowired service.
     *
     * @return \Mautic\FormBundle\Model\ActionModel
     */
    protected function getActionModelService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\ActionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\ActionModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\ActionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\ActionModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\ActionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\ActionModel'];
        }

        return $this->services['Mautic\\FormBundle\\Model\\ActionModel'] = new \Mautic\FormBundle\Model\ActionModel($a, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Model\FieldModel' shared autowired service.
     *
     * @return \Mautic\FormBundle\Model\FieldModel
     */
    protected function getFieldModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FieldModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FieldModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FieldModel'];
        }

        return $this->services['Mautic\\FormBundle\\Model\\FieldModel'] = new \Mautic\FormBundle\Model\FieldModel($a, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Model\FormModel' shared autowired service.
     *
     * @return \Mautic\FormBundle\Model\FormModel
     */
    protected function getFormModelService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $b = ($this->services['mautic.helper.theme'] ?? $this->getMautic_Helper_ThemeService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $c = ($this->services['Mautic\\FormBundle\\Model\\ActionModel'] ?? $this->getActionModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $d = ($this->services['Mautic\\FormBundle\\Model\\FieldModel'] ?? $this->getFieldModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $e = ($this->services['mautic.helper.form.field_helper'] ?? $this->getMautic_Helper_Form_FieldHelperService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $f = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $g = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $h = ($this->services['mautic.schema.helper.column'] ?? $this->getMautic_Schema_Helper_ColumnService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $i = ($this->services['mautic.schema.helper.table'] ?? $this->getMautic_Schema_Helper_TableService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $j = ($this->services['mautic.form.collector.mapped.object'] ?? $this->getMautic_Form_Collector_Mapped_ObjectService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $k = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $l = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }
        $m = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\FormModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\FormModel'];
        }

        return $this->services['Mautic\\FormBundle\\Model\\FormModel'] = new \Mautic\FormBundle\Model\FormModel(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a, $b, $c, $d, $e, $f, ($this->services['mautic.form.helper.form_uploader'] ?? $this->getMautic_Form_Helper_FormUploaderService()), $g, $h, $i, $j, $k, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $l, $m, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Model\SubmissionModel' shared autowired service.
     *
     * @return \Mautic\FormBundle\Model\SubmissionModel
     */
    protected function getSubmissionModelService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $b = ($this->services['Mautic\\FormBundle\\Model\\FormModel'] ?? $this->getFormModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $c = ($this->services['Mautic\\PageBundle\\Model\\PageModel'] ?? $this->getPageModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $d = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $e = ($this->services['Mautic\\CampaignBundle\\Model\\CampaignModel'] ?? $this->getCampaignModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $f = ($this->services['mautic.campaign.membership.manager'] ?? $this->getMautic_Campaign_Membership_ManagerService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $g = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $h = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $i = ($this->services['mautic.helper.form.field_helper'] ?? $this->getMautic_Helper_Form_FieldHelperService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $j = ($this->services['mautic.form.service.field.value.transformer'] ?? $this->getMautic_Form_Service_Field_Value_TransformerService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $k = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $l = ($this->services['mautic.lead.merger'] ?? $this->getMautic_Lead_MergerService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $m = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }
        $n = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'])) {
            return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'];
        }

        return $this->services['Mautic\\FormBundle\\Model\\SubmissionModel'] = new \Mautic\FormBundle\Model\SubmissionModel(($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), $a, $b, $c, $d, $e, $f, $g, $h, $i, ($this->services['mautic.form.validator.upload_field_validator'] ?? $this->getMautic_Form_Validator_UploadFieldValidatorService()), ($this->services['mautic.form.helper.form_uploader'] ?? $this->getMautic_Form_Helper_FormUploaderService()), ($this->services['mautic.lead.service.device_tracking_service'] ?? $this->getMautic_Lead_Service_DeviceTrackingServiceService()), $j, ($this->services['mautic.helper.twig.date'] ?? $this->getMautic_Helper_Twig_DateService()), $k, $l, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $m, $n, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\FormBundle\Twig\Extension\FormFieldExtension' shared autowired service.
     *
     * @return \Mautic\FormBundle\Twig\Extension\FormFieldExtension
     */
    protected function getFormFieldExtensionService()
    {
        return $this->services['Mautic\\FormBundle\\Twig\\Extension\\FormFieldExtension'] = new \Mautic\FormBundle\Twig\Extension\FormFieldExtension();
    }

    /*
     * Gets the public 'Mautic\InstallBundle\Twig\TwigExtension' shared autowired service.
     *
     * @return \Mautic\InstallBundle\Twig\TwigExtension
     */
    protected function getTwigExtensionService()
    {
        return $this->services['Mautic\\InstallBundle\\Twig\\TwigExtension'] = new \Mautic\InstallBundle\Twig\TwigExtension();
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Entity\DoNotContactRepository' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Entity\DoNotContactRepository
     */
    protected function getDoNotContactRepositoryService()
    {
        return $this->services['Mautic\\LeadBundle\\Entity\\DoNotContactRepository'] = new \Mautic\LeadBundle\Entity\DoNotContactRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Entity\LeadFieldRepository' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Entity\LeadFieldRepository
     */
    protected function getLeadFieldRepositoryService()
    {
        return $this->services['Mautic\\LeadBundle\\Entity\\LeadFieldRepository'] = new \Mautic\LeadBundle\Entity\LeadFieldRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\CompanyModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\CompanyModel
     */
    protected function getCompanyModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'];
        }
        $b = ($this->services['mautic.validator.email'] ?? $this->getMautic_Validator_EmailService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'];
        }
        $c = ($this->services['mautic.company.deduper'] ?? $this->getMautic_Company_DeduperService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'];
        }
        $e = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'];
        }

        return $this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] = new \Mautic\LeadBundle\Model\CompanyModel($a, $b, $c, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $d, $e, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\DoNotContact' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\DoNotContact
     */
    protected function getDoNotContactService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\DoNotContact'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\DoNotContact'];
        }

        return $this->services['Mautic\\LeadBundle\\Model\\DoNotContact'] = new \Mautic\LeadBundle\Model\DoNotContact($a, ($this->services['Mautic\\LeadBundle\\Entity\\DoNotContactRepository'] ?? $this->getDoNotContactRepositoryService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\FieldModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\FieldModel
     */
    protected function getFieldModel2Service()
    {
        $a = ($this->services['mautic.schema.helper.column'] ?? $this->getMautic_Schema_Helper_ColumnService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $c = ($this->services['mautic.lead.field.custom_field_column'] ?? $this->getMautic_Lead_Field_CustomFieldColumnService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $d = ($this->services['mautic.lead.field.dispatcher.field_save_dispatcher'] ?? $this->getMautic_Lead_Field_Dispatcher_FieldSaveDispatcherService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $e = ($this->services['mautic.lead.field.lead_field_saver'] ?? $this->getMautic_Lead_Field_LeadFieldSaverService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $f = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $g = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }
        $h = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\FieldModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'];
        }

        return $this->services['Mautic\\LeadBundle\\Model\\FieldModel'] = new \Mautic\LeadBundle\Model\FieldModel($a, $b, $c, $d, ($this->services['Mautic\\LeadBundle\\Entity\\LeadFieldRepository'] ?? $this->getLeadFieldRepositoryService()), ($this->services['mautic.lead.field.fields_with_unique_identifier'] ?? $this->getMautic_Lead_Field_FieldsWithUniqueIdentifierService()), ($this->services['mautic.lead.field.field_list'] ?? $this->getMautic_Lead_Field_FieldListService()), $e, $f, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $g, $h, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\IpAddressModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\IpAddressModel
     */
    protected function getIpAddressModelService()
    {
        return $this->services['Mautic\\LeadBundle\\Model\\IpAddressModel'] = new \Mautic\LeadBundle\Model\IpAddressModel(($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\LeadModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\LeadModel
     */
    protected function getLeadModelService()
    {
        $a = ($this->services['mautic.helper.integration'] ?? $this->getMautic_Helper_IntegrationService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $c = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $d = ($this->services['.container.private.form.factory'] ?? $this->get_Container_Private_Form_FactoryService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $e = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $f = ($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'] ?? $this->getCategoryModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $g = ($this->services['mautic.channel.helper.channel_list'] ?? $this->getMautic_Channel_Helper_ChannelListService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $h = ($this->services['mautic.validator.email'] ?? $this->getMautic_Validator_EmailService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $i = ($this->services['mautic.user.provider'] ?? $this->getMautic_User_ProviderService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $j = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $k = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }
        $l = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\LeadModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'];
        }

        return $this->services['Mautic\\LeadBundle\\Model\\LeadModel'] = new \Mautic\LeadBundle\Model\LeadModel(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $a, $b, $c, $d, $e, $f, $g, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $h, $i, $j, ($this->services['mautic.tracker.device'] ?? $this->getMautic_Tracker_DeviceService()), ($this->services['Mautic\\LeadBundle\\Model\\IpAddressModel'] ?? $this->getIpAddressModelService()), ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $k, $l, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Model\ListModel' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Model\ListModel
     */
    protected function getListModelService()
    {
        $a = ($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'] ?? $this->getCategoryModelService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }
        $b = ($this->services['mautic.lead.model.lead_segment_service'] ?? $this->getMautic_Lead_Model_LeadSegmentServiceService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }
        $c = ($this->services['mautic.helper.segment.count.cache'] ?? $this->getMautic_Helper_Segment_Count_CacheService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }
        $d = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }
        $f = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\LeadBundle\\Model\\ListModel'])) {
            return $this->services['Mautic\\LeadBundle\\Model\\ListModel'];
        }

        return $this->services['Mautic\\LeadBundle\\Model\\ListModel'] = new \Mautic\LeadBundle\Model\ListModel($a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $b, ($this->services['mautic.lead.segment.stat.chart.query.factory'] ?? ($this->services['mautic.lead.segment.stat.chart.query.factory'] = new \Mautic\LeadBundle\Segment\Stat\SegmentChartQueryFactory())), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $c, $d, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $e, $f, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Twig\Extension\DncReasonExtension' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Twig\Extension\DncReasonExtension
     */
    protected function getDncReasonExtensionService()
    {
        return $this->services['Mautic\\LeadBundle\\Twig\\Extension\\DncReasonExtension'] = new \Mautic\LeadBundle\Twig\Extension\DncReasonExtension(($this->services['mautic.helper.twig.dnc_reason'] ?? $this->getMautic_Helper_Twig_DncReasonService()));
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Twig\Extension\FormFieldExtension' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Twig\Extension\FormFieldExtension
     */
    protected function getFormFieldExtension2Service()
    {
        return $this->services['Mautic\\LeadBundle\\Twig\\Extension\\FormFieldExtension'] = new \Mautic\LeadBundle\Twig\Extension\FormFieldExtension();
    }

    /*
     * Gets the public 'Mautic\LeadBundle\Twig\Extension\LeadExtension' shared autowired service.
     *
     * @return \Mautic\LeadBundle\Twig\Extension\LeadExtension
     */
    protected function getLeadExtensionService()
    {
        return $this->services['Mautic\\LeadBundle\\Twig\\Extension\\LeadExtension'] = new \Mautic\LeadBundle\Twig\Extension\LeadExtension(($this->services['mautic.helper.twig.avatar'] ?? $this->getMautic_Helper_Twig_AvatarService()));
    }

    /*
     * Gets the public 'Mautic\PageBundle\Entity\RedirectRepository' shared autowired service.
     *
     * @return \Mautic\PageBundle\Entity\RedirectRepository
     */
    protected function getRedirectRepositoryService()
    {
        return $this->services['Mautic\\PageBundle\\Entity\\RedirectRepository'] = new \Mautic\PageBundle\Entity\RedirectRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /*
     * Gets the public 'Mautic\PageBundle\Model\PageModel' shared autowired service.
     *
     * @return \Mautic\PageBundle\Model\PageModel
     */
    protected function getPageModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $c = ($this->services['Mautic\\PageBundle\\Model\\RedirectModel'] ?? $this->getRedirectModelService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $d = ($this->services['Mautic\\PageBundle\\Model\\TrackableModel'] ?? $this->getTrackableModelService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $e = ($this->services['mautic.queue.service'] ?? $this->getMautic_Queue_ServiceService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $f = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $g = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $h = ($this->services['mautic.lead.helper.contact_request_helper'] ?? $this->getMautic_Lead_Helper_ContactRequestHelperService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $i = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }
        $j = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\PageModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\PageModel'];
        }

        $this->services['Mautic\\PageBundle\\Model\\PageModel'] = $instance = new \Mautic\PageBundle\Model\PageModel(($this->services['mautic.helper.cookie'] ?? $this->getMautic_Helper_CookieService()), ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), $a, $b, $c, $d, $e, $f, ($this->services['mautic.tracker.device'] ?? $this->getMautic_Tracker_DeviceService()), $g, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $h, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $i, $j, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));

        $instance->setCatInUrl($this->getEnv('bool:resolve:MAUTIC_CAT_IN_PAGE_URL'));

        return $instance;
    }

    /*
     * Gets the public 'Mautic\PageBundle\Model\RedirectModel' shared autowired service.
     *
     * @return \Mautic\PageBundle\Model\RedirectModel
     */
    protected function getRedirectModelService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\RedirectModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\RedirectModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\RedirectModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\RedirectModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\RedirectModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\RedirectModel'];
        }

        return $this->services['Mautic\\PageBundle\\Model\\RedirectModel'] = new \Mautic\PageBundle\Model\RedirectModel(($this->services['mautic.helper.url'] ?? $this->getMautic_Helper_UrlService()), $a, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\PageBundle\Model\TrackableModel' shared autowired service.
     *
     * @return \Mautic\PageBundle\Model\TrackableModel
     */
    protected function getTrackableModelService()
    {
        $a = ($this->services['Mautic\\PageBundle\\Model\\RedirectModel'] ?? $this->getRedirectModelService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\TrackableModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\TrackableModel'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\TrackableModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\TrackableModel'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\TrackableModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\TrackableModel'];
        }
        $d = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\PageBundle\\Model\\TrackableModel'])) {
            return $this->services['Mautic\\PageBundle\\Model\\TrackableModel'];
        }

        return $this->services['Mautic\\PageBundle\\Model\\TrackableModel'] = new \Mautic\PageBundle\Model\TrackableModel($a, ($this->services['Mautic\\LeadBundle\\Entity\\LeadFieldRepository'] ?? $this->getLeadFieldRepositoryService()), $b, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $c, $d, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\PluginBundle\Model\PluginModel' shared autowired service.
     *
     * @return \Mautic\PluginBundle\Model\PluginModel
     */
    protected function getPluginModelService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['Mautic\\PluginBundle\\Model\\PluginModel'])) {
            return $this->services['Mautic\\PluginBundle\\Model\\PluginModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\PluginBundle\\Model\\PluginModel'])) {
            return $this->services['Mautic\\PluginBundle\\Model\\PluginModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\PluginBundle\\Model\\PluginModel'])) {
            return $this->services['Mautic\\PluginBundle\\Model\\PluginModel'];
        }

        return $this->services['Mautic\\PluginBundle\\Model\\PluginModel'] = new \Mautic\PluginBundle\Model\PluginModel($a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.helper.bundle'] ?? $this->getMautic_Helper_BundleService()), ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'Mautic\UserBundle\Controller\SecurityController' shared autowired service.
     *
     * @return \Mautic\UserBundle\Controller\SecurityController
     */
    protected function getSecurityControllerService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Factory\\MauticFactory'] ?? $this->getMauticFactoryService());

        if (isset($this->services['Mautic\\UserBundle\\Controller\\SecurityController'])) {
            return $this->services['Mautic\\UserBundle\\Controller\\SecurityController'];
        }
        $b = ($this->services['Mautic\\CoreBundle\\Factory\\ModelFactory'] ?? $this->getModelFactoryService());

        if (isset($this->services['Mautic\\UserBundle\\Controller\\SecurityController'])) {
            return $this->services['Mautic\\UserBundle\\Controller\\SecurityController'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\UserBundle\\Controller\\SecurityController'])) {
            return $this->services['Mautic\\UserBundle\\Controller\\SecurityController'];
        }

        $this->services['Mautic\\UserBundle\\Controller\\SecurityController'] = $instance = new \Mautic\UserBundle\Controller\SecurityController(($this->services['doctrine'] ?? $this->getDoctrineService()), $a, $b, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.core.service.flashbag'] ?? $this->getMautic_Core_Service_FlashbagService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()));

        $instance->setContainer(($this->privates['.service_locator.mx0UMmY'] ?? $this->get_ServiceLocator_Mx0UMmYService())->withContext('Mautic\\UserBundle\\Controller\\SecurityController', $this));

        return $instance;
    }

    /*
     * Gets the public 'Mautic\UserBundle\EventListener\SAMLSubscriber' shared autowired service.
     *
     * @return \Mautic\UserBundle\EventListener\SAMLSubscriber
     */
    protected function getSAMLSubscriberService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\UserBundle\\EventListener\\SAMLSubscriber'])) {
            return $this->services['Mautic\\UserBundle\\EventListener\\SAMLSubscriber'];
        }

        return $this->services['Mautic\\UserBundle\\EventListener\\SAMLSubscriber'] = new \Mautic\UserBundle\EventListener\SAMLSubscriber(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $a);
    }

    /*
     * Gets the public 'Mautic\UserBundle\Model\RoleModel' shared autowired service.
     *
     * @return \Mautic\UserBundle\Model\RoleModel
     */
    protected function getRoleModelService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\RoleModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\RoleModel'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\RoleModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\RoleModel'];
        }
        $c = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\RoleModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\RoleModel'];
        }

        return $this->services['Mautic\\UserBundle\\Model\\RoleModel'] = new \Mautic\UserBundle\Model\RoleModel($a, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $b, $c, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Mautic\UserBundle\Model\UserModel' shared autowired service.
     *
     * @return \Mautic\UserBundle\Model\UserModel
     */
    protected function getUserModelService()
    {
        $a = ($this->services['mautic.helper.mailer'] ?? $this->getMautic_Helper_MailerService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\UserModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\UserModel'];
        }
        $b = ($this->services['mautic.user.model.user_token_service'] ?? $this->getMautic_User_Model_UserTokenServiceService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\UserModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\UserModel'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\UserModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\UserModel'];
        }
        $d = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['Mautic\\UserBundle\\Model\\UserModel'])) {
            return $this->services['Mautic\\UserBundle\\Model\\UserModel'];
        }

        return $this->services['Mautic\\UserBundle\\Model\\UserModel'] = new \Mautic\UserBundle\Model\UserModel($a, $b, ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService()), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), $c, $d, ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService()), ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected function getArgumentResolverInterfaceService()
    {
        return $this->services['Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['argument_resolver.request_attribute'] ?? ($this->privates['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver()));
            yield 1 => ($this->privates['argument_resolver.request'] ?? ($this->privates['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver()));
            yield 2 => ($this->privates['argument_resolver.session'] ?? ($this->privates['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver()));
            yield 3 => ($this->privates['security.user_value_resolver'] ?? $this->load('getSecurity_UserValueResolverService'));
            yield 4 => ($this->privates['argument_resolver.service'] ?? $this->load('getArgumentResolver_ServiceService'));
            yield 5 => ($this->privates['argument_resolver.default'] ?? ($this->privates['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver()));
            yield 6 => ($this->privates['argument_resolver.variadic'] ?? ($this->privates['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver()));
        }, 7));
    }

    /*
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, $this->parameters['doctrine.connections'], $this->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /*
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Connection\ConnectionWrapper
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->getDoctrine_Dbal_DefaultConnection_EventManagerService());

        if (isset($this->services['doctrine.dbal.default_connection'])) {
            return $this->services['doctrine.dbal.default_connection'];
        }
        $b = new \Doctrine\DBAL\Configuration();
        $b->setSchemaManagerFactory(($this->privates['doctrine.dbal.legacy_schema_manager_factory'] ?? ($this->privates['doctrine.dbal.legacy_schema_manager_factory'] = new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory())));
        $b->setMiddlewares([]);
        $b->setResultCache(($this->privates['cache.doctrine.orm.default.result'] ?? ($this->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));

        return $this->services['doctrine.dbal.default_connection'] = ($this->privates['doctrine.dbal.connection_factory'] ?? $this->getDoctrine_Dbal_ConnectionFactoryService())->createConnection(['driver' => $this->getEnv('nullable:resolve:MAUTIC_DB_DRIVER'), 'host' => $this->getEnv('nullable:resolve:MAUTIC_DB_HOST'), 'port' => $this->getEnv('intNullable:resolve:MAUTIC_DB_PORT'), 'dbname' => $this->getEnv('nullable:resolve:MAUTIC_DB_NAME'), 'user' => $this->getEnv('nullable:resolve:MAUTIC_DB_USER'), 'password' => $this->getEnv('nullable:resolve:MAUTIC_DB_PASSWORD'), 'charset' => 'utf8mb4', 'driverOptions' => [17 => true], 'wrapperClass' => 'Mautic\\CoreBundle\\Doctrine\\Connection\\ConnectionWrapper', 'serverVersion' => $this->getEnv('mauticconst:MAUTIC_DB_SERVER_VERSION'), 'defaultTableOptions' => ['charset' => 'utf8mb4', 'collate' => 'utf8mb4_unicode_ci', 'row_format' => 'DYNAMIC']], $b, $a, ['enum' => 'string', 'point' => 'string', 'bit' => 'string']);
    }

    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService($lazyLoad = true)
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['doctrine.orm.default_entity_manager'])) {
            return $this->services['doctrine.orm.default_entity_manager'];
        }
        $b = ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->getDoctrine_Dbal_DefaultConnection_EventManagerService());

        if (isset($this->services['doctrine.orm.default_entity_manager'])) {
            return $this->services['doctrine.orm.default_entity_manager'];
        }
        $c = new \Doctrine\ORM\Configuration();

        $d = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $e = new \Doctrine\ORM\Mapping\Driver\StaticPHPDriver([0 => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle/Entity'), 1 => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle/Entity'), 2 => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle/Entity'), 3 => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle/Entity'), 4 => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle/Entity'), 5 => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle/Entity'), 6 => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle/Entity'), 7 => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle/Entity'), 8 => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle/Entity'), 9 => (\dirname(__DIR__, 4).'/app/bundles/FormBundle/Entity'), 10 => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle/Entity'), 11 => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle/Entity'), 12 => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle/Entity'), 13 => (\dirname(__DIR__, 4).'/app/bundles/PageBundle/Entity'), 14 => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle/Entity'), 15 => (\dirname(__DIR__, 4).'/app/bundles/PointBundle/Entity'), 16 => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle/Entity'), 17 => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle/Entity'), 18 => (\dirname(__DIR__, 4).'/app/bundles/StageBundle/Entity'), 19 => (\dirname(__DIR__, 4).'/app/bundles/UserBundle/Entity'), 20 => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle/Entity'), 21 => (\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle/Entity'), 22 => (\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle/Entity'), 23 => (\dirname(__DIR__, 4).'/plugins/MauticFocusBundle/Entity'), 24 => (\dirname(__DIR__, 4).'/plugins/MauticSocialBundle/Entity'), 25 => (\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle/Entity')]);
        $f = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver([(\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/config/doctrine') => 'FOS\\OAuthServerBundle\\Entity'], '.orm.xml', false);
        $f->setGlobalBasename('mapping');

        $d->addDriver($e, 'Mautic\\ApiBundle\\Entity');
        $d->addDriver($e, 'Mautic\\AssetBundle\\Entity');
        $d->addDriver($e, 'Mautic\\CampaignBundle\\Entity');
        $d->addDriver($e, 'Mautic\\CategoryBundle\\Entity');
        $d->addDriver($e, 'Mautic\\ChannelBundle\\Entity');
        $d->addDriver($e, 'Mautic\\CoreBundle\\Entity');
        $d->addDriver($e, 'Mautic\\DashboardBundle\\Entity');
        $d->addDriver($e, 'Mautic\\DynamicContentBundle\\Entity');
        $d->addDriver($e, 'Mautic\\EmailBundle\\Entity');
        $d->addDriver($e, 'Mautic\\FormBundle\\Entity');
        $d->addDriver($e, 'Mautic\\IntegrationsBundle\\Entity');
        $d->addDriver($e, 'Mautic\\LeadBundle\\Entity');
        $d->addDriver($e, 'Mautic\\NotificationBundle\\Entity');
        $d->addDriver($e, 'Mautic\\PageBundle\\Entity');
        $d->addDriver($e, 'Mautic\\PluginBundle\\Entity');
        $d->addDriver($e, 'Mautic\\PointBundle\\Entity');
        $d->addDriver($e, 'Mautic\\ReportBundle\\Entity');
        $d->addDriver($e, 'Mautic\\SmsBundle\\Entity');
        $d->addDriver($e, 'Mautic\\StageBundle\\Entity');
        $d->addDriver($e, 'Mautic\\UserBundle\\Entity');
        $d->addDriver($e, 'Mautic\\WebhookBundle\\Entity');
        $d->addDriver($e, 'MauticPlugin\\GrapesJsBuilderBundle\\Entity');
        $d->addDriver($e, 'MauticPlugin\\MauticTagManagerBundle\\Entity');
        $d->addDriver($e, 'MauticPlugin\\MauticFocusBundle\\Entity');
        $d->addDriver($e, 'MauticPlugin\\MauticSocialBundle\\Entity');
        $d->addDriver($e, 'MauticPlugin\\MauticCitrixBundle\\Entity');
        $d->addDriver($f, 'FOS\\OAuthServerBundle\\Entity');

        $c->setEntityNamespaces(['MauticApiBundle' => 'Mautic\\ApiBundle\\Entity', 'MauticAssetBundle' => 'Mautic\\AssetBundle\\Entity', 'MauticCampaignBundle' => 'Mautic\\CampaignBundle\\Entity', 'MauticCategoryBundle' => 'Mautic\\CategoryBundle\\Entity', 'MauticChannelBundle' => 'Mautic\\ChannelBundle\\Entity', 'MauticCoreBundle' => 'Mautic\\CoreBundle\\Entity', 'MauticDashboardBundle' => 'Mautic\\DashboardBundle\\Entity', 'MauticDynamicContentBundle' => 'Mautic\\DynamicContentBundle\\Entity', 'MauticEmailBundle' => 'Mautic\\EmailBundle\\Entity', 'MauticFormBundle' => 'Mautic\\FormBundle\\Entity', 'IntegrationsBundle' => 'Mautic\\IntegrationsBundle\\Entity', 'MauticLeadBundle' => 'Mautic\\LeadBundle\\Entity', 'MauticNotificationBundle' => 'Mautic\\NotificationBundle\\Entity', 'MauticPageBundle' => 'Mautic\\PageBundle\\Entity', 'MauticPluginBundle' => 'Mautic\\PluginBundle\\Entity', 'MauticPointBundle' => 'Mautic\\PointBundle\\Entity', 'MauticReportBundle' => 'Mautic\\ReportBundle\\Entity', 'MauticSmsBundle' => 'Mautic\\SmsBundle\\Entity', 'MauticStageBundle' => 'Mautic\\StageBundle\\Entity', 'MauticUserBundle' => 'Mautic\\UserBundle\\Entity', 'MauticWebhookBundle' => 'Mautic\\WebhookBundle\\Entity', 'GrapesJsBuilderBundle' => 'MauticPlugin\\GrapesJsBuilderBundle\\Entity', 'MauticTagManagerBundle' => 'MauticPlugin\\MauticTagManagerBundle\\Entity', 'MauticFocusBundle' => 'MauticPlugin\\MauticFocusBundle\\Entity', 'MauticSocialBundle' => 'MauticPlugin\\MauticSocialBundle\\Entity', 'MauticCitrixBundle' => 'MauticPlugin\\MauticCitrixBundle\\Entity', 'FOSOAuthServerBundle' => 'FOS\\OAuthServerBundle\\Entity']);
        $c->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($this->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $c->setQueryCache(($this->privates['cache.doctrine.orm.default.query'] ?? ($this->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $c->setResultCache(($this->privates['cache.doctrine.orm.default.result'] ?? ($this->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $c->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($d, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $c->setProxyDir(($this->targetDir.''.'/doctrine/orm/Proxies'));
        $c->setProxyNamespace('Proxies');
        $c->setAutoGenerateProxyClasses(false);
        $c->setSchemaIgnoreClasses([]);
        $c->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $c->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $c->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());
        $c->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $c->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($this));
        $c->setLazyGhostObjectEnabled(false);
        $c->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'MauticPlugin\\GrapesJsBuilderBundle\\Entity\\GrapesJsBuilderRepository' => ['services', 'MauticPlugin\\GrapesJsBuilderBundle\\Entity\\GrapesJsBuilderRepository', 'getGrapesJsBuilderRepositoryService', true],
            'MauticPlugin\\MauticCitrixBundle\\Entity\\CitrixEventRepository' => ['services', 'MauticPlugin\\MauticCitrixBundle\\Entity\\CitrixEventRepository', 'getCitrixEventRepositoryService', true],
            'MauticPlugin\\MauticFocusBundle\\Entity\\FocusRepository' => ['services', 'MauticPlugin\\MauticFocusBundle\\Entity\\FocusRepository', 'getFocusRepositoryService', true],
            'MauticPlugin\\MauticFocusBundle\\Entity\\StatRepository' => ['services', 'MauticPlugin\\MauticFocusBundle\\Entity\\StatRepository', 'getStatRepositoryService', true],
            'MauticPlugin\\MauticSocialBundle\\Entity\\LeadRepository' => ['services', 'MauticPlugin\\MauticSocialBundle\\Entity\\LeadRepository', 'getLeadRepositoryService', true],
            'MauticPlugin\\MauticSocialBundle\\Entity\\MonitoringRepository' => ['services', 'MauticPlugin\\MauticSocialBundle\\Entity\\MonitoringRepository', 'getMonitoringRepositoryService', true],
            'MauticPlugin\\MauticSocialBundle\\Entity\\PostCountRepository' => ['services', 'MauticPlugin\\MauticSocialBundle\\Entity\\PostCountRepository', 'getPostCountRepositoryService', true],
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetRepository' => ['services', 'MauticPlugin\\MauticSocialBundle\\Entity\\TweetRepository', 'getTweetRepositoryService', true],
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetStatRepository' => ['services', 'MauticPlugin\\MauticSocialBundle\\Entity\\TweetStatRepository', 'getTweetStatRepositoryService', true],
            'MauticPlugin\\MauticTagManagerBundle\\Entity\\TagRepository' => ['services', 'MauticPlugin\\MauticTagManagerBundle\\Entity\\TagRepository', 'getTagRepositoryService', true],
            'Mautic\\ApiBundle\\Entity\\oAuth2\\ClientRepository' => ['services', 'Mautic\\ApiBundle\\Entity\\oAuth2\\ClientRepository', 'getClientRepositoryService', true],
            'Mautic\\AssetBundle\\Entity\\AssetRepository' => ['services', 'Mautic\\AssetBundle\\Entity\\AssetRepository', 'getAssetRepositoryService', true],
            'Mautic\\AssetBundle\\Entity\\DownloadRepository' => ['services', 'Mautic\\AssetBundle\\Entity\\DownloadRepository', 'getDownloadRepositoryService', true],
            'Mautic\\CampaignBundle\\Entity\\CampaignRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\CampaignRepository', 'getCampaignRepositoryService', true],
            'Mautic\\CampaignBundle\\Entity\\EventRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\EventRepository', 'getEventRepositoryService', true],
            'Mautic\\CampaignBundle\\Entity\\FailedLeadEventLogRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\FailedLeadEventLogRepository', 'getFailedLeadEventLogRepositoryService', true],
            'Mautic\\CampaignBundle\\Entity\\LeadEventLogRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\LeadEventLogRepository', 'getLeadEventLogRepositoryService', true],
            'Mautic\\CampaignBundle\\Entity\\LeadRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\LeadRepository', 'getLeadRepository2Service', true],
            'Mautic\\CampaignBundle\\Entity\\SummaryRepository' => ['services', 'Mautic\\CampaignBundle\\Entity\\SummaryRepository', 'getSummaryRepositoryService', true],
            'Mautic\\CategoryBundle\\Entity\\CategoryRepository' => ['services', 'Mautic\\CategoryBundle\\Entity\\CategoryRepository', 'getCategoryRepositoryService', true],
            'Mautic\\ChannelBundle\\Entity\\MessageQueueRepository' => ['services', 'Mautic\\ChannelBundle\\Entity\\MessageQueueRepository', 'getMessageQueueRepositoryService', true],
            'Mautic\\ChannelBundle\\Entity\\MessageRepository' => ['services', 'Mautic\\ChannelBundle\\Entity\\MessageRepository', 'getMessageRepositoryService', true],
            'Mautic\\CoreBundle\\Entity\\AuditLogRepository' => ['services', 'Mautic\\CoreBundle\\Entity\\AuditLogRepository', 'getAuditLogRepositoryService', true],
            'Mautic\\CoreBundle\\Entity\\CommonRepository' => ['services', 'Mautic\\CoreBundle\\Entity\\CommonRepository', 'getCommonRepositoryService', true],
            'Mautic\\CoreBundle\\Entity\\IpAddressRepository' => ['services', 'Mautic\\CoreBundle\\Entity\\IpAddressRepository', 'getIpAddressRepositoryService', true],
            'Mautic\\CoreBundle\\Entity\\NotificationRepository' => ['services', 'Mautic\\CoreBundle\\Entity\\NotificationRepository', 'getNotificationRepositoryService', true],
            'Mautic\\DashboardBundle\\Entity\\WidgetRepository' => ['services', 'Mautic\\DashboardBundle\\Entity\\WidgetRepository', 'getWidgetRepositoryService', true],
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentLeadDataRepository' => ['services', 'Mautic\\DynamicContentBundle\\Entity\\DynamicContentLeadDataRepository', 'getDynamicContentLeadDataRepositoryService', true],
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentRepository' => ['services', 'Mautic\\DynamicContentBundle\\Entity\\DynamicContentRepository', 'getDynamicContentRepositoryService', true],
            'Mautic\\DynamicContentBundle\\Entity\\StatRepository' => ['services', 'Mautic\\DynamicContentBundle\\Entity\\StatRepository', 'getStatRepository2Service', true],
            'Mautic\\EmailBundle\\Entity\\CopyRepository' => ['services', 'Mautic\\EmailBundle\\Entity\\CopyRepository', 'getCopyRepositoryService', true],
            'Mautic\\EmailBundle\\Entity\\EmailReplyRepository' => ['services', 'Mautic\\EmailBundle\\Entity\\EmailReplyRepository', 'getEmailReplyRepositoryService', true],
            'Mautic\\EmailBundle\\Entity\\EmailRepository' => ['services', 'Mautic\\EmailBundle\\Entity\\EmailRepository', 'getEmailRepositoryService', true],
            'Mautic\\EmailBundle\\Entity\\StatDeviceRepository' => ['services', 'Mautic\\EmailBundle\\Entity\\StatDeviceRepository', 'getStatDeviceRepositoryService', true],
            'Mautic\\EmailBundle\\Entity\\StatRepository' => ['services', 'Mautic\\EmailBundle\\Entity\\StatRepository', 'getStatRepository3Service', true],
            'Mautic\\FormBundle\\Entity\\ActionRepository' => ['services', 'Mautic\\FormBundle\\Entity\\ActionRepository', 'getActionRepositoryService', true],
            'Mautic\\FormBundle\\Entity\\FieldRepository' => ['services', 'Mautic\\FormBundle\\Entity\\FieldRepository', 'getFieldRepositoryService', true],
            'Mautic\\FormBundle\\Entity\\FormRepository' => ['services', 'Mautic\\FormBundle\\Entity\\FormRepository', 'getFormRepositoryService', false],
            'Mautic\\FormBundle\\Entity\\SubmissionRepository' => ['services', 'Mautic\\FormBundle\\Entity\\SubmissionRepository', 'getSubmissionRepositoryService', true],
            'Mautic\\IntegrationsBundle\\Entity\\FieldChangeRepository' => ['services', 'Mautic\\IntegrationsBundle\\Entity\\FieldChangeRepository', 'getFieldChangeRepositoryService', true],
            'Mautic\\IntegrationsBundle\\Entity\\ObjectMappingRepository' => ['services', 'Mautic\\IntegrationsBundle\\Entity\\ObjectMappingRepository', 'getObjectMappingRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\CompanyChangeLogRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\CompanyChangeLogRepository', 'getCompanyChangeLogRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\CompanyLeadRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\CompanyLeadRepository', 'getCompanyLeadRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\CompanyRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\CompanyRepository', 'getCompanyRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\ContactExportSchedulerRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\ContactExportSchedulerRepository', 'getContactExportSchedulerRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\DoNotContactRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\DoNotContactRepository', 'getDoNotContactRepositoryService', false],
            'Mautic\\LeadBundle\\Entity\\FrequencyRuleRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\FrequencyRuleRepository', 'getFrequencyRuleRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\ImportRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\ImportRepository', 'getImportRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\LeadCategoryRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadCategoryRepository', 'getLeadCategoryRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\LeadDeviceRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadDeviceRepository', 'getLeadDeviceRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\LeadEventLogRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadEventLogRepository', 'getLeadEventLogRepository2Service', true],
            'Mautic\\LeadBundle\\Entity\\LeadFieldRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadFieldRepository', 'getLeadFieldRepositoryService', false],
            'Mautic\\LeadBundle\\Entity\\LeadListRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadListRepository', 'getLeadListRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\LeadNoteRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadNoteRepository', 'getLeadNoteRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\LeadRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\LeadRepository', 'getLeadRepository3Service', true],
            'Mautic\\LeadBundle\\Entity\\ListLeadRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\ListLeadRepository', 'getListLeadRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\MergeRecordRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\MergeRecordRepository', 'getMergeRecordRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\PointsChangeLogRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\PointsChangeLogRepository', 'getPointsChangeLogRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\StagesChangeLogRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\StagesChangeLogRepository', 'getStagesChangeLogRepositoryService', true],
            'Mautic\\LeadBundle\\Entity\\TagRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\TagRepository', 'getTagRepository2Service', true],
            'Mautic\\LeadBundle\\Entity\\UtmTagRepository' => ['services', 'Mautic\\LeadBundle\\Entity\\UtmTagRepository', 'getUtmTagRepositoryService', true],
            'Mautic\\NotificationBundle\\Entity\\NotificationRepository' => ['services', 'Mautic\\NotificationBundle\\Entity\\NotificationRepository', 'getNotificationRepository2Service', true],
            'Mautic\\NotificationBundle\\Entity\\PushIDRepository' => ['services', 'Mautic\\NotificationBundle\\Entity\\PushIDRepository', 'getPushIDRepositoryService', true],
            'Mautic\\NotificationBundle\\Entity\\StatRepository' => ['services', 'Mautic\\NotificationBundle\\Entity\\StatRepository', 'getStatRepository4Service', true],
            'Mautic\\PageBundle\\Entity\\HitRepository' => ['services', 'Mautic\\PageBundle\\Entity\\HitRepository', 'getHitRepositoryService', true],
            'Mautic\\PageBundle\\Entity\\PageRepository' => ['services', 'Mautic\\PageBundle\\Entity\\PageRepository', 'getPageRepositoryService', true],
            'Mautic\\PageBundle\\Entity\\RedirectRepository' => ['services', 'Mautic\\PageBundle\\Entity\\RedirectRepository', 'getRedirectRepositoryService', false],
            'Mautic\\PageBundle\\Entity\\TrackableRepository' => ['services', 'Mautic\\PageBundle\\Entity\\TrackableRepository', 'getTrackableRepositoryService', true],
            'Mautic\\PageBundle\\Entity\\VideoHitRepository' => ['services', 'Mautic\\PageBundle\\Entity\\VideoHitRepository', 'getVideoHitRepositoryService', true],
            'Mautic\\PluginBundle\\Entity\\IntegrationEntityRepository' => ['services', 'Mautic\\PluginBundle\\Entity\\IntegrationEntityRepository', 'getIntegrationEntityRepositoryService', true],
            'Mautic\\PluginBundle\\Entity\\IntegrationRepository' => ['services', 'Mautic\\PluginBundle\\Entity\\IntegrationRepository', 'getIntegrationRepositoryService', true],
            'Mautic\\PluginBundle\\Entity\\PluginRepository' => ['services', 'Mautic\\PluginBundle\\Entity\\PluginRepository', 'getPluginRepositoryService', true],
            'Mautic\\PointBundle\\Entity\\LeadPointLogRepository' => ['services', 'Mautic\\PointBundle\\Entity\\LeadPointLogRepository', 'getLeadPointLogRepositoryService', true],
            'Mautic\\PointBundle\\Entity\\LeadTriggerLogRepository' => ['services', 'Mautic\\PointBundle\\Entity\\LeadTriggerLogRepository', 'getLeadTriggerLogRepositoryService', true],
            'Mautic\\PointBundle\\Entity\\PointRepository' => ['services', 'Mautic\\PointBundle\\Entity\\PointRepository', 'getPointRepositoryService', true],
            'Mautic\\PointBundle\\Entity\\TriggerEventRepository' => ['services', 'Mautic\\PointBundle\\Entity\\TriggerEventRepository', 'getTriggerEventRepositoryService', true],
            'Mautic\\PointBundle\\Entity\\TriggerRepository' => ['services', 'Mautic\\PointBundle\\Entity\\TriggerRepository', 'getTriggerRepositoryService', true],
            'Mautic\\ReportBundle\\Entity\\ReportRepository' => ['services', 'Mautic\\ReportBundle\\Entity\\ReportRepository', 'getReportRepositoryService', true],
            'Mautic\\ReportBundle\\Entity\\SchedulerRepository' => ['services', 'Mautic\\ReportBundle\\Entity\\SchedulerRepository', 'getSchedulerRepositoryService', true],
            'Mautic\\SmsBundle\\Entity\\SmsRepository' => ['services', 'Mautic\\SmsBundle\\Entity\\SmsRepository', 'getSmsRepositoryService', true],
            'Mautic\\SmsBundle\\Entity\\StatRepository' => ['services', 'Mautic\\SmsBundle\\Entity\\StatRepository', 'getStatRepository5Service', true],
            'Mautic\\StageBundle\\Entity\\LeadStageLogRepository' => ['services', 'Mautic\\StageBundle\\Entity\\LeadStageLogRepository', 'getLeadStageLogRepositoryService', true],
            'Mautic\\StageBundle\\Entity\\StageRepository' => ['services', 'Mautic\\StageBundle\\Entity\\StageRepository', 'getStageRepositoryService', true],
            'Mautic\\UserBundle\\Entity\\PermissionRepository' => ['services', 'Mautic\\UserBundle\\Entity\\PermissionRepository', 'getPermissionRepositoryService', true],
            'Mautic\\UserBundle\\Entity\\RoleRepository' => ['services', 'Mautic\\UserBundle\\Entity\\RoleRepository', 'getRoleRepositoryService', true],
            'Mautic\\UserBundle\\Entity\\UserRepository' => ['services', 'Mautic\\UserBundle\\Entity\\UserRepository', 'getUserRepositoryService', true],
            'Mautic\\UserBundle\\Entity\\UserTokenRepository' => ['services', 'Mautic\\UserBundle\\Entity\\UserTokenRepository', 'getUserTokenRepositoryService', true],
            'Mautic\\WebhookBundle\\Entity\\EventRepository' => ['services', 'Mautic\\WebhookBundle\\Entity\\EventRepository', 'getEventRepository2Service', true],
            'Mautic\\WebhookBundle\\Entity\\LogRepository' => ['services', 'Mautic\\WebhookBundle\\Entity\\LogRepository', 'getLogRepositoryService', true],
            'Mautic\\WebhookBundle\\Entity\\WebhookQueueRepository' => ['services', 'Mautic\\WebhookBundle\\Entity\\WebhookQueueRepository', 'getWebhookQueueRepositoryService', true],
            'Mautic\\WebhookBundle\\Entity\\WebhookRepository' => ['services', 'Mautic\\WebhookBundle\\Entity\\WebhookRepository', 'getWebhookRepositoryService', true],
        ], [
            'MauticPlugin\\GrapesJsBuilderBundle\\Entity\\GrapesJsBuilderRepository' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Entity\\CitrixEventRepository' => '?',
            'MauticPlugin\\MauticFocusBundle\\Entity\\FocusRepository' => '?',
            'MauticPlugin\\MauticFocusBundle\\Entity\\StatRepository' => '?',
            'MauticPlugin\\MauticSocialBundle\\Entity\\LeadRepository' => '?',
            'MauticPlugin\\MauticSocialBundle\\Entity\\MonitoringRepository' => '?',
            'MauticPlugin\\MauticSocialBundle\\Entity\\PostCountRepository' => '?',
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetRepository' => '?',
            'MauticPlugin\\MauticSocialBundle\\Entity\\TweetStatRepository' => '?',
            'MauticPlugin\\MauticTagManagerBundle\\Entity\\TagRepository' => '?',
            'Mautic\\ApiBundle\\Entity\\oAuth2\\ClientRepository' => '?',
            'Mautic\\AssetBundle\\Entity\\AssetRepository' => '?',
            'Mautic\\AssetBundle\\Entity\\DownloadRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\CampaignRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\EventRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\FailedLeadEventLogRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\LeadEventLogRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\LeadRepository' => '?',
            'Mautic\\CampaignBundle\\Entity\\SummaryRepository' => '?',
            'Mautic\\CategoryBundle\\Entity\\CategoryRepository' => '?',
            'Mautic\\ChannelBundle\\Entity\\MessageQueueRepository' => '?',
            'Mautic\\ChannelBundle\\Entity\\MessageRepository' => '?',
            'Mautic\\CoreBundle\\Entity\\AuditLogRepository' => '?',
            'Mautic\\CoreBundle\\Entity\\CommonRepository' => '?',
            'Mautic\\CoreBundle\\Entity\\IpAddressRepository' => '?',
            'Mautic\\CoreBundle\\Entity\\NotificationRepository' => '?',
            'Mautic\\DashboardBundle\\Entity\\WidgetRepository' => '?',
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentLeadDataRepository' => '?',
            'Mautic\\DynamicContentBundle\\Entity\\DynamicContentRepository' => '?',
            'Mautic\\DynamicContentBundle\\Entity\\StatRepository' => '?',
            'Mautic\\EmailBundle\\Entity\\CopyRepository' => '?',
            'Mautic\\EmailBundle\\Entity\\EmailReplyRepository' => '?',
            'Mautic\\EmailBundle\\Entity\\EmailRepository' => '?',
            'Mautic\\EmailBundle\\Entity\\StatDeviceRepository' => '?',
            'Mautic\\EmailBundle\\Entity\\StatRepository' => '?',
            'Mautic\\FormBundle\\Entity\\ActionRepository' => '?',
            'Mautic\\FormBundle\\Entity\\FieldRepository' => '?',
            'Mautic\\FormBundle\\Entity\\FormRepository' => '?',
            'Mautic\\FormBundle\\Entity\\SubmissionRepository' => '?',
            'Mautic\\IntegrationsBundle\\Entity\\FieldChangeRepository' => '?',
            'Mautic\\IntegrationsBundle\\Entity\\ObjectMappingRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\CompanyChangeLogRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\CompanyLeadRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\CompanyRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\ContactExportSchedulerRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\DoNotContactRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\FrequencyRuleRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\ImportRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadCategoryRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadDeviceRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadEventLogRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadFieldRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadListRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadNoteRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\LeadRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\ListLeadRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\MergeRecordRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\PointsChangeLogRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\StagesChangeLogRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\TagRepository' => '?',
            'Mautic\\LeadBundle\\Entity\\UtmTagRepository' => '?',
            'Mautic\\NotificationBundle\\Entity\\NotificationRepository' => '?',
            'Mautic\\NotificationBundle\\Entity\\PushIDRepository' => '?',
            'Mautic\\NotificationBundle\\Entity\\StatRepository' => '?',
            'Mautic\\PageBundle\\Entity\\HitRepository' => '?',
            'Mautic\\PageBundle\\Entity\\PageRepository' => '?',
            'Mautic\\PageBundle\\Entity\\RedirectRepository' => '?',
            'Mautic\\PageBundle\\Entity\\TrackableRepository' => '?',
            'Mautic\\PageBundle\\Entity\\VideoHitRepository' => '?',
            'Mautic\\PluginBundle\\Entity\\IntegrationEntityRepository' => '?',
            'Mautic\\PluginBundle\\Entity\\IntegrationRepository' => '?',
            'Mautic\\PluginBundle\\Entity\\PluginRepository' => '?',
            'Mautic\\PointBundle\\Entity\\LeadPointLogRepository' => '?',
            'Mautic\\PointBundle\\Entity\\LeadTriggerLogRepository' => '?',
            'Mautic\\PointBundle\\Entity\\PointRepository' => '?',
            'Mautic\\PointBundle\\Entity\\TriggerEventRepository' => '?',
            'Mautic\\PointBundle\\Entity\\TriggerRepository' => '?',
            'Mautic\\ReportBundle\\Entity\\ReportRepository' => '?',
            'Mautic\\ReportBundle\\Entity\\SchedulerRepository' => '?',
            'Mautic\\SmsBundle\\Entity\\SmsRepository' => '?',
            'Mautic\\SmsBundle\\Entity\\StatRepository' => '?',
            'Mautic\\StageBundle\\Entity\\LeadStageLogRepository' => '?',
            'Mautic\\StageBundle\\Entity\\StageRepository' => '?',
            'Mautic\\UserBundle\\Entity\\PermissionRepository' => '?',
            'Mautic\\UserBundle\\Entity\\RoleRepository' => '?',
            'Mautic\\UserBundle\\Entity\\UserRepository' => '?',
            'Mautic\\UserBundle\\Entity\\UserTokenRepository' => '?',
            'Mautic\\WebhookBundle\\Entity\\EventRepository' => '?',
            'Mautic\\WebhookBundle\\Entity\\LogRepository' => '?',
            'Mautic\\WebhookBundle\\Entity\\WebhookQueueRepository' => '?',
            'Mautic\\WebhookBundle\\Entity\\WebhookRepository' => '?',
        ])));
        $c->addCustomStringFunction('match', 'DoctrineExtensions\\Query\\Mysql\\MatchAgainst');

        $this->services['doctrine.orm.default_entity_manager'] = $instance = new \Doctrine\ORM\EntityManager($a, $c, $b);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['mautic.kernel.listener.command_exception'] ?? $this->load('getMautic_Kernel_Listener_CommandExceptionService'));
        }, 1 => 'onConsoleError'], 0);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['mautic.kernel.listener.command_terminate'] ?? $this->load('getMautic_Kernel_Listener_CommandTerminateService'));
        }, 1 => 'onConsoleTerminate'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['fos_rest.body_listener'] ?? $this->getFosRest_BodyListenerService());
        }, 1 => 'onKernelRequest'], 10);
        $instance->addListener('oneup_uploader.validation', [0 => function () {
            return ($this->privates['Oneup\\UploaderBundle\\EventListener\\MaxSizeValidationListener'] ?? ($this->privates['Oneup\\UploaderBundle\\EventListener\\MaxSizeValidationListener'] = new \Oneup\UploaderBundle\EventListener\MaxSizeValidationListener()));
        }, 1 => 'onValidate'], 0);
        $instance->addListener('oneup_uploader.validation', [0 => function () {
            return ($this->privates['Oneup\\UploaderBundle\\EventListener\\AllowedMimetypeAndExtensionValidationListener'] ?? ($this->privates['Oneup\\UploaderBundle\\EventListener\\AllowedMimetypeAndExtensionValidationListener'] = new \Oneup\UploaderBundle\EventListener\AllowedMimetypeAndExtensionValidationListener()));
        }, 1 => 'onValidate'], 0);
        $instance->addListener('oneup_uploader.validation', [0 => function () {
            return ($this->privates['Oneup\\UploaderBundle\\EventListener\\DisallowedMimetypeValidationListener'] ?? ($this->privates['Oneup\\UploaderBundle\\EventListener\\DisallowedMimetypeValidationListener'] = new \Oneup\UploaderBundle\EventListener\DisallowedMimetypeValidationListener()));
        }, 1 => 'onValidate'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['noxlogic_rate_limit.rate_limit_annotation_listener'] ?? $this->getNoxlogicRateLimit_RateLimitAnnotationListenerService());
        }, 1 => 'onKernelController'], -10);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['noxlogic_rate_limit.header_modification_listener'] ?? $this->getNoxlogicRateLimit_HeaderModificationListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('ratelimit.generate.key', [0 => function () {
            return ($this->privates['noxlogic_rate_limit.oauth_key_generate_listener'] ?? $this->load('getNoxlogicRateLimit_OauthKeyGenerateListenerService'));
        }, 1 => 'onGenerateKey'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->services['mautic.exception.listener'] ?? $this->load('getMautic_Exception_ListenerService'));
        }, 1 => 'onKernelException'], 255);
        $instance->addListener('fos_oauth_server.pre_authorization_process', [0 => function () {
            return ($this->services['mautic.api.oauth.event_listener'] ?? $this->load('getMautic_Api_Oauth_EventListenerService'));
        }, 1 => 'onPreAuthorizationProcess'], 0);
        $instance->addListener('fos_oauth_server.post_authorization_process', [0 => function () {
            return ($this->services['mautic.api.oauth.event_listener'] ?? $this->load('getMautic_Api_Oauth_EventListenerService'));
        }, 1 => 'onPostAuthorizationProcess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () {
            return ($this->services['mautic.security.logout_handler'] ?? $this->load('getMautic_Security_LogoutHandlerService'));
        }, 1 => 'onSymfonyComponentSecurityHttpEventLogoutEvent'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['response_listener'] ?? ($this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['streamed_response_listener'] ?? ($this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener()));
        }, 1 => 'onKernelResponse'], -1024);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['validate_request_listener'] ?? ($this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()));
        }, 1 => 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onKernelException'], -128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'removeCspHeader'], -128);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.suggest_missing_package_subscriber'] ?? ($this->privates['console.suggest_missing_package_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()));
        }, 1 => 'onConsoleError'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['mailer.envelope_listener'] ?? ($this->privates['mailer.envelope_listener'] = new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL)));
        }, 1 => 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['mailer.message_logger_listener'] ?? ($this->privates['mailer.message_logger_listener'] = new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()));
        }, 1 => 'onMessage'], -255);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['fragment.listener'] ?? $this->getFragment_ListenerService());
        }, 1 => 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('console.command', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelException'], -64);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelResponse'], -1000);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onFinishRequest'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? $this->load('getMessenger_Retry_SendFailedMessageForRetryListenerService'));
        }, 1 => 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.failure.add_error_details_stamp_listener'] ?? ($this->privates['messenger.failure.add_error_details_stamp_listener'] = new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()));
        }, 1 => 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.failure.send_failed_message_to_failure_transport_listener'] ?? $this->load('getMessenger_Failure_SendFailedMessageToFailureTransportListenerService'));
        }, 1 => 'onMessageFailed'], -100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [0 => function () {
            return ($this->privates['messenger.listener.dispatch_pcntl_signal_listener'] ?? ($this->privates['messenger.listener.dispatch_pcntl_signal_listener'] = new \Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener()));
        }, 1 => 'onWorkerRunning'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $this->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService'));
        }, 1 => 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $this->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService'));
        }, 1 => 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_sigterm_signal_listener'] ?? $this->load('getMessenger_Listener_StopWorkerOnSigtermSignalListenerService'));
        }, 1 => 'onWorkerStarted'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ?? ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()));
        }, 1 => 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ?? ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()));
        }, 1 => 'onWorkerRunning'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['security.rememberme.response_listener'] ?? ($this->privates['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener()));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageHandledEvent', [0 => function () {
            return ($this->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $this->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService'));
        }, 1 => 'onWorkerMessageHandled'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $this->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService'));
        }, 1 => 'onWorkerMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['twig.mailer.message_listener'] ?? $this->load('getTwig_Mailer_MessageListenerService'));
        }, 1 => 'onMessage'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.controller.listener'] ?? $this->getSensioFrameworkExtra_Controller_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelController'], -128);
        $instance->addListener('kernel.view', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelView'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['sensio_framework_extra.security.listener'] ?? $this->getSensioFrameworkExtra_Security_ListenerService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['framework_extra_bundle.event.is_granted'] ?? $this->getFrameworkExtraBundle_Event_IsGrantedService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ApiSubscriber'] ?? $this->getApiSubscriberService());
        }, 1 => 'onKernelRequest'], 255);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ApiSubscriber'] ?? $this->getApiSubscriberService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('mautic.client_post_save', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ClientSubscriber'] ?? $this->load('getClientSubscriberService'));
        }, 1 => 'onClientPostSave'], 0);
        $instance->addListener('mautic.client_post_delete', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ClientSubscriber'] ?? $this->load('getClientSubscriberService'));
        }, 1 => 'onClientDelete'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\ApiBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\ApiBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\ApiBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\ApiBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigSave'], 0);
        $instance->addListener('ratelimit.generate.key', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\RateLimitGenerateKeySubscriber'] ?? $this->load('getRateLimitGenerateKeySubscriberService'));
        }, 1 => 'onGenerateKey'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriberService'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\ApiBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriberService'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.asset_post_save', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\AssetSubscriber'] ?? $this->load('getAssetSubscriberService'));
        }, 1 => 'onAssetPostSave'], 0);
        $instance->addListener('mautic.asset_post_delete', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\AssetSubscriber'] ?? $this->load('getAssetSubscriberService'));
        }, 1 => 'onAssetDelete'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriberService'));
        }, 1 => 'onBuilderBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriberService'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriberService'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriberService'));
        }, 1 => 'onBuilderBuild'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriberService'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber3Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.asset_on_load', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber3Service'));
        }, 1 => 'onAssetDownload'], 0);
        $instance->addListener('mautic.asset.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber3Service'));
        }, 1 => 'onCampaignTriggerDecision'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\AssetBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\AssetBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriberService'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriberService'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriberService'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.asset.on_download_rate_winner', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriberService'));
        }, 1 => 'onDetermineDownloadRateWinner'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\EmailSubscriber'] ?? ($this->services['Mautic\\AssetBundle\\EventListener\\EmailSubscriber'] = new \Mautic\AssetBundle\EventListener\EmailSubscriber()));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber3Service'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber3Service'));
        }, 1 => 'onFormSubmitActionAssetDownload'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber3Service'));
        }, 1 => 'onFormSubmitActionDownloadFile'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber4Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.current_lead_changed', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber4Service'));
        }, 1 => 'onLeadChange'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber4Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\PageSubscriber'] ?? ($this->services['Mautic\\AssetBundle\\EventListener\\PageSubscriber'] = new \Mautic\AssetBundle\EventListener\PageSubscriber()));
        }, 1 => 'OnPageBuild'], 0);
        $instance->addListener('mautic.point_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriberService'));
        }, 1 => 'onPointBuild'], 0);
        $instance->addListener('mautic.asset_on_load', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriberService'));
        }, 1 => 'onAssetDownload'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriberService'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber2Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber2Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber4Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('oneup_uploader.post_upload', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\UploadSubscriber'] ?? $this->load('getUploadSubscriberService'));
        }, 1 => 'onPostUpload'], 0);
        $instance->addListener('oneup_uploader.validation', [0 => function () {
            return ($this->services['Mautic\\AssetBundle\\EventListener\\UploadSubscriber'] ?? $this->load('getUploadSubscriberService'));
        }, 1 => 'onUploadValidation'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignActionChangeMembershipSubscriber'] ?? $this->load('getCampaignActionChangeMembershipSubscriberService'));
        }, 1 => 'addAction'], 0);
        $instance->addListener('mautic.lead.on_campaign_action_change_membership', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignActionChangeMembershipSubscriber'] ?? $this->load('getCampaignActionChangeMembershipSubscriberService'));
        }, 1 => 'changeMembership'], 0);
        $instance->addListener('mautic.campaign_post_save', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignActionJumpToEventSubscriber'] ?? $this->load('getCampaignActionJumpToEventSubscriberService'));
        }, 1 => 'processCampaignEventsAfterSave'], 1);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignActionJumpToEventSubscriber'] ?? $this->load('getCampaignActionJumpToEventSubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.campaign_on_event_jump_to_event', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignActionJumpToEventSubscriber'] ?? $this->load('getCampaignActionJumpToEventSubscriberService'));
        }, 1 => 'onJumpToEvent'], 0);
        $instance->addListener('mautic.campaign_post_save', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber4Service'));
        }, 1 => 'onCampaignPostSave'], 0);
        $instance->addListener('mautic.campaign_post_delete', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber4Service'));
        }, 1 => 'onCampaignDelete'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\CampaignBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\CampaignBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\CampaignBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\CampaignBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigSave'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber2Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber2Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber2Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber5Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber5Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.trigger_on_build', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\PointSubscriber'] ?? ($this->services['Mautic\\CampaignBundle\\EventListener\\PointSubscriber'] = new \Mautic\CampaignBundle\EventListener\PointSubscriber()));
        }, 1 => 'onTriggerBuild'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber2Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber2Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber2Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber3Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber3Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\CampaignBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber5Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.view_inject_custom_buttons', [0 => function () {
            return ($this->services['Mautic\\CategoryBundle\\EventListener\\ButtonSubscriber'] ?? $this->load('getButtonSubscriber3Service'));
        }, 1 => 'injectContactBulkButtons'], 0);
        $instance->addListener('mautic.category_on_bundle_list_build', [0 => function () {
            return ($this->services['Mautic\\CategoryBundle\\EventListener\\CategorySubscriber'] ?? $this->load('getCategorySubscriberService'));
        }, 1 => 'onCategoryBundleListBuild'], 0);
        $instance->addListener('mautic.category_post_save', [0 => function () {
            return ($this->services['Mautic\\CategoryBundle\\EventListener\\CategorySubscriber'] ?? $this->load('getCategorySubscriberService'));
        }, 1 => 'onCategoryPostSave'], 0);
        $instance->addListener('mautic.category_post_delete', [0 => function () {
            return ($this->services['Mautic\\CategoryBundle\\EventListener\\CategorySubscriber'] ?? $this->load('getCategorySubscriberService'));
        }, 1 => 'onCategoryDelete'], 0);
        $instance->addListener('mautic.view_inject_custom_buttons', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\ButtonSubscriber'] ?? $this->load('getButtonSubscriber4Service'));
        }, 1 => 'injectContactBulkButtons'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber5Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.channel.on_campaign_batch_action', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber5Service'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber6Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.message_post_save', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\MessageSubscriber'] ?? $this->load('getMessageSubscriberService'));
        }, 1 => 'onPostSave'], 0);
        $instance->addListener('mautic.message_post_delete', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\MessageSubscriber'] ?? $this->load('getMessageSubscriberService'));
        }, 1 => 'onDelete'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber3Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber3Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_display', [0 => function () {
            return ($this->services['Mautic\\ChannelBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber3Service'));
        }, 1 => 'onReportDisplay'], 0);
        $instance->addListener('mautic.config_post_save', [0 => function () {
            return ($this->services['Mautic\\ConfigBundle\\EventListener\\ConfigSubscriber'] ?? $this->load('getConfigSubscriber5Service'));
        }, 1 => 'onConfigPostSave'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\AssetsSubscriber'] ?? $this->getAssetsSubscriberService());
        }, 1 => 'fetchCustomAssets'], 0);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\BuildJsSubscriber'] ?? ($this->services['Mautic\\CoreBundle\\EventListener\\BuildJsSubscriber'] = new \Mautic\CoreBundle\EventListener\BuildJsSubscriber()));
        }, 1 => 'onBuildJs'], 1000);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\ConfigSubscriber'] ?? $this->load('getConfigSubscriber6Service'));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\ConfigSubscriber'] ?? $this->load('getConfigSubscriber6Service'));
        }, 1 => 'onConfigBeforeSave'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\ConfigThemeSubscriber'] ?? ($this->services['Mautic\\CoreBundle\\EventListener\\ConfigThemeSubscriber'] = new \Mautic\CoreBundle\EventListener\ConfigThemeSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'onKernelRequestAddGlobalJS'], 0);
        $instance->addListener('mautic.build_menu', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'onBuildMenu'], 9999);
        $instance->addListener('mautic.build_route', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'onBuildRoute'], 0);
        $instance->addListener('mautic.on_fetch_icons', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'onFetchIcons'], 9999);
        $instance->addListener('security.interactive_login', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber3Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber3Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber3Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.view_inject_custom_assets', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\EditorFontsSubscriber'] ?? $this->load('getEditorFontsSubscriberService'));
        }, 1 => 'addGlobalAssets'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\EnvironmentSubscriber'] ?? $this->getEnvironmentSubscriberService());
        }, 1 => 'onKernelRequestSetTimezone'], 128);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\EnvironmentSubscriber'] ?? $this->getEnvironmentSubscriberService());
        }, 1 => 'onKernelRequestSetLocale'], 101);
        $instance->addListener('mautic.maintenance_cleanup_data', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\MaintenanceSubscriber'] ?? $this->load('getMaintenanceSubscriberService'));
        }, 1 => 'onDataCleanup'], -50);
        $instance->addListener('console.command', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\MigrationCommandSubscriber'] ?? $this->load('getMigrationCommandSubscriberService'));
        }, 1 => 'addGeneratedColumns'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\RequestSubscriber'] ?? $this->getRequestSubscriberService());
        }, 1 => 'validateCsrfTokenForAjaxPost'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber6Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('form.pre_submit', [0 => function () {
            return ($this->services['Mautic\\CoreBundle\\Form\\EventListener\\CleanFormSubscriber'] ?? ($this->services['Mautic\\CoreBundle\\Form\\EventListener\\CleanFormSubscriber'] = new \Mautic\CoreBundle\Form\EventListener\CleanFormSubscriber()));
        }, 1 => 'preSubmitData'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] ?? ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] = new \Mautic\DashboardBundle\EventListener\DashboardSubscriber()));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] ?? ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] = new \Mautic\DashboardBundle\EventListener\DashboardSubscriber()));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] ?? ($this->services['Mautic\\DashboardBundle\\EventListener\\DashboardSubscriber'] = new \Mautic\DashboardBundle\EventListener\DashboardSubscriber()));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\BuildJsSubscriber'] ?? $this->load('getBuildJsSubscriber2Service'));
        }, 1 => 'onBuildJs'], 200);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber6Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.dwc.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber6Service'));
        }, 1 => 'onCampaignTriggerDecision'], 0);
        $instance->addListener('mautic.dwc.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber6Service'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.add_channel', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\ChannelSubscriber'] ?? ($this->services['Mautic\\DynamicContentBundle\\EventListener\\ChannelSubscriber'] = new \Mautic\DynamicContentBundle\EventListener\ChannelSubscriber()));
        }, 1 => 'onAddChannel'], 0);
        $instance->addListener('mautic.dwc_post_save', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\DynamicContentSubscriber'] ?? $this->load('getDynamicContentSubscriberService'));
        }, 1 => 'onPostSave'], 0);
        $instance->addListener('mautic.dwc_post_delete', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\DynamicContentSubscriber'] ?? $this->load('getDynamicContentSubscriberService'));
        }, 1 => 'onDelete'], 0);
        $instance->addListener('mautic.dwc_token_replacement', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\DynamicContentSubscriber'] ?? $this->load('getDynamicContentSubscriberService'));
        }, 1 => 'onTokenReplacement'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\DynamicContentSubscriber'] ?? $this->load('getDynamicContentSubscriberService'));
        }, 1 => 'decodeTokens'], 254);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber7Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber7Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\DynamicContentBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber7Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.channel_broadcast', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BroadcastSubscriber'] ?? $this->load('getBroadcastSubscriberService'));
        }, 1 => 'onBroadcast'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'fixEmailAccessibility'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'convertUrlsToTokens'], -9999);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'fixEmailAccessibility'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber2Service'));
        }, 1 => 'convertUrlsToTokens'], -9999);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignConditionSubscriber'] ?? $this->load('getCampaignConditionSubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.email.on_campaign_trigger_condition', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignConditionSubscriber'] ?? $this->load('getCampaignConditionSubscriberService'));
        }, 1 => 'onCampaignTriggerCondition'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.email_on_open', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onEmailOpen'], 0);
        $instance->addListener('mautic.email.on_campaign_batch_action', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onCampaignTriggerActionSendEmailToContact'], 0);
        $instance->addListener('mautic.email.on_campaign_batch_action', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onCampaignTriggerActionSendEmailToUser'], 1);
        $instance->addListener('mautic.email.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onCampaignTriggerDecision'], 0);
        $instance->addListener('mautic.email_on_reply', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber7Service'));
        }, 1 => 'onEmailReply'], 0);
        $instance->addListener('mautic.add_channel', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ChannelSubscriber'] ?? ($this->services['Mautic\\EmailBundle\\EventListener\\ChannelSubscriber'] = new \Mautic\EmailBundle\EventListener\ChannelSubscriber()));
        }, 1 => 'onAddChannel'], 100);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ConfigSubscriber'] ?? $this->load('getConfigSubscriber7Service'));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ConfigSubscriber'] ?? $this->load('getConfigSubscriber7Service'));
        }, 1 => 'onConfigBeforeSave'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardBestHoursSubscriber'] ?? $this->load('getDashboardBestHoursSubscriberService'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardBestHoursSubscriber'] ?? $this->load('getDashboardBestHoursSubscriberService'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardBestHoursSubscriber'] ?? $this->load('getDashboardBestHoursSubscriberService'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber5Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber5Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber5Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DateTimeTokenSubscriber'] ?? $this->load('getDateTimeTokenSubscriberService'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DateTimeTokenSubscriber'] ?? $this->load('getDateTimeTokenSubscriberService'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DateTimeTokenSubscriber'] ?? $this->load('getDateTimeTokenSubscriberService'));
        }, 1 => 'onEmailDisplay'], 0);
        $instance->addListener('mautic.email.on_open_rate_winner', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriber2Service'));
        }, 1 => 'onDetermineOpenRateWinner'], 0);
        $instance->addListener('mautic.email.on_clickthrough_rate_winner', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriber2Service'));
        }, 1 => 'onDetermineClickthroughRateWinner'], 0);
        $instance->addListener('mautic.email_post_save', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber4Service'));
        }, 1 => 'onEmailPostSave'], 0);
        $instance->addListener('mautic.email_post_delete', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber4Service'));
        }, 1 => 'onEmailDelete'], 0);
        $instance->addListener('mautic.on_email_failed', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber4Service'));
        }, 1 => 'onEmailFailed'], 0);
        $instance->addListener('mautic.on_email_resend', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber4Service'));
        }, 1 => 'onEmailResend'], 0);
        $instance->addListener('mautic.email.on_sent_email_to_user', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\EmailToUserSubscriber'] ?? $this->load('getEmailToUserSubscriberService'));
        }, 1 => 'onEmailToUser'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber4Service'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber4Service'));
        }, 1 => 'onFormSubmitActionSendEmail'], 0);
        $instance->addListener('mautic.on_generated_columns_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\GeneratedColumnSubscriber'] ?? ($this->services['Mautic\\EmailBundle\\EventListener\\GeneratedColumnSubscriber'] = new \Mautic\EmailBundle\EventListener\GeneratedColumnSubscriber()));
        }, 1 => 'onGeneratedColumnsBuild'], 0);
        $instance->addListener('mautic.aggregate_stat_request', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\GraphAggregateStatsSubscriber'] ?? $this->load('getGraphAggregateStatsSubscriberService'));
        }, 1 => 'onStatRequest'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber8Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber8Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.process_message_queue_batch', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\MessageQueueSubscriber'] ?? $this->load('getMessageQueueSubscriberService'));
        }, 1 => 'onProcessMessageQueueBatch'], 0);
        $instance->addListener('mautic.page_on_hit', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber3Service'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.point_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber3Service'));
        }, 1 => 'onPointBuild'], 0);
        $instance->addListener('mautic.trigger_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber3Service'));
        }, 1 => 'onTriggerBuild'], 0);
        $instance->addListener('mautic.email_on_open', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber3Service'));
        }, 1 => 'onEmailOpen'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber3Service'));
        }, 1 => 'onEmailSend'], 0);
        $instance->addListener('mautic.monitored_email_config', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessBounceSubscriber'] ?? $this->load('getProcessBounceSubscriberService'));
        }, 1 => 'onEmailConfig'], 0);
        $instance->addListener('mautic.on_email_parse', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessBounceSubscriber'] ?? $this->load('getProcessBounceSubscriberService'));
        }, 1 => 'onEmailParse'], 0);
        $instance->addListener('mautic.monitored_email_config', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessReplySubscriber'] ?? $this->load('getProcessReplySubscriberService'));
        }, 1 => 'onEmailConfig'], 0);
        $instance->addListener('mautic.on_email_pre_fetch', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessReplySubscriber'] ?? $this->load('getProcessReplySubscriberService'));
        }, 1 => 'onEmailPreFetch'], 0);
        $instance->addListener('mautic.on_email_parse', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessReplySubscriber'] ?? $this->load('getProcessReplySubscriberService'));
        }, 1 => 'onEmailParse'], 1);
        $instance->addListener('mautic.monitored_email_config', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessUnsubscribeSubscriber'] ?? $this->load('getProcessUnsubscribeSubscriberService'));
        }, 1 => 'onEmailConfig'], 0);
        $instance->addListener('mautic.on_email_parse', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessUnsubscribeSubscriber'] ?? $this->load('getProcessUnsubscribeSubscriberService'));
        }, 1 => 'onEmailParse'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ProcessUnsubscribeSubscriber'] ?? $this->load('getProcessUnsubscribeSubscriberService'));
        }, 1 => 'onEmailSend'], 0);
        $instance->addListener('mautic.queue_email_hit', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\QueueSubscriber'] ?? $this->load('getQueueSubscriberService'));
        }, 1 => 'onEmailHit'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber4Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber4Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber4Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber4Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber4Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber8Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\TokenSubscriber'] ?? $this->load('getTokenSubscriberService'));
        }, 1 => 'decodeTokens'], 254);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\TokenSubscriber'] ?? $this->load('getTokenSubscriberService'));
        }, 1 => 'decodeTokens'], 254);
        $instance->addListener('mautic.email_token_replacement', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\TokenSubscriber'] ?? $this->load('getTokenSubscriberService'));
        }, 1 => 'onTokenReplacement'], -254);
        $instance->addListener('mautic.clickthrough_contact_identification', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\TrackingSubscriber'] ?? $this->load('getTrackingSubscriberService'));
        }, 1 => 'onIdentifyContact'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriberService'));
        }, 1 => 'onEmailSend'], 0);
        $instance->addListener('mautic.email_on_open', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriberService'));
        }, 1 => 'onEmailOpen'], 0);
        $instance->addListener('mautic.webhook_on_build', [0 => function () {
            return ($this->services['Mautic\\EmailBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriberService'));
        }, 1 => 'onWebhookBuild'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber8Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.form_on_submit', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber8Service'));
        }, 1 => 'onFormSubmit'], 0);
        $instance->addListener('mautic.form.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber8Service'));
        }, 1 => 'onCampaignTriggerDecision'], 0);
        $instance->addListener('mautic.form.on_campaign_trigger_condition', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber8Service'));
        }, 1 => 'onCampaignTriggerCondition'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\FormBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\FormBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber6Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber6Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber6Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.form.on_submission_rate_winner', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriber3Service'));
        }, 1 => 'onDetermineSubmissionWinner'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\EmailSubscriber'] ?? ($this->services['Mautic\\FormBundle\\EventListener\\EmailSubscriber'] = new \Mautic\FormBundle\EventListener\EmailSubscriber()));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.form_post_save', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormConditionalSubscriber'] ?? $this->load('getFormConditionalSubscriberService'));
        }, 1 => 'onFormPostSave'], 0);
        $instance->addListener('mautic.form_post_save', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber5Service'));
        }, 1 => 'onFormPostSave'], 0);
        $instance->addListener('mautic.form_post_delete', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber5Service'));
        }, 1 => 'onFormDelete'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber5Service'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber5Service'));
        }, 1 => 'onFormSubmitActionSendEmail'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber5Service'));
        }, 1 => 'onFormSubmitActionRepost'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormValidationSubscriber'] ?? $this->load('getFormValidationSubscriberService'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.on_form_validate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\FormValidationSubscriber'] ?? $this->load('getFormValidationSubscriberService'));
        }, 1 => 'onFormValidate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber9Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber9Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber4Service'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber4Service'));
        }, 1 => 'onPageBuild'], 0);
        $instance->addListener('mautic.point_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber4Service'));
        }, 1 => 'onPointBuild'], 0);
        $instance->addListener('mautic.form_on_submit', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber4Service'));
        }, 1 => 'onFormSubmit'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber5Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber5Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber5Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber5Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber5Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber9Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.webhook_on_build', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber2Service'));
        }, 1 => 'onWebhookBuild'], 0);
        $instance->addListener('mautic.form_on_submit', [0 => function () {
            return ($this->services['Mautic\\FormBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber2Service'));
        }, 1 => 'onFormSubmit'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_COLLECT_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'collectInternalObjects'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_UPDATE_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'updateCompanies'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_CREATE_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'createCompanies'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'findCompaniesByIds'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'findCompaniesByDateRange'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'findCompaniesByFieldValues'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_OWNER_IDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'findOwnerIdsForCompanies'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_BUILD_INTERNAL_OBJECT_ROUTE', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\CompanyObjectSubscriber'] ?? $this->load('getCompanyObjectSubscriberService'));
        }, 1 => 'buildCompanyRoute'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_COLLECT_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'collectInternalObjects'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_UPDATE_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'updateContacts'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_CREATE_INTERNAL_OBJECTS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'createContacts'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'findContactsByIds'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'findContactsByDateRange'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_INTERNAL_RECORDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'findContactsByFieldValues'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_FIND_OWNER_IDS', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'findOwnerIdsForContacts'], 0);
        $instance->addListener('mautic.integration.INTEGRATION_BUILD_INTERNAL_OBJECT_ROUTE', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\ContactObjectSubscriber'] ?? $this->load('getContactObjectSubscriberService'));
        }, 1 => 'buildContactRoute'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber6Service'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber6Service'));
        }, 1 => 'decodeTokens'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber6Service'));
        }, 1 => 'decodeTokens'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber10Service'));
        }, 1 => 'onLeadPostSave'], 0);
        $instance->addListener('mautic.lead_post_delete', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber10Service'));
        }, 1 => 'onLeadPostDelete'], 255);
        $instance->addListener('mautic.company_post_save', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber10Service'));
        }, 1 => 'onCompanyPostSave'], 0);
        $instance->addListener('mautic.company_post_delete', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber10Service'));
        }, 1 => 'onCompanyPostDelete'], 255);
        $instance->addListener('mautic.lead_company_change', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber10Service'));
        }, 1 => 'onLeadCompanyChange'], 128);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\TimelineSubscriber'] ?? $this->load('getTimelineSubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.view_inject_custom_template', [0 => function () {
            return ($this->services['Mautic\\IntegrationsBundle\\EventListener\\UIContactIntegrationsTabSubscriber'] ?? $this->load('getUIContactIntegrationsTabSubscriberService'));
        }, 1 => 'onTemplateRender'], 0);
        $instance->addListener('mautic.view_inject_custom_buttons', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ButtonSubscriber'] ?? $this->load('getButtonSubscriber5Service'));
        }, 1 => 'injectViewButtons'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignActionDNCSubscriber'] ?? $this->load('getCampaignActionDNCSubscriberService'));
        }, 1 => 'configureAction'], 0);
        $instance->addListener('mautic.lead.on_campaign_action_add_donotcontact', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignActionDNCSubscriber'] ?? $this->load('getCampaignActionDNCSubscriberService'));
        }, 1 => 'addDoNotContact'], 0);
        $instance->addListener('mautic.lead.on_campaign_action_remove_donotcontact', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignActionDNCSubscriber'] ?? $this->load('getCampaignActionDNCSubscriberService'));
        }, 1 => 'removeDoNotContact'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignActionDeleteContactSubscriber'] ?? $this->load('getCampaignActionDeleteContactSubscriberService'));
        }, 1 => 'configureAction'], 0);
        $instance->addListener('mautic.lead.on_campaign_action_delete_contact', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignActionDeleteContactSubscriber'] ?? $this->load('getCampaignActionDeleteContactSubscriberService'));
        }, 1 => 'deleteContacts'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionChangePoints'], 0);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionChangeLists'], 1);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionUpdateLead'], 2);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionUpdateTags'], 3);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionAddToCompany'], 4);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionChangeCompanyScore'], 4);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionChangeOwner'], 7);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionUpdateCompany'], 8);
        $instance->addListener('mautic.lead.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerActionSetManipulator'], 100);
        $instance->addListener('mautic.lead.on_campaign_trigger_condition', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber9Service'));
        }, 1 => 'onCampaignTriggerCondition'], 0);
        $instance->addListener('mautic.company_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CompanySubscriber'] ?? $this->load('getCompanySubscriberService'));
        }, 1 => 'onCompanyPostSave'], 0);
        $instance->addListener('mautic.company_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\CompanySubscriber'] ?? $this->load('getCompanySubscriberService'));
        }, 1 => 'onCompanyDelete'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\LeadBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\LeadBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigCompanyGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber7Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber7Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber7Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.lead.add_donot_contact', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\DoNotContactSubscriber'] ?? $this->load('getDoNotContactSubscriberService'));
        }, 1 => 'addDncForLead'], 0);
        $instance->addListener('mautic.lead.remove_donot_contact', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\DoNotContactSubscriber'] ?? $this->load('getDoNotContactSubscriberService'));
        }, 1 => 'removeDncForLead'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber7Service'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber7Service'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber7Service'));
        }, 1 => 'onEmailDisplay'], 0);
        $instance->addListener('mautic.email_address_token_replacement', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber7Service'));
        }, 1 => 'onEmailAddressReplacement'], 0);
        $instance->addListener('mautic.list_filters_operators_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FilterOperatorSubscriber'] ?? $this->load('getFilterOperatorSubscriberService'));
        }, 1 => 'onListOperatorsGenerate'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FilterOperatorSubscriber'] ?? $this->load('getFilterOperatorSubscriberService'));
        }, 1 => 'onGenerateSegmentFiltersAddStaticFields'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FilterOperatorSubscriber'] ?? $this->load('getFilterOperatorSubscriberService'));
        }, 1 => 'onGenerateSegmentFiltersAddCustomFields'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FilterOperatorSubscriber'] ?? $this->load('getFilterOperatorSubscriberService'));
        }, 1 => 'onGenerateSegmentFiltersAddBehaviors'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.form.on_object_collect', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onObjectCollect'], 0);
        $instance->addListener('mautic.form.on_field_collect', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFieldCollect'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionChangePoints'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionChangeList'], 1);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionChangeTags'], 2);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionAddUtmTags'], 3);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionScoreContactsCompanies'], 4);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriber6Service'));
        }, 1 => 'onFormSubmitActionRemoveFromDoNotContact'], 5);
        $instance->addListener('mautic.on_generated_columns_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\GeneratedColumnSubscriber'] ?? $this->load('getGeneratedColumnSubscriber2Service'));
        }, 1 => 'onGeneratedColumnsBuild'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\GeneratedColumnSubscriber'] ?? $this->load('getGeneratedColumnSubscriber2Service'));
        }, 1 => 'onGenerateSegmentFilters'], 0);
        $instance->addListener('mautic.lead_import_on_initialize', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportCompanySubscriber'] ?? $this->load('getImportCompanySubscriberService'));
        }, 1 => 'onImportInit'], 0);
        $instance->addListener('mautic.lead_import_on_field_mapping', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportCompanySubscriber'] ?? $this->load('getImportCompanySubscriberService'));
        }, 1 => 'onFieldMapping'], 0);
        $instance->addListener('mautic.lead_import_on_process', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportCompanySubscriber'] ?? $this->load('getImportCompanySubscriberService'));
        }, 1 => 'onImportProcess'], 0);
        $instance->addListener('mautic.lead_import_on_validate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportCompanySubscriber'] ?? $this->load('getImportCompanySubscriberService'));
        }, 1 => 'onValidateImport'], 0);
        $instance->addListener('mautic.lead_import_on_initialize', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportContactSubscriber'] ?? $this->load('getImportContactSubscriberService'));
        }, 1 => 'onImportInit'], 0);
        $instance->addListener('mautic.lead_import_on_field_mapping', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportContactSubscriber'] ?? $this->load('getImportContactSubscriberService'));
        }, 1 => 'onFieldMapping'], 0);
        $instance->addListener('mautic.lead_import_on_process', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportContactSubscriber'] ?? $this->load('getImportContactSubscriberService'));
        }, 1 => 'onImportProcess'], 0);
        $instance->addListener('mautic.lead_import_on_validate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportContactSubscriber'] ?? $this->load('getImportContactSubscriberService'));
        }, 1 => 'onValidateImport'], 0);
        $instance->addListener('mautic.lead_import_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportSubscriber'] ?? $this->load('getImportSubscriberService'));
        }, 1 => 'onImportPostSave'], 0);
        $instance->addListener('mautic.lead_import_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ImportSubscriber'] ?? $this->load('getImportSubscriberService'));
        }, 1 => 'onImportDelete'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onLeadPostSave'], 0);
        $instance->addListener('mautic.lead_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onLeadDelete'], 0);
        $instance->addListener('mautic.lead_pre_merge', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'preLeadMerge'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.lead_field_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onFieldPostSave'], 0);
        $instance->addListener('mautic.lead_field_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onFieldDelete'], 0);
        $instance->addListener('mautic.lead_note_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onNotePostSave'], 0);
        $instance->addListener('mautic.lead_note_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onNoteDelete'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber11Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.maintenance_cleanup_data', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\MaintenanceSubscriber'] ?? $this->load('getMaintenanceSubscriber2Service'));
        }, 1 => 'onDataCleanup'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\OwnerSubscriber'] ?? $this->load('getOwnerSubscriberService'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\OwnerSubscriber'] ?? $this->load('getOwnerSubscriberService'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\OwnerSubscriber'] ?? $this->load('getOwnerSubscriberService'));
        }, 1 => 'onEmailDisplay'], 0);
        $instance->addListener('mautic.trigger_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber5Service'));
        }, 1 => 'onTriggerBuild'], 0);
        $instance->addListener('mautic.trigger_on_event_execute', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber5Service'));
        }, 1 => 'onTriggerExecute'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDNCSubscriber'] ?? $this->load('getReportDNCSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDNCSubscriber'] ?? $this->load('getReportDNCSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDNCSubscriber'] ?? $this->load('getReportDNCSubscriberService'));
        }, 1 => 'onReportDisplay'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDevicesSubscriber'] ?? $this->load('getReportDevicesSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDevicesSubscriber'] ?? $this->load('getReportDevicesSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportDevicesSubscriber'] ?? $this->load('getReportDevicesSubscriberService'));
        }, 1 => 'onReportDisplay'], 0);
        $instance->addListener('mautic.report_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportNormalizeSubscriber'] ?? $this->load('getReportNormalizeSubscriberService'));
        }, 1 => 'onReportDisplay'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber6Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber6Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber6Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.report_on_display', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber6Service'));
        }, 1 => 'onReportDisplay'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportUtmTagSubscriber'] ?? $this->load('getReportUtmTagSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\ReportUtmTagSubscriber'] ?? $this->load('getReportUtmTagSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber6Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber6Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.lead_build_search_commands', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber6Service'));
        }, 1 => 'onBuildSearchCommands'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentLogReportSubscriber'] ?? $this->load('getSegmentLogReportSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentLogReportSubscriber'] ?? $this->load('getSegmentLogReportSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.list_filters_operator_querybuilder_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] = new \Mautic\LeadBundle\EventListener\SegmentOperatorQuerySubscriber()));
        }, 1 => 'onEmptyOperator'], 0);
        $instance->addListener('mautic.list_filters_operator_querybuilder_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] = new \Mautic\LeadBundle\EventListener\SegmentOperatorQuerySubscriber()));
        }, 1 => 'onNotEmptyOperator'], 0);
        $instance->addListener('mautic.list_filters_operator_querybuilder_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] = new \Mautic\LeadBundle\EventListener\SegmentOperatorQuerySubscriber()));
        }, 1 => 'onNegativeOperators'], 0);
        $instance->addListener('mautic.list_filters_operator_querybuilder_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] = new \Mautic\LeadBundle\EventListener\SegmentOperatorQuerySubscriber()));
        }, 1 => 'onMultiselectOperators'], 0);
        $instance->addListener('mautic.list_filters_operator_querybuilder_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] ?? ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentOperatorQuerySubscriber'] = new \Mautic\LeadBundle\EventListener\SegmentOperatorQuerySubscriber()));
        }, 1 => 'onDefaultOperators'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentReportSubscriber'] ?? $this->load('getSegmentReportSubscriberService'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentReportSubscriber'] ?? $this->load('getSegmentReportSubscriberService'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.lead_list_pre_unpublish', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentSubscriber'] ?? $this->load('getSegmentSubscriberService'));
        }, 1 => 'onSegmentPreUnpublish'], 0);
        $instance->addListener('mautic.lead_list_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentSubscriber'] ?? $this->load('getSegmentSubscriberService'));
        }, 1 => 'onSegmentPostSave'], 0);
        $instance->addListener('mautic.lead_list_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SegmentSubscriber'] ?? $this->load('getSegmentSubscriberService'));
        }, 1 => 'onSegmentDelete'], 0);
        $instance->addListener('mautic.form_on_submit', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\SetContactAvatarFormSubscriber'] ?? $this->load('getSetContactAvatarFormSubscriberService'));
        }, 1 => 'onFormSubmit'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber10Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.campaign_on_leadchange', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogCampaignSubscriber'] ?? $this->load('getTimelineEventLogCampaignSubscriberService'));
        }, 1 => 'onChange'], 0);
        $instance->addListener('mautic.lead_campaign_batch_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogCampaignSubscriber'] ?? $this->load('getTimelineEventLogCampaignSubscriberService'));
        }, 1 => 'onBatchChange'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogCampaignSubscriber'] ?? $this->load('getTimelineEventLogCampaignSubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_list_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogSegmentSubscriber'] ?? $this->load('getTimelineEventLogSegmentSubscriberService'));
        }, 1 => 'onChange'], 0);
        $instance->addListener('mautic.lead_list_batch_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogSegmentSubscriber'] ?? $this->load('getTimelineEventLogSegmentSubscriberService'));
        }, 1 => 'onBatchChange'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogSegmentSubscriber'] ?? $this->load('getTimelineEventLogSegmentSubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TimelineEventLogSubscriber'] ?? $this->load('getTimelineEventLogSubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.collect_operators_for_field_type', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onTypeOperatorsCollect'], 0);
        $instance->addListener('mautic.collect_filter_choices_for_list_field_type', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onTypeListCollect'], 0);
        $instance->addListener('mautic.adjust_filter_form_type_for_field', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onSegmentFilterFormHandleTags'], 1000);
        $instance->addListener('mautic.adjust_filter_form_type_for_field', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onSegmentFilterFormHandleLookupId'], 800);
        $instance->addListener('mautic.adjust_filter_form_type_for_field', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onSegmentFilterFormHandleLookup'], 600);
        $instance->addListener('mautic.adjust_filter_form_type_for_field', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onSegmentFilterFormHandleSelect'], 400);
        $instance->addListener('mautic.adjust_filter_form_type_for_field', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\TypeOperatorSubscriber'] ?? $this->load('getTypeOperatorSubscriberService'));
        }, 1 => 'onSegmentFilterFormHandleDefault'], 0);
        $instance->addListener('mautic.webhook_on_build', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onWebhookBuild'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onLeadNewUpdate'], 0);
        $instance->addListener('mautic.lead_points_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onLeadPointChange'], 0);
        $instance->addListener('mautic.lead_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onLeadDelete'], 0);
        $instance->addListener('mautic.lead_channel_subscription_changed', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onChannelSubscriptionChange'], 0);
        $instance->addListener('mautic.lead_company_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onLeadCompanyChange'], 0);
        $instance->addListener('mautic.company_post_save', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onCompanySave'], 0);
        $instance->addListener('mautic.company_post_delete', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onCompanyDelete'], 0);
        $instance->addListener('mautic.lead_list_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onSegmentChange'], 0);
        $instance->addListener('mautic.lead_list_batch_change', [0 => function () {
            return ($this->services['Mautic\\LeadBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber3Service'));
        }, 1 => 'onSegmentChange'], 0);
        $instance->addListener('mautic.build_menu', [0 => function () {
            return ($this->services['Mautic\\MarketplaceBundle\\EventListener\\MenuSubscriber'] ?? $this->load('getMenuSubscriberService'));
        }, 1 => 'onBuildMenu'], 9999);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->privates['Mautic\\MessengerBundle\\EventListener\\ConfigSubscriber'] ?? ($this->privates['Mautic\\MessengerBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\MessengerBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\BuildJsSubscriber'] ?? $this->load('getBuildJsSubscriber3Service'));
        }, 1 => 'onBuildJs'], 254);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\CampaignConditionSubscriber'] ?? ($this->services['Mautic\\NotificationBundle\\EventListener\\CampaignConditionSubscriber'] = new \Mautic\NotificationBundle\EventListener\CampaignConditionSubscriber()));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.notification.on_campaign_trigger_notification', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\CampaignConditionSubscriber'] ?? ($this->services['Mautic\\NotificationBundle\\EventListener\\CampaignConditionSubscriber'] = new \Mautic\NotificationBundle\EventListener\CampaignConditionSubscriber()));
        }, 1 => 'onCampaignTriggerHasActiveCondition'], 0);
        $instance->addListener('mautic.add_channel', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\ChannelSubscriber'] ?? $this->load('getChannelSubscriber4Service'));
        }, 1 => 'onAddChannel'], 70);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\NotificationBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\NotificationBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.notification_post_save', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\NotificationSubscriber'] ?? $this->load('getNotificationSubscriberService'));
        }, 1 => 'onPostSave'], 0);
        $instance->addListener('mautic.notification_post_delete', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\NotificationSubscriber'] ?? $this->load('getNotificationSubscriberService'));
        }, 1 => 'onDelete'], 0);
        $instance->addListener('mautic.notification_token_replacement', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\NotificationSubscriber'] ?? $this->load('getNotificationSubscriberService'));
        }, 1 => 'onTokenReplacement'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber5Service'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber7Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber7Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber7Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\NotificationBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber11Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuildJsSubscriber'] ?? $this->load('getBuildJsSubscriber4Service'));
        }, 1 => 'onBuildJs'], -255);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuildJsSubscriber'] ?? $this->load('getBuildJsSubscriber4Service'));
        }, 1 => 'onBuildJsForVideo'], 256);
        $instance->addListener('mautic.build_embeddable_js', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuildJsSubscriber'] ?? $this->load('getBuildJsSubscriber4Service'));
        }, 1 => 'onBuildJsForTrackingEvent'], 256);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber3Service'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber3Service'));
        }, 1 => 'onPageBuild'], 0);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber3Service'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber3Service'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\BuilderSubscriber'] ?? $this->load('getBuilderSubscriber3Service'));
        }, 1 => 'onEmailGenerate'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber10Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.page_on_hit', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber10Service'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.page.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber10Service'));
        }, 1 => 'onCampaignTriggerDecision'], 0);
        $instance->addListener('mautic.page.on_campaign_trigger_decision', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber10Service'));
        }, 1 => 'onCampaignTriggerDecisionDeviceHit'], 1);
        $instance->addListener('mautic.page.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber10Service'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\PageBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\PageBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerateTracking'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\PageBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\PageBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigSave'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber8Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber8Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber8Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DateTimeTokenSubscriber'] ?? $this->load('getDateTimeTokenSubscriber2Service'));
        }, 1 => 'onPageBuild'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DateTimeTokenSubscriber'] ?? $this->load('getDateTimeTokenSubscriber2Service'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.page.on_bounce_rate_winner', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriber4Service'));
        }, 1 => 'onDetermineBounceRateWinner'], 0);
        $instance->addListener('mautic.page.on_dwell_time_winner', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\DetermineWinnerSubscriber'] ?? $this->load('getDetermineWinnerSubscriber4Service'));
        }, 1 => 'onDetermineDwellTimeWinner'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber12Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber12Service'));
        }, 1 => 'onTimelineGenerateVideo'], 0);
        $instance->addListener('mautic.current_lead_changed', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber12Service'));
        }, 1 => 'onLeadChange'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber12Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.maintenance_cleanup_data', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\MaintenanceSubscriber'] ?? $this->load('getMaintenanceSubscriber3Service'));
        }, 1 => 'onDataCleanup'], 10);
        $instance->addListener('mautic.page_post_save', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber6Service'));
        }, 1 => 'onPagePostSave'], 0);
        $instance->addListener('mautic.page_post_delete', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber6Service'));
        }, 1 => 'onPageDelete'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber6Service'));
        }, 1 => 'onPageDisplay'], -255);
        $instance->addListener('mautic.queue_page_hit', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriber6Service'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.point_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber6Service'));
        }, 1 => 'onPointBuild'], 0);
        $instance->addListener('mautic.page_on_hit', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber6Service'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.report_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber8Service'));
        }, 1 => 'onReportBuilder'], 0);
        $instance->addListener('mautic.report_on_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber8Service'));
        }, 1 => 'onReportGenerate'], 0);
        $instance->addListener('mautic.report_on_graph_generate', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber8Service'));
        }, 1 => 'onReportGraphGenerate'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber7Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber7Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber12Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\TokenSubscriber'] ?? ($this->services['Mautic\\PageBundle\\EventListener\\TokenSubscriber'] = new \Mautic\PageBundle\EventListener\TokenSubscriber()));
        }, 1 => 'decodeTokens'], 254);
        $instance->addListener('mautic.webhook_on_build', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber4Service'));
        }, 1 => 'onWebhookBuild'], 0);
        $instance->addListener('mautic.page_on_hit', [0 => function () {
            return ($this->services['Mautic\\PageBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber4Service'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\CampaignSubscriber'] ?? ($this->services['Mautic\\PluginBundle\\EventListener\\CampaignSubscriber'] = new \Mautic\PluginBundle\EventListener\CampaignSubscriber()));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.plugin.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\CampaignSubscriber'] ?? ($this->services['Mautic\\PluginBundle\\EventListener\\CampaignSubscriber'] = new \Mautic\PluginBundle\EventListener\CampaignSubscriber()));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\FormSubscriber'] ?? ($this->services['Mautic\\PluginBundle\\EventListener\\FormSubscriber'] = new \Mautic\PluginBundle\EventListener\FormSubscriber()));
        }, 1 => 'onFormBuild'], 0);
        $instance->addListener('mautic.form.on_execute_submit_action', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\FormSubscriber'] ?? ($this->services['Mautic\\PluginBundle\\EventListener\\FormSubscriber'] = new \Mautic\PluginBundle\EventListener\FormSubscriber()));
        }, 1 => 'onFormSubmitActionTriggered'], 0);
        $instance->addListener('mautic.plugin_on_integration_response', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\IntegrationSubscriber'] ?? $this->load('getIntegrationSubscriberService'));
        }, 1 => 'onResponse'], 0);
        $instance->addListener('mautic.plugin_on_integration_request', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\IntegrationSubscriber'] ?? $this->load('getIntegrationSubscriberService'));
        }, 1 => 'onRequest'], 0);
        $instance->addListener('mautic.lead_pre_delete', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber13Service'));
        }, 1 => 'onLeadDelete'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber13Service'));
        }, 1 => 'onLeadSave'], 0);
        $instance->addListener('mautic.company_pre_delete', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber13Service'));
        }, 1 => 'onCompanyDelete'], 0);
        $instance->addListener('mautic.trigger_on_build', [0 => function () {
            return ($this->services['Mautic\\PluginBundle\\EventListener\\PointSubscriber'] ?? ($this->services['Mautic\\PluginBundle\\EventListener\\PointSubscriber'] = new \Mautic\PluginBundle\EventListener\PointSubscriber()));
        }, 1 => 'onTriggerBuild'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber9Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber9Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber9Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.lead_points_change', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber14Service'));
        }, 1 => 'onLeadPointsChange'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber14Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber14Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber14Service'));
        }, 1 => 'onLeadSave'], -1);
        $instance->addListener('mautic.point_post_save', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber8Service'));
        }, 1 => 'onPointPostSave'], 0);
        $instance->addListener('mautic.point_post_delete', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber8Service'));
        }, 1 => 'onPointDelete'], 0);
        $instance->addListener('mautic.trigger_post_save', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber8Service'));
        }, 1 => 'onTriggerPostSave'], 0);
        $instance->addListener('mautic.trigger_post_delete', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\PointSubscriber'] ?? $this->load('getPointSubscriber8Service'));
        }, 1 => 'onTriggerDelete'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber8Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber8Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\PointBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber13Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\ReportBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\ReportBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber10Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber10Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber10Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.report_post_save', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber9Service'));
        }, 1 => 'onReportPostSave'], 0);
        $instance->addListener('mautic.report_post_delete', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\ReportSubscriber'] ?? $this->load('getReportSubscriber9Service'));
        }, 1 => 'onReportDelete'], 0);
        $instance->addListener('mautic.report_schedule_send', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\SchedulerSubscriber'] ?? $this->load('getSchedulerSubscriberService'));
        }, 1 => 'onScheduleSend'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber9Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber9Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.report_post_save', [0 => function () {
            return ($this->services['Mautic\\ReportBundle\\Scheduler\\EventListener\\ReportSchedulerSubscriber'] ?? $this->load('getReportSchedulerSubscriberService'));
        }, 1 => 'onReportSave'], 0);
        $instance->addListener('mautic.channel_broadcast', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\BroadcastSubscriber'] ?? $this->load('getBroadcastSubscriber2Service'));
        }, 1 => 'onBroadcast'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\CampaignReplySubscriber'] ?? $this->load('getCampaignReplySubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.sms.on_campaign_reply', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\CampaignReplySubscriber'] ?? $this->load('getCampaignReplySubscriberService'));
        }, 1 => 'onCampaignReply'], 0);
        $instance->addListener('mautic.sms.on_reply', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\CampaignReplySubscriber'] ?? $this->load('getCampaignReplySubscriberService'));
        }, 1 => 'onReply'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\CampaignSendSubscriber'] ?? $this->load('getCampaignSendSubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.sms.on_campaign_trigger_action', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\CampaignSendSubscriber'] ?? $this->load('getCampaignSendSubscriberService'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.add_channel', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\ChannelSubscriber'] ?? $this->load('getChannelSubscriber5Service'));
        }, 1 => 'onAddChannel'], 90);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\SmsBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\SmsBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber15Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.process_message_queue_batch', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\MessageQueueSubscriber'] ?? $this->load('getMessageQueueSubscriber2Service'));
        }, 1 => 'onProcessMessageQueueBatch'], 0);
        $instance->addListener('mautic.sms.on_reply', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\ReplySubscriber'] ?? $this->load('getReplySubscriberService'));
        }, 1 => 'onReply'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\ReplySubscriber'] ?? $this->load('getReplySubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.sms_post_save', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\SmsSubscriber'] ?? $this->load('getSmsSubscriberService'));
        }, 1 => 'onPostSave'], 0);
        $instance->addListener('mautic.sms_post_delete', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\SmsSubscriber'] ?? $this->load('getSmsSubscriberService'));
        }, 1 => 'onDelete'], 0);
        $instance->addListener('mautic.sms_token_replacement', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\SmsSubscriber'] ?? $this->load('getSmsSubscriberService'));
        }, 1 => 'onTokenReplacement'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber14Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.sms.on_reply', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\StopSubscriber'] ?? $this->load('getStopSubscriberService'));
        }, 1 => 'onReply'], 0);
        $instance->addListener('mautic.clickthrough_contact_identification', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\TrackingSubscriber'] ?? $this->load('getTrackingSubscriber2Service'));
        }, 1 => 'onIdentifyContact'], 0);
        $instance->addListener('mautic.sms_on_send', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber5Service'));
        }, 1 => 'onSend'], 0);
        $instance->addListener('mautic.webhook_on_build', [0 => function () {
            return ($this->services['Mautic\\SmsBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber5Service'));
        }, 1 => 'onWebhookBuild'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber12Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.stage.on_campaign_batch_action', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber12Service'));
        }, 1 => 'onCampaignTriggerStageChange'], 0);
        $instance->addListener('mautic.dashboard_on_widget_list_generate', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber11Service'));
        }, 1 => 'onWidgetListGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_form_generate', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber11Service'));
        }, 1 => 'onWidgetFormGenerate'], 0);
        $instance->addListener('mautic.dashboard_on_widget_detail_generate', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\DashboardSubscriber'] ?? $this->load('getDashboardSubscriber11Service'));
        }, 1 => 'onWidgetDetailGenerate'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber16Service'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.lead_post_merge', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber16Service'));
        }, 1 => 'onLeadMerge'], 0);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber10Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber10Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.stage_post_save', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\StageSubscriber'] ?? $this->load('getStageSubscriberService'));
        }, 1 => 'onStagePostSave'], 0);
        $instance->addListener('mautic.stage_post_delete', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\StageSubscriber'] ?? $this->load('getStageSubscriberService'));
        }, 1 => 'onStageDelete'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\StageBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber15Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\Controller\\SecurityController'] ?? $this->getSecurityControllerService());
        }, 1 => 'onRequest'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\UserBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\UserBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\UserBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\UserBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigSave'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\SAMLSubscriber'] ?? $this->getSAMLSubscriberService());
        }, 1 => 'onKernelRequest'], 256);
        $instance->addListener('mautic.global_search', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber11Service'));
        }, 1 => 'onGlobalSearch'], 0);
        $instance->addListener('mautic.build_command_list', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\SearchSubscriber'] ?? $this->load('getSearchSubscriber11Service'));
        }, 1 => 'onBuildCommandList'], 0);
        $instance->addListener('mautic.user_login', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\SecuritySubscriber'] ?? $this->load('getSecuritySubscriberService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('mautic.user_post_save', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'onUserPostSave'], 0);
        $instance->addListener('mautic.user_post_delete', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'onUserDelete'], 0);
        $instance->addListener('mautic.role_post_save', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'onRolePostSave'], 0);
        $instance->addListener('mautic.role_post_delete', [0 => function () {
            return ($this->services['Mautic\\UserBundle\\EventListener\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'onRoleDelete'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber13Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.webhook.campaign_on_trigger_action', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber13Service'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['Mautic\\WebhookBundle\\EventListener\\ConfigSubscriber'] = new \Mautic\WebhookBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber16Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.webhook_post_save', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber6Service'));
        }, 1 => 'onWebhookSave'], 0);
        $instance->addListener('mautic.webhook_post_delete', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber6Service'));
        }, 1 => 'onWebhookDelete'], 0);
        $instance->addListener('mautic.webhook_kill', [0 => function () {
            return ($this->services['Mautic\\WebhookBundle\\EventListener\\WebhookSubscriber'] ?? $this->load('getWebhookSubscriber6Service'));
        }, 1 => 'onWebhookKill'], 0);
        $instance->addListener('mautic.queue_publish_message', [0 => function () {
            return ($this->services['Mautic\\QueueBundle\\EventListener\\BeanstalkdSubscriber'] ?? $this->load('getBeanstalkdSubscriberService'));
        }, 1 => 'onPublishMessage'], 0);
        $instance->addListener('mautic.queue_consume_message', [0 => function () {
            return ($this->services['Mautic\\QueueBundle\\EventListener\\BeanstalkdSubscriber'] ?? $this->load('getBeanstalkdSubscriberService'));
        }, 1 => 'onConsumeMessage'], 0);
        $instance->addListener('mautic.queue_publish_message', [0 => function () {
            return ($this->services['Mautic\\QueueBundle\\EventListener\\RabbitMqSubscriber'] ?? ($this->services['Mautic\\QueueBundle\\EventListener\\RabbitMqSubscriber'] = new \Mautic\QueueBundle\EventListener\RabbitMqSubscriber($this)));
        }, 1 => 'onPublishMessage'], 0);
        $instance->addListener('mautic.queue_consume_message', [0 => function () {
            return ($this->services['Mautic\\QueueBundle\\EventListener\\RabbitMqSubscriber'] ?? ($this->services['Mautic\\QueueBundle\\EventListener\\RabbitMqSubscriber'] = new \Mautic\QueueBundle\EventListener\RabbitMqSubscriber($this)));
        }, 1 => 'onConsumeMessage'], 0);
        $instance->addListener('mautic.view_inject_custom_assets', [0 => function () {
            return ($this->services['MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\AssetsSubscriber'] ?? $this->load('getAssetsSubscriber2Service'));
        }, 1 => 'injectAssets'], 0);
        $instance->addListener('mautic.email_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\EmailSubscriber'] ?? $this->load('getEmailSubscriberService'));
        }, 1 => 'onEmailPostSave'], 0);
        $instance->addListener('mautic.email_post_delete', [0 => function () {
            return ($this->services['MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\EmailSubscriber'] ?? $this->load('getEmailSubscriberService'));
        }, 1 => 'onEmailDelete'], 0);
        $instance->addListener('mautic.view_inject_custom_content', [0 => function () {
            return ($this->services['MauticPlugin\\GrapesJsBuilderBundle\\EventSubscriber\\InjectCustomContentSubscriber'] ?? $this->load('getInjectCustomContentSubscriberService'));
        }, 1 => 'injectViewCustomContent'], 0);
        $instance->addListener('mautic.asset_on_remote_browse', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCloudStorageBundle\\EventListener\\RemoteAssetBrowseSubscriber'] ?? ($this->services['MauticPlugin\\MauticCloudStorageBundle\\EventListener\\RemoteAssetBrowseSubscriber'] = new \MauticPlugin\MauticCloudStorageBundle\EventListener\RemoteAssetBrowseSubscriber()));
        }, 1 => 'onAssetRemoteBrowse'], 0);
        $instance->addListener('mautic.view_inject_custom_buttons', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFullContactBundle\\EventListener\\ButtonSubscriber'] ?? $this->load('getButtonSubscriber2Service'));
        }, 1 => 'injectViewButtons'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFullContactBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber3Service'));
        }, 1 => 'leadPostSave'], 0);
        $instance->addListener('mautic.company_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFullContactBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber3Service'));
        }, 1 => 'companyPostSave'], 0);
        $instance->addListener('mautic.view_inject_custom_buttons', [0 => function () {
            return ($this->services['MauticPlugin\\MauticClearbitBundle\\EventListener\\ButtonSubscriber'] ?? $this->load('getButtonSubscriberService'));
        }, 1 => 'injectViewButtons'], 0);
        $instance->addListener('mautic.lead_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticClearbitBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber2Service'));
        }, 1 => 'leadPostSave'], 0);
        $instance->addListener('mautic.company_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticClearbitBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriber2Service'));
        }, 1 => 'companyPostSave'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCrmBundle\\EventListener\\LeadListSubscriber'] ?? $this->load('getLeadListSubscriberService'));
        }, 1 => 'onFilterChoiceFieldsGenerate'], 0);
        $instance->addListener('mautic.list_pre_process_list', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCrmBundle\\EventListener\\LeadListSubscriber'] ?? $this->load('getLeadListSubscriberService'));
        }, 1 => 'onLeadListProcessList'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.focus.on_campaign_trigger_action', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriberService'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'] ?? $this->getFocusSubscriberService());
        }, 1 => 'onKernelRequest'], 0);
        $instance->addListener('mautic.focus_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'] ?? $this->getFocusSubscriberService());
        }, 1 => 'onFocusPostSave'], 0);
        $instance->addListener('mautic.focus_post_delete', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'] ?? $this->getFocusSubscriberService());
        }, 1 => 'onFocusDelete'], 0);
        $instance->addListener('mautic.focus_token_replacement', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FocusSubscriber'] ?? $this->getFocusSubscriberService());
        }, 1 => 'onTokenReplacement'], 0);
        $instance->addListener('mautic.form_post_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriberService'));
        }, 1 => 'onFormPostSave'], 0);
        $instance->addListener('mautic.form_post_delete', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\FormSubscriber'] ?? $this->load('getFormSubscriberService'));
        }, 1 => 'onFormDelete'], 0);
        $instance->addListener('mautic.page_on_display', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriberService'));
        }, 1 => 'onPageDisplay'], 0);
        $instance->addListener('mautic.page_on_build', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\PageSubscriber'] ?? $this->load('getPageSubscriberService'));
        }, 1 => 'onPageBuild'], 0);
        $instance->addListener('mautic.page_on_hit', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\StatSubscriber'] ?? $this->load('getStatSubscriberService'));
        }, 1 => 'onPageHit'], 0);
        $instance->addListener('mautic.form_on_submit', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\StatSubscriber'] ?? $this->load('getStatSubscriberService'));
        }, 1 => 'onFormSubmit'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['MauticPlugin\\MauticFocusBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber2Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber2Service'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.social.on_campaign_trigger_action', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\CampaignSubscriber'] ?? $this->load('getCampaignSubscriber2Service'));
        }, 1 => 'onCampaignAction'], 0);
        $instance->addListener('mautic.add_channel', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\ChannelSubscriber'] ?? $this->load('getChannelSubscriberService'));
        }, 1 => 'onAddChannel'], 80);
        $instance->addListener('mautic.config_on_generate', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\ConfigSubscriber'] = new \MauticPlugin\MauticSocialBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigGenerate'], 0);
        $instance->addListener('mautic.config_pre_save', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\ConfigSubscriber'] ?? ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\ConfigSubscriber'] = new \MauticPlugin\MauticSocialBundle\EventListener\ConfigSubscriber()));
        }, 1 => 'onConfigSave'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\FormSubscriber'] ?? ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\FormSubscriber'] = new \MauticPlugin\MauticSocialBundle\EventListener\FormSubscriber()));
        }, 1 => 'onFormBuild'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['MauticPlugin\\MauticSocialBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriber3Service'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('mautic.on_citrix_token_generate', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber2Service'));
        }, 1 => 'onTokenGenerate'], 254);
        $instance->addListener('mautic.email_on_build', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber2Service'));
        }, 1 => 'onEmailBuild'], 0);
        $instance->addListener('mautic.email_on_send', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber2Service'));
        }, 1 => 'decodeTokensSend'], 0);
        $instance->addListener('mautic.email_on_display', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\EmailSubscriber'] ?? $this->load('getEmailSubscriber2Service'));
        }, 1 => 'decodeTokensDisplay'], 0);
        $instance->addListener('mautic.plugin_on_integration_request', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\IntegrationRequestSubscriber'] ?? ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\IntegrationRequestSubscriber'] = new \MauticPlugin\MauticCitrixBundle\EventListener\IntegrationRequestSubscriber()));
        }, 1 => 'getParameters'], 0);
        $instance->addListener('mautic.lead_timeline_on_generate', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriberService'));
        }, 1 => 'onTimelineGenerate'], 0);
        $instance->addListener('mautic.list_filters_choices_on_generate', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriberService'));
        }, 1 => 'onListChoicesGenerate'], 0);
        $instance->addListener('mautic.list_filters_on_filtering', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\LeadSubscriber'] ?? $this->load('getLeadSubscriberService'));
        }, 1 => 'onListFiltering'], 0);
        $instance->addListener('mautic.list_stats', [0 => function () {
            return ($this->services['MauticPlugin\\MauticCitrixBundle\\EventListener\\StatsSubscriber'] ?? $this->load('getStatsSubscriberService'));
        }, 1 => 'onStatsFetch'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['mautic.core.subscriber.router'] ?? $this->getMautic_Core_Subscriber_RouterService());
        }, 1 => 'setRouterRequestContext'], 1);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->services['mautic.core.errorhandler.subscriber'] ?? $this->getMautic_Core_Errorhandler_SubscriberService());
        }, 1 => 'onKernelRequest'], 2047);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->services['mautic.helper.cookie'] ?? $this->getMautic_Helper_CookieService());
        }, 1 => 'onResponse'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->services['mautic.integrations.subscriber.controller'] ?? $this->getMautic_Integrations_Subscriber_ControllerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('mautic.post_contact_export_scheduled', [0 => function () {
            return ($this->services['mautic.lead.export_scheduled_audit_log_subscriber'] ?? $this->load('getMautic_Lead_ExportScheduledAuditLogSubscriberService'));
        }, 1 => 'onContactExportScheduled'], 0);
        $instance->addListener('mautic.post_contact_export_send_email', [0 => function () {
            return ($this->services['mautic.lead.export_scheduled_audit_log_subscriber'] ?? $this->load('getMautic_Lead_ExportScheduledAuditLogSubscriberService'));
        }, 1 => 'onContactExportEmailSent'], 0);
        $instance->addListener('mautic.post_contact_export_scheduled', [0 => function () {
            return ($this->services['mautic.lead.export_scheduled_logger_subscriber'] ?? $this->load('getMautic_Lead_ExportScheduledLoggerSubscriberService'));
        }, 1 => 'onContactExportScheduled'], 0);
        $instance->addListener('mautic.post_contact_export_send_email', [0 => function () {
            return ($this->services['mautic.lead.export_scheduled_logger_subscriber'] ?? $this->load('getMautic_Lead_ExportScheduledLoggerSubscriberService'));
        }, 1 => 'onContactExportEmailSent'], 0);
        $instance->addListener('mautic.post_contact_export_scheduled', [0 => function () {
            return ($this->services['mautic.lead.export_scheduled_notification_subscriber'] ?? $this->load('getMautic_Lead_ExportScheduledNotificationSubscriberService'));
        }, 1 => 'onContactExportScheduled'], 0);
        $instance->addListener('mautic.contact_export_prepare_file', [0 => function () {
            return ($this->services['mautic.lead.contact_scheduled_export.subscriber'] ?? $this->load('getMautic_Lead_ContactScheduledExport_SubscriberService'));
        }, 1 => 'onContactExportPrepareFile'], 0);
        $instance->addListener('mautic.contact_export_send_email', [0 => function () {
            return ($this->services['mautic.lead.contact_scheduled_export.subscriber'] ?? $this->load('getMautic_Lead_ContactScheduledExport_SubscriberService'));
        }, 1 => 'onContactExportSendEmail'], 0);
        $instance->addListener('mautic.post_contact_export_send_email', [0 => function () {
            return ($this->services['mautic.lead.contact_scheduled_export.subscriber'] ?? $this->load('getMautic_Lead_ContactScheduledExport_SubscriberService'));
        }, 1 => 'onContactExportEmailSent'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['mautic.notification.campaignbundle.subscriber'] ?? $this->load('getMautic_Notification_Campaignbundle_SubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.notification.on_campaign_trigger_action', [0 => function () {
            return ($this->services['mautic.notification.campaignbundle.subscriber'] ?? $this->load('getMautic_Notification_Campaignbundle_SubscriberService'));
        }, 1 => 'onCampaignTriggerAction'], 0);
        $instance->addListener('mautic.form_on_build', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onFormBuilder'], 0);
        $instance->addListener('mautic.on_webinar_register_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onWebinarRegister'], 0);
        $instance->addListener('mautic.on_meeting_start_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onMeetingStart'], 0);
        $instance->addListener('mautic.on_training_register_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onTrainingRegister'], 0);
        $instance->addListener('mautic.on_training_start_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onTrainingStart'], 0);
        $instance->addListener('mautic.on_assist_remote_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onAssistRemote'], 0);
        $instance->addListener('mautic.on_citrix_form_validate_action', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onFormValidate'], 0);
        $instance->addListener('mautic.form_pre_save', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onFormPreSave'], 0);
        $instance->addListener('mautic.plugin_on_integration_request', [0 => function () {
            return ($this->services['mautic.citrix.formbundle.subscriber'] ?? $this->load('getMautic_Citrix_Formbundle_SubscriberService'));
        }, 1 => 'onRequest'], 0);
        $instance->addListener('mautic.campaign_on_build', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onCampaignBuild'], 0);
        $instance->addListener('mautic.on_citrix_webinar_event', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onWebinarEvent'], 0);
        $instance->addListener('mautic.on_citrix_meeting_event', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onMeetingEvent'], 0);
        $instance->addListener('mautic.on_citrix_training_event', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onTrainingEvent'], 0);
        $instance->addListener('mautic.on_citrix_assist_event', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onAssistEvent'], 0);
        $instance->addListener('mautic.on_citrix_webinar_action', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onWebinarAction'], 0);
        $instance->addListener('mautic.on_citrix_meeting_action', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onMeetingAction'], 0);
        $instance->addListener('mautic.on_citrix_training_action', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onTrainingAction'], 0);
        $instance->addListener('mautic.on_citrix_assist_action', [0 => function () {
            return ($this->services['mautic.citrix.campaignbundle.subscriber'] ?? $this->load('getMautic_Citrix_Campaignbundle_SubscriberService'));
        }, 1 => 'onAssistAction'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () {
            return ($this->privates['security.logout.listener.csrf_token_clearing'] ?? $this->load('getSecurity_Logout_Listener_CsrfTokenClearingService'));
        }, 1 => 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the public 'grapesjsbuilder.integration.builder' shared service.
     *
     * @return \MauticPlugin\GrapesJsBuilderBundle\Integration\Support\BuilderSupport
     */
    protected function getGrapesjsbuilder_Integration_BuilderService()
    {
        return $this->services['grapesjsbuilder.integration.builder'] = new \MauticPlugin\GrapesJsBuilderBundle\Integration\Support\BuilderSupport();
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['http_kernel'])) {
            return $this->services['http_kernel'];
        }
        $b = ($this->services['Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface'] ?? $this->getArgumentResolverInterfaceService());

        if (isset($this->services['http_kernel'])) {
            return $this->services['http_kernel'];
        }

        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, ($this->privates['controller_resolver'] ?? $this->getControllerResolverService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $b);
    }

    /*
     * Gets the public 'knp_menu.matcher' shared service.
     *
     * @return \Knp\Menu\Matcher\Matcher
     */
    protected function getKnpMenu_MatcherService()
    {
        return $this->services['knp_menu.matcher'] = new \Knp\Menu\Matcher\Matcher(new RewindableGenerator(function () {
            yield 0 => ($this->privates['knp_menu.voter.router'] ?? $this->load('getKnpMenu_Voter_RouterService'));
        }, 1));
    }

    /*
     * Gets the public 'marketplace.service.config' shared service.
     *
     * @return \Mautic\MarketplaceBundle\Service\Config
     */
    protected function getMarketplace_Service_ConfigService()
    {
        return $this->services['marketplace.service.config'] = new \Mautic\MarketplaceBundle\Service\Config(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.asset.fixture.asset' shared service.
     *
     * @return \Mautic\AssetBundle\DataFixtures\ORM\LoadAssetData
     */
    protected function getMautic_Asset_Fixture_AssetService()
    {
        return $this->services['mautic.asset.fixture.asset'] = new \Mautic\AssetBundle\DataFixtures\ORM\LoadAssetData();
    }

    /*
     * Gets the public 'mautic.cache.provider' shared service.
     *
     * @return \Mautic\CacheBundle\Cache\CacheProvider
     */
    protected function getMautic_Cache_ProviderService()
    {
        return $this->services['mautic.cache.provider'] = new \Mautic\CacheBundle\Cache\CacheProvider(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $this);
    }

    /*
     * Gets the public 'mautic.campaign.event_collector' shared service.
     *
     * @return \Mautic\CampaignBundle\EventCollector\EventCollector
     */
    protected function getMautic_Campaign_EventCollectorService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.campaign.event_collector'])) {
            return $this->services['mautic.campaign.event_collector'];
        }

        return $this->services['mautic.campaign.event_collector'] = new \Mautic\CampaignBundle\EventCollector\EventCollector(($this->services['translator'] ?? $this->getTranslator2Service()), $a);
    }

    /*
     * Gets the public 'mautic.campaign.fixture.campaign' shared service.
     *
     * @return \Mautic\CampaignBundle\DataFixtures\ORM\CampaignData
     */
    protected function getMautic_Campaign_Fixture_CampaignService()
    {
        return $this->services['mautic.campaign.fixture.campaign'] = new \Mautic\CampaignBundle\DataFixtures\ORM\CampaignData();
    }

    /*
     * Gets the public 'mautic.campaign.membership.adder' shared service.
     *
     * @return \Mautic\CampaignBundle\Membership\Action\Adder
     */
    protected function getMautic_Campaign_Membership_AdderService()
    {
        $a = ($this->services['mautic.campaign.repository.lead'] ?? $this->getMautic_Campaign_Repository_LeadService());

        if (isset($this->services['mautic.campaign.membership.adder'])) {
            return $this->services['mautic.campaign.membership.adder'];
        }
        $b = ($this->services['mautic.campaign.repository.lead_event_log'] ?? $this->getMautic_Campaign_Repository_LeadEventLogService());

        if (isset($this->services['mautic.campaign.membership.adder'])) {
            return $this->services['mautic.campaign.membership.adder'];
        }

        return $this->services['mautic.campaign.membership.adder'] = new \Mautic\CampaignBundle\Membership\Action\Adder($a, $b);
    }

    /*
     * Gets the public 'mautic.campaign.membership.builder' shared service.
     *
     * @return \Mautic\CampaignBundle\Membership\MembershipBuilder
     */
    protected function getMautic_Campaign_Membership_BuilderService()
    {
        $a = ($this->services['mautic.campaign.membership.manager'] ?? $this->getMautic_Campaign_Membership_ManagerService());

        if (isset($this->services['mautic.campaign.membership.builder'])) {
            return $this->services['mautic.campaign.membership.builder'];
        }

        return $this->services['mautic.campaign.membership.builder'] = new \Mautic\CampaignBundle\Membership\MembershipBuilder($a, ($this->services['mautic.campaign.repository.lead'] ?? $this->getMautic_Campaign_Repository_LeadService()), ($this->services['mautic.lead.repository.lead'] ?? $this->getMautic_Lead_Repository_LeadService()), ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.campaign.membership.event_dispatcher' shared service.
     *
     * @return \Mautic\CampaignBundle\Membership\EventDispatcher
     */
    protected function getMautic_Campaign_Membership_EventDispatcherService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.campaign.membership.event_dispatcher'])) {
            return $this->services['mautic.campaign.membership.event_dispatcher'];
        }

        return $this->services['mautic.campaign.membership.event_dispatcher'] = new \Mautic\CampaignBundle\Membership\EventDispatcher($a);
    }

    /*
     * Gets the public 'mautic.campaign.membership.manager' shared service.
     *
     * @return \Mautic\CampaignBundle\Membership\MembershipManager
     */
    protected function getMautic_Campaign_Membership_ManagerService()
    {
        $a = ($this->services['mautic.campaign.membership.adder'] ?? $this->getMautic_Campaign_Membership_AdderService());

        if (isset($this->services['mautic.campaign.membership.manager'])) {
            return $this->services['mautic.campaign.membership.manager'];
        }
        $b = ($this->services['mautic.campaign.membership.event_dispatcher'] ?? $this->getMautic_Campaign_Membership_EventDispatcherService());

        if (isset($this->services['mautic.campaign.membership.manager'])) {
            return $this->services['mautic.campaign.membership.manager'];
        }

        return $this->services['mautic.campaign.membership.manager'] = new \Mautic\CampaignBundle\Membership\MembershipManager($a, ($this->services['mautic.campaign.membership.remover'] ?? $this->getMautic_Campaign_Membership_RemoverService()), $b, ($this->services['mautic.campaign.repository.lead'] ?? $this->getMautic_Campaign_Repository_LeadService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.campaign.membership.remover' shared service.
     *
     * @return \Mautic\CampaignBundle\Membership\Action\Remover
     */
    protected function getMautic_Campaign_Membership_RemoverService()
    {
        return $this->services['mautic.campaign.membership.remover'] = new \Mautic\CampaignBundle\Membership\Action\Remover(($this->services['mautic.campaign.repository.lead'] ?? $this->getMautic_Campaign_Repository_LeadService()), ($this->services['mautic.campaign.repository.lead_event_log'] ?? $this->getMautic_Campaign_Repository_LeadEventLogService()), ($this->services['translator'] ?? $this->getTranslator2Service()), ($this->services['mautic.helper.twig.date'] ?? $this->getMautic_Helper_Twig_DateService()));
    }

    /*
     * Gets the public 'mautic.campaign.repository.lead' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Campaign_Repository_LeadService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.campaign.repository.lead'])) {
            return $this->services['mautic.campaign.repository.lead'];
        }

        return $this->services['mautic.campaign.repository.lead'] = $a->getRepository('Mautic\\CampaignBundle\\Entity\\Lead');
    }

    /*
     * Gets the public 'mautic.campaign.repository.lead_event_log' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Campaign_Repository_LeadEventLogService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.campaign.repository.lead_event_log'])) {
            return $this->services['mautic.campaign.repository.lead_event_log'];
        }

        return $this->services['mautic.campaign.repository.lead_event_log'] = $a->getRepository('Mautic\\CampaignBundle\\Entity\\LeadEventLog');
    }

    /*
     * Gets the public 'mautic.channel.helper.channel_list' shared service.
     *
     * @return \Mautic\ChannelBundle\Helper\ChannelListHelper
     */
    protected function getMautic_Channel_Helper_ChannelListService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.channel.helper.channel_list'])) {
            return $this->services['mautic.channel.helper.channel_list'];
        }

        return $this->services['mautic.channel.helper.channel_list'] = new \Mautic\ChannelBundle\Helper\ChannelListHelper($a, ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.cipher.openssl' shared service.
     *
     * @return \Mautic\CoreBundle\Security\Cryptography\Cipher\Symmetric\OpenSSLCipher
     */
    protected function getMautic_Cipher_OpensslService()
    {
        return $this->services['mautic.cipher.openssl'] = new \Mautic\CoreBundle\Security\Cryptography\Cipher\Symmetric\OpenSSLCipher('prod');
    }

    /*
     * Gets the public 'mautic.citrix.fixture.load_citrix_data' shared service.
     *
     * @return \MauticPlugin\MauticCitrixBundle\Tests\DataFixtures\ORM\LoadCitrixData
     */
    protected function getMautic_Citrix_Fixture_LoadCitrixDataService()
    {
        return $this->services['mautic.citrix.fixture.load_citrix_data'] = new \MauticPlugin\MauticCitrixBundle\Tests\DataFixtures\ORM\LoadCitrixData();
    }

    /*
     * Gets the public 'mautic.company.deduper' shared service.
     *
     * @return \Mautic\LeadBundle\Deduplicate\CompanyDeduper
     */
    protected function getMautic_Company_DeduperService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['mautic.company.deduper'])) {
            return $this->services['mautic.company.deduper'];
        }
        $b = ($this->services['mautic.lead.repository.company'] ?? $this->getMautic_Lead_Repository_CompanyService());

        if (isset($this->services['mautic.company.deduper'])) {
            return $this->services['mautic.company.deduper'];
        }

        return $this->services['mautic.company.deduper'] = new \Mautic\LeadBundle\Deduplicate\CompanyDeduper($a, $b);
    }

    /*
     * Gets the public 'mautic.configurator' shared service.
     *
     * @return \Mautic\CoreBundle\Configurator\Configurator
     */
    protected function getMautic_ConfiguratorService()
    {
        $this->services['mautic.configurator'] = $instance = new \Mautic\CoreBundle\Configurator\Configurator(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()));

        $instance->addStep(($this->services['mautic.install.configurator.step.check'] ?? $this->getMautic_Install_Configurator_Step_CheckService()), 0);
        $instance->addStep(($this->services['mautic.install.configurator.step.doctrine'] ?? $this->getMautic_Install_Configurator_Step_DoctrineService()), 1);
        $instance->addStep(($this->services['mautic.install.configurator.step.user'] ?? ($this->services['mautic.install.configurator.step.user'] = new \Mautic\InstallBundle\Configurator\Step\UserStep())), 2);

        return $instance;
    }

    /*
     * Gets the public 'mautic.core.errorhandler.subscriber' shared service.
     *
     * @return \Mautic\CoreBundle\EventListener\ErrorHandlingListener
     */
    protected function getMautic_Core_Errorhandler_SubscriberService()
    {
        return $this->services['mautic.core.errorhandler.subscriber'] = new \Mautic\CoreBundle\EventListener\ErrorHandlingListener(($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), (($this->has("monolog.logger.chrome")) ? ($this->get("monolog.logger.chrome")) : (null)));
    }

    /*
     * Gets the public 'mautic.core.service.flashbag' shared service.
     *
     * @return \Mautic\CoreBundle\Service\FlashBag
     */
    protected function getMautic_Core_Service_FlashbagService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Model\\NotificationModel'] ?? $this->getNotificationModelService());

        if (isset($this->services['mautic.core.service.flashbag'])) {
            return $this->services['mautic.core.service.flashbag'];
        }

        return $this->services['mautic.core.service.flashbag'] = new \Mautic\CoreBundle\Service\FlashBag(($this->services['.container.private.session'] ?? $this->get_Container_Private_SessionService()), ($this->services['translator'] ?? $this->getTranslator2Service()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a);
    }

    /*
     * Gets the public 'mautic.core.service.log_processor' shared service.
     *
     * @return \Mautic\CoreBundle\Monolog\LogProcessor
     */
    protected function getMautic_Core_Service_LogProcessorService()
    {
        return $this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor();
    }

    /*
     * Gets the public 'mautic.core.subscriber.router' shared service.
     *
     * @return \Mautic\CoreBundle\EventListener\RouterSubscriber
     */
    protected function getMautic_Core_Subscriber_RouterService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['mautic.core.subscriber.router'])) {
            return $this->services['mautic.core.subscriber.router'];
        }

        return $this->services['mautic.core.subscriber.router'] = new \Mautic\CoreBundle\EventListener\RouterSubscriber($a, $this->getEnv('MAUTIC_REQUEST_CONTEXT_SCHEME'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HOST'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTPS_PORT'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTP_PORT'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_BASE_URL'));
    }

    /*
     * Gets the public 'mautic.core.validator.file_upload' shared service.
     *
     * @return \Mautic\CoreBundle\Validator\FileUploadValidator
     */
    protected function getMautic_Core_Validator_FileUploadService()
    {
        return $this->services['mautic.core.validator.file_upload'] = new \Mautic\CoreBundle\Validator\FileUploadValidator(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.database.version.provider' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Provider\VersionProvider
     */
    protected function getMautic_Database_Version_ProviderService()
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.database.version.provider'])) {
            return $this->services['mautic.database.version.provider'];
        }

        return $this->services['mautic.database.version.provider'] = new \Mautic\CoreBundle\Doctrine\Provider\VersionProvider($a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.doctrine.loader.mautic_fixtures_loader' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Loader\MauticFixturesLoader
     */
    protected function getMautic_Doctrine_Loader_MauticFixturesLoaderService()
    {
        $a = ($this->privates['doctrine.fixtures.loader'] ?? $this->getDoctrine_Fixtures_LoaderService());

        if (isset($this->services['mautic.doctrine.loader.mautic_fixtures_loader'])) {
            return $this->services['mautic.doctrine.loader.mautic_fixtures_loader'];
        }

        return $this->services['mautic.doctrine.loader.mautic_fixtures_loader'] = new \Mautic\CoreBundle\Doctrine\Loader\MauticFixturesLoader($a);
    }

    /*
     * Gets the public 'mautic.email.fixture.email' shared service.
     *
     * @return \Mautic\EmailBundle\DataFixtures\ORM\LoadEmailData
     */
    protected function getMautic_Email_Fixture_EmailService()
    {
        $a = ($this->services['Mautic\\EmailBundle\\Model\\EmailModel'] ?? $this->getEmailModelService());

        if (isset($this->services['mautic.email.fixture.email'])) {
            return $this->services['mautic.email.fixture.email'];
        }

        return $this->services['mautic.email.fixture.email'] = new \Mautic\EmailBundle\DataFixtures\ORM\LoadEmailData($a);
    }

    /*
     * Gets the public 'mautic.email.helper.stat' shared service.
     *
     * @return \Mautic\EmailBundle\Stat\StatHelper
     */
    protected function getMautic_Email_Helper_StatService()
    {
        return $this->services['mautic.email.helper.stat'] = new \Mautic\EmailBundle\Stat\StatHelper(($this->services['mautic.email.repository.stat'] ?? $this->getMautic_Email_Repository_StatService()));
    }

    /*
     * Gets the public 'mautic.email.helper.stats_collection' shared service.
     *
     * @return \Mautic\EmailBundle\Helper\StatsCollectionHelper
     */
    protected function getMautic_Email_Helper_StatsCollectionService()
    {
        $a = ($this->services['mautic.email.stats.helper_container'] ?? $this->getMautic_Email_Stats_HelperContainerService());

        if (isset($this->services['mautic.email.helper.stats_collection'])) {
            return $this->services['mautic.email.helper.stats_collection'];
        }

        return $this->services['mautic.email.helper.stats_collection'] = new \Mautic\EmailBundle\Helper\StatsCollectionHelper($a);
    }

    /*
     * Gets the public 'mautic.email.repository.stat' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Email_Repository_StatService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.email.repository.stat'])) {
            return $this->services['mautic.email.repository.stat'];
        }

        return $this->services['mautic.email.repository.stat'] = $a->getRepository('Mautic\\EmailBundle\\Entity\\Stat');
    }

    /*
     * Gets the public 'mautic.email.stats.helper_bounced' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\BouncedHelper
     */
    protected function getMautic_Email_Stats_HelperBouncedService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_bounced'])) {
            return $this->services['mautic.email.stats.helper_bounced'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_bounced'])) {
            return $this->services['mautic.email.stats.helper_bounced'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_bounced'])) {
            return $this->services['mautic.email.stats.helper_bounced'];
        }

        return $this->services['mautic.email.stats.helper_bounced'] = new \Mautic\EmailBundle\Stats\Helper\BouncedHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.email.stats.helper_clicked' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\ClickedHelper
     */
    protected function getMautic_Email_Stats_HelperClickedService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_clicked'])) {
            return $this->services['mautic.email.stats.helper_clicked'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_clicked'])) {
            return $this->services['mautic.email.stats.helper_clicked'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_clicked'])) {
            return $this->services['mautic.email.stats.helper_clicked'];
        }

        return $this->services['mautic.email.stats.helper_clicked'] = new \Mautic\EmailBundle\Stats\Helper\ClickedHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.email.stats.helper_container' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\StatHelperContainer
     */
    protected function getMautic_Email_Stats_HelperContainerService()
    {
        $this->services['mautic.email.stats.helper_container'] = $instance = new \Mautic\EmailBundle\Stats\StatHelperContainer();

        $instance->addHelper(($this->services['mautic.email.stats.helper_bounced'] ?? $this->getMautic_Email_Stats_HelperBouncedService()));
        $instance->addHelper(($this->services['mautic.email.stats.helper_clicked'] ?? $this->getMautic_Email_Stats_HelperClickedService()));
        $instance->addHelper(($this->services['mautic.email.stats.helper_failed'] ?? $this->getMautic_Email_Stats_HelperFailedService()));
        $instance->addHelper(($this->services['mautic.email.stats.helper_opened'] ?? $this->getMautic_Email_Stats_HelperOpenedService()));
        $instance->addHelper(($this->services['mautic.email.stats.helper_sent'] ?? $this->getMautic_Email_Stats_HelperSentService()));
        $instance->addHelper(($this->services['mautic.email.stats.helper_unsubscribed'] ?? $this->getMautic_Email_Stats_HelperUnsubscribedService()));

        return $instance;
    }

    /*
     * Gets the public 'mautic.email.stats.helper_failed' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\FailedHelper
     */
    protected function getMautic_Email_Stats_HelperFailedService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_failed'])) {
            return $this->services['mautic.email.stats.helper_failed'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_failed'])) {
            return $this->services['mautic.email.stats.helper_failed'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_failed'])) {
            return $this->services['mautic.email.stats.helper_failed'];
        }

        return $this->services['mautic.email.stats.helper_failed'] = new \Mautic\EmailBundle\Stats\Helper\FailedHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.email.stats.helper_opened' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\OpenedHelper
     */
    protected function getMautic_Email_Stats_HelperOpenedService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_opened'])) {
            return $this->services['mautic.email.stats.helper_opened'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_opened'])) {
            return $this->services['mautic.email.stats.helper_opened'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_opened'])) {
            return $this->services['mautic.email.stats.helper_opened'];
        }

        return $this->services['mautic.email.stats.helper_opened'] = new \Mautic\EmailBundle\Stats\Helper\OpenedHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.email.stats.helper_sent' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\SentHelper
     */
    protected function getMautic_Email_Stats_HelperSentService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_sent'])) {
            return $this->services['mautic.email.stats.helper_sent'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_sent'])) {
            return $this->services['mautic.email.stats.helper_sent'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_sent'])) {
            return $this->services['mautic.email.stats.helper_sent'];
        }

        return $this->services['mautic.email.stats.helper_sent'] = new \Mautic\EmailBundle\Stats\Helper\SentHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.email.stats.helper_unsubscribed' shared service.
     *
     * @return \Mautic\EmailBundle\Stats\Helper\UnsubscribedHelper
     */
    protected function getMautic_Email_Stats_HelperUnsubscribedService()
    {
        $a = ($this->services['mautic.stats.aggregate.collector'] ?? $this->getMautic_Stats_Aggregate_CollectorService());

        if (isset($this->services['mautic.email.stats.helper_unsubscribed'])) {
            return $this->services['mautic.email.stats.helper_unsubscribed'];
        }
        $b = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.email.stats.helper_unsubscribed'])) {
            return $this->services['mautic.email.stats.helper_unsubscribed'];
        }
        $c = ($this->services['mautic.generated.columns.provider'] ?? $this->getMautic_Generated_Columns_ProviderService());

        if (isset($this->services['mautic.email.stats.helper_unsubscribed'])) {
            return $this->services['mautic.email.stats.helper_unsubscribed'];
        }

        return $this->services['mautic.email.stats.helper_unsubscribed'] = new \Mautic\EmailBundle\Stats\Helper\UnsubscribedHelper($a, $b, $c, ($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()));
    }

    /*
     * Gets the public 'mautic.filesystem' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\Filesystem
     */
    protected function getMautic_FilesystemService()
    {
        return $this->services['mautic.filesystem'] = new \Mautic\CoreBundle\Helper\Filesystem();
    }

    /*
     * Gets the public 'mautic.form.collector.field' shared service.
     *
     * @return \Mautic\FormBundle\Collector\FieldCollector
     */
    protected function getMautic_Form_Collector_FieldService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.form.collector.field'])) {
            return $this->services['mautic.form.collector.field'];
        }

        return $this->services['mautic.form.collector.field'] = new \Mautic\FormBundle\Collector\FieldCollector($a);
    }

    /*
     * Gets the public 'mautic.form.collector.mapped.object' shared service.
     *
     * @return \Mautic\FormBundle\Collector\MappedObjectCollector
     */
    protected function getMautic_Form_Collector_Mapped_ObjectService()
    {
        $a = ($this->services['mautic.form.collector.field'] ?? $this->getMautic_Form_Collector_FieldService());

        if (isset($this->services['mautic.form.collector.mapped.object'])) {
            return $this->services['mautic.form.collector.mapped.object'];
        }

        return $this->services['mautic.form.collector.mapped.object'] = new \Mautic\FormBundle\Collector\MappedObjectCollector($a);
    }

    /*
     * Gets the public 'mautic.form.fixture.form' shared service.
     *
     * @return \Mautic\FormBundle\DataFixtures\ORM\LoadFormData
     */
    protected function getMautic_Form_Fixture_FormService()
    {
        $a = ($this->services['Mautic\\FormBundle\\Model\\FormModel'] ?? $this->getFormModelService());

        if (isset($this->services['mautic.form.fixture.form'])) {
            return $this->services['mautic.form.fixture.form'];
        }
        $b = ($this->services['Mautic\\FormBundle\\Model\\FieldModel'] ?? $this->getFieldModelService());

        if (isset($this->services['mautic.form.fixture.form'])) {
            return $this->services['mautic.form.fixture.form'];
        }
        $c = ($this->services['Mautic\\FormBundle\\Model\\ActionModel'] ?? $this->getActionModelService());

        if (isset($this->services['mautic.form.fixture.form'])) {
            return $this->services['mautic.form.fixture.form'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.form.fixture.form'])) {
            return $this->services['mautic.form.fixture.form'];
        }

        return $this->services['mautic.form.fixture.form'] = new \Mautic\FormBundle\DataFixtures\ORM\LoadFormData($a, $b, $c, $d);
    }

    /*
     * Gets the public 'mautic.form.fixture.form_result' shared service.
     *
     * @return \Mautic\FormBundle\DataFixtures\ORM\LoadFormResultData
     */
    protected function getMautic_Form_Fixture_FormResultService()
    {
        $a = ($this->services['Mautic\\PageBundle\\Model\\PageModel'] ?? $this->getPageModelService());

        if (isset($this->services['mautic.form.fixture.form_result'])) {
            return $this->services['mautic.form.fixture.form_result'];
        }
        $b = ($this->services['Mautic\\FormBundle\\Model\\SubmissionModel'] ?? $this->getSubmissionModelService());

        if (isset($this->services['mautic.form.fixture.form_result'])) {
            return $this->services['mautic.form.fixture.form_result'];
        }

        return $this->services['mautic.form.fixture.form_result'] = new \Mautic\FormBundle\DataFixtures\ORM\LoadFormResultData($a, $b);
    }

    /*
     * Gets the public 'mautic.form.helper.form_uploader' shared service.
     *
     * @return \Mautic\FormBundle\Helper\FormUploader
     */
    protected function getMautic_Form_Helper_FormUploaderService()
    {
        return $this->services['mautic.form.helper.form_uploader'] = new \Mautic\FormBundle\Helper\FormUploader(($this->services['mautic.helper.file_uploader'] ?? $this->getMautic_Helper_FileUploaderService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.form.service.field.value.transformer' shared service.
     *
     * @return \Mautic\FormBundle\Event\Service\FieldValueTransformer
     */
    protected function getMautic_Form_Service_Field_Value_TransformerService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['mautic.form.service.field.value.transformer'])) {
            return $this->services['mautic.form.service.field.value.transformer'];
        }

        return $this->services['mautic.form.service.field.value.transformer'] = new \Mautic\FormBundle\Event\Service\FieldValueTransformer($a);
    }

    /*
     * Gets the public 'mautic.form.validator.upload_field_validator' shared service.
     *
     * @return \Mautic\FormBundle\Validator\UploadFieldValidator
     */
    protected function getMautic_Form_Validator_UploadFieldValidatorService()
    {
        return $this->services['mautic.form.validator.upload_field_validator'] = new \Mautic\FormBundle\Validator\UploadFieldValidator(($this->services['mautic.core.validator.file_upload'] ?? $this->getMautic_Core_Validator_FileUploadService()));
    }

    /*
     * Gets the public 'mautic.generated.columns.provider' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Provider\GeneratedColumnsProvider
     */
    protected function getMautic_Generated_Columns_ProviderService()
    {
        $a = ($this->services['mautic.database.version.provider'] ?? $this->getMautic_Database_Version_ProviderService());

        if (isset($this->services['mautic.generated.columns.provider'])) {
            return $this->services['mautic.generated.columns.provider'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.generated.columns.provider'])) {
            return $this->services['mautic.generated.columns.provider'];
        }

        return $this->services['mautic.generated.columns.provider'] = new \Mautic\CoreBundle\Doctrine\Provider\GeneratedColumnsProvider($a, $b);
    }

    /*
     * Gets the public 'mautic.helper.app_version' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\AppVersion
     */
    protected function getMautic_Helper_AppVersionService()
    {
        return $this->services['mautic.helper.app_version'] = new \Mautic\CoreBundle\Helper\AppVersion();
    }

    /*
     * Gets the public 'mautic.helper.bundle' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\BundleHelper
     */
    protected function getMautic_Helper_BundleService()
    {
        return $this->services['mautic.helper.bundle'] = new \Mautic\CoreBundle\Helper\BundleHelper(['MauticCoreBundle' => ['isPlugin' => false, 'base' => 'Core', 'bundle' => 'CoreBundle', 'relative' => 'app/bundles/CoreBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle'), 'namespace' => 'Mautic\\CoreBundle', 'symfonyBundleName' => 'MauticCoreBundle', 'bundleClass' => 'Mautic\\CoreBundle\\MauticCoreBundle', 'permissionClasses' => ['Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions' => 'Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions'], 'config' => ['routes' => ['main' => ['mautic_core_ajax' => ['path' => '/ajax', 'controller' => 'Mautic\\CoreBundle\\Controller\\AjaxController::delegateAjaxAction'], 'mautic_core_update' => ['path' => '/update', 'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::indexAction'], 'mautic_core_update_schema' => ['path' => '/update/schema', 'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::schemaAction'], 'mautic_core_form_action' => ['path' => '/action/{objectAction}/{objectModel}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\FormController::executeAction', 'defaults' => ['objectModel' => '']], 'mautic_core_file_action' => ['path' => '/file/{objectAction}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\FileController::executeAction'], 'mautic_themes_index' => ['path' => '/themes', 'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::indexAction'], 'mautic_themes_action' => ['path' => '/themes/{objectAction}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::executeAction']], 'public' => ['mautic_js' => ['path' => '/mtc.js', 'controller' => 'Mautic\\CoreBundle\\Controller\\JsController::indexAction'], 'mautic_base_index' => ['path' => '/', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::indexAction'], 'mautic_secure_root' => ['path' => '/s', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction'], 'mautic_secure_root_slash' => ['path' => '/s/', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction'], 'mautic_remove_trailing_slash' => ['path' => '/{url}', 'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction', 'method' => 'GET', 'requirements' => ['url' => '.*/$']]], 'api' => ['mautic_core_api_file_list' => ['path' => '/files/{dir}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::listAction'], 'mautic_core_api_file_create' => ['path' => '/files/{dir}/new', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::createAction', 'method' => 'POST'], 'mautic_core_api_file_delete' => ['path' => '/files/{dir}/{file}/delete', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::deleteAction', 'method' => 'DELETE'], 'mautic_core_api_theme_list' => ['path' => '/themes', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::listAction'], 'mautic_core_api_theme_get' => ['path' => '/themes/{theme}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::getAction'], 'mautic_core_api_theme_create' => ['path' => '/themes/new', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::newAction', 'method' => 'POST'], 'mautic_core_api_theme_delete' => ['path' => '/themes/{theme}/delete', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::deleteAction', 'method' => 'DELETE'], 'mautic_core_api_stats' => ['path' => '/stats/{table}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\StatsApiController::listAction', 'defaults' => ['table' => '']]]], 'menu' => ['main' => ['mautic.core.components' => ['id' => 'mautic_components_root', 'iconClass' => 'fa-puzzle-piece', 'priority' => 60], 'mautic.core.channels' => ['id' => 'mautic_channels_root', 'iconClass' => 'fa-rss', 'priority' => 40]], 'admin' => ['mautic.theme.menu.index' => ['route' => 'mautic_themes_index', 'iconClass' => 'fa-newspaper-o', 'id' => 'mautic_themes_index', 'access' => 'core:themes:view']], 'extra' => ['priority' => -1000, 'items' => ['name' => 'extra', 'children' => []]], 'profile' => ['priority' => -1000, 'items' => ['name' => 'profile', 'children' => []]]], 'services' => ['main' => ['mautic.core.service.flashbag' => ['class' => 'Mautic\\CoreBundle\\Service\\FlashBag', 'arguments' => [0 => '@session', 1 => 'translator', 2 => 'request_stack', 3 => 'mautic.core.model.notification']], 'mautic.core.service.bulk_notification' => ['class' => 'Mautic\\CoreBundle\\Service\\BulkNotification', 'arguments' => [0 => 'mautic.core.model.notification']], 'mautic.core.service.local_file_adapter' => ['class' => 'Mautic\\CoreBundle\\Service\\LocalFileAdapterService', 'arguments' => [0 => '%env(resolve:MAUTIC_EL_FINDER_PATH)%']], 'mautic.core.service.log_processor' => ['class' => 'Mautic\\CoreBundle\\Monolog\\LogProcessor', 'tags' => [0 => 'monolog.processor']]], 'events' => ['mautic.core.subscriber.router' => ['class' => 'Mautic\\CoreBundle\\EventListener\\RouterSubscriber', 'arguments' => [0 => 'router', 1 => '%router.request_context.scheme%', 2 => '%router.request_context.host%', 3 => '%request_listener.https_port%', 4 => '%request_listener.http_port%', 5 => '%router.request_context.base_url%']]], 'forms' => ['mautic.form.type.coreconfig' => ['class' => 'Mautic\\CoreBundle\\Form\\Type\\ConfigType', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.language', 2 => 'mautic.ip_lookup.factory', 3 => '%mautic.ip_lookup_services%', 4 => 'mautic.ip_lookup']], 'mautic.form.type.dynamic_content_filter_entry_filters' => ['class' => 'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType', 'arguments' => [0 => 'translator'], 'methodCalls' => ['setConnection' => [0 => 'database_connection']]]], 'helpers' => ['mautic.helper.app_version' => ['class' => 'Mautic\\CoreBundle\\Helper\\AppVersion'], 'mautic.helper.twig.menu' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MenuHelper', 'arguments' => [0 => 'knp_menu.helper'], 'alias' => 'menu'], 'mautic.helper.twig.date' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\DateHelper', 'arguments' => [0 => '%mautic.date_format_full%', 1 => '%mautic.date_format_short%', 2 => '%mautic.date_format_dateonly%', 3 => '%mautic.date_format_timeonly%', 4 => 'translator', 5 => 'mautic.helper.core_parameters'], 'alias' => 'date'], 'mautic.helper.twig.gravatar' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\GravatarHelper', 'arguments' => [0 => 'mautic.helper.twig.default_avatar', 1 => 'mautic.helper.core_parameters', 2 => 'request_stack'], 'alias' => 'gravatar'], 'mautic.helper.twig.analytics' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\AnalyticsHelper', 'alias' => 'analytics', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.twig.config' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ConfigHelper', 'alias' => 'config', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.twig.mautibot' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MautibotHelper', 'alias' => 'mautibot'], 'mautic.helper.twig.button' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ButtonHelper', 'arguments' => [0 => 'twig', 1 => 'translator', 2 => 'event_dispatcher'], 'alias' => 'buttons'], 'mautic.helper.twig.content' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ContentHelper', 'arguments' => [0 => 'twig', 1 => 'event_dispatcher'], 'alias' => 'content'], 'mautic.helper.twig.formatter' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\FormatterHelper', 'arguments' => [0 => 'mautic.helper.twig.date', 1 => 'translator'], 'alias' => 'formatter'], 'mautic.helper.twig.version' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\VersionHelper', 'arguments' => [0 => 'mautic.helper.app_version'], 'alias' => 'version'], 'mautic.helper.twig.security' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\SecurityHelper', 'arguments' => [0 => 'mautic.security', 1 => 'request_stack', 2 => 'event_dispatcher', 3 => 'security.csrf.token_manager'], 'alias' => 'security'], 'mautic.helper.paths' => ['class' => 'Mautic\\CoreBundle\\Helper\\PathsHelper', 'arguments' => [0 => 'mautic.helper.user', 1 => 'mautic.helper.core_parameters', 2 => '%kernel.cache_dir%', 3 => '%kernel.logs_dir%', 4 => '%kernel.project_dir%']], 'mautic.helper.ip_lookup' => ['class' => 'Mautic\\CoreBundle\\Helper\\IpLookupHelper', 'arguments' => [0 => 'request_stack', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.ip_lookup']], 'mautic.helper.user' => ['class' => 'Mautic\\CoreBundle\\Helper\\UserHelper', 'arguments' => [0 => 'security.token_storage']], 'mautic.helper.core_parameters' => ['class' => 'Mautic\\CoreBundle\\Helper\\CoreParametersHelper', 'arguments' => [0 => 'service_container'], 'serviceAlias' => 'mautic.config'], 'mautic.helper.bundle' => ['class' => 'Mautic\\CoreBundle\\Helper\\BundleHelper', 'arguments' => [0 => '%mautic.bundles%', 1 => '%mautic.plugin.bundles%']], 'mautic.helper.phone_number' => ['class' => 'Mautic\\CoreBundle\\Helper\\PhoneNumberHelper'], 'mautic.helper.input_helper' => ['class' => 'Mautic\\CoreBundle\\Helper\\InputHelper'], 'mautic.helper.file_uploader' => ['class' => 'Mautic\\CoreBundle\\Helper\\FileUploader', 'arguments' => [0 => 'mautic.helper.file_path_resolver']], 'mautic.helper.file_path_resolver' => ['class' => 'Mautic\\CoreBundle\\Helper\\FilePathResolver', 'arguments' => [0 => 'symfony.filesystem', 1 => 'mautic.helper.input_helper']], 'mautic.helper.file_properties' => ['class' => 'Mautic\\CoreBundle\\Helper\\FileProperties'], 'mautic.helper.trailing_slash' => ['class' => 'Mautic\\CoreBundle\\Helper\\TrailingSlashHelper', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.token_builder' => ['class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelper', 'arguments' => [0 => 'mautic.security', 1 => 'mautic.model.factory', 2 => 'database_connection', 3 => 'mautic.helper.user']], 'mautic.helper.token_builder.factory' => ['class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelperFactory', 'arguments' => [0 => 'mautic.security', 1 => 'mautic.model.factory', 2 => 'database_connection', 3 => 'mautic.helper.user']], 'mautic.helper.maxmind_do_not_sell_download' => ['class' => 'Mautic\\CoreBundle\\Helper\\MaxMindDoNotSellDownloadHelper', 'arguments' => [0 => '%mautic.ip_lookup_auth%', 1 => 'monolog.logger.mautic', 2 => 'mautic.native.connector', 3 => 'mautic.helper.core_parameters']], 'mautic.helper.update_checks' => ['class' => 'Mautic\\CoreBundle\\Helper\\PreUpdateCheckHelper']], 'menus' => ['mautic.menu.main' => ['alias' => 'main'], 'mautic.menu.admin' => ['alias' => 'admin', 'options' => ['template' => '@MauticCore/Menu/admin.html.twig']], 'mautic.menu.extra' => ['alias' => 'extra', 'options' => ['template' => '@MauticCore/Menu/extra.html.twig']], 'mautic.menu.profile' => ['alias' => 'profile', 'options' => ['template' => '@MauticCore/Menu/profile_inline.html.twig']]], 'other' => ['mautic.cache.warmer.middleware' => ['class' => 'Mautic\\CoreBundle\\Cache\\MiddlewareCacheWarmer', 'tag' => 'kernel.cache_warmer', 'arguments' => [0 => '%kernel.environment%']], 'symfony.filesystem' => ['class' => 'Symfony\\Component\\Filesystem\\Filesystem'], 'mautic.filesystem' => ['class' => 'Mautic\\CoreBundle\\Helper\\Filesystem'], 'symfony.finder' => ['class' => 'Symfony\\Component\\Finder\\Finder'], 'mautic.core.errorhandler.subscriber' => ['class' => 'Mautic\\CoreBundle\\EventListener\\ErrorHandlingListener', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'monolog.logger', 2 => '@=container.has(\'monolog.logger.chrome\') ? container.get(\'monolog.logger.chrome\') : null'], 'tag' => 'kernel.event_subscriber'], 'mautic.configurator' => ['class' => 'Mautic\\CoreBundle\\Configurator\\Configurator', 'arguments' => [0 => 'mautic.helper.paths']], 'mautic.di.env_processor.nullable' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\NullableProcessor', 'tag' => 'container.env_var_processor'], 'mautic.di.env_processor.int_nullable' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\IntNullableProcessor', 'tag' => 'container.env_var_processor'], 'mautic.di.env_processor.mauticconst' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\MauticConstProcessor', 'tag' => 'container.env_var_processor'], 'mautic.cipher.openssl' => ['class' => 'Mautic\\CoreBundle\\Security\\Cryptography\\Cipher\\Symmetric\\OpenSSLCipher', 'arguments' => [0 => '%kernel.environment%']], 'mautic.route_loader' => ['class' => 'Mautic\\CoreBundle\\Loader\\RouteLoader', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.core_parameters'], 'tag' => 'routing.loader'], 'mautic.security' => ['class' => 'Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions', 'arguments' => [0 => 'mautic.helper.user', 1 => 'translator', 2 => 'mautic.helper.core_parameters', 3 => '%mautic.bundles%', 4 => '%mautic.plugin.bundles%']], 'mautic.page.helper.factory' => ['class' => 'Mautic\\CoreBundle\\Factory\\PageHelperFactory', 'arguments' => [0 => 'session', 1 => 'mautic.helper.core_parameters']], 'mautic.translation.loader' => ['class' => 'Mautic\\CoreBundle\\Loader\\TranslationLoader', 'arguments' => [0 => 'mautic.helper.bundle', 1 => 'mautic.helper.paths'], 'tag' => 'translation.loader', 'alias' => 'mautic'], 'mautic.tblprefix_subscriber' => ['class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineEventsSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => '%mautic.db_table_prefix%'], 'mautic.database.version.provider' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\VersionProvider', 'arguments' => [0 => 'database_connection', 1 => 'mautic.helper.core_parameters']], 'mautic.generated.columns.provider' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\GeneratedColumnsProvider', 'arguments' => [0 => 'mautic.database.version.provider', 1 => 'event_dispatcher']], 'mautic.generated.columns.doctrine.listener' => ['class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineGeneratedColumnsListener', 'tag' => 'doctrine.event_listener', 'tagArguments' => ['event' => 'postGenerateSchema', 'lazy' => true], 'arguments' => [0 => 'mautic.generated.columns.provider', 1 => 'monolog.logger.mautic']], 'mautic.exception.listener' => ['class' => 'Mautic\\CoreBundle\\EventListener\\ExceptionListener', 'arguments' => [0 => 'router', 1 => 'Mautic\\CoreBundle\\Controller\\ExceptionController::showAction', 2 => 'monolog.logger.mautic'], 'tag' => 'kernel.event_listener', 'tagArguments' => ['event' => 'kernel.exception', 'method' => 'onKernelException', 'priority' => 255]], 'mautic.helper.cookie' => ['class' => 'Mautic\\CoreBundle\\Helper\\CookieHelper', 'arguments' => [0 => '%mautic.cookie_path%', 1 => '%mautic.cookie_domain%', 2 => '%mautic.cookie_secure%', 3 => '%mautic.cookie_httponly%', 4 => 'request_stack'], 'tag' => 'kernel.event_subscriber'], 'mautic.helper.cache_storage' => ['class' => 'Mautic\\CoreBundle\\Helper\\CacheStorageHelper', 'arguments' => [0 => '"db"', 1 => '%mautic.db_table_prefix%', 2 => 'doctrine.dbal.default_connection', 3 => '%kernel.cache_dir%']], 'mautic.helper.update' => ['class' => 'Mautic\\CoreBundle\\Helper\\UpdateHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'monolog.logger.mautic', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.http.client', 4 => 'mautic.helper.update.release_parser', 5 => 'mautic.helper.update_checks']], 'mautic.helper.update.release_parser' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\Github\\ReleaseParser', 'arguments' => [0 => 'mautic.http.client']], 'mautic.helper.cache' => ['class' => 'Mautic\\CoreBundle\\Helper\\CacheHelper', 'arguments' => [0 => '%kernel.cache_dir%', 1 => 'session', 2 => 'mautic.helper.paths', 3 => 'kernel']], 'mautic.helper.theme' => ['class' => 'Mautic\\CoreBundle\\Helper\\ThemeHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'twig', 2 => 'translator', 3 => 'mautic.helper.core_parameters', 4 => 'mautic.filesystem', 5 => 'symfony.finder', 6 => 'mautic.integrations.helper.builder_integrations'], 'methodCalls' => ['setDefaultTheme' => [0 => '%mautic.theme%']]], 'mautic.helper.encryption' => ['class' => 'Mautic\\CoreBundle\\Helper\\EncryptionHelper', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.cipher.openssl']], 'mautic.helper.url' => ['class' => 'Mautic\\CoreBundle\\Helper\\UrlHelper', 'arguments' => [0 => 'mautic.http.client', 1 => '%mautic.link_shortener_url%', 2 => 'monolog.logger.mautic']], 'mautic.helper.export' => ['class' => 'Mautic\\CoreBundle\\Helper\\ExportHelper', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.core_parameters', 2 => 'mautic.helper.file_path_resolver']], 'mautic.helper.composer' => ['class' => 'Mautic\\CoreBundle\\Helper\\ComposerHelper', 'arguments' => [0 => 'kernel', 1 => 'monolog.logger.mautic']], 'mautic.helper.menu' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuHelper', 'arguments' => [0 => 'mautic.security', 1 => 'request_stack', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.integration']], 'mautic.helper.hash' => ['class' => 'Mautic\\CoreBundle\\Helper\\HashHelper\\HashHelper'], 'mautic.helper.random' => ['class' => 'Mautic\\CoreBundle\\Helper\\RandomHelper\\RandomHelper'], 'mautic.helper.command' => ['class' => 'Mautic\\CoreBundle\\Helper\\CommandHelper', 'arguments' => 'kernel'], 'mautic.menu_renderer' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuRenderer', 'arguments' => [0 => 'knp_menu.matcher', 1 => 'twig'], 'tag' => 'knp_menu.renderer', 'alias' => 'mautic'], 'mautic.menu.builder' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuBuilder', 'arguments' => [0 => 'knp_menu.factory', 1 => 'knp_menu.matcher', 2 => 'event_dispatcher', 3 => 'mautic.helper.menu']], 'mautic.ip_lookup.factory' => ['class' => 'Mautic\\CoreBundle\\Factory\\IpLookupFactory', 'arguments' => [0 => '%mautic.ip_lookup_services%', 1 => 'monolog.logger.mautic', 2 => 'mautic.http.client', 3 => '%kernel.cache_dir%']], 'mautic.ip_lookup' => ['class' => 'Mautic\\CoreBundle\\IpLookup\\AbstractLookup', 'factory' => [0 => '@mautic.ip_lookup.factory', 1 => 'getService'], 'arguments' => [0 => '%mautic.ip_lookup_service%', 1 => '%mautic.ip_lookup_auth%', 2 => '%mautic.ip_lookup_config%', 3 => 'mautic.http.client']], 'mautic.native.connector' => ['class' => 'Symfony\\Contracts\\HttpClient\\HttpClientInterface', 'factory' => [0 => 'Symfony\\Component\\HttpClient\\HttpClient', 1 => 'create']], 'twig.controller.exception.class' => 'Mautic\\CoreBundle\\Controller\\ExceptionController', 'mautic.doctrine.loader.mautic_fixtures_loader' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Loader\\MauticFixturesLoader', 'arguments' => [0 => 'doctrine.fixtures.loader']], 'mautic.schema.helper.column' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\ColumnSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%']], 'mautic.schema.helper.index' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\IndexSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%']], 'mautic.schema.helper.table' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\TableSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%', 2 => 'mautic.schema.helper.column']], 'mautic.form.list.validator.circular' => ['class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'request_stack'], 'tag' => 'validator.constraint_validator'], 'mautic.maxmind.doNotSellList' => ['class' => 'Mautic\\CoreBundle\\IpLookup\\DoNotSellList\\MaxMindDoNotSellList', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.monolog.handler' => ['class' => 'Mautic\\CoreBundle\\Monolog\\Handler\\FileLogHandler', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.monolog.fulltrace.formatter']], 'mautic.update.step_provider' => ['class' => 'Mautic\\CoreBundle\\Update\\StepProvider'], 'mautic.update.step.delete_cache' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\DeleteCacheStep', 'arguments' => [0 => 'mautic.helper.cache', 1 => 'translator'], 'tag' => 'mautic.update_step'], 'mautic.update.step.finalize' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\FinalizeUpdateStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.paths', 2 => 'session', 3 => 'mautic.helper.app_version'], 'tag' => 'mautic.update_step'], 'mautic.update.step.install_new_files' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\InstallNewFilesStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.update', 2 => 'mautic.helper.paths'], 'tag' => 'mautic.update_step'], 'mautic.update.step.remove_deleted_files' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\RemoveDeletedFilesStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.paths', 2 => 'monolog.logger.mautic'], 'tag' => 'mautic.update_step'], 'mautic.update.step.update_schema' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateSchemaStep', 'arguments' => [0 => 'translator', 1 => 'service_container'], 'tag' => 'mautic.update_step'], 'mautic.update.step.update_translations' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateTranslationsStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.language', 2 => 'monolog.logger.mautic'], 'tag' => 'mautic.update_step'], 'mautic.update.step.checks' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\PreUpdateChecksStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.update'], 'tag' => 'mautic.update_step'], 'mautic.update.checks.php' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckPhpVersion', 'tag' => 'mautic.update_check'], 'mautic.update.checks.database' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckDatabaseDriverAndVersion', 'arguments' => [0 => 'doctrine.orm.default_entity_manager'], 'tag' => 'mautic.update_check']], 'validator' => ['mautic.core.validator.file_upload' => ['class' => 'Mautic\\CoreBundle\\Validator\\FileUploadValidator', 'arguments' => [0 => 'translator']]]], 'ip_lookup_services' => $this->parameters['mautic.ip_lookup_services'], 'parameters' => ['site_url' => '', 'webroot' => '', '404_page' => '', 'cache_path' => '%kernel.project_dir%/var/cache', 'log_path' => '%kernel.project_dir%/var/logs', 'max_log_files' => 7, 'log_file_name' => 'mautic_%kernel.environment%.php', 'image_path' => 'media/images', 'tmp_path' => '%kernel.project_dir%/var/tmp', 'theme' => 'blank', 'theme_import_allowed_extensions' => [0 => 'json', 1 => 'twig', 2 => 'css', 3 => 'js', 4 => 'htm', 5 => 'html', 6 => 'txt', 7 => 'jpg', 8 => 'jpeg', 9 => 'png', 10 => 'gif'], 'db_driver' => 'pdo_mysql', 'db_host' => '127.0.0.1', 'db_port' => 3306, 'db_name' => '', 'db_user' => '', 'db_password' => '', 'db_table_prefix' => '', 'db_host_ro' => NULL, 'locale' => 'en_US', 'secret_key' => 'temp', 'dev_hosts' => [], 'trusted_hosts' => [], 'trusted_proxies' => [], 'rememberme_key' => '%mautic.secret_key%', 'rememberme_lifetime' => 31536000, 'rememberme_path' => '/', 'rememberme_domain' => '', 'default_pagelimit' => 30, 'default_timezone' => 'UTC', 'date_format_full' => 'F j, Y g:i a T', 'date_format_short' => 'D, M d', 'date_format_dateonly' => 'F j, Y', 'date_format_timeonly' => 'g:i a', 'ip_lookup_service' => 'maxmind_download', 'ip_lookup_auth' => '', 'ip_lookup_config' => [], 'ip_lookup_create_organization' => false, 'transifex_api_token' => '', 'update_stability' => 'stable', 'cookie_path' => '/', 'cookie_domain' => '', 'cookie_secure' => true, 'cookie_httponly' => false, 'do_not_track_ips' => [], 'do_not_track_bots' => [0 => 'MSNBOT', 1 => 'msnbot-media', 2 => 'bingbot', 3 => 'Googlebot', 4 => 'Google Web Preview', 5 => 'Mediapartners-Google', 6 => 'Baiduspider', 7 => 'Ezooms', 8 => 'YahooSeeker', 9 => 'Slurp', 10 => 'AltaVista', 11 => 'AVSearch', 12 => 'Mercator', 13 => 'Scooter', 14 => 'InfoSeek', 15 => 'Ultraseek', 16 => 'Lycos', 17 => 'Wget', 18 => 'YandexBot', 19 => 'Java/1.4.1_04', 20 => 'SiteBot', 21 => 'Exabot', 22 => 'AhrefsBot', 23 => 'MJ12bot', 24 => 'NetSeer crawler', 25 => 'TurnitinBot', 26 => 'magpie-crawler', 27 => 'Nutch Crawler', 28 => 'CMS Crawler', 29 => 'rogerbot', 30 => 'Domnutch', 31 => 'ssearch_bot', 32 => 'XoviBot', 33 => 'digincore', 34 => 'fr-crawler', 35 => 'SeznamBot', 36 => 'Seznam screenshot-generator', 37 => 'Facebot', 38 => 'facebookexternalhit', 39 => 'SimplePie', 40 => 'Riddler', 41 => '007ac9 Crawler', 42 => '360Spider', 43 => 'A6-Indexer', 44 => 'ADmantX', 45 => 'AHC', 46 => 'AISearchBot', 47 => 'APIs-Google', 48 => 'Aboundex', 49 => 'AddThis', 50 => 'Adidxbot', 51 => 'AdsBot-Google', 52 => 'AdsTxtCrawler', 53 => 'AdvBot', 54 => 'Ahrefs', 55 => 'AlphaBot', 56 => 'Amazon CloudFront', 57 => 'AndersPinkBot', 58 => 'Apache-HttpClient', 59 => 'Apercite', 60 => 'AppEngine-Google', 61 => 'Applebot', 62 => 'ArchiveBot', 63 => 'BDCbot', 64 => 'BIGLOTRON', 65 => 'BLEXBot', 66 => 'BLP_bbot', 67 => 'BTWebClient', 68 => 'BUbiNG', 69 => 'Baidu-YunGuanCe', 70 => 'Barkrowler', 71 => 'BehloolBot', 72 => 'BingPreview', 73 => 'BomboraBot', 74 => 'Bot.AraTurka.com', 75 => 'BoxcarBot', 76 => 'BrandVerity', 77 => 'Buck', 78 => 'CC Metadata Scaper', 79 => 'CCBot', 80 => 'CapsuleChecker', 81 => 'Cliqzbot', 82 => 'CloudFlare-AlwaysOnline', 83 => 'Companybook-Crawler', 84 => 'ContextAd Bot', 85 => 'CrunchBot', 86 => 'CrystalSemanticsBot', 87 => 'CyberPatrol', 88 => 'DareBoost', 89 => 'Datafeedwatch', 90 => 'Daum', 91 => 'DeuSu', 92 => 'developers.google.com', 93 => 'Diffbot', 94 => 'Digg Deeper', 95 => 'Digincore bot', 96 => 'Discordbot', 97 => 'Disqus', 98 => 'DnyzBot', 99 => 'Domain Re-Animator Bot', 100 => 'DomainStatsBot', 101 => 'DuckDuckBot', 102 => 'DuckDuckGo-Favicons-Bot', 103 => 'EZID', 104 => 'Embedly', 105 => 'EveryoneSocialBot', 106 => 'ExtLinksBot', 107 => 'FAST Enterprise Crawler', 108 => 'FAST-WebCrawler', 109 => 'Feedfetcher-Google', 110 => 'Feedly', 111 => 'Feedspotbot', 112 => 'FemtosearchBot', 113 => 'Fetch', 114 => 'Fever', 115 => 'Flamingo_SearchEngine', 116 => 'FlipboardProxy', 117 => 'Fyrebot', 118 => 'GarlikCrawler', 119 => 'Genieo', 120 => 'Gigablast', 121 => 'Gigabot', 122 => 'GingerCrawler', 123 => 'Gluten Free Crawler', 124 => 'GnowitNewsbot', 125 => 'Go-http-client', 126 => 'Google-Adwords-Instant', 127 => 'Gowikibot', 128 => 'GrapeshotCrawler', 129 => 'Grobbot', 130 => 'HTTrack', 131 => 'Hatena', 132 => 'IAS crawler', 133 => 'ICC-Crawler', 134 => 'IndeedBot', 135 => 'InterfaxScanBot', 136 => 'IstellaBot', 137 => 'James BOT', 138 => 'Jamie\'s Spider', 139 => 'Jetslide', 140 => 'Jetty', 141 => 'Jugendschutzprogramm-Crawler', 142 => 'K7MLWCBot', 143 => 'Kemvibot', 144 => 'KosmioBot', 145 => 'Landau-Media-Spider', 146 => 'Laserlikebot', 147 => 'Leikibot', 148 => 'Linguee Bot', 149 => 'LinkArchiver', 150 => 'LinkedInBot', 151 => 'LivelapBot', 152 => 'Luminator-robots', 153 => 'Mail.RU_Bot', 154 => 'Mastodon', 155 => 'MauiBot', 156 => 'Mediatoolkitbot', 157 => 'MegaIndex', 158 => 'MeltwaterNews', 159 => 'MetaJobBot', 160 => 'MetaURI', 161 => 'Miniflux', 162 => 'MojeekBot', 163 => 'Moreover', 164 => 'MuckRack', 165 => 'Multiviewbot', 166 => 'NING', 167 => 'NerdByNature.Bot', 168 => 'NetcraftSurveyAgent', 169 => 'Netvibes', 170 => 'Nimbostratus-Bot', 171 => 'Nuzzel', 172 => 'Ocarinabot', 173 => 'OpenHoseBot', 174 => 'OrangeBot', 175 => 'OutclicksBot', 176 => 'PR-CY.RU', 177 => 'PaperLiBot', 178 => 'Pcore-HTTP', 179 => 'PhantomJS', 180 => 'PiplBot', 181 => 'PocketParser', 182 => 'Primalbot', 183 => 'PrivacyAwareBot', 184 => 'Pulsepoint', 185 => 'Python-urllib', 186 => 'Qwantify', 187 => 'RankActiveLinkBot', 188 => 'RetrevoPageAnalyzer', 189 => 'SBL-BOT', 190 => 'SEMrushBot', 191 => 'SEOkicks', 192 => 'SWIMGBot', 193 => 'SafeDNSBot', 194 => 'SafeSearch microdata crawler', 195 => 'ScoutJet', 196 => 'Scrapy', 197 => 'Screaming Frog SEO Spider', 198 => 'SemanticScholarBot', 199 => 'SimpleCrawler', 200 => 'Siteimprove.com', 201 => 'SkypeUriPreview', 202 => 'Slack-ImgProxy', 203 => 'Slackbot', 204 => 'Snacktory', 205 => 'SocialRankIOBot', 206 => 'Sogou', 207 => 'Sonic', 208 => 'StorygizeBot', 209 => 'SurveyBot', 210 => 'Sysomos', 211 => 'TangibleeBot', 212 => 'TelegramBot', 213 => 'Teoma', 214 => 'Thinklab', 215 => 'TinEye', 216 => 'ToutiaoSpider', 217 => 'Traackr.com', 218 => 'Trove', 219 => 'TweetmemeBot', 220 => 'Twitterbot', 221 => 'Twurly', 222 => 'Upflow', 223 => 'UptimeRobot', 224 => 'UsineNouvelleCrawler', 225 => 'Veoozbot', 226 => 'WeSEE:Search', 227 => 'WhatsApp', 228 => 'Xenu Link Sleuth', 229 => 'Y!J', 230 => 'YaK', 231 => 'Yahoo Link Preview', 232 => 'Yeti', 233 => 'YisouSpider', 234 => 'Zabbix', 235 => 'ZoominfoBot', 236 => 'ZumBot', 237 => 'ZuperlistBot', 238 => '^LCC ', 239 => 'acapbot', 240 => 'acoonbot', 241 => 'adbeat_bot', 242 => 'adscanner', 243 => 'aiHitBot', 244 => 'antibot', 245 => 'arabot', 246 => 'archive.org_bot', 247 => 'axios', 248 => 'backlinkcrawler', 249 => 'betaBot', 250 => 'bibnum.bnf', 251 => 'binlar', 252 => 'bitlybot', 253 => 'blekkobot', 254 => 'blogmuraBot', 255 => 'bnf.fr_bot', 256 => 'bot-pge.chlooe.com', 257 => 'botify', 258 => 'brainobot', 259 => 'buzzbot', 260 => 'cXensebot', 261 => 'careerbot', 262 => 'centurybot9', 263 => 'changedetection', 264 => 'check_http', 265 => 'citeseerxbot', 266 => 'coccoc', 267 => 'collection@infegy.com', 268 => 'content crawler spider', 269 => 'contxbot', 270 => 'convera', 271 => 'crawler4j', 272 => 'curl', 273 => 'datagnionbot', 274 => 'dcrawl', 275 => 'deadlinkchecker', 276 => 'discobot', 277 => 'domaincrawler', 278 => 'dotbot', 279 => 'drupact', 280 => 'ec2linkfinder', 281 => 'edisterbot', 282 => 'electricmonk', 283 => 'elisabot', 284 => 'epicbot', 285 => 'eright', 286 => 'europarchive.org', 287 => 'exabot', 288 => 'ezooms', 289 => 'filterdb.iss.net', 290 => 'findlink', 291 => 'findthatfile', 292 => 'findxbot', 293 => 'fluffy', 294 => 'fuelbot', 295 => 'g00g1e.net', 296 => 'g2reader-bot', 297 => 'gnam gnam spider', 298 => 'google-xrawler', 299 => 'grub.org', 300 => 'gslfbot', 301 => 'heritrix', 302 => 'http_get', 303 => 'httpunit', 304 => 'ia_archiver', 305 => 'ichiro', 306 => 'imrbot', 307 => 'integromedb', 308 => 'intelium_bot', 309 => 'ip-web-crawler.com', 310 => 'ips-agent', 311 => 'iskanie', 312 => 'it2media-domain-crawler', 313 => 'jyxobot', 314 => 'lb-spider', 315 => 'libwww', 316 => 'linkapediabot', 317 => 'linkdex', 318 => 'lipperhey', 319 => 'lssbot', 320 => 'lssrocketcrawler', 321 => 'ltx71', 322 => 'mappydata', 323 => 'memorybot', 324 => 'mindUpBot', 325 => 'mlbot', 326 => 'moatbot', 327 => 'msnbot', 328 => 'msrbot', 329 => 'nerdybot', 330 => 'netEstate NE Crawler', 331 => 'netresearchserver', 332 => 'newsharecounts', 333 => 'newspaper', 334 => 'niki-bot', 335 => 'nutch', 336 => 'okhttp', 337 => 'omgili', 338 => 'openindexspider', 339 => 'page2rss', 340 => 'panscient', 341 => 'phpcrawl', 342 => 'pingdom', 343 => 'pinterest', 344 => 'postrank', 345 => 'proximic', 346 => 'psbot', 347 => 'purebot', 348 => 'python-requests', 349 => 'redditbot', 350 => 'scribdbot', 351 => 'seekbot', 352 => 'semanticbot', 353 => 'sentry', 354 => 'seoscanners', 355 => 'seznambot', 356 => 'sistrix crawler', 357 => 'sitebot', 358 => 'siteexplorer.info', 359 => 'smtbot', 360 => 'spbot', 361 => 'speedy', 362 => 'summify', 363 => 'tagoobot', 364 => 'toplistbot', 365 => 'tracemyfile', 366 => 'trendictionbot', 367 => 'turnitinbot', 368 => 'twengabot', 369 => 'um-LN', 370 => 'urlappendbot', 371 => 'vebidoobot', 372 => 'vkShare', 373 => 'voilabot', 374 => 'wbsearchbot', 375 => 'web-archive-net.com.bot', 376 => 'webcompanycrawler', 377 => 'webmon', 378 => 'wget', 379 => 'wocbot', 380 => 'woobot', 381 => 'woriobot', 382 => 'wotbox', 383 => 'xovibot', 384 => 'yacybot', 385 => 'yandex.com', 386 => 'yanga', 387 => 'yoozBot', 388 => 'zgrab'], 'do_not_track_internal_ips' => [], 'track_private_ip_ranges' => false, 'link_shortener_url' => NULL, 'cached_data_timeout' => 10, 'batch_sleep_time' => 1, 'batch_campaign_sleep_time' => false, 'transliterate_page_title' => false, 'cors_restrict_domains' => true, 'cors_valid_domains' => [], 'headers_sts' => false, 'headers_sts_expire_time' => 60, 'headers_sts_subdomains' => false, 'headers_sts_preload' => false, 'max_entity_lock_time' => 0, 'default_daterange_filter' => '-1 month', 'debug' => false, 'rss_notification_url' => '', 'translations_list_url' => 'https://language-packs.mautic.com/manifest.json', 'translations_fetch_url' => 'https://language-packs.mautic.com/', 'stats_update_url' => 'https://updates.mautic.org/stats/send', 'install_source' => 'Mautic', 'system_update_url' => 'https://api.github.com/repos/mautic/mautic/releases', 'editor_fonts' => [0 => ['name' => 'Arial', 'font' => 'Arial, Helvetica Neue, Helvetica, sans-serif'], 1 => ['name' => 'Bitter', 'font' => 'Bitter, Georgia, Times, Times New Roman, serif', 'url' => 'https://fonts.googleapis.com/css?family=Bitter'], 2 => ['name' => 'Courier New', 'font' => 'Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace'], 3 => ['name' => 'Droid Serif', 'font' => 'Droid Serif, Georgia, Times, Times New Roman, serif', 'url' => 'https://fonts.googleapis.com/css?family=Droid+Serif'], 4 => ['name' => 'Georgia', 'font' => 'Georgia, Times, Times New Roman, serif'], 5 => ['name' => 'Helvetica', 'font' => 'Helvetica Neue, Helvetica, Arial, sans-serif'], 6 => ['name' => 'Lato', 'font' => 'Lato, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Lato'], 7 => ['name' => 'Lucida Sans Unicode', 'font' => 'Lucida Sans Unicode, Lucida Grande, Lucida Sans, Geneva, Verdana, sans-serif'], 8 => ['name' => 'Montserrat', 'font' => 'Montserrat, Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Montserrat'], 9 => ['name' => 'Open Sans', 'font' => 'Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Open+Sans'], 10 => ['name' => 'Roboto', 'font' => 'Roboto, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Roboto'], 11 => ['name' => 'Source Sans Pro', 'font' => 'Source Sans Pro, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Source+Sans+Pro'], 12 => ['name' => 'Tahoma', 'font' => 'Tahoma, Geneva, Segoe, sans-serif'], 13 => ['name' => 'Times New Roman', 'font' => 'TimesNewRoman, Times New Roman, Times, Beskerville, Georgia, serif'], 14 => ['name' => 'Trebuchet MS', 'font' => 'Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif'], 15 => ['name' => 'Ubuntu', 'font' => 'Ubuntu, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Ubuntu'], 16 => ['name' => 'Verdana', 'font' => 'Verdana, Geneva, sans-serif'], 17 => ['name' => 'ヒラギノ角ゴ Pro W3', 'font' => 'ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, sans-serif'], 18 => ['name' => 'メイリオ', 'font' => 'メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, sans-serif']], 'composer_updates' => false, 'load_froala_assets' => false, 'redis_primary_only' => false]]], 'MauticApiBundle' => ['isPlugin' => false, 'base' => 'Api', 'bundle' => 'ApiBundle', 'relative' => 'app/bundles/ApiBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle'), 'namespace' => 'Mautic\\ApiBundle', 'symfonyBundleName' => 'MauticApiBundle', 'bundleClass' => 'Mautic\\ApiBundle\\MauticApiBundle', 'permissionClasses' => ['Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions' => 'Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions'], 'config' => ['routes' => ['public' => ['fos_oauth_server_token' => ['path' => '/oauth/v2/token', 'controller' => 'fos_oauth_server.controller.token:tokenAction', 'method' => 'GET|POST'], 'fos_oauth_server_authorize' => ['path' => '/oauth/v2/authorize', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\AuthorizeController::authorizeAction', 'method' => 'GET|POST'], 'mautic_oauth2_server_auth_login' => ['path' => '/oauth/v2/authorize_login', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginAction', 'method' => 'GET|POST'], 'mautic_oauth2_server_auth_login_check' => ['path' => '/oauth/v2/authorize_login_check', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginCheckAction', 'method' => 'GET|POST']], 'main' => ['mautic_client_index' => ['path' => '/credentials/{page}', 'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::indexAction'], 'mautic_client_action' => ['path' => '/credentials/{objectAction}/{objectId}', 'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::executeAction']]], 'menu' => ['admin' => ['items' => ['mautic.api.client.menu.index' => ['route' => 'mautic_client_index', 'iconClass' => 'fa-puzzle-piece', 'access' => 'api:clients:view', 'checks' => ['parameters' => ['api_enabled' => true]]]]]], 'services' => ['helpers' => ['mautic.api.helper.entity_result' => ['class' => 'Mautic\\ApiBundle\\Helper\\EntityResultHelper']], 'other' => ['mautic.api.oauth.event_listener' => ['class' => 'Mautic\\ApiBundle\\EventListener\\PreAuthorizationEventListener', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.security', 2 => 'translator'], 'tags' => [0 => 'kernel.event_listener', 1 => 'kernel.event_listener'], 'tagArguments' => [0 => ['event' => 'fos_oauth_server.pre_authorization_process', 'method' => 'onPreAuthorizationProcess'], 1 => ['event' => 'fos_oauth_server.post_authorization_process', 'method' => 'onPostAuthorizationProcess']]], 'fos_oauth_server.security.authentication.listener.class' => 'Mautic\\ApiBundle\\Security\\OAuth2\\Firewall\\OAuthListener', 'mautic.validator.oauthcallback' => ['class' => 'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator', 'tag' => 'validator.constraint_validator']]], 'parameters' => ['api_enabled' => false, 'api_enable_basic_auth' => false, 'api_oauth2_access_token_lifetime' => 60, 'api_oauth2_refresh_token_lifetime' => 14, 'api_batch_max_limit' => 200, 'api_rate_limiter_limit' => 0, 'api_rate_limiter_cache' => ['adapter' => 'cache.adapter.filesystem']]]], 'MauticAssetBundle' => ['isPlugin' => false, 'base' => 'Asset', 'bundle' => 'AssetBundle', 'relative' => 'app/bundles/AssetBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle'), 'namespace' => 'Mautic\\AssetBundle', 'symfonyBundleName' => 'MauticAssetBundle', 'bundleClass' => 'Mautic\\AssetBundle\\MauticAssetBundle', 'permissionClasses' => ['Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions'], 'config' => ['routes' => ['main' => ['mautic_asset_index' => ['path' => '/assets/{page}', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::indexAction'], 'mautic_asset_remote' => ['path' => '/assets/remote', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::remoteAction'], 'mautic_asset_action' => ['path' => '/assets/{objectAction}/{objectId}', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::executeAction']], 'api' => ['mautic_api_assetsstandard' => ['standard_entity' => true, 'name' => 'assets', 'path' => '/assets', 'controller' => 'Mautic\\AssetBundle\\Controller\\Api\\AssetApiController']], 'public' => ['mautic_asset_download' => ['path' => '/asset/{slug}', 'controller' => 'Mautic\\AssetBundle\\Controller\\PublicController::downloadAction', 'defaults' => ['slug' => '']]]], 'menu' => ['main' => ['items' => ['mautic.asset.assets' => ['route' => 'mautic_asset_index', 'access' => [0 => 'asset:assets:viewown', 1 => 'asset:assets:viewother'], 'parent' => 'mautic.core.components', 'priority' => 300]]]], 'categories' => ['asset' => NULL], 'services' => ['permissions' => ['mautic.asset.permissions' => ['class' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions', 'arguments' => [0 => 'mautic.helper.core_parameters']]], 'others' => ['mautic.asset.upload.error.handler' => ['class' => 'Mautic\\AssetBundle\\ErrorHandler\\DropzoneErrorHandler', 'arguments' => 'mautic.factory'], 'oneup_uploader.controller.dropzone.class' => 'Mautic\\AssetBundle\\Controller\\UploadController'], 'fixtures' => ['mautic.asset.fixture.asset' => ['class' => 'Mautic\\AssetBundle\\DataFixtures\\ORM\\LoadAssetData', 'tag' => 'doctrine.fixture.orm']], 'repositories' => ['mautic.asset.repository.download' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\AssetBundle\\Entity\\Download']]], 'parameters' => ['upload_dir' => '%kernel.project_dir%/media/files', 'max_size' => '6', 'allowed_extensions' => [0 => 'csv', 1 => 'doc', 2 => 'docx', 3 => 'epub', 4 => 'gif', 5 => 'jpg', 6 => 'jpeg', 7 => 'mpg', 8 => 'mpeg', 9 => 'mp3', 10 => 'odt', 11 => 'odp', 12 => 'ods', 13 => 'pdf', 14 => 'png', 15 => 'ppt', 16 => 'pptx', 17 => 'tif', 18 => 'tiff', 19 => 'txt', 20 => 'xls', 21 => 'xlsx', 22 => 'wav']]]], 'MauticCampaignBundle' => ['isPlugin' => false, 'base' => 'Campaign', 'bundle' => 'CampaignBundle', 'relative' => 'app/bundles/CampaignBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle'), 'namespace' => 'Mautic\\CampaignBundle', 'symfonyBundleName' => 'MauticCampaignBundle', 'bundleClass' => 'Mautic\\CampaignBundle\\MauticCampaignBundle', 'permissionClasses' => ['Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions' => 'Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions'], 'config' => ['routes' => ['main' => ['mautic_campaignevent_action' => ['path' => '/campaigns/events/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\EventController::executeAction'], 'mautic_campaignsource_action' => ['path' => '/campaigns/sources/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\SourceController::executeAction'], 'mautic_campaign_index' => ['path' => '/campaigns/{page}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::indexAction'], 'mautic_campaign_action' => ['path' => '/campaigns/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::executeAction'], 'mautic_campaign_contacts' => ['path' => '/campaigns/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::contactsAction'], 'mautic_campaign_preview' => ['path' => '/campaign/preview/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction']], 'api' => ['mautic_api_campaignsstandard' => ['standard_entity' => true, 'name' => 'campaigns', 'path' => '/campaigns', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController'], 'mautic_api_campaigneventsstandard' => ['standard_entity' => true, 'supported_endpoints' => [0 => 'getone', 1 => 'getall'], 'name' => 'events', 'path' => '/campaigns/events', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventApiController'], 'mautic_api_campaigns_events_contact' => ['path' => '/campaigns/events/contact/{contactId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction', 'method' => 'GET'], 'mautic_api_campaigns_edit_contact_event' => ['path' => '/campaigns/events/{eventId}/contact/{contactId}/edit', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editContactEventAction', 'method' => 'PUT'], 'mautic_api_campaigns_batchedit_events' => ['path' => '/campaigns/events/batch/edit', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editEventsAction', 'method' => 'PUT'], 'mautic_api_campaign_contact_events' => ['path' => '/campaigns/{campaignId}/events/contact/{contactId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction', 'method' => 'GET'], 'mautic_api_campaigngetcontacts' => ['path' => '/campaigns/{id}/contacts', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::getContactsAction'], 'mautic_api_campaignaddcontact' => ['path' => '/campaigns/{id}/contact/{leadId}/add', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::addLeadAction', 'method' => 'POST'], 'mautic_api_campaignremovecontact' => ['path' => '/campaigns/{id}/contact/{leadId}/remove', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::removeLeadAction', 'method' => 'POST'], 'mautic_api_contact_clone_campaign' => ['path' => '/campaigns/clone/{campaignId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::cloneCampaignAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.campaign.menu.index' => ['iconClass' => 'fa-clock-o', 'route' => 'mautic_campaign_index', 'access' => 'campaign:campaigns:view', 'priority' => 50]]], 'categories' => ['campaign' => NULL], 'services' => ['repositories' => ['mautic.campaign.repository.campaign' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Campaign']], 'mautic.campaign.repository.lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Lead']], 'mautic.campaign.repository.event' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Event']], 'mautic.campaign.repository.lead_event_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\LeadEventLog']], 'mautic.campaign.repository.summary' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Summary']]], 'execution' => ['mautic.campaign.contact_finder.kickoff' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\KickoffContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.campaign.repository.campaign', 2 => 'monolog.logger.mautic']], 'mautic.campaign.contact_finder.scheduled' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\ScheduledContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'monolog.logger.mautic']], 'mautic.campaign.contact_finder.inactive' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\InactiveContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.campaign.repository.lead', 2 => 'monolog.logger.mautic']], 'mautic.campaign.dispatcher.action' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ActionDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'monolog.logger.mautic', 2 => 'mautic.campaign.scheduler', 3 => 'mautic.campaign.helper.notification', 4 => 'mautic.campaign.legacy_event_dispatcher']], 'mautic.campaign.dispatcher.condition' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ConditionDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.campaign.dispatcher.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\DecisionDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.campaign.legacy_event_dispatcher']], 'mautic.campaign.event_logger' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Logger\\EventLogger', 'arguments' => [0 => 'mautic.helper.ip_lookup', 1 => 'mautic.tracker.contact', 2 => 'mautic.campaign.repository.lead_event_log', 3 => 'mautic.campaign.repository.lead', 4 => 'mautic.campaign.model.summary']], 'mautic.campaign.event_collector' => ['class' => 'Mautic\\CampaignBundle\\EventCollector\\EventCollector', 'arguments' => [0 => 'translator', 1 => 'event_dispatcher']], 'mautic.campaign.scheduler.datetime' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\DateTime', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.campaign.scheduler.interval' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\Interval', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.helper.core_parameters']], 'mautic.campaign.scheduler' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\EventScheduler', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.campaign.event_logger', 2 => 'mautic.campaign.scheduler.interval', 3 => 'mautic.campaign.scheduler.datetime', 4 => 'mautic.campaign.event_collector', 5 => 'event_dispatcher', 6 => 'mautic.helper.core_parameters']], 'mautic.campaign.executioner.action' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ActionExecutioner', 'arguments' => [0 => 'mautic.campaign.dispatcher.action', 1 => 'mautic.campaign.event_logger']], 'mautic.campaign.executioner.condition' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ConditionExecutioner', 'arguments' => [0 => 'mautic.campaign.dispatcher.condition']], 'mautic.campaign.executioner.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\DecisionExecutioner', 'arguments' => [0 => 'mautic.campaign.event_logger', 1 => 'mautic.campaign.dispatcher.decision']], 'mautic.campaign.event_executioner' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\EventExecutioner', 'arguments' => [0 => 'mautic.campaign.event_collector', 1 => 'mautic.campaign.event_logger', 2 => 'mautic.campaign.executioner.action', 3 => 'mautic.campaign.executioner.condition', 4 => 'mautic.campaign.executioner.decision', 5 => 'monolog.logger.mautic', 6 => 'mautic.campaign.scheduler', 7 => 'mautic.campaign.helper.removed_contact_tracker', 8 => 'mautic.campaign.repository.lead']], 'mautic.campaign.executioner.kickoff' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\KickoffExecutioner', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.campaign.contact_finder.kickoff', 2 => 'translator', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.scheduler']], 'mautic.campaign.executioner.scheduled' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ScheduledExecutioner', 'arguments' => [0 => 'mautic.campaign.repository.lead_event_log', 1 => 'monolog.logger.mautic', 2 => 'translator', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.scheduler', 5 => 'mautic.campaign.contact_finder.scheduled'], 'tag' => 'kernel.reset', 'tagArguments' => ['method' => 'reset']], 'mautic.campaign.executioner.realtime' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\RealTimeExecutioner', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.lead.model.lead', 2 => 'mautic.campaign.repository.event', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.executioner.decision', 5 => 'mautic.campaign.event_collector', 6 => 'mautic.campaign.scheduler', 7 => 'mautic.tracker.contact', 8 => 'mautic.campaign.helper.decision']], 'mautic.campaign.executioner.inactive' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\InactiveExecutioner', 'arguments' => [0 => 'mautic.campaign.contact_finder.inactive', 1 => 'monolog.logger.mautic', 2 => 'translator', 3 => 'mautic.campaign.scheduler', 4 => 'mautic.campaign.helper.inactivity', 5 => 'mautic.campaign.event_executioner']], 'mautic.campaign.helper.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\DecisionHelper', 'arguments' => [0 => 'mautic.campaign.repository.lead']], 'mautic.campaign.helper.inactivity' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\InactiveHelper', 'arguments' => [0 => 'mautic.campaign.scheduler', 1 => 'mautic.campaign.contact_finder.inactive', 2 => 'mautic.campaign.repository.lead_event_log', 3 => 'mautic.campaign.repository.event', 4 => 'monolog.logger.mautic', 5 => 'mautic.campaign.helper.decision']], 'mautic.campaign.helper.removed_contact_tracker' => ['class' => 'Mautic\\CampaignBundle\\Helper\\RemovedContactTracker'], 'mautic.campaign.helper.notification' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\NotificationHelper', 'arguments' => [0 => 'mautic.user.model.user', 1 => 'mautic.core.model.notification', 2 => 'translator', 3 => 'router', 4 => 'mautic.helper.core_parameters']], 'mautic.campaign.legacy_event_dispatcher' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\LegacyEventDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.campaign.scheduler', 2 => 'monolog.logger.mautic', 3 => 'mautic.campaign.helper.notification', 4 => 'mautic.factory', 5 => 'mautic.tracker.contact']]], 'membership' => ['mautic.campaign.membership.adder' => ['class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Adder', 'arguments' => [0 => 'mautic.campaign.repository.lead', 1 => 'mautic.campaign.repository.lead_event_log']], 'mautic.campaign.membership.remover' => ['class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Remover', 'arguments' => [0 => 'mautic.campaign.repository.lead', 1 => 'mautic.campaign.repository.lead_event_log', 2 => 'translator', 3 => 'mautic.helper.twig.date']], 'mautic.campaign.membership.event_dispatcher' => ['class' => 'Mautic\\CampaignBundle\\Membership\\EventDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.campaign.membership.manager' => ['class' => 'Mautic\\CampaignBundle\\Membership\\MembershipManager', 'arguments' => [0 => 'mautic.campaign.membership.adder', 1 => 'mautic.campaign.membership.remover', 2 => 'mautic.campaign.membership.event_dispatcher', 3 => 'mautic.campaign.repository.lead', 4 => 'monolog.logger.mautic']], 'mautic.campaign.membership.builder' => ['class' => 'Mautic\\CampaignBundle\\Membership\\MembershipBuilder', 'arguments' => [0 => 'mautic.campaign.membership.manager', 1 => 'mautic.campaign.repository.lead', 2 => 'mautic.lead.repository.lead', 3 => 'translator']]], 'services' => ['mautic.campaign.service.campaign' => ['class' => 'Mautic\\CampaignBundle\\Service\\Campaign', 'arguments' => [0 => 'mautic.campaign.repository.campaign', 1 => 'mautic.email.repository.email']]], 'fixtures' => ['mautic.campaign.fixture.campaign' => ['class' => 'Mautic\\CampaignBundle\\DataFixtures\\ORM\\CampaignData', 'tag' => 'doctrine.fixture.orm', 'optional' => true]]], 'parameters' => ['campaign_time_wait_on_event_false' => 'PT1H', 'campaign_use_summary' => 0, 'campaign_by_range' => 0]]], 'MauticCategoryBundle' => ['isPlugin' => false, 'base' => 'Category', 'bundle' => 'CategoryBundle', 'relative' => 'app/bundles/CategoryBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle'), 'namespace' => 'Mautic\\CategoryBundle', 'symfonyBundleName' => 'MauticCategoryBundle', 'bundleClass' => 'Mautic\\CategoryBundle\\MauticCategoryBundle', 'permissionClasses' => ['Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions' => 'Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions'], 'config' => ['routes' => ['main' => ['mautic_category_batch_contact_set' => ['path' => '/categories/batch/contact/set', 'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::execAction'], 'mautic_category_batch_contact_view' => ['path' => '/categories/batch/contact/view', 'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::indexAction'], 'mautic_category_index' => ['path' => '/categories/{bundle}/{page}', 'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::indexAction', 'defaults' => ['bundle' => 'category']], 'mautic_category_action' => ['path' => '/categories/{bundle}/{objectAction}/{objectId}', 'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::executeCategoryAction', 'defaults' => ['bundle' => 'category']]], 'api' => ['mautic_api_categoriesstandard' => ['standard_entity' => true, 'name' => 'categories', 'path' => '/categories', 'controller' => 'Mautic\\CategoryBundle\\Controller\\Api\\CategoryApiController']]], 'menu' => ['admin' => ['mautic.category.menu.index' => ['route' => 'mautic_category_index', 'access' => 'category:categories:view', 'iconClass' => 'fa-folder', 'id' => 'mautic_category_index']]]]], 'MauticChannelBundle' => ['isPlugin' => false, 'base' => 'Channel', 'bundle' => 'ChannelBundle', 'relative' => 'app/bundles/ChannelBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle'), 'namespace' => 'Mautic\\ChannelBundle', 'symfonyBundleName' => 'MauticChannelBundle', 'bundleClass' => 'Mautic\\ChannelBundle\\MauticChannelBundle', 'permissionClasses' => ['Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions' => 'Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions'], 'config' => ['routes' => ['main' => ['mautic_message_index' => ['path' => '/messages/{page}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::indexAction'], 'mautic_message_contacts' => ['path' => '/messages/contacts/{objectId}/{channel}/{page}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::contactsAction'], 'mautic_message_action' => ['path' => '/messages/{objectAction}/{objectId}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::executeAction'], 'mautic_channel_batch_contact_set' => ['path' => '/channels/batch/contact/set', 'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::setAction'], 'mautic_channel_batch_contact_view' => ['path' => '/channels/batch/contact/view', 'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::indexAction']], 'api' => ['mautic_api_messagetandard' => ['standard_entity' => true, 'name' => 'messages', 'path' => '/messages', 'controller' => 'Mautic\\ChannelBundle\\Controller\\Api\\MessageApiController']], 'public' => []], 'menu' => ['main' => ['mautic.channel.messages' => ['route' => 'mautic_message_index', 'access' => [0 => 'channel:messages:viewown', 1 => 'channel:messages:viewother'], 'parent' => 'mautic.core.channels', 'priority' => 110]], 'admin' => [], 'profile' => [], 'extra' => []], 'categories' => ['messages' => NULL], 'services' => ['helpers' => ['mautic.channel.helper.channel_list' => ['class' => 'Mautic\\ChannelBundle\\Helper\\ChannelListHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'translator'], 'alias' => 'channel']], 'repositories' => ['mautic.channel.repository.message_queue' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\ChannelBundle\\Entity\\MessageQueue']]]], 'parameters' => []]], 'MauticConfigBundle' => ['isPlugin' => false, 'base' => 'Config', 'bundle' => 'ConfigBundle', 'relative' => 'app/bundles/ConfigBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ConfigBundle'), 'namespace' => 'Mautic\\ConfigBundle', 'symfonyBundleName' => 'MauticConfigBundle', 'bundleClass' => 'Mautic\\ConfigBundle\\MauticConfigBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => ['mautic_config_action' => ['path' => '/config/{objectAction}/{objectId}', 'controller' => 'Mautic\\ConfigBundle\\Controller\\ConfigController::executeAction'], 'mautic_sysinfo_index' => ['path' => '/sysinfo', 'controller' => 'Mautic\\ConfigBundle\\Controller\\SysinfoController::indexAction']]], 'menu' => ['admin' => ['mautic.config.menu.index' => ['route' => 'mautic_config_action', 'routeParameters' => ['objectAction' => 'edit'], 'iconClass' => 'fa-cogs', 'id' => 'mautic_config_index', 'access' => 'admin'], 'mautic.sysinfo.menu.index' => ['route' => 'mautic_sysinfo_index', 'iconClass' => 'fa-life-ring', 'id' => 'mautic_sysinfo_index', 'access' => 'admin', 'checks' => ['parameters' => ['sysinfo_disabled' => false]]]]], 'parameters' => ['config_allowed_parameters' => [0 => 'kernel.project_dir', 1 => 'kernel.logs_dir']]]], 'MauticDashboardBundle' => ['isPlugin' => false, 'base' => 'Dashboard', 'bundle' => 'DashboardBundle', 'relative' => 'app/bundles/DashboardBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle'), 'namespace' => 'Mautic\\DashboardBundle', 'symfonyBundleName' => 'MauticDashboardBundle', 'bundleClass' => 'Mautic\\DashboardBundle\\MauticDashboardBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => ['mautic_dashboard_index' => ['path' => '/dashboard', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::indexAction'], 'mautic_dashboard_widget' => ['path' => '/dashboard/widget/{widgetId}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::widgetAction'], 'mautic_dashboard_action' => ['path' => '/dashboard/{objectAction}/{objectId}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::executeAction']], 'api' => ['mautic_widget_types' => ['path' => '/data', 'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getTypesAction'], 'mautic_widget_data' => ['path' => '/data/{type}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getDataAction']]], 'menu' => ['main' => ['priority' => 100, 'items' => ['mautic.dashboard.menu.index' => ['route' => 'mautic_dashboard_index', 'iconClass' => 'fa-th-large']]]], 'services' => ['other' => ['mautic.dashboard.widget' => ['class' => 'Mautic\\DashboardBundle\\Dashboard\\Widget', 'arguments' => [0 => 'mautic.dashboard.model.dashboard', 1 => 'mautic.helper.user', 2 => 'session']]]], 'parameters' => ['dashboard_import_dir' => '%kernel.project_dir%/media/dashboards', 'dashboard_import_user_dir' => NULL]]], 'MauticDynamicContentBundle' => ['isPlugin' => false, 'base' => 'DynamicContent', 'bundle' => 'DynamicContentBundle', 'relative' => 'app/bundles/DynamicContentBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle'), 'namespace' => 'Mautic\\DynamicContentBundle', 'symfonyBundleName' => 'MauticDynamicContentBundle', 'bundleClass' => 'Mautic\\DynamicContentBundle\\MauticDynamicContentBundle', 'permissionClasses' => ['Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions' => 'Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions'], 'config' => ['menu' => ['main' => ['items' => ['mautic.dynamicContent.dynamicContent' => ['route' => 'mautic_dynamicContent_index', 'access' => [0 => 'dynamiccontent:dynamiccontents:viewown', 1 => 'dynamiccontent:dynamiccontents:viewother'], 'parent' => 'mautic.core.components', 'priority' => 90]]]], 'routes' => ['main' => ['mautic_dynamicContent_index' => ['path' => '/dwc/{page}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::indexAction'], 'mautic_dynamicContent_action' => ['path' => '/dwc/{objectAction}/{objectId}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::executeAction']], 'public' => ['mautic_api_dynamicContent_index' => ['path' => '/dwc', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::getAction'], 'mautic_api_dynamicContent_action' => ['path' => '/dwc/{objectAlias}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::processAction']], 'api' => ['mautic_api_dynamicContent_standard' => ['standard_entity' => true, 'name' => 'dynamicContents', 'path' => '/dynamiccontents', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\Api\\DynamicContentApiController']]], 'services' => ['forms' => ['mautic.form.type.dwc_entry_filters' => ['class' => 'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType', 'arguments' => [0 => 'translator'], 'methodCalls' => ['setConnection' => [0 => 'database_connection']]]], 'repositories' => ['mautic.dynamicContent.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\DynamicContentBundle\\Entity\\Stat']], 'other' => ['mautic.helper.dynamicContent' => ['class' => 'Mautic\\DynamicContentBundle\\Helper\\DynamicContentHelper', 'arguments' => [0 => 'mautic.dynamicContent.model.dynamicContent', 1 => 'mautic.campaign.executioner.realtime', 2 => 'event_dispatcher', 3 => 'mautic.lead.model.lead']]]]]], 'MauticEmailBundle' => ['isPlugin' => false, 'base' => 'Email', 'bundle' => 'EmailBundle', 'relative' => 'app/bundles/EmailBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle'), 'namespace' => 'Mautic\\EmailBundle', 'symfonyBundleName' => 'MauticEmailBundle', 'bundleClass' => 'Mautic\\EmailBundle\\MauticEmailBundle', 'permissionClasses' => ['Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions' => 'Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions'], 'config' => ['routes' => ['main' => ['mautic_email_index' => ['path' => '/emails/{page}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::indexAction'], 'mautic_email_graph_stats' => ['path' => '/emails-graph-stats/{objectId}/{isVariant}/{dateFrom}/{dateTo}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailGraphStatsController::viewAction'], 'mautic_email_action' => ['path' => '/emails/{objectAction}/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::executeAction'], 'mautic_email_contacts' => ['path' => '/emails/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::contactsAction']], 'api' => ['mautic_api_emailstandard' => ['standard_entity' => true, 'name' => 'emails', 'path' => '/emails', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController'], 'mautic_api_sendemail' => ['path' => '/emails/{id}/send', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendAction', 'method' => 'POST'], 'mautic_api_sendcontactemail' => ['path' => '/emails/{id}/contact/{leadId}/send', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendLeadAction', 'method' => 'POST'], 'mautic_api_reply' => ['path' => '/emails/reply/{trackingHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::replyAction', 'method' => 'POST']], 'public' => ['mautic_plugin_tracker' => ['path' => '/plugin/{integration}/tracking.gif', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::pluginTrackingGifAction', 'requirements' => ['integration' => '.+']], 'mautic_email_tracker' => ['path' => '/email/{idHash}.gif', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::trackingImageAction'], 'mautic_email_webview' => ['path' => '/email/view/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::indexAction'], 'mautic_email_unsubscribe' => ['path' => '/email/unsubscribe/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::unsubscribeAction'], 'mautic_email_resubscribe' => ['path' => '/email/resubscribe/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::resubscribeAction'], 'mautic_mailer_transport_callback' => ['path' => '/mailer/callback', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::mailerCallbackAction'], 'mautic_email_preview' => ['path' => '/email/preview/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction']]], 'menu' => ['main' => ['items' => ['mautic.email.emails' => ['route' => 'mautic_email_index', 'access' => [0 => 'email:emails:viewown', 1 => 'email:emails:viewother'], 'parent' => 'mautic.core.channels', 'priority' => 100]]]], 'categories' => ['email' => NULL], 'services' => ['other' => ['mautic.di.env_processor.mailerdsn' => ['class' => 'Mautic\\EmailBundle\\DependencyInjection\\EnvProcessor\\MailerDsnEnvVarProcessor', 'tag' => 'container.env_var_processor'], 'mautic.helper.mailbox' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Mailbox', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.helper.paths']], 'mautic.message.search.contact' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Search\\ContactFinder', 'arguments' => [0 => 'mautic.email.repository.stat', 1 => 'mautic.lead.repository.lead', 2 => 'monolog.logger.mautic']], 'mautic.message.processor.bounce' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce', 'arguments' => [0 => 'mailer.default_transport', 1 => 'mautic.message.search.contact', 2 => 'mautic.email.repository.stat', 3 => 'mautic.lead.model.lead', 4 => 'translator', 5 => 'monolog.logger.mautic', 6 => 'mautic.lead.model.dnc']], 'mautic.message.processor.unsubscribe' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Unsubscribe', 'arguments' => [0 => 'mailer.default_transport', 1 => 'mautic.message.search.contact', 2 => 'translator', 3 => 'monolog.logger.mautic', 4 => 'mautic.lead.model.dnc']], 'mautic.message.processor.feedbackloop' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\FeedbackLoop', 'arguments' => [0 => 'mautic.message.search.contact', 1 => 'translator', 2 => 'monolog.logger.mautic', 3 => 'mautic.lead.model.dnc']], 'mautic.message.processor.replier' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Reply', 'arguments' => [0 => 'mautic.email.repository.stat', 1 => 'mautic.message.search.contact', 2 => 'mautic.lead.model.lead', 3 => 'event_dispatcher', 4 => 'monolog.logger.mautic', 5 => 'mautic.tracker.contact', 6 => 'mautic.helper.email.address']], 'mautic.helper.mailer' => ['class' => 'Mautic\\EmailBundle\\Helper\\MailHelper', 'arguments' => [0 => 'mautic.factory', 1 => 'mailer']], 'mautic.validator.email' => ['class' => 'Mautic\\EmailBundle\\Helper\\EmailValidator', 'arguments' => [0 => 'translator', 1 => 'event_dispatcher']], 'mautic.email.fetcher' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Fetcher', 'arguments' => [0 => 'mautic.helper.mailbox', 1 => 'event_dispatcher', 2 => 'translator']], 'mautic.email.helper.stat' => ['class' => 'Mautic\\EmailBundle\\Stat\\StatHelper', 'arguments' => [0 => 'mautic.email.repository.stat']], 'mautic.email.helper.request.storage' => ['class' => 'Mautic\\EmailBundle\\Helper\\RequestStorageHelper', 'arguments' => [0 => 'mautic.helper.cache_storage']], 'mautic.email.helper.stats_collection' => ['class' => 'Mautic\\EmailBundle\\Helper\\StatsCollectionHelper', 'arguments' => [0 => 'mautic.email.stats.helper_container']], 'mautic.email.stats.helper_container' => ['class' => 'Mautic\\EmailBundle\\Stats\\StatHelperContainer'], 'mautic.email.stats.helper_bounced' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\BouncedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_clicked' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\ClickedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_failed' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\FailedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_opened' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\OpenedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_sent' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\SentHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_unsubscribed' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\UnsubscribedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper']], 'validator' => ['mautic.email.validator.multiple_emails_valid_validator' => ['class' => 'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator', 'arguments' => [0 => 'mautic.validator.email'], 'tag' => 'validator.constraint_validator'], 'mautic.email.validator.email_or_token_list_validator' => ['class' => 'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator', 'arguments' => [0 => 'mautic.validator.email', 1 => 'mautic.lead.validator.custom_field'], 'tag' => 'validator.constraint_validator']], 'repositories' => ['mautic.email.repository.email' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\Email']], 'mautic.email.repository.emailReply' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\EmailReply']], 'mautic.email.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\Stat']]], 'fixtures' => ['mautic.email.fixture.email' => ['class' => 'Mautic\\EmailBundle\\DataFixtures\\ORM\\LoadEmailData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.email.model.email']]]], 'parameters' => ['mailer_from_name' => 'Mautic', 'mailer_from_email' => 'email@yoursite.com', 'mailer_reply_to_email' => NULL, 'mailer_return_path' => NULL, 'mailer_append_tracking_pixel' => true, 'mailer_convert_embed_images' => false, 'mailer_custom_headers' => [], 'mailer_dsn' => 'smtp://localhost:25', 'unsubscribe_text' => NULL, 'webview_text' => NULL, 'unsubscribe_message' => NULL, 'resubscribe_message' => NULL, 'monitored_email' => ['general' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'use_attachments' => false], 'EmailBundle_bounces' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL], 'EmailBundle_unsubscribes' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL], 'EmailBundle_replies' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL]], 'mailer_is_owner' => false, 'default_signature_text' => NULL, 'email_frequency_number' => 0, 'email_frequency_time' => 'DAY', 'show_contact_preferences' => false, 'show_contact_frequency' => false, 'show_contact_pause_dates' => false, 'show_contact_preferred_channels' => false, 'show_contact_categories' => false, 'show_contact_segments' => false, 'disable_trackable_urls' => false, 'theme_email_default' => 'blank', 'mailer_memory_msg_limit' => 100, 'minify_email_html' => false]]], 'MauticFormBundle' => ['isPlugin' => false, 'base' => 'Form', 'bundle' => 'FormBundle', 'relative' => 'app/bundles/FormBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/FormBundle'), 'namespace' => 'Mautic\\FormBundle', 'symfonyBundleName' => 'MauticFormBundle', 'bundleClass' => 'Mautic\\FormBundle\\MauticFormBundle', 'permissionClasses' => ['Mautic\\FormBundle\\Security\\Permissions\\FormPermissions' => 'Mautic\\FormBundle\\Security\\Permissions\\FormPermissions'], 'config' => ['routes' => ['main' => ['mautic_formaction_action' => ['path' => '/forms/action/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\ActionController::executeAction'], 'mautic_formfield_action' => ['path' => '/forms/field/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\FieldController::executeAction'], 'mautic_form_index' => ['path' => '/forms/{page}', 'controller' => 'Mautic\\FormBundle\\Controller\\FormController::indexAction'], 'mautic_form_results' => ['path' => '/forms/results/{objectId}/{page}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::indexAction'], 'mautic_form_export' => ['path' => '/forms/results/{objectId}/export/{format}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::exportAction', 'defaults' => ['format' => 'csv']], 'mautic_form_results_action' => ['path' => '/forms/results/{formId}/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::executeAction', 'defaults' => ['objectId' => 0]], 'mautic_form_action' => ['path' => '/forms/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\FormController::executeAction']], 'api' => ['mautic_api_formstandard' => ['standard_entity' => true, 'name' => 'forms', 'path' => '/forms', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController'], 'mautic_api_formresults' => ['path' => '/forms/{formId}/submissions', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesAction'], 'mautic_api_formresult' => ['path' => '/forms/{formId}/submissions/{submissionId}', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntityAction'], 'mautic_api_contactformresults' => ['path' => '/forms/{formId}/submissions/contact/{contactId}', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesForContactAction'], 'mautic_api_formdeletefields' => ['path' => '/forms/{formId}/fields/delete', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteFieldsAction', 'method' => 'DELETE'], 'mautic_api_formdeleteactions' => ['path' => '/forms/{formId}/actions/delete', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteActionsAction', 'method' => 'DELETE']], 'public' => ['mautic_form_file_download' => ['path' => '/forms/results/file/{submissionId}/{field}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::downloadFileAction'], 'mautic_form_postresults' => ['path' => '/form/submit', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::submitAction'], 'mautic_form_generateform' => ['path' => '/form/generate.js', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::generateAction'], 'mautic_form_postmessage' => ['path' => '/form/message', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::messageAction'], 'mautic_form_preview' => ['path' => '/form/{id}', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::previewAction', 'defaults' => ['id' => '0']], 'mautic_form_embed' => ['path' => '/form/embed/{id}', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::embedAction'], 'mautic_form_postresults_ajax' => ['path' => '/form/submit/ajax', 'controller' => 'Mautic\\FormBundle\\Controller\\AjaxController::submitAction']]], 'menu' => ['main' => ['items' => ['mautic.form.forms' => ['route' => 'mautic_form_index', 'access' => [0 => 'form:forms:viewown', 1 => 'form:forms:viewother'], 'parent' => 'mautic.core.components', 'priority' => 200]]]], 'categories' => ['form' => NULL], 'services' => ['forms' => ['mautic.form.type.field' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\FieldType', 'arguments' => [0 => 'translator', 1 => 'mautic.form.collector.object', 2 => 'mautic.form.collector.field', 3 => 'mautic.form.collector.already.mapped.field'], 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]], 'mautic.form.type.form_submitaction_sendemail' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.core_parameters'], 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]], 'mautic.form.type.form_submitaction_repost' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType', 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]]], 'repositories' => ['mautic.form.repository.form' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\FormBundle\\Entity\\Form'], 'mautic.form.repository.submission' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\FormBundle\\Entity\\Submission']], 'other' => ['mautic.form.collector.object' => ['class' => 'Mautic\\FormBundle\\Collector\\ObjectCollector', 'arguments' => [0 => 'event_dispatcher']], 'mautic.form.collector.field' => ['class' => 'Mautic\\FormBundle\\Collector\\FieldCollector', 'arguments' => [0 => 'event_dispatcher']], 'mautic.form.collector.mapped.object' => ['class' => 'Mautic\\FormBundle\\Collector\\MappedObjectCollector', 'arguments' => [0 => 'mautic.form.collector.field']], 'mautic.form.collector.already.mapped.field' => ['class' => 'Mautic\\FormBundle\\Collector\\AlreadyMappedFieldCollector', 'arguments' => [0 => 'mautic.cache.provider']], 'mautic.helper.form.field_helper' => ['class' => 'Mautic\\FormBundle\\Helper\\FormFieldHelper', 'arguments' => [0 => 'translator', 1 => 'validator']], 'mautic.form.helper.form_uploader' => ['class' => 'Mautic\\FormBundle\\Helper\\FormUploader', 'arguments' => [0 => 'mautic.helper.file_uploader', 1 => 'mautic.helper.core_parameters']], 'mautic.form.helper.token' => ['class' => 'Mautic\\FormBundle\\Helper\\TokenHelper', 'arguments' => [0 => 'mautic.form.model.form', 1 => 'mautic.security']], 'mautic.form.service.field.value.transformer' => ['class' => 'Mautic\\FormBundle\\Event\\Service\\FieldValueTransformer', 'arguments' => [0 => 'router']], 'mautic.form.helper.properties.accessor' => ['class' => 'Mautic\\FormBundle\\Helper\\PropertiesAccessor', 'arguments' => [0 => 'mautic.form.model.form']]], 'validator' => ['mautic.form.validator.upload_field_validator' => ['class' => 'Mautic\\FormBundle\\Validator\\UploadFieldValidator', 'arguments' => [0 => 'mautic.core.validator.file_upload']], 'mautic.form.validator.constraint.file_extension_constraint_validator' => ['class' => 'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator', 'arguments' => [0 => 'mautic.helper.core_parameters'], 'tags' => ['name' => 'validator.constraint_validator', 'alias' => 'file_extension_constraint_validator']]], 'fixtures' => ['mautic.form.fixture.form' => ['class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.form.model.form', 1 => 'mautic.form.model.field', 2 => 'mautic.form.model.action', 3 => 'event_dispatcher']], 'mautic.form.fixture.form_result' => ['class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormResultData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page', 1 => 'mautic.form.model.submission']]]], 'parameters' => ['form_upload_dir' => '%kernel.project_dir%/media/files/form', 'blacklisted_extensions' => [0 => 'php', 1 => 'sh'], 'do_not_submit_emails' => [], 'form_results_data_sources' => false, 'successful_submit_action' => 'top']]], 'MauticInstallBundle' => ['isPlugin' => false, 'base' => 'Install', 'bundle' => 'InstallBundle', 'relative' => 'app/bundles/InstallBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/InstallBundle'), 'namespace' => 'Mautic\\InstallBundle', 'symfonyBundleName' => 'MauticInstallBundle', 'bundleClass' => 'Mautic\\InstallBundle\\MauticInstallBundle', 'permissionClasses' => [], 'config' => ['routes' => ['public' => ['mautic_installer_home' => ['path' => '/installer', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction'], 'mautic_installer_remove_slash' => ['path' => '/installer/', 'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction'], 'mautic_installer_step' => ['path' => '/installer/step/{index}', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction'], 'mautic_installer_final' => ['path' => '/installer/final', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::finalAction'], 'mautic_installer_catchcall' => ['path' => '/installer/{noerror}', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction', 'requirements' => ['noerror' => '^(?).+']]]], 'services' => ['fixtures' => ['mautic.install.fixture.lead_field' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LeadFieldData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'translator']], 'mautic.install.fixture.role' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\RoleData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'translator']], 'mautic.install.fixture.report_data' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LoadReportData', 'tag' => 'doctrine.fixture.orm', 'arguments' => []], 'mautic.install.fixture.grape_js' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\GrapesJsData', 'tag' => 'doctrine.fixture.orm', 'arguments' => []]], 'other' => ['mautic.install.configurator.step.check' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\CheckStep', 'arguments' => [0 => 'mautic.configurator', 1 => '%kernel.project_dir%', 2 => 'request_stack', 3 => 'mautic.cipher.openssl'], 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 0]], 'mautic.install.configurator.step.doctrine' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\DoctrineStep', 'arguments' => [0 => 'mautic.configurator'], 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 1]], 'mautic.install.configurator.step.user' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\UserStep', 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 2]], 'mautic.install.service' => ['class' => 'Mautic\\InstallBundle\\Install\\InstallService', 'arguments' => [0 => 'mautic.configurator', 1 => 'mautic.helper.cache', 2 => 'mautic.helper.paths', 3 => 'doctrine.orm.entity_manager', 4 => 'translator', 5 => 'kernel', 6 => 'validator', 7 => 'security.password_hasher', 8 => 'mautic.doctrine.loader.mautic_fixtures_loader']], 'mautic.install.leadcolumns' => ['class' => 'Mautic\\InstallBundle\\EventListener\\DoctrineEventSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => []]]]]], 'IntegrationsBundle' => ['isPlugin' => false, 'base' => 'Integrations', 'bundle' => 'IntegrationsBundle', 'relative' => 'app/bundles/IntegrationsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle'), 'namespace' => 'Mautic\\IntegrationsBundle', 'symfonyBundleName' => 'IntegrationsBundle', 'bundleClass' => 'Mautic\\IntegrationsBundle\\IntegrationsBundle', 'permissionClasses' => [], 'config' => ['name' => 'Integrations', 'description' => 'Adds support for plugin integrations', 'author' => 'Mautic, Inc.', 'routes' => ['main' => ['mautic_integration_config' => ['path' => '/integration/{integration}/config', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\ConfigController::editAction'], 'mautic_integration_config_field_pagination' => ['path' => '/integration/{integration}/config/{object}/{page}', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\FieldPaginationController::paginateAction', 'defaults' => ['page' => 1]], 'mautic_integration_config_field_update' => ['path' => '/integration/{integration}/config/{object}/field/{field}', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\UpdateFieldController::updateAction']], 'public' => ['mautic_integration_public_callback' => ['path' => '/integration/{integration}/callback', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\AuthController::callbackAction']]], 'services' => ['events' => ['mautic.integrations.subscriber.controller' => ['class' => 'Mautic\\IntegrationsBundle\\EventListener\\ControllerSubscriber', 'arguments' => [0 => 'mautic.integrations.helper', 1 => 'controller_resolver']]], 'helpers' => ['mautic.integrations.helper.variable_expresser' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\VariableExpresser\\VariableExpresserHelper'], 'mautic.integrations.helper' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper', 'arguments' => [0 => 'mautic.plugin.integrations.repository.integration', 1 => 'mautic.integrations.service.encryption', 2 => 'event_dispatcher']], 'mautic.integrations.helper.auth_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\AuthIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.sync_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\SyncIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper', 1 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.helper.config_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\ConfigIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.builder_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\BuilderIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.field_validator' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\FieldValidationHelper', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 1 => 'translator']]], 'other' => ['mautic.integrations.service.encryption' => ['class' => 'Mautic\\IntegrationsBundle\\Facade\\EncryptionService', 'arguments' => [0 => 'mautic.helper.encryption']], 'mautic.integrations.internal.object_provider' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.integrations.sync.notification.helper.owner_provider' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\OwnerProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.auth_provider.api_key' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory'], 'mautic.integrations.auth_provider.basic_auth' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\HttpFactory'], 'mautic.integrations.auth_provider.oauth1atwolegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth1aTwoLegged\\HttpFactory'], 'mautic.integrations.auth_provider.oauth2twolegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory'], 'mautic.integrations.auth_provider.oauth2threelegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\HttpFactory'], 'mautic.integrations.auth_provider.token_persistence_factory' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.token.parser' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\TokenParser']], 'repositories' => ['mautic.integrations.repository.field_change' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\IntegrationsBundle\\Entity\\FieldChange']], 'mautic.integrations.repository.object_mapping' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\IntegrationsBundle\\Entity\\ObjectMapping']], 'mautic.plugin.integrations.repository.integration' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PluginBundle\\Entity\\Integration']]], 'sync' => ['mautic.sync.logger' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Logger\\DebugLogger', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.integrations.helper.sync_judge' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\SyncJudge'], 'mautic.integrations.helper.contact_object' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\ContactObjectHelper', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.lead.repository.lead', 2 => 'doctrine.dbal.default_connection', 3 => 'mautic.lead.model.field', 4 => 'mautic.lead.model.dnc', 5 => 'mautic.lead.model.company']], 'mautic.integrations.helper.company_object' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\CompanyObjectHelper', 'arguments' => [0 => 'mautic.lead.model.company', 1 => 'mautic.lead.repository.company', 2 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.data_exchange.mautic.order_executioner' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\OrderExecutioner', 'arguments' => [0 => 'mautic.integrations.helper.sync_mapping', 1 => 'event_dispatcher', 2 => 'mautic.integrations.internal.object_provider', 3 => 'mautic.integrations.internal.reference_resolver', 4 => 'mautic.integrations.internal.field_validator']], 'mautic.integrations.internal.field_validator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\FieldValidator', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'mautic.integrations.sync.notification.bulk_notification']], 'mautic.integrations.internal.reference_resolver' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\ReferenceResolver', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.data_exchange.mautic.field_helper' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Helper\\FieldHelper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.integrations.helper.variable_expresser', 2 => 'mautic.channel.helper.channel_list', 3 => 'translator', 4 => 'event_dispatcher', 5 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.sync.sync_process.value_helper' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Helper\\ValueHelper', 'arguments' => []], 'mautic.integrations.sync.data_exchange.mautic.field_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FieldBuilder', 'arguments' => [0 => 'router', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.helper.contact_object']], 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FullObjectReportBuilder', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic.field_builder', 1 => 'mautic.integrations.internal.object_provider', 2 => 'event_dispatcher']], 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\PartialObjectReportBuilder', 'arguments' => [0 => 'mautic.integrations.repository.field_change', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.sync.data_exchange.mautic.field_builder', 3 => 'mautic.integrations.internal.object_provider', 4 => 'event_dispatcher']], 'mautic.integrations.sync.data_exchange.mautic' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\MauticSyncDataExchange', 'arguments' => [0 => 'mautic.integrations.repository.field_change', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.helper.sync_mapping', 3 => 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder', 4 => 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder', 5 => 'mautic.integrations.sync.data_exchange.mautic.order_executioner']], 'mautic.integrations.sync.integration_process.object_change_generator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\ObjectChangeGenerator', 'arguments' => [0 => 'mautic.integrations.sync.sync_process.value_helper']], 'mautic.integrations.sync.integration_process' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\IntegrationSyncProcess', 'arguments' => [0 => 'mautic.integrations.helper.sync_date', 1 => 'mautic.integrations.helper.sync_mapping', 2 => 'mautic.integrations.sync.integration_process.object_change_generator']], 'mautic.integrations.sync.internal_process.object_change_generator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\ObjectChangeGenerator', 'arguments' => [0 => 'mautic.integrations.helper.sync_judge', 1 => 'mautic.integrations.sync.sync_process.value_helper', 2 => 'mautic.integrations.sync.data_exchange.mautic.field_helper']], 'mautic.integrations.sync.internal_process' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\MauticSyncProcess', 'arguments' => [0 => 'mautic.integrations.helper.sync_date', 1 => 'mautic.integrations.sync.internal_process.object_change_generator']], 'mautic.integrations.sync.service' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncService\\SyncService', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic', 1 => 'mautic.integrations.helper.sync_date', 2 => 'mautic.integrations.helper.sync_mapping', 3 => 'mautic.integrations.sync.helper.relations', 4 => 'mautic.integrations.helper.sync_integrations', 5 => 'event_dispatcher', 6 => 'mautic.integrations.sync.notifier', 7 => 'mautic.integrations.sync.integration_process', 8 => 'mautic.integrations.sync.internal_process'], 'methodCalls' => ['initiateDebugLogger' => [0 => 'mautic.sync.logger']]], 'mautic.integrations.helper.sync_date' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\SyncDateHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.helper.sync_mapping' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\MappingHelper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.integrations.repository.object_mapping', 2 => 'mautic.integrations.internal.object_provider', 3 => 'event_dispatcher']], 'mautic.integrations.sync.helper.relations' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\RelationsHelper', 'arguments' => [0 => 'mautic.integrations.helper.sync_mapping']], 'mautic.integrations.sync.notifier' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Notifier', 'arguments' => [0 => 'mautic.integrations.sync.notification.handler_container', 1 => 'mautic.integrations.helper.sync_integrations', 2 => 'mautic.integrations.helper.config_integrations']], 'mautic.integrations.sync.notification.writer' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Writer', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'mautic.core.model.auditlog', 2 => 'doctrine.orm.entity_manager']], 'mautic.integrations.sync.notification.handler_container' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\HandlerContainer'], 'mautic.integrations.sync.notification.handler_company' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\CompanyNotificationHandler', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.helper_user_notification', 2 => 'mautic.integrations.sync.notification.helper_company'], 'tag' => 'mautic.sync.notification_handler'], 'mautic.integrations.sync.notification.handler_contact' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\ContactNotificationHandler', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.lead.repository.lead_event_log', 2 => 'doctrine.orm.entity_manager', 3 => 'mautic.integrations.sync.notification.helper_user_summary_notification'], 'tag' => 'mautic.sync.notification_handler'], 'mautic.integrations.sync.notification.helper_company' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\CompanyHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.notification.helper_user' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.notification.helper_route' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\RouteHelper', 'arguments' => [0 => 'mautic.integrations.internal.object_provider', 1 => 'event_dispatcher']], 'mautic.integrations.sync.notification.helper_user_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationHelper', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.user_notification_builder']], 'mautic.integrations.sync.notification.user_notification_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationBuilder', 'arguments' => [0 => 'mautic.integrations.sync.notification.helper_user', 1 => 'mautic.integrations.sync.notification.helper.owner_provider', 2 => 'mautic.integrations.sync.notification.helper_route', 3 => 'translator']], 'mautic.integrations.sync.notification.bulk_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\BulkNotification', 'arguments' => [0 => 'mautic.core.service.bulk_notification', 1 => 'mautic.integrations.sync.notification.user_notification_builder', 2 => 'doctrine.orm.entity_manager']], 'mautic.integrations.sync.notification.helper_user_summary_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserSummaryNotificationHelper', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.helper_user', 2 => 'mautic.integrations.sync.notification.helper.owner_provider', 3 => 'mautic.integrations.sync.notification.helper_route', 4 => 'translator']]]]]], 'MauticLeadBundle' => ['isPlugin' => false, 'base' => 'Lead', 'bundle' => 'LeadBundle', 'relative' => 'app/bundles/LeadBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle'), 'namespace' => 'Mautic\\LeadBundle', 'symfonyBundleName' => 'MauticLeadBundle', 'bundleClass' => 'Mautic\\LeadBundle\\MauticLeadBundle', 'permissionClasses' => ['Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions' => 'Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions'], 'config' => ['routes' => ['main' => ['mautic_plugin_timeline_index' => ['path' => '/plugin/{integration}/timeline/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginIndexAction', 'requirements' => ['integration' => '.+']], 'mautic_plugin_timeline_view' => ['path' => '/plugin/{integration}/timeline/view/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginViewAction', 'requirements' => ['integration' => '.+', 'leadId' => '\\d+']], 'mautic_segment_batch_contact_set' => ['path' => '/segments/batch/contact/set', 'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::setAction'], 'mautic_segment_batch_contact_view' => ['path' => '/segments/batch/contact/view', 'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::indexAction'], 'mautic_segment_index' => ['path' => '/segments/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::indexAction'], 'mautic_segment_action' => ['path' => '/segments/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::executeAction'], 'mautic_contactfield_index' => ['path' => '/contacts/fields/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::indexAction'], 'mautic_contactfield_action' => ['path' => '/contacts/fields/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::executeAction'], 'mautic_contact_index' => ['path' => '/contacts/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::indexAction'], 'mautic_contactnote_index' => ['path' => '/contacts/notes/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::indexAction', 'defaults' => ['leadId' => 0], 'requirements' => ['leadId' => '\\d+']], 'mautic_contactnote_action' => ['path' => '/contacts/notes/{leadId}/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::executeNoteAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contacttimeline_action' => ['path' => '/contacts/timeline/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::indexAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_timeline_export_action' => ['path' => '/contacts/timeline/batchExport/{leadId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::batchExportAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_auditlog_action' => ['path' => '/contacts/auditlog/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::indexAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_auditlog_export_action' => ['path' => '/contacts/auditlog/batchExport/{leadId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::batchExportAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_export_action' => ['path' => '/contacts/contact/export/{contactId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactExportAction', 'requirements' => ['contactId' => '\\d+']], 'mautic_import_index' => ['path' => '/{object}/import/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::indexAction'], 'mautic_import_action' => ['path' => '/{object}/import/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::executeAction'], 'mautic_contact_action' => ['path' => '/contacts/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::executeAction'], 'mautic_company_index' => ['path' => '/companies/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::indexAction'], 'mautic_company_contacts_list' => ['path' => '/company/{objectId}/contacts/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::contactsListAction', 'requirements' => ['objectId' => '\\d+']], 'mautic_company_action' => ['path' => '/companies/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::executeAction'], 'mautic_company_export_action' => ['path' => '/companies/company/export/{companyId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::companyExportAction', 'requirements' => ['companyId' => '\\d+']], 'mautic_segment_contacts' => ['path' => '/segment/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::contactsAction'], 'mautic_contact_stats' => ['path' => '/contacts/view/{objectId}/stats', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactStatsAction'], 'mautic_contact_export_download' => ['path' => '/contacts/export/download/{fileName}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::downloadExportAction']], 'api' => ['mautic_api_contactsstandard' => ['standard_entity' => true, 'name' => 'contacts', 'path' => '/contacts', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController'], 'mautic_api_dncaddcontact' => ['path' => '/contacts/{id}/dnc/{channel}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addDncAction', 'method' => 'POST', 'defaults' => ['channel' => 'email']], 'mautic_api_dncremovecontact' => ['path' => '/contacts/{id}/dnc/{channel}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeDncAction', 'method' => 'POST'], 'mautic_api_getcontactevents' => ['path' => '/contacts/{id}/activity', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getActivityAction'], 'mautic_api_getcontactsevents' => ['path' => '/contacts/activity', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getAllActivityAction'], 'mautic_api_getcontactnotes' => ['path' => '/contacts/{id}/notes', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getNotesAction'], 'mautic_api_getcontactdevices' => ['path' => '/contacts/{id}/devices', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getDevicesAction'], 'mautic_api_getcontactcampaigns' => ['path' => '/contacts/{id}/campaigns', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCampaignsAction'], 'mautic_api_getcontactssegments' => ['path' => '/contacts/{id}/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getListsAction'], 'mautic_api_getcontactscompanies' => ['path' => '/contacts/{id}/companies', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCompaniesAction'], 'mautic_api_utmcreateevent' => ['path' => '/contacts/{id}/utm/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addUtmTagsAction', 'method' => 'POST'], 'mautic_api_utmremoveevent' => ['path' => '/contacts/{id}/utm/{utmid}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeUtmTagsAction', 'method' => 'POST'], 'mautic_api_getcontactowners' => ['path' => '/contacts/list/owners', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getOwnersAction'], 'mautic_api_getcontactfields' => ['path' => '/contacts/list/fields', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getFieldsAction'], 'mautic_api_getcontactsegments' => ['path' => '/contacts/list/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::getListsAction'], 'mautic_api_segmentsstandard' => ['standard_entity' => true, 'name' => 'lists', 'path' => '/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController'], 'mautic_api_segmentaddcontact' => ['path' => '/segments/{id}/contact/{leadId}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadAction', 'method' => 'POST'], 'mautic_api_segmentaddcontacts' => ['path' => '/segments/{id}/contacts/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadsAction', 'method' => 'POST'], 'mautic_api_segmentremovecontact' => ['path' => '/segments/{id}/contact/{leadId}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::removeLeadAction', 'method' => 'POST'], 'mautic_api_companiesstandard' => ['standard_entity' => true, 'name' => 'companies', 'path' => '/companies', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController'], 'mautic_api_companyaddcontact' => ['path' => '/companies/{companyId}/contact/{contactId}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::addContactAction', 'method' => 'POST'], 'mautic_api_companyremovecontact' => ['path' => '/companies/{companyId}/contact/{contactId}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::removeContactAction', 'method' => 'POST'], 'mautic_api_fieldsstandard' => ['standard_entity' => true, 'name' => 'fields', 'path' => '/fields/{object}', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\FieldApiController', 'defaults' => ['object' => 'contact']], 'mautic_api_notesstandard' => ['standard_entity' => true, 'name' => 'notes', 'path' => '/notes', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\NoteApiController'], 'mautic_api_devicesstandard' => ['standard_entity' => true, 'name' => 'devices', 'path' => '/devices', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\DeviceApiController'], 'mautic_api_tagsstandard' => ['standard_entity' => true, 'name' => 'tags', 'path' => '/tags', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\TagApiController']]], 'menu' => ['main' => ['items' => ['mautic.lead.leads' => ['iconClass' => 'fa-user', 'access' => [0 => 'lead:leads:viewown', 1 => 'lead:leads:viewother'], 'route' => 'mautic_contact_index', 'priority' => 80], 'mautic.companies.menu.index' => ['route' => 'mautic_company_index', 'iconClass' => 'fa-building-o', 'access' => [0 => 'lead:leads:viewother'], 'priority' => 75], 'mautic.lead.list.menu.index' => ['iconClass' => 'fa-pie-chart', 'access' => [0 => 'lead:leads:viewown', 1 => 'lead:leads:viewother'], 'route' => 'mautic_segment_index', 'priority' => 70]]], 'admin' => ['priority' => 50, 'items' => ['mautic.lead.field.menu.index' => ['id' => 'mautic_lead_field', 'iconClass' => 'fa-list', 'route' => 'mautic_contactfield_index', 'access' => 'lead:fields:full']]]], 'categories' => ['segment' => NULL], 'services' => ['events' => ['mautic.lead.serializer.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\SerializerSubscriber', 'arguments' => [0 => 'request_stack'], 'tag' => 'jms_serializer.event_subscriber', 'tagArguments' => ['event' => 'serializer.post_serialize']], 'mautic.lead.export_scheduled_audit_log_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerAuditLogSubscriber', 'arguments' => [0 => 'mautic.core.model.auditlog', 1 => 'mautic.helper.ip_lookup']], 'mautic.lead.export_scheduled_logger_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerLoggerSubscriber', 'arguments' => [0 => 'logger']], 'mautic.lead.export_scheduled_notification_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerNotificationSubscriber', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'translator']], 'mautic.lead.contact_scheduled_export.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactScheduledExportSubscriber', 'arguments' => [0 => 'mautic.lead.model.export_scheduler']]], 'other' => ['mautic.lead.doctrine.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\DoctrineSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.validator.leadlistaccess' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator', 'arguments' => [0 => 'mautic.lead.model.list'], 'tag' => 'validator.constraint_validator', 'alias' => 'leadlist_access'], 'mautic.validator.emailaddress' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator', 'arguments' => [0 => 'mautic.validator.email'], 'tag' => 'validator.constraint_validator'], 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator', 'tag' => 'validator.constraint_validator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.helper.field.alias', 2 => '@doctrine.orm.entity_manager', 3 => 'translator', 4 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => ['class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator', 'tag' => 'validator.constraint_validator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.helper.field.alias']], 'mautic.lead.constraint.alias' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator', 'arguments' => [0 => 'mautic.lead.repository.lead_list', 1 => 'mautic.helper.user'], 'tag' => 'validator.constraint_validator', 'alias' => 'uniqueleadlist'], 'mautic.lead.validator.custom_field' => ['class' => 'Mautic\\LeadBundle\\Validator\\CustomFieldValidator', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'translator']], 'mautic.lead_list.constraint.in_use' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator', 'arguments' => [0 => 'mautic.lead.model.list'], 'tag' => 'validator.constraint_validator', 'alias' => 'segment_in_use'], 'mautic.lead.event.dispatcher' => ['class' => 'Mautic\\LeadBundle\\Helper\\LeadChangeEventDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.merger' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactMerger', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.lead.repository.merged_records', 2 => 'event_dispatcher', 3 => 'monolog.logger.mautic']], 'mautic.lead.deduper' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactDeduper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.merger', 2 => 'mautic.lead.repository.lead']], 'mautic.company.deduper' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\CompanyDeduper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.repository.company']], 'mautic.lead.helper.primary_company' => ['class' => 'Mautic\\LeadBundle\\Helper\\PrimaryCompanyHelper', 'arguments' => [0 => 'mautic.lead.repository.company_lead']], 'mautic.lead.helper.contact_request_helper' => ['class' => 'Mautic\\LeadBundle\\Helper\\ContactRequestHelper', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.tracker.contact', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.ip_lookup', 4 => 'request_stack', 5 => 'monolog.logger.mautic', 6 => 'event_dispatcher', 7 => 'mautic.lead.merger']], 'mautic.lead.validator.length' => ['class' => 'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator', 'tag' => 'validator.constraint_validator'], 'mautic.lead.segment.stat.dependencies' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentDependencies', 'arguments' => [0 => 'mautic.email.model.email', 1 => 'mautic.campaign.model.campaign', 2 => 'mautic.form.model.action', 3 => 'mautic.lead.model.list', 4 => 'mautic.point.model.triggerevent', 5 => 'mautic.report.model.report']], 'mautic.lead.segment.stat.chart.query.factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentChartQueryFactory', 'arguments' => []], 'mautic.lead.segment.stat.campaign.share' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentCampaignShare', 'arguments' => [0 => 'mautic.campaign.model.campaign', 1 => 'mautic.helper.cache_storage', 2 => '@doctrine.orm.entity_manager']], 'mautic.lead.columns.dictionary' => ['class' => 'Mautic\\LeadBundle\\Services\\ContactColumnsDictionary', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'translator', 2 => 'mautic.helper.core_parameters']], 'mautic.lead.model.lead_segment_filter_factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterFactory', 'arguments' => [0 => 'mautic.lead.model.lead_segment_schema_cache', 1 => '@service_container', 2 => 'mautic.lead.model.lead_segment_decorator_factory']], 'mautic.tracker.contact' => ['class' => 'Mautic\\LeadBundle\\Tracker\\ContactTracker', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.lead.service.contact_tracking_service', 2 => 'mautic.tracker.device', 3 => 'mautic.security', 4 => 'monolog.logger.mautic', 5 => 'mautic.helper.ip_lookup', 6 => 'request_stack', 7 => 'mautic.helper.core_parameters', 8 => 'event_dispatcher', 9 => 'mautic.lead.model.field']], 'mautic.tracker.device' => ['class' => 'Mautic\\LeadBundle\\Tracker\\DeviceTracker', 'arguments' => [0 => 'mautic.lead.service.device_creator_service', 1 => 'mautic.lead.factory.device_detector_factory', 2 => 'mautic.lead.service.device_tracking_service', 3 => 'monolog.logger.mautic']], 'mautic.lead.field.custom_field_column' => ['class' => 'Mautic\\LeadBundle\\Field\\CustomFieldColumn', 'arguments' => [0 => 'mautic.schema.helper.column', 1 => 'mautic.lead.field.schema_definition', 2 => 'monolog.logger.mautic', 3 => 'mautic.lead.field.lead_field_saver', 4 => 'mautic.lead.field.custom_field_index', 5 => 'mautic.lead.field.dispatcher.field_column_dispatcher', 6 => 'translator']], 'mautic.lead.field.custom_field_index' => ['class' => 'Mautic\\LeadBundle\\Field\\CustomFieldIndex', 'arguments' => [0 => 'mautic.schema.helper.index', 1 => 'monolog.logger.mautic', 2 => 'mautic.lead.field.fields_with_unique_identifier']], 'mautic.lead.repository.lead_segment_filter_descriptor' => ['class' => 'Mautic\\LeadBundle\\Services\\ContactSegmentFilterDictionary', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.service.segment_dependency_tree_factory' => ['class' => 'Mautic\\LeadBundle\\Services\\SegmentDependencyTreeFactory', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'router']], 'mautic.lead.repository.lead_segment_query_builder' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\ContactSegmentQueryBuilder', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.lead.model.random_parameter_name', 2 => 'event_dispatcher']], 'mautic.lead.model.lead_segment_service' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentService', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_factory', 1 => 'mautic.lead.repository.lead_segment_query_builder', 2 => 'monolog.logger.mautic']], 'mautic.lead.model.lead_segment_schema_cache' => ['class' => 'Mautic\\LeadBundle\\Segment\\TableSchemaColumnsCache', 'arguments' => [0 => 'doctrine.orm.entity_manager']], 'mautic.lead.model.relative_date' => ['class' => 'Mautic\\LeadBundle\\Segment\\RelativeDate', 'arguments' => [0 => 'translator']], 'mautic.lead.model.lead_segment_filter_operator' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterOperator', 'arguments' => [0 => 'mautic.lead.provider.fillterOperator']], 'mautic.lead.model.lead_segment_decorator_factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DecoratorFactory', 'arguments' => [0 => 'mautic.lead.repository.lead_segment_filter_descriptor', 1 => 'mautic.lead.model.lead_segment_decorator_base', 2 => 'mautic.lead.model.lead_segment_decorator_custom_mapped', 3 => 'mautic.lead.model.lead_segment.decorator.date.optionFactory', 4 => 'mautic.lead.model.lead_segment_decorator_company', 5 => 'event_dispatcher']], 'mautic.lead.model.lead_segment_decorator_base' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\BaseDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_custom_mapped' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CustomMappedDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_company' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CompanyDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_date' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DateDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment.decorator.date.optionFactory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\DateOptionFactory', 'arguments' => [0 => 'mautic.lead.model.lead_segment_decorator_date', 1 => 'mautic.lead.model.relative_date', 2 => 'mautic.lead.model.lead_segment.timezoneResolver']], 'mautic.lead.model.lead_segment.timezoneResolver' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\TimezoneResolver', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.provider.fillterOperator' => ['class' => 'Mautic\\LeadBundle\\Provider\\FilterOperatorProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'translator']], 'mautic.lead.provider.typeOperator' => ['class' => 'Mautic\\LeadBundle\\Provider\\TypeOperatorProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.lead.provider.fillterOperator']], 'mautic.lead.provider.fieldChoices' => ['class' => 'Mautic\\LeadBundle\\Provider\\FieldChoicesProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.provider.formAdjustments' => ['class' => 'Mautic\\LeadBundle\\Provider\\FormAdjustmentsProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.model.random_parameter_name' => ['class' => 'Mautic\\LeadBundle\\Segment\\RandomParameterName'], 'mautic.lead.segment.operator_options' => ['class' => 'Mautic\\LeadBundle\\Segment\\OperatorOptions'], 'mautic.lead.reportbundle.fields_builder' => ['class' => 'Mautic\\LeadBundle\\Report\\FieldsBuilder', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.model.list', 2 => 'mautic.user.model.user', 3 => 'mautic.lead.model.lead']], 'mautic.lead.factory.device_detector_factory' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Factory\\DeviceDetectorFactory\\DeviceDetectorFactory', 'arguments' => [0 => 'mautic.cache.provider']], 'mautic.lead.service.contact_tracking_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\ContactTrackingService\\ContactTrackingService', 'arguments' => [0 => 'mautic.helper.cookie', 1 => 'mautic.lead.repository.lead_device', 2 => 'mautic.lead.repository.lead', 3 => 'mautic.lead.repository.merged_records', 4 => 'request_stack']], 'mautic.lead.service.device_creator_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceCreatorService\\DeviceCreatorService'], 'mautic.lead.service.device_tracking_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceTrackingService\\DeviceTrackingService', 'arguments' => [0 => 'mautic.helper.cookie', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.lead.repository.lead_device', 3 => 'mautic.helper.random', 4 => 'request_stack', 5 => 'mautic.security']], 'mautic.lead.field.schema_definition' => ['class' => 'Mautic\\LeadBundle\\Field\\SchemaDefinition'], 'mautic.lead.field.dispatcher.field_save_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldSaveDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'doctrine.orm.entity_manager']], 'mautic.lead.field.dispatcher.field_column_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.lead.field.settings.background_settings']], 'mautic.lead.field.dispatcher.field_column_background_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnBackgroundJobDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.field.fields_with_unique_identifier' => ['class' => 'Mautic\\LeadBundle\\Field\\FieldsWithUniqueIdentifier', 'arguments' => [0 => 'mautic.lead.field.field_list']], 'mautic.lead.field.field_list' => ['class' => 'Mautic\\LeadBundle\\Field\\FieldList', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'translator']], 'mautic.lead.field.identifier_fields' => ['class' => 'Mautic\\LeadBundle\\Field\\IdentifierFields', 'arguments' => [0 => 'mautic.lead.field.fields_with_unique_identifier', 1 => 'mautic.lead.field.field_list']], 'mautic.lead.field.lead_field_saver' => ['class' => 'Mautic\\LeadBundle\\Field\\LeadFieldSaver', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'mautic.lead.field.dispatcher.field_save_dispatcher']], 'mautic.lead.field.settings.background_settings' => ['class' => 'Mautic\\LeadBundle\\Field\\Settings\\BackgroundSettings', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.field.settings.background_service' => ['class' => 'Mautic\\LeadBundle\\Field\\BackgroundService', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.field.custom_field_column', 2 => 'mautic.lead.field.lead_field_saver', 3 => 'mautic.lead.field.dispatcher.field_column_background_dispatcher', 4 => 'mautic.lead.field.notification.custom_field']], 'mautic.lead.field.notification.custom_field' => ['class' => 'Mautic\\LeadBundle\\Field\\Notification\\CustomFieldNotification', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'mautic.user.model.user', 2 => 'translator']]], 'repositories' => ['mautic.lead.repository.company' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\Company'], 'methodCalls' => ['setUniqueIdentifiersOperator' => [0 => '%mautic.company_unique_identifiers_operator%']]], 'mautic.lead.repository.company_lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\CompanyLead']], 'mautic.lead.repository.stages_lead_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\StagesChangeLog']], 'mautic.lead.repository.dnc' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\DoNotContact']], 'mautic.lead.repository.lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\Lead'], 'methodCalls' => ['setUniqueIdentifiersOperator' => [0 => '%mautic.contact_unique_identifiers_operator%'], 'setListLeadRepository' => [0 => '@mautic.lead.repository.list_lead']]], 'mautic.lead.repository.list_lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\ListLead']], 'mautic.lead.repository.frequency_rule' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\FrequencyRule']], 'mautic.lead.repository.lead_event_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadEventLog']], 'mautic.lead.repository.lead_device' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadDevice']], 'mautic.lead.repository.lead_list' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadList']], 'mautic.lead.repository.points_change_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\PointsChangeLog']], 'mautic.lead.repository.merged_records' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\MergeRecord']], 'mautic.lead.repository.field' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadField']], 'mautic.lead.query.builder.basic' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\BaseFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.foreign.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignValueFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.foreign.func' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignFuncFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.dnc' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\DoNotContactFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.integration' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\IntegrationCampaignFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.sessions' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SessionsFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.complex_relation.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ComplexRelationValueFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.leadlist' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SegmentReferenceFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'mautic.lead.repository.lead_segment_query_builder', 2 => 'doctrine.orm.entity_manager', 3 => 'mautic.lead.model.lead_segment_filter_factory', 4 => 'event_dispatcher']], 'mautic.lead.query.builder.channel_click.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ChannelClickQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']]], 'helpers' => ['mautic.helper.twig.avatar' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\AvatarHelper', 'arguments' => [0 => 'twig.helper.assets', 1 => 'mautic.helper.paths', 2 => 'mautic.helper.twig.gravatar', 3 => 'mautic.helper.twig.default_avatar'], 'alias' => 'lead_avatar'], 'mautic.helper.twig.default_avatar' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DefaultAvatarHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'twig.helper.assets'], 'alias' => 'default_avatar'], 'mautic.helper.field.alias' => ['class' => 'Mautic\\LeadBundle\\Helper\\FieldAliasHelper', 'arguments' => [0 => 'mautic.lead.model.field']], 'mautic.helper.twig.dnc_reason' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DncReasonHelper', 'arguments' => [0 => 'translator'], 'alias' => 'lead_dnc_reason'], 'mautic.helper.segment.count.cache' => ['class' => 'Mautic\\LeadBundle\\Helper\\SegmentCountCacheHelper', 'arguments' => [0 => 'mautic.helper.cache_storage']]], 'fixtures' => ['mautic.lead.fixture.company' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCompanyData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.company']], 'mautic.lead.fixture.contact' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.fixture.segment' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadListData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list']], 'mautic.lead.fixture.category' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategoryData', 'tag' => 'doctrine.fixture.orm'], 'mautic.lead.fixture.categorizedleadlists' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategorizedLeadListData', 'tag' => 'doctrine.fixture.orm'], 'mautic.lead.fixture.test.page_hit' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadPageHitData', 'tag' => 'doctrine.fixture.orm', 'optional' => true], 'mautic.lead.fixture.test.segment' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadSegmentsData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.click' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadClickData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.dnc' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadDncData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.tag' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadTagData', 'tag' => 'doctrine.fixture.orm', 'optional' => true]]], 'parameters' => ['parallel_import_limit' => 1, 'background_import_if_more_rows_than' => 0, 'contact_columns' => [0 => 'name', 1 => 'email', 2 => 'location', 3 => 'stage', 4 => 'points', 5 => 'last_active', 6 => 'id'], 'create_custom_field_in_background' => false, 'company_unique_identifiers_operator' => 'OR', 'contact_unique_identifiers_operator' => 'OR', 'segment_rebuild_time_warning' => 30, 'segment_build_time_warning' => 30, 'contact_export_in_background' => true, 'contact_export_dir' => '%kernel.project_dir%/media/files/temp', 'contact_export_batch_size' => 20000]]], 'MarketplaceBundle' => ['isPlugin' => false, 'base' => 'Marketplace', 'bundle' => 'MarketplaceBundle', 'relative' => 'app/bundles/MarketplaceBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle'), 'namespace' => 'Mautic\\MarketplaceBundle', 'symfonyBundleName' => 'MarketplaceBundle', 'bundleClass' => 'Mautic\\MarketplaceBundle\\MarketplaceBundle', 'permissionClasses' => ['Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions'], 'config' => ['routes' => ['main' => ['mautic_marketplace_list' => ['path' => '/marketplace/{page}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\ListController::listAction', 'method' => 'GET|POST', 'defaults' => ['page' => 1]], 'mautic_marketplace_detail' => ['path' => '/marketplace/detail/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\DetailController::viewAction', 'method' => 'GET'], 'mautic_marketplace_install' => ['path' => '/marketplace/install/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\InstallController::viewAction', 'method' => 'GET|POST'], 'mautic_marketplace_remove' => ['path' => '/marketplace/remove/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\RemoveController::viewAction', 'method' => 'GET|POST'], 'mautic_marketplace_clear_cache' => ['path' => '/marketplace/clear/cache', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\CacheController::clearAction', 'method' => 'GET']]], 'services' => ['permissions' => ['marketplace.permissions' => ['class' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'marketplace.service.config']]], 'api' => ['marketplace.api.connection' => ['class' => 'Mautic\\MarketplaceBundle\\Api\\Connection', 'arguments' => [0 => 'mautic.http.client', 1 => 'monolog.logger.mautic']]], 'other' => ['marketplace.service.plugin_collector' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\PluginCollector', 'arguments' => [0 => 'marketplace.api.connection', 1 => 'marketplace.service.allowlist']], 'marketplace.service.route_provider' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\RouteProvider', 'arguments' => [0 => 'router']], 'marketplace.service.config' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\Config', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'marketplace.service.allowlist' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\Allowlist', 'arguments' => [0 => 'marketplace.service.config', 1 => 'mautic.cache.provider', 2 => 'mautic.http.client']]]], 'parameters' => ['marketplace_enabled' => true, 'marketplace_allowlist_url' => 'https://raw.githubusercontent.com/mautic/marketplace-allowlist/main/allowlist.json', 'marketplace_allowlist_cache_ttl_seconds' => 3600]]], 'MauticMessengerBundle' => ['isPlugin' => false, 'base' => 'Messenger', 'bundle' => 'MessengerBundle', 'relative' => 'app/bundles/MessengerBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/MessengerBundle'), 'namespace' => 'Mautic\\MessengerBundle', 'symfonyBundleName' => 'MauticMessengerBundle', 'bundleClass' => 'Mautic\\MessengerBundle\\MauticMessengerBundle', 'permissionClasses' => [], 'config' => ['parameters' => ['messenger_dsn_email' => 'sync://', 'messenger_dsn_failed' => NULL, 'messenger_retry_strategy_max_retries' => 3, 'messenger_retry_strategy_delay' => 1000, 'messenger_retry_strategy_multiplier' => 2.0, 'messenger_retry_strategy_max_delay' => 0]]], 'MauticNotificationBundle' => ['isPlugin' => false, 'base' => 'Notification', 'bundle' => 'NotificationBundle', 'relative' => 'app/bundles/NotificationBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle'), 'namespace' => 'Mautic\\NotificationBundle', 'symfonyBundleName' => 'MauticNotificationBundle', 'bundleClass' => 'Mautic\\NotificationBundle\\MauticNotificationBundle', 'permissionClasses' => ['Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions' => 'Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions'], 'config' => ['services' => ['events' => ['mautic.notification.campaignbundle.subscriber' => ['class' => 'Mautic\\NotificationBundle\\EventListener\\CampaignSubscriber', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'mautic.notification.model.notification', 2 => 'mautic.notification.api', 3 => 'event_dispatcher', 4 => 'mautic.lead.model.dnc']]], 'helpers' => ['mautic.helper.notification' => ['class' => 'Mautic\\NotificationBundle\\Helper\\NotificationHelper', 'alias' => 'notification_helper', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'twig.helper.assets', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.integration', 4 => 'router', 5 => 'request_stack', 6 => 'mautic.lead.model.dnc']]], 'other' => ['mautic.notification.api' => ['class' => 'Mautic\\NotificationBundle\\Api\\OneSignalApi', 'arguments' => [0 => 'mautic.http.client', 1 => 'mautic.page.model.trackable', 2 => 'mautic.helper.integration'], 'alias' => 'notification_api']], 'repositories' => ['mautic.notification.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\NotificationBundle\\Entity\\Stat']]], 'integrations' => ['mautic.integration.onesignal' => ['class' => 'Mautic\\NotificationBundle\\Integration\\OneSignalIntegration', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.cache_storage', 2 => 'doctrine.orm.entity_manager', 3 => 'session', 4 => 'request_stack', 5 => 'router', 6 => 'translator', 7 => 'logger', 8 => 'mautic.helper.encryption', 9 => 'mautic.lead.model.lead', 10 => 'mautic.lead.model.company', 11 => 'mautic.helper.paths', 12 => 'mautic.core.model.notification', 13 => 'mautic.lead.model.field', 14 => 'mautic.plugin.model.integration_entity', 15 => 'mautic.lead.model.dnc']]]], 'routes' => ['main' => ['mautic_notification_index' => ['path' => '/notifications/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::indexAction'], 'mautic_notification_action' => ['path' => '/notifications/{objectAction}/{objectId}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::executeAction'], 'mautic_notification_contacts' => ['path' => '/notifications/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::contactsAction'], 'mautic_mobile_notification_index' => ['path' => '/mobile_notifications/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::indexAction'], 'mautic_mobile_notification_action' => ['path' => '/mobile_notifications/{objectAction}/{objectId}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::executeAction'], 'mautic_mobile_notification_contacts' => ['path' => '/mobile_notifications/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::contactsAction']], 'public' => ['mautic_receive_notification' => ['path' => '/notification/receive', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::receiveAction'], 'mautic_subscribe_notification' => ['path' => '/notification/subscribe', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::subscribeAction'], 'mautic_notification_popup' => ['path' => '/notification', 'controller' => 'Mautic\\NotificationBundle\\Controller\\PopupController::indexAction'], 'mautic_onesignal_worker' => ['path' => '/OneSignalSDKWorker.js', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::workerAction'], 'mautic_onesignal_updater' => ['path' => '/OneSignalSDKUpdaterWorker.js', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::updaterAction'], 'mautic_onesignal_manifest' => ['path' => '/manifest.json', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::manifestAction'], 'mautic_app_notification' => ['path' => '/notification/appcallback', 'controller' => 'Mautic\\NotificationBundle\\Controller\\AppCallbackController::indexAction']], 'api' => ['mautic_api_notificationsstandard' => ['standard_entity' => true, 'name' => 'notifications', 'path' => '/notifications', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController']]], 'menu' => ['main' => ['items' => ['mautic.notification.notifications' => ['route' => 'mautic_notification_index', 'access' => [0 => 'notification:notifications:viewown', 1 => 'notification:notifications:viewother'], 'checks' => ['integration' => ['OneSignal' => ['enabled' => true]]], 'parent' => 'mautic.core.channels', 'priority' => 80], 'mautic.notification.mobile_notifications' => ['route' => 'mautic_mobile_notification_index', 'access' => [0 => 'notification:mobile_notifications:viewown', 1 => 'notification:mobile_notifications:viewother'], 'checks' => ['integration' => ['OneSignal' => ['enabled' => true, 'features' => [0 => 'mobile']]]], 'parent' => 'mautic.core.channels', 'priority' => 65]]]], 'parameters' => ['notification_enabled' => false, 'notification_landing_page_enabled' => true, 'notification_tracking_page_enabled' => false, 'notification_app_id' => NULL, 'notification_rest_api_key' => NULL, 'notification_safari_web_id' => NULL, 'gcm_sender_id' => '482941778795', 'notification_subdomain_name' => NULL, 'welcomenotification_enabled' => true, 'campaign_send_notification_to_author' => true, 'campaign_notification_email_addresses' => NULL, 'webhook_send_notification_to_author' => true, 'webhook_notification_email_addresses' => NULL]]], 'MauticPageBundle' => ['isPlugin' => false, 'base' => 'Page', 'bundle' => 'PageBundle', 'relative' => 'app/bundles/PageBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PageBundle'), 'namespace' => 'Mautic\\PageBundle', 'symfonyBundleName' => 'MauticPageBundle', 'bundleClass' => 'Mautic\\PageBundle\\MauticPageBundle', 'permissionClasses' => ['Mautic\\PageBundle\\Security\\Permissions\\PagePermissions' => 'Mautic\\PageBundle\\Security\\Permissions\\PagePermissions'], 'config' => ['routes' => ['main' => ['mautic_page_index' => ['path' => '/pages/{page}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::indexAction'], 'mautic_page_action' => ['path' => '/pages/{objectAction}/{objectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::executeAction'], 'mautic_page_results' => ['path' => '/pages/results/{objectId}/{page}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::resultsAction'], 'mautic_page_export' => ['path' => '/pages/results/{objectId}/export/{format}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::exportAction', 'defaults' => ['format' => 'csv']]], 'public' => ['mautic_page_tracker' => ['path' => '/mtracking.gif', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingImageAction'], 'mautic_page_tracker_cors' => ['path' => '/mtc/event', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingAction'], 'mautic_page_tracker_getcontact' => ['path' => '/mtc', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::getContactIdAction'], 'mautic_url_redirect' => ['path' => '/r/{redirectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction'], 'mautic_page_redirect' => ['path' => '/redirect/{redirectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction'], 'mautic_page_preview' => ['path' => '/page/preview/{id}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::previewAction'], 'mautic_gated_video_hit' => ['path' => '/video/hit', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::hitVideoAction']], 'api' => ['mautic_api_pagesstandard' => ['standard_entity' => true, 'name' => 'pages', 'path' => '/pages', 'controller' => 'Mautic\\PageBundle\\Controller\\Api\\PageApiController']], 'catchall' => ['mautic_page_public' => ['path' => '/{slug}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::indexAction', 'requirements' => ['slug' => '^(?!(_(profiler|wdt)|css|images|js|favicon.ico|apps/bundles/|plugins/)).+']]]], 'menu' => ['main' => ['items' => ['mautic.page.pages' => ['route' => 'mautic_page_index', 'access' => [0 => 'page:pages:viewown', 1 => 'page:pages:viewother'], 'parent' => 'mautic.core.components', 'priority' => 100]]]], 'categories' => ['page' => NULL], 'services' => ['repositories' => ['mautic.page.repository.hit' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Hit']], 'mautic.page.repository.page' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Page']], 'mautic.page.repository.redirect' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Redirect']]], 'fixtures' => ['mautic.page.fixture.page_category' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageCategoryData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.category.model.category']], 'mautic.page.fixture.page' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page']], 'mautic.page.fixture.page_hit' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageHitData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page']]], 'other' => ['mautic.page.helper.token' => ['class' => 'Mautic\\PageBundle\\Helper\\TokenHelper', 'arguments' => 'mautic.page.model.page'], 'mautic.page.helper.tracking' => ['class' => 'Mautic\\PageBundle\\Helper\\TrackingHelper', 'arguments' => [0 => 'session', 1 => 'mautic.helper.core_parameters', 2 => 'request_stack', 3 => 'mautic.tracker.contact']]]], 'parameters' => ['cat_in_page_url' => false, 'google_analytics' => NULL, 'track_contact_by_ip' => false, 'track_by_tracking_url' => false, 'redirect_list_types' => [301 => 'mautic.page.form.redirecttype.permanent', 302 => 'mautic.page.form.redirecttype.temporary'], 'google_analytics_id' => NULL, 'google_analytics_trackingpage_enabled' => false, 'google_analytics_landingpage_enabled' => false, 'google_analytics_anonymize_ip' => false, 'facebook_pixel_id' => NULL, 'facebook_pixel_trackingpage_enabled' => false, 'facebook_pixel_landingpage_enabled' => false, 'do_not_track_404_anonymous' => false]]], 'MauticPluginBundle' => ['isPlugin' => false, 'base' => 'Plugin', 'bundle' => 'PluginBundle', 'relative' => 'app/bundles/PluginBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle'), 'namespace' => 'Mautic\\PluginBundle', 'symfonyBundleName' => 'MauticPluginBundle', 'bundleClass' => 'Mautic\\PluginBundle\\MauticPluginBundle', 'permissionClasses' => ['Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions' => 'Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions'], 'config' => ['routes' => ['main' => ['mautic_integration_auth_callback_secure' => ['path' => '/plugins/integrations/authcallback/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction'], 'mautic_integration_auth_postauth_secure' => ['path' => '/plugins/integrations/authstatus/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction'], 'mautic_plugin_index' => ['path' => '/plugins', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::indexAction'], 'mautic_plugin_config' => ['path' => '/plugins/config/{name}/{page}', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::configAction'], 'mautic_plugin_info' => ['path' => '/plugins/info/{name}', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::infoAction'], 'mautic_plugin_reload' => ['path' => '/plugins/reload', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::reloadAction']], 'public' => ['mautic_integration_auth_user' => ['path' => '/plugins/integrations/authuser/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authUserAction'], 'mautic_integration_auth_callback' => ['path' => '/plugins/integrations/authcallback/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction'], 'mautic_integration_auth_postauth' => ['path' => '/plugins/integrations/authstatus/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction']]], 'menu' => ['admin' => ['priority' => 50, 'items' => ['mautic.plugin.plugins' => ['id' => 'mautic_plugin_root', 'iconClass' => 'fa-plus-circle', 'access' => 'plugin:plugins:manage', 'route' => 'mautic_plugin_index']]]], 'services' => ['other' => ['mautic.helper.integration' => ['class' => 'Mautic\\PluginBundle\\Helper\\IntegrationHelper', 'arguments' => [0 => 'service_container', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.helper.paths', 3 => 'mautic.helper.bundle', 4 => 'mautic.helper.core_parameters', 5 => 'twig', 6 => 'mautic.plugin.model.plugin']], 'mautic.plugin.helper.reload' => ['class' => 'Mautic\\PluginBundle\\Helper\\ReloadHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.factory']]], 'facades' => ['mautic.plugin.facade.reload' => ['class' => 'Mautic\\PluginBundle\\Facade\\ReloadFacade', 'arguments' => [0 => 'mautic.plugin.model.plugin', 1 => 'mautic.plugin.helper.reload', 2 => 'translator']]]]]], 'MauticPointBundle' => ['isPlugin' => false, 'base' => 'Point', 'bundle' => 'PointBundle', 'relative' => 'app/bundles/PointBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PointBundle'), 'namespace' => 'Mautic\\PointBundle', 'symfonyBundleName' => 'MauticPointBundle', 'bundleClass' => 'Mautic\\PointBundle\\MauticPointBundle', 'permissionClasses' => ['Mautic\\PointBundle\\Security\\Permissions\\PointPermissions' => 'Mautic\\PointBundle\\Security\\Permissions\\PointPermissions'], 'config' => ['routes' => ['main' => ['mautic_pointtriggerevent_action' => ['path' => '/points/triggers/events/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerEventController::executeAction'], 'mautic_pointtrigger_index' => ['path' => '/points/triggers/{page}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::indexAction'], 'mautic_pointtrigger_action' => ['path' => '/points/triggers/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::executeAction'], 'mautic_point_index' => ['path' => '/points/{page}', 'controller' => 'Mautic\\PointBundle\\Controller\\PointController::indexAction'], 'mautic_point_action' => ['path' => '/points/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\PointController::executeAction']], 'api' => ['mautic_api_pointactionsstandard' => ['standard_entity' => true, 'name' => 'points', 'path' => '/points', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController'], 'mautic_api_getpointactiontypes' => ['path' => '/points/actions/types', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::getPointActionTypesAction'], 'mautic_api_pointtriggersstandard' => ['standard_entity' => true, 'name' => 'triggers', 'path' => '/points/triggers', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController'], 'mautic_api_getpointtriggereventtypes' => ['path' => '/points/triggers/events/types', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::getPointTriggerEventTypesAction'], 'mautic_api_pointtriggerdeleteevents' => ['path' => '/points/triggers/{triggerId}/events/delete', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::deletePointTriggerEventsAction', 'method' => 'DELETE'], 'mautic_api_adjustcontactpoints' => ['path' => '/contacts/{leadId}/points/{operator}/{delta}', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::adjustPointsAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.points.menu.root' => ['id' => 'mautic_points_root', 'iconClass' => 'fa-calculator', 'access' => [0 => 'point:points:view', 1 => 'point:triggers:view'], 'priority' => 30, 'children' => ['mautic.point.menu.index' => ['route' => 'mautic_point_index', 'access' => 'point:points:view'], 'mautic.point.trigger.menu.index' => ['route' => 'mautic_pointtrigger_index', 'access' => 'point:triggers:view']]]]], 'categories' => ['point' => NULL], 'services' => ['repositories' => ['mautic.point.repository.lead_point_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PointBundle\\Entity\\LeadPointLog']], 'mautic.point.repository.lead_trigger_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PointBundle\\Entity\\LeadTriggerLog']]]]]], 'MauticReportBundle' => ['isPlugin' => false, 'base' => 'Report', 'bundle' => 'ReportBundle', 'relative' => 'app/bundles/ReportBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle'), 'namespace' => 'Mautic\\ReportBundle', 'symfonyBundleName' => 'MauticReportBundle', 'bundleClass' => 'Mautic\\ReportBundle\\MauticReportBundle', 'permissionClasses' => ['Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions' => 'Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions'], 'config' => ['routes' => ['main' => ['mautic_report_index' => ['path' => '/reports/{page}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::indexAction'], 'mautic_report_export' => ['path' => '/reports/view/{objectId}/export/{format}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::exportAction', 'defaults' => ['format' => 'csv']], 'mautic_report_download' => ['path' => '/reports/download/{reportId}/{format}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::downloadAction', 'defaults' => ['format' => 'csv']], 'mautic_report_view' => ['path' => '/reports/view/{objectId}/{reportPage}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::viewAction', 'defaults' => ['reportPage' => 1], 'requirements' => ['reportPage' => '\\d+']], 'mautic_report_schedule_preview' => ['path' => '/reports/schedule/preview/{isScheduled}/{scheduleUnit}/{scheduleDay}/{scheduleMonthFrequency}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::indexAction', 'defaults' => ['isScheduled' => 0, 'scheduleUnit' => '', 'scheduleDay' => '', 'scheduleMonthFrequency' => '']], 'mautic_report_schedule' => ['path' => '/reports/schedule/{reportId}/now', 'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::nowAction'], 'mautic_report_action' => ['path' => '/reports/{objectAction}/{objectId}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::executeAction']], 'api' => ['mautic_api_getreports' => ['path' => '/reports', 'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getEntitiesAction'], 'mautic_api_getreport' => ['path' => '/reports/{id}', 'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getReportAction']]], 'menu' => ['main' => ['mautic.report.reports' => ['route' => 'mautic_report_index', 'iconClass' => 'fa-line-chart', 'access' => [0 => 'report:reports:viewown', 1 => 'report:reports:viewother'], 'priority' => 20]]], 'services' => ['helpers' => ['mautic.report.helper.report' => ['class' => 'Mautic\\ReportBundle\\Helper\\ReportHelper', 'alias' => 'report']], 'validator' => ['mautic.report.validator.schedule_is_valid_validator' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator', 'arguments' => [0 => 'mautic.report.model.scheduler_builder'], 'tag' => 'validator.constraint_validator']], 'other' => ['mautic.report.model.scheduler_builder' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerBuilder', 'arguments' => [0 => 'mautic.report.model.scheduler_template_factory']], 'mautic.report.model.scheduler_template_factory' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Factory\\SchedulerTemplateFactory', 'arguments' => []], 'mautic.report.model.scheduler_date_builder' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Date\\DateBuilder', 'arguments' => [0 => 'mautic.report.model.scheduler_builder']], 'mautic.report.model.scheduler_planner' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SchedulerPlanner', 'arguments' => [0 => 'mautic.report.model.scheduler_date_builder', 1 => 'doctrine.orm.default_entity_manager']], 'mautic.report.model.send_schedule' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SendSchedule', 'arguments' => [0 => 'mautic.helper.mailer', 1 => 'mautic.report.model.message_schedule', 2 => 'mautic.report.model.file_handler']], 'mautic.report.model.file_handler' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\FileHandler', 'arguments' => [0 => 'mautic.helper.file_path_resolver', 1 => 'mautic.helper.file_properties', 2 => 'mautic.helper.core_parameters']], 'mautic.report.model.message_schedule' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\MessageSchedule', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.file_properties', 2 => 'mautic.helper.core_parameters', 3 => 'router']], 'mautic.report.model.report_data_adapter' => ['class' => 'Mautic\\ReportBundle\\Adapter\\ReportDataAdapter', 'arguments' => [0 => 'mautic.report.model.report']]]], 'parameters' => ['report_temp_dir' => '%kernel.project_dir%/media/files/temp', 'report_export_batch_size' => 1000, 'report_export_max_filesize_in_bytes' => 5000000, 'csv_always_enclose' => false]]], 'MauticSmsBundle' => ['isPlugin' => false, 'base' => 'Sms', 'bundle' => 'SmsBundle', 'relative' => 'app/bundles/SmsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle'), 'namespace' => 'Mautic\\SmsBundle', 'symfonyBundleName' => 'MauticSmsBundle', 'bundleClass' => 'Mautic\\SmsBundle\\MauticSmsBundle', 'permissionClasses' => ['Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions' => 'Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions'], 'config' => ['services' => ['helpers' => ['mautic.helper.sms' => ['class' => 'Mautic\\SmsBundle\\Helper\\SmsHelper', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.lead.model.lead', 2 => 'mautic.helper.phone_number', 3 => 'mautic.sms.model.sms', 4 => 'mautic.helper.integration', 5 => 'mautic.lead.model.dnc'], 'alias' => 'sms_helper']], 'other' => ['mautic.sms.transport_chain' => ['class' => 'Mautic\\SmsBundle\\Sms\\TransportChain', 'arguments' => [0 => '%mautic.sms_transport%', 1 => 'mautic.helper.integration', 2 => 'monolog.logger.mautic']], 'mautic.sms.callback_handler_container' => ['class' => 'Mautic\\SmsBundle\\Callback\\HandlerContainer'], 'mautic.sms.helper.contact' => ['class' => 'Mautic\\SmsBundle\\Helper\\ContactHelper', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.helper.phone_number']], 'mautic.sms.helper.reply' => ['class' => 'Mautic\\SmsBundle\\Helper\\ReplyHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'monolog.logger.mautic', 2 => 'mautic.tracker.contact']], 'mautic.sms.twilio.configuration' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\Configuration', 'arguments' => [0 => 'mautic.helper.integration']], 'mautic.sms.twilio.transport' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioTransport', 'arguments' => [0 => 'mautic.sms.twilio.configuration', 1 => 'monolog.logger.mautic'], 'tag' => 'mautic.sms_transport', 'tagArguments' => ['integrationAlias' => 'Twilio'], 'serviceAliases' => [0 => 'sms_api', 1 => 'mautic.sms.api']], 'mautic.sms.twilio.callback' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioCallback', 'arguments' => [0 => 'mautic.sms.helper.contact', 1 => 'mautic.sms.twilio.configuration'], 'tag' => 'mautic.sms_callback_handler'], 'mautic.sms.transport.twilio' => ['class' => 'Mautic\\SmsBundle\\Api\\TwilioApi', 'arguments' => [0 => 'mautic.sms.twilio.configuration', 1 => 'monolog.logger.mautic']], 'mautic.sms.broadcast.executioner' => ['class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastExecutioner', 'arguments' => [0 => 'mautic.sms.model.sms', 1 => 'mautic.sms.broadcast.query', 2 => 'translator', 3 => 'mautic.lead.repository.lead']], 'mautic.sms.broadcast.query' => ['class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastQuery', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.sms.model.sms']]], 'integrations' => ['mautic.integration.twilio' => ['class' => 'Mautic\\SmsBundle\\Integration\\TwilioIntegration', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.cache_storage', 2 => 'doctrine.orm.entity_manager', 3 => 'session', 4 => 'request_stack', 5 => 'router', 6 => 'translator', 7 => 'logger', 8 => 'mautic.helper.encryption', 9 => 'mautic.lead.model.lead', 10 => 'mautic.lead.model.company', 11 => 'mautic.helper.paths', 12 => 'mautic.core.model.notification', 13 => 'mautic.lead.model.field', 14 => 'mautic.plugin.model.integration_entity', 15 => 'mautic.lead.model.dnc']]], 'repositories' => ['mautic.sms.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\SmsBundle\\Entity\\Stat']]]], 'routes' => ['main' => ['mautic_sms_index' => ['path' => '/sms/{page}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::indexAction'], 'mautic_sms_action' => ['path' => '/sms/{objectAction}/{objectId}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::executeAction'], 'mautic_sms_contacts' => ['path' => '/sms/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::contactsAction']], 'public' => ['mautic_sms_callback' => ['path' => '/sms/{transport}/callback', 'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction'], 'mautic_receive_sms' => ['path' => '/sms/receive', 'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction', 'defaults' => ['transport' => 'twilio']]], 'api' => ['mautic_api_smsesstandard' => ['standard_entity' => true, 'name' => 'smses', 'path' => '/smses', 'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController'], 'mautic_api_smses_send' => ['path' => '/smses/{id}/contact/{contactId}/send', 'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController::sendAction']]], 'menu' => ['main' => ['items' => ['mautic.sms.smses' => ['route' => 'mautic_sms_index', 'access' => [0 => 'sms:smses:viewown', 1 => 'sms:smses:viewother'], 'parent' => 'mautic.core.channels', 'checks' => ['integration' => ['Twilio' => ['enabled' => true]]], 'priority' => 70]]]], 'parameters' => ['sms_enabled' => false, 'sms_username' => NULL, 'sms_password' => NULL, 'sms_sending_phone_number' => NULL, 'sms_frequency_number' => 0, 'sms_frequency_time' => 'DAY', 'sms_transport' => 'mautic.sms.twilio.transport']]], 'MauticStageBundle' => ['isPlugin' => false, 'base' => 'Stage', 'bundle' => 'StageBundle', 'relative' => 'app/bundles/StageBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/StageBundle'), 'namespace' => 'Mautic\\StageBundle', 'symfonyBundleName' => 'MauticStageBundle', 'bundleClass' => 'Mautic\\StageBundle\\MauticStageBundle', 'permissionClasses' => ['Mautic\\StageBundle\\Security\\Permissions\\StagePermissions' => 'Mautic\\StageBundle\\Security\\Permissions\\StagePermissions'], 'config' => ['routes' => ['main' => ['mautic_stage_index' => ['path' => '/stages/{page}', 'controller' => 'Mautic\\StageBundle\\Controller\\StageController::indexAction'], 'mautic_stage_action' => ['path' => '/stages/{objectAction}/{objectId}', 'controller' => 'Mautic\\StageBundle\\Controller\\StageController::executeAction']], 'api' => ['mautic_api_stagesstandard' => ['standard_entity' => true, 'name' => 'stages', 'path' => '/stages', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController'], 'mautic_api_stageddcontact' => ['path' => '/stages/{id}/contact/{contactId}/add', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::addContactAction', 'method' => 'POST'], 'mautic_api_stageremovecontact' => ['path' => '/stages/{id}/contact/{contactId}/remove', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::removeContactAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.stages.menu.index' => ['route' => 'mautic_stage_index', 'iconClass' => 'fa-tachometer', 'access' => [0 => 'stage:stages:view'], 'priority' => 25]]], 'categories' => ['stage' => NULL], 'services' => ['repositories' => ['mautic.stage.repository.lead_stage_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\StageBundle\\Entity\\LeadStageLog']], 'mautic.stage.repository.stage' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\StageBundle\\Entity\\Stage']]]]]], 'MauticStatsBundle' => ['isPlugin' => false, 'base' => 'Stats', 'bundle' => 'StatsBundle', 'relative' => 'app/bundles/StatsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/StatsBundle'), 'namespace' => 'Mautic\\StatsBundle', 'symfonyBundleName' => 'MauticStatsBundle', 'bundleClass' => 'Mautic\\StatsBundle\\MauticStatsBundle', 'permissionClasses' => [], 'config' => ['services' => ['other' => ['mautic.stats.aggregate.collector' => ['class' => 'Mautic\\StatsBundle\\Aggregate\\Collector', 'arguments' => [0 => 'event_dispatcher']]]]]], 'MauticUserBundle' => ['isPlugin' => false, 'base' => 'User', 'bundle' => 'UserBundle', 'relative' => 'app/bundles/UserBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/UserBundle'), 'namespace' => 'Mautic\\UserBundle', 'symfonyBundleName' => 'MauticUserBundle', 'bundleClass' => 'Mautic\\UserBundle\\MauticUserBundle', 'permissionClasses' => ['Mautic\\UserBundle\\Security\\Permissions\\UserPermissions' => 'Mautic\\UserBundle\\Security\\Permissions\\UserPermissions'], 'config' => ['menu' => ['admin' => ['mautic.user.users' => ['access' => 'user:users:view', 'route' => 'mautic_user_index', 'iconClass' => 'fa-users'], 'mautic.user.roles' => ['access' => 'user:roles:view', 'route' => 'mautic_role_index', 'iconClass' => 'fa-lock']]], 'routes' => ['main' => ['login' => ['path' => '/login', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginAction'], 'mautic_user_logincheck' => ['path' => '/login_check', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginCheckAction'], 'mautic_user_logout' => ['path' => '/logout'], 'mautic_sso_login' => ['path' => '/sso_login/{integration}', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginAction'], 'mautic_sso_login_check' => ['path' => '/sso_login_check/{integration}', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginCheckAction'], 'lightsaml_sp.login' => ['path' => '/saml/login', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::loginAction'], 'lightsaml_sp.login_check' => ['path' => '/saml/login_check'], 'mautic_user_index' => ['path' => '/users/{page}', 'controller' => 'Mautic\\UserBundle\\Controller\\UserController::indexAction'], 'mautic_user_action' => ['path' => '/users/{objectAction}/{objectId}', 'controller' => 'Mautic\\UserBundle\\Controller\\UserController::executeAction'], 'mautic_role_index' => ['path' => '/roles/{page}', 'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::indexAction'], 'mautic_role_action' => ['path' => '/roles/{objectAction}/{objectId}', 'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::executeAction'], 'mautic_user_account' => ['path' => '/account', 'controller' => 'Mautic\\UserBundle\\Controller\\ProfileController::indexAction']], 'api' => ['mautic_api_usersstandard' => ['standard_entity' => true, 'name' => 'users', 'path' => '/users', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController'], 'mautic_api_getself' => ['path' => '/users/self', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getSelfAction'], 'mautic_api_checkpermission' => ['path' => '/users/{id}/permissioncheck', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::isGrantedAction', 'method' => 'POST'], 'mautic_api_getuserroles' => ['path' => '/users/list/roles', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getRolesAction'], 'mautic_api_rolesstandard' => ['standard_entity' => true, 'name' => 'roles', 'path' => '/roles', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\RoleApiController']], 'public' => ['mautic_user_passwordreset' => ['path' => '/passwordreset', 'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetAction'], 'mautic_user_passwordresetconfirm' => ['path' => '/passwordresetconfirm', 'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetConfirmAction'], 'lightsaml_sp.metadata' => ['path' => '/saml/metadata.xml', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::metadataAction'], 'lightsaml_sp.discovery' => ['path' => '/saml/discovery', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::discoveryAction']]], 'services' => ['other' => ['mautic.user.manager' => ['class' => 'Doctrine\\ORM\\EntityManager', 'arguments' => 'Mautic\\UserBundle\\Entity\\User', 'factory' => [0 => '@doctrine', 1 => 'getManagerForClass']], 'mautic.permission.manager' => ['class' => 'Doctrine\\ORM\\EntityManager', 'arguments' => 'Mautic\\UserBundle\\Entity\\Permission', 'factory' => [0 => '@doctrine', 1 => 'getManagerForClass']], 'mautic.user.form_guard_authenticator' => ['class' => 'Mautic\\UserBundle\\Security\\Authenticator\\FormAuthenticator', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'security.password_hasher', 2 => 'event_dispatcher', 3 => 'request_stack', 4 => 'security.csrf.token_manager', 5 => 'router']], 'mautic.user.preauth_authenticator' => ['class' => 'Mautic\\UserBundle\\Security\\Authenticator\\PreAuthAuthenticator', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'event_dispatcher', 2 => 'request_stack', 3 => '', 4 => ''], 'public' => false], 'mautic.user.provider' => ['class' => 'Mautic\\UserBundle\\Security\\Provider\\UserProvider', 'arguments' => [0 => 'mautic.user.repository', 1 => 'mautic.permission.repository', 2 => 'session', 3 => 'event_dispatcher', 4 => 'security.password_hasher']], 'mautic.security.authentication_listener' => ['class' => 'Mautic\\UserBundle\\Security\\Firewall\\AuthenticationListener', 'arguments' => [0 => 'mautic.security.authentication_handler', 1 => 'security.token_storage', 2 => 'security.authentication.manager', 3 => 'monolog.logger', 4 => 'event_dispatcher', 5 => '', 6 => 'mautic.permission.repository', 7 => 'doctrine.orm.default_entity_manager'], 'public' => false], 'mautic.security.authentication_handler' => ['class' => 'Mautic\\UserBundle\\Security\\Authentication\\AuthenticationHandler', 'arguments' => [0 => 'router']], 'mautic.security.logout_handler' => ['class' => 'Mautic\\UserBundle\\EventListener\\LogoutListener', 'tagArguments' => ['event' => 'Symfony\\Component\\Security\\Http\\Event\\LogoutEvent'], 'tag' => 'kernel.event_listener', 'arguments' => [0 => 'mautic.user.model.user', 1 => 'event_dispatcher', 2 => 'mautic.helper.user']], 'mautic.security.saml.credential_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\CredentialsStore', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => '%mautic.saml_idp_entity_id%'], 'tag' => 'lightsaml.own_credential_store'], 'mautic.security.saml.trust_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\TrustOptionsStore', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => '%mautic.saml_idp_entity_id%'], 'tag' => 'lightsaml.trust_options_store'], 'mautic.security.saml.entity_descriptor_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\EntityDescriptorStore', 'arguments' => [0 => 'mautic.helper.core_parameters'], 'tag' => 'lightsaml.idp_entity_store'], 'mautic.security.saml.id_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\IdStore', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'lightsaml.system.time_provider']], 'mautic.security.saml.username_mapper' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserMapper', 'arguments' => [0 => ['email' => '%mautic.saml_idp_email_attribute%', 'username' => '%mautic.saml_idp_username_attribute%', 'firstname' => '%mautic.saml_idp_firstname_attribute%', 'lastname' => '%mautic.saml_idp_lastname_attribute%']]], 'mautic.security.saml.user_creator' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserCreator', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.security.saml.username_mapper', 2 => 'mautic.user.model.user', 3 => 'security.password_hasher', 4 => '%mautic.saml_idp_default_role%']], 'mautic.user.model.user_token_service' => ['class' => 'Mautic\\UserBundle\\Model\\UserToken\\UserTokenService', 'arguments' => [0 => 'mautic.helper.random', 1 => 'mautic.user.repository.user_token']]], 'repositories' => ['mautic.user.repository.user_token' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => [0 => 'Mautic\\UserBundle\\Entity\\UserToken'], 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository']], 'mautic.user.repository' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => 'Mautic\\UserBundle\\Entity\\User', 'factory' => [0 => '@mautic.user.manager', 1 => 'getRepository']], 'mautic.permission.repository' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => 'Mautic\\UserBundle\\Entity\\Permission', 'factory' => [0 => '@mautic.permission.manager', 1 => 'getRepository']]], 'fixtures' => ['mautic.user.fixture.role' => ['class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadRoleData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.user.model.role']], 'mautic.user.fixture.user' => ['class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadUserData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'security.password_hasher']]]], 'parameters' => ['saml_idp_metadata' => '', 'saml_idp_entity_id' => '', 'saml_idp_own_certificate' => '', 'saml_idp_own_private_key' => '', 'saml_idp_own_password' => '', 'saml_idp_email_attribute' => '', 'saml_idp_username_attribute' => '', 'saml_idp_firstname_attribute' => '', 'saml_idp_lastname_attribute' => '', 'saml_idp_default_role' => '']]], 'MauticWebhookBundle' => ['isPlugin' => false, 'base' => 'Webhook', 'bundle' => 'WebhookBundle', 'relative' => 'app/bundles/WebhookBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle'), 'namespace' => 'Mautic\\WebhookBundle', 'symfonyBundleName' => 'MauticWebhookBundle', 'bundleClass' => 'Mautic\\WebhookBundle\\MauticWebhookBundle', 'permissionClasses' => ['Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions' => 'Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions'], 'config' => ['routes' => ['main' => ['mautic_webhook_index' => ['path' => '/webhooks/{page}', 'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::indexAction'], 'mautic_webhook_action' => ['path' => '/webhooks/{objectAction}/{objectId}', 'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::executeAction']], 'api' => ['mautic_api_webhookstandard' => ['standard_entity' => true, 'name' => 'hooks', 'path' => '/hooks', 'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController'], 'mautic_api_webhookevents' => ['path' => '/hooks/triggers', 'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController::getTriggersAction']]], 'menu' => ['admin' => ['items' => ['mautic.webhook.webhooks' => ['id' => 'mautic_webhook_root', 'iconClass' => 'fa-exchange', 'access' => [0 => 'webhook:webhooks:viewown', 1 => 'webhook:webhooks:viewother'], 'route' => 'mautic_webhook_index']]]], 'services' => ['others' => ['mautic.webhook.notificator.webhookkillnotificator' => ['class' => 'Mautic\\WebhookBundle\\Notificator\\WebhookKillNotificator', 'arguments' => [0 => 'translator', 1 => 'router', 2 => 'mautic.core.model.notification', 3 => 'doctrine.orm.entity_manager', 4 => 'mautic.helper.mailer', 5 => 'mautic.helper.core_parameters']], 'mautic.webhook.campaign.helper' => ['class' => 'Mautic\\WebhookBundle\\Helper\\CampaignHelper', 'arguments' => [0 => 'mautic.http.client', 1 => 'mautic.lead.model.company', 2 => 'event_dispatcher']], 'mautic.webhook.http.client' => ['class' => 'Mautic\\WebhookBundle\\Http\\Client', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.http.client']]], 'repositories' => ['mautic.webhook.repository.queue' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\WebhookBundle\\Entity\\WebhookQueue']]]], 'parameters' => ['webhook_limit' => 10, 'webhook_time_limit' => 600, 'webhook_log_max' => 1000, 'clean_webhook_logs_in_background' => false, 'webhook_disable_limit' => 100, 'webhook_timeout' => 15, 'queue_mode' => 'immediate_process', 'events_orderby_dir' => 'ASC', 'webhook_email_details' => true]]], 'MauticCacheBundle' => ['isPlugin' => false, 'base' => 'Cache', 'bundle' => 'CacheBundle', 'relative' => 'app/bundles/CacheBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CacheBundle'), 'namespace' => 'Mautic\\CacheBundle', 'symfonyBundleName' => 'MauticCacheBundle', 'bundleClass' => 'Mautic\\CacheBundle\\MauticCacheBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => [], 'public' => [], 'api' => []], 'menu' => [], 'services' => ['events' => ['mautic.cache.clear_cache_subscriber' => ['class' => 'Mautic\\CacheBundle\\EventListener\\CacheClearSubscriber', 'tags' => [0 => 'kernel.cache_clearer'], 'arguments' => [0 => 'mautic.cache.provider', 1 => 'monolog.logger.mautic']]], 'other' => ['mautic.cache.provider' => ['class' => 'Mautic\\CacheBundle\\Cache\\CacheProvider', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'service_container']], 'mautic.cache.adapter.filesystem' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\FilesystemTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_prefix%', 1 => '%mautic.cache_lifetime%', 2 => '%mautic.tmp_path%'], 'tag' => 'mautic.cache.adapter'], 'mautic.cache.adapter.memcached' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\MemcachedTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_adapter_memcached%', 1 => '%mautic.cache_prefix%', 2 => '%mautic.cache_lifetime%'], 'tag' => 'mautic.cache.adapter'], 'mautic.cache.adapter.redis' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\RedisTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_adapter_redis%', 1 => '%mautic.cache_prefix%', 2 => '%mautic.cache_lifetime%', 3 => '%mautic.redis_primary_only%'], 'tag' => 'mautic.cache.adapter']], 'models' => [], 'validator' => []], 'parameters' => ['cache_adapter' => 'mautic.cache.adapter.filesystem', 'cache_prefix' => '', 'cache_lifetime' => 86400, 'cache_adapter_memcached' => ['servers' => [0 => 'memcached://localhost'], 'options' => ['compression' => true, 'libketama_compatible' => true, 'serializer' => 'igbinary']], 'cache_adapter_redis' => ['dsn' => 'redis://localhost', 'options' => ['lazy' => false, 'persistent' => 0, 'persistent_id' => NULL, 'timeout' => 30, 'read_timeout' => 0, 'retry_interval' => 0]]]]], 'MauticQueueBundle' => ['isPlugin' => false, 'base' => 'Queue', 'bundle' => 'QueueBundle', 'relative' => 'app/bundles/QueueBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/QueueBundle'), 'namespace' => 'Mautic\\QueueBundle', 'symfonyBundleName' => 'MauticQueueBundle', 'bundleClass' => 'Mautic\\QueueBundle\\MauticQueueBundle', 'permissionClasses' => [], 'config' => ['services' => ['other' => ['mautic.queue.service' => ['class' => 'Mautic\\QueueBundle\\Queue\\QueueService', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'event_dispatcher', 2 => 'monolog.logger.mautic']], 'mautic.queue.helper.rabbitmq_consumer' => ['class' => 'Mautic\\QueueBundle\\Helper\\RabbitMqConsumer', 'arguments' => [0 => 'mautic.queue.service']]]], 'parameters' => ['queue_protocol' => '', 'rabbitmq_host' => 'localhost', 'rabbitmq_port' => '5672', 'rabbitmq_vhost' => '/', 'rabbitmq_user' => 'guest', 'rabbitmq_password' => 'guest', 'rabbitmq_idle_timeout' => 0, 'rabbitmq_idle_timeout_exit_code' => 0, 'beanstalkd_host' => 'localhost', 'beanstalkd_port' => '11300', 'beanstalkd_timeout' => '60']]]], $this->parameters['mautic.plugin.bundles']);
    }

    /*
     * Gets the public 'mautic.helper.cache' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\CacheHelper
     */
    protected function getMautic_Helper_CacheService()
    {
        return $this->services['mautic.helper.cache'] = new \Mautic\CoreBundle\Helper\CacheHelper($this->targetDir.'', ($this->services['.container.private.session'] ?? $this->get_Container_Private_SessionService()), ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), ($this->services['kernel'] ?? $this->get('kernel', 1)));
    }

    /*
     * Gets the public 'mautic.helper.cache_storage' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\CacheStorageHelper
     */
    protected function getMautic_Helper_CacheStorageService()
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.helper.cache_storage'])) {
            return $this->services['mautic.helper.cache_storage'];
        }

        return $this->services['mautic.helper.cache_storage'] = new \Mautic\CoreBundle\Helper\CacheStorageHelper('db', $this->getEnv('nullable:resolve:MAUTIC_DB_TABLE_PREFIX'), $a, $this->targetDir.'');
    }

    /*
     * Gets the public 'mautic.helper.cookie' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\CookieHelper
     */
    protected function getMautic_Helper_CookieService()
    {
        return $this->services['mautic.helper.cookie'] = new \Mautic\CoreBundle\Helper\CookieHelper($this->getEnv('nullable:resolve:MAUTIC_COOKIE_PATH'), $this->getEnv('nullable:resolve:MAUTIC_COOKIE_DOMAIN'), $this->getEnv('bool:resolve:MAUTIC_COOKIE_SECURE'), $this->getEnv('bool:resolve:MAUTIC_COOKIE_HTTPONLY'), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'mautic.helper.core_parameters' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\CoreParametersHelper
     */
    protected function getMautic_Helper_CoreParametersService()
    {
        return $this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this);
    }

    /*
     * Gets the public 'mautic.helper.encryption' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\EncryptionHelper
     */
    protected function getMautic_Helper_EncryptionService()
    {
        return $this->services['mautic.helper.encryption'] = new \Mautic\CoreBundle\Helper\EncryptionHelper(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.cipher.openssl'] ?? ($this->services['mautic.cipher.openssl'] = new \Mautic\CoreBundle\Security\Cryptography\Cipher\Symmetric\OpenSSLCipher('prod'))));
    }

    /*
     * Gets the public 'mautic.helper.file_path_resolver' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\FilePathResolver
     */
    protected function getMautic_Helper_FilePathResolverService()
    {
        return $this->services['mautic.helper.file_path_resolver'] = new \Mautic\CoreBundle\Helper\FilePathResolver(($this->services['symfony.filesystem'] ?? ($this->services['symfony.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), ($this->services['mautic.helper.input_helper'] ?? ($this->services['mautic.helper.input_helper'] = new \Mautic\CoreBundle\Helper\InputHelper())));
    }

    /*
     * Gets the public 'mautic.helper.file_uploader' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\FileUploader
     */
    protected function getMautic_Helper_FileUploaderService()
    {
        return $this->services['mautic.helper.file_uploader'] = new \Mautic\CoreBundle\Helper\FileUploader(($this->services['mautic.helper.file_path_resolver'] ?? $this->getMautic_Helper_FilePathResolverService()));
    }

    /*
     * Gets the public 'mautic.helper.form.field_helper' shared service.
     *
     * @return \Mautic\FormBundle\Helper\FormFieldHelper
     */
    protected function getMautic_Helper_Form_FieldHelperService()
    {
        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->services['mautic.helper.form.field_helper'])) {
            return $this->services['mautic.helper.form.field_helper'];
        }

        return $this->services['mautic.helper.form.field_helper'] = new \Mautic\FormBundle\Helper\FormFieldHelper(($this->services['translator'] ?? $this->getTranslator2Service()), $a);
    }

    /*
     * Gets the public 'mautic.helper.input_helper' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\InputHelper
     */
    protected function getMautic_Helper_InputHelperService()
    {
        return $this->services['mautic.helper.input_helper'] = new \Mautic\CoreBundle\Helper\InputHelper();
    }

    /*
     * Gets the public 'mautic.helper.integration' shared service.
     *
     * @return \Mautic\PluginBundle\Helper\IntegrationHelper
     */
    protected function getMautic_Helper_IntegrationService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.helper.integration'])) {
            return $this->services['mautic.helper.integration'];
        }
        $b = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['mautic.helper.integration'])) {
            return $this->services['mautic.helper.integration'];
        }
        $c = ($this->services['Mautic\\PluginBundle\\Model\\PluginModel'] ?? $this->getPluginModelService());

        if (isset($this->services['mautic.helper.integration'])) {
            return $this->services['mautic.helper.integration'];
        }

        return $this->services['mautic.helper.integration'] = new \Mautic\PluginBundle\Helper\IntegrationHelper($this, $a, ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), ($this->services['mautic.helper.bundle'] ?? $this->getMautic_Helper_BundleService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $b, $c);
    }

    /*
     * Gets the public 'mautic.helper.ip_lookup' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\IpLookupHelper
     */
    protected function getMautic_Helper_IpLookupService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.helper.ip_lookup'])) {
            return $this->services['mautic.helper.ip_lookup'];
        }

        return $this->services['mautic.helper.ip_lookup'] = new \Mautic\CoreBundle\Helper\IpLookupHelper(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.ip_lookup'] ?? $this->getMautic_IpLookupService()));
    }

    /*
     * Gets the public 'mautic.helper.mailbox' shared service.
     *
     * @return \Mautic\EmailBundle\MonitoredEmail\Mailbox
     */
    protected function getMautic_Helper_MailboxService()
    {
        return $this->services['mautic.helper.mailbox'] = new \Mautic\EmailBundle\MonitoredEmail\Mailbox(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()));
    }

    /*
     * Gets the public 'mautic.helper.mailer' shared service.
     *
     * @return \Mautic\EmailBundle\Helper\MailHelper
     */
    protected function getMautic_Helper_MailerService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Factory\\MauticFactory'] ?? $this->getMauticFactoryService());

        if (isset($this->services['mautic.helper.mailer'])) {
            return $this->services['mautic.helper.mailer'];
        }
        $b = ($this->privates['mailer.transports'] ?? $this->getMailer_TransportsService());

        if (isset($this->services['mautic.helper.mailer'])) {
            return $this->services['mautic.helper.mailer'];
        }
        $c = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->services['mautic.helper.mailer'])) {
            return $this->services['mautic.helper.mailer'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.helper.mailer'])) {
            return $this->services['mautic.helper.mailer'];
        }

        return $this->services['mautic.helper.mailer'] = new \Mautic\EmailBundle\Helper\MailHelper($a, new \Symfony\Component\Mailer\Mailer($b, $c, $d));
    }

    /*
     * Gets the public 'mautic.helper.menu' shared service.
     *
     * @return \Mautic\CoreBundle\Menu\MenuHelper
     */
    protected function getMautic_Helper_MenuService()
    {
        $a = ($this->services['mautic.helper.integration'] ?? $this->getMautic_Helper_IntegrationService());

        if (isset($this->services['mautic.helper.menu'])) {
            return $this->services['mautic.helper.menu'];
        }

        return $this->services['mautic.helper.menu'] = new \Mautic\CoreBundle\Menu\MenuHelper(($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $a);
    }

    /*
     * Gets the public 'mautic.helper.paths' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\PathsHelper
     */
    protected function getMautic_Helper_PathsService()
    {
        return $this->services['mautic.helper.paths'] = new \Mautic\CoreBundle\Helper\PathsHelper(($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $this->targetDir.'', (\dirname(__DIR__, 3).'/logs'), \dirname(__DIR__, 4));
    }

    /*
     * Gets the public 'mautic.helper.random' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\RandomHelper\RandomHelper
     */
    protected function getMautic_Helper_RandomService()
    {
        return $this->services['mautic.helper.random'] = new \Mautic\CoreBundle\Helper\RandomHelper\RandomHelper();
    }

    /*
     * Gets the public 'mautic.helper.segment.count.cache' shared service.
     *
     * @return \Mautic\LeadBundle\Helper\SegmentCountCacheHelper
     */
    protected function getMautic_Helper_Segment_Count_CacheService()
    {
        $a = ($this->services['mautic.helper.cache_storage'] ?? $this->getMautic_Helper_CacheStorageService());

        if (isset($this->services['mautic.helper.segment.count.cache'])) {
            return $this->services['mautic.helper.segment.count.cache'];
        }

        return $this->services['mautic.helper.segment.count.cache'] = new \Mautic\LeadBundle\Helper\SegmentCountCacheHelper($a);
    }

    /*
     * Gets the public 'mautic.helper.theme' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\ThemeHelper
     */
    protected function getMautic_Helper_ThemeService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['mautic.helper.theme'])) {
            return $this->services['mautic.helper.theme'];
        }
        $b = ($this->services['mautic.integrations.helper.builder_integrations'] ?? $this->getMautic_Integrations_Helper_BuilderIntegrationsService());

        if (isset($this->services['mautic.helper.theme'])) {
            return $this->services['mautic.helper.theme'];
        }

        $this->services['mautic.helper.theme'] = $instance = new \Mautic\CoreBundle\Helper\ThemeHelper(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $a, ($this->services['translator'] ?? $this->getTranslator2Service()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.filesystem'] ?? ($this->services['mautic.filesystem'] = new \Mautic\CoreBundle\Helper\Filesystem())), ($this->services['symfony.finder'] ?? ($this->services['symfony.finder'] = new \Symfony\Component\Finder\Finder())), $b);

        $instance->setDefaultTheme($this->getEnv('nullable:resolve:MAUTIC_THEME'));

        return $instance;
    }

    /*
     * Gets the public 'mautic.helper.twig.analytics' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\AnalyticsHelper
     */
    protected function getMautic_Helper_Twig_AnalyticsService()
    {
        return $this->services['mautic.helper.twig.analytics'] = new \Mautic\CoreBundle\Twig\Helper\AnalyticsHelper(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.helper.twig.avatar' shared service.
     *
     * @return \Mautic\LeadBundle\Twig\Helper\AvatarHelper
     */
    protected function getMautic_Helper_Twig_AvatarService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] ?? $this->getAssetsHelperService());

        if (isset($this->services['mautic.helper.twig.avatar'])) {
            return $this->services['mautic.helper.twig.avatar'];
        }
        $b = ($this->services['mautic.helper.twig.gravatar'] ?? $this->getMautic_Helper_Twig_GravatarService());

        if (isset($this->services['mautic.helper.twig.avatar'])) {
            return $this->services['mautic.helper.twig.avatar'];
        }

        return $this->services['mautic.helper.twig.avatar'] = new \Mautic\LeadBundle\Twig\Helper\AvatarHelper($a, ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $b, ($this->services['mautic.helper.twig.default_avatar'] ?? $this->getMautic_Helper_Twig_DefaultAvatarService()));
    }

    /*
     * Gets the public 'mautic.helper.twig.button' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\ButtonHelper
     */
    protected function getMautic_Helper_Twig_ButtonService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['mautic.helper.twig.button'])) {
            return $this->services['mautic.helper.twig.button'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.helper.twig.button'])) {
            return $this->services['mautic.helper.twig.button'];
        }

        return $this->services['mautic.helper.twig.button'] = new \Mautic\CoreBundle\Twig\Helper\ButtonHelper($a, ($this->services['translator'] ?? $this->getTranslator2Service()), $b);
    }

    /*
     * Gets the public 'mautic.helper.twig.config' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\ConfigHelper
     */
    protected function getMautic_Helper_Twig_ConfigService()
    {
        return $this->services['mautic.helper.twig.config'] = new \Mautic\CoreBundle\Twig\Helper\ConfigHelper(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.helper.twig.content' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\ContentHelper
     */
    protected function getMautic_Helper_Twig_ContentService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['mautic.helper.twig.content'])) {
            return $this->services['mautic.helper.twig.content'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.helper.twig.content'])) {
            return $this->services['mautic.helper.twig.content'];
        }

        return $this->services['mautic.helper.twig.content'] = new \Mautic\CoreBundle\Twig\Helper\ContentHelper($a, $b);
    }

    /*
     * Gets the public 'mautic.helper.twig.date' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\DateHelper
     */
    protected function getMautic_Helper_Twig_DateService()
    {
        return $this->services['mautic.helper.twig.date'] = new \Mautic\CoreBundle\Twig\Helper\DateHelper($this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_FULL'), $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_SHORT'), $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_DATEONLY'), $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_TIMEONLY'), ($this->services['translator'] ?? $this->getTranslator2Service()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.helper.twig.default_avatar' shared service.
     *
     * @return \Mautic\LeadBundle\Twig\Helper\DefaultAvatarHelper
     */
    protected function getMautic_Helper_Twig_DefaultAvatarService()
    {
        $a = ($this->services['Mautic\\CoreBundle\\Twig\\Helper\\AssetsHelper'] ?? $this->getAssetsHelperService());

        if (isset($this->services['mautic.helper.twig.default_avatar'])) {
            return $this->services['mautic.helper.twig.default_avatar'];
        }

        return $this->services['mautic.helper.twig.default_avatar'] = new \Mautic\LeadBundle\Twig\Helper\DefaultAvatarHelper(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $a);
    }

    /*
     * Gets the public 'mautic.helper.twig.dnc_reason' shared service.
     *
     * @return \Mautic\LeadBundle\Twig\Helper\DncReasonHelper
     */
    protected function getMautic_Helper_Twig_DncReasonService()
    {
        return $this->services['mautic.helper.twig.dnc_reason'] = new \Mautic\LeadBundle\Twig\Helper\DncReasonHelper(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.helper.twig.formatter' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\FormatterHelper
     */
    protected function getMautic_Helper_Twig_FormatterService()
    {
        return $this->services['mautic.helper.twig.formatter'] = new \Mautic\CoreBundle\Twig\Helper\FormatterHelper(($this->services['mautic.helper.twig.date'] ?? $this->getMautic_Helper_Twig_DateService()), ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.helper.twig.gravatar' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\GravatarHelper
     */
    protected function getMautic_Helper_Twig_GravatarService()
    {
        $a = ($this->services['mautic.helper.twig.default_avatar'] ?? $this->getMautic_Helper_Twig_DefaultAvatarService());

        if (isset($this->services['mautic.helper.twig.gravatar'])) {
            return $this->services['mautic.helper.twig.gravatar'];
        }

        return $this->services['mautic.helper.twig.gravatar'] = new \Mautic\CoreBundle\Twig\Helper\GravatarHelper($a, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'mautic.helper.twig.mautibot' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\MautibotHelper
     */
    protected function getMautic_Helper_Twig_MautibotService()
    {
        return $this->services['mautic.helper.twig.mautibot'] = new \Mautic\CoreBundle\Twig\Helper\MautibotHelper();
    }

    /*
     * Gets the public 'mautic.helper.twig.menu' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\MenuHelper
     */
    protected function getMautic_Helper_Twig_MenuService()
    {
        $a = ($this->privates['knp_menu.helper'] ?? $this->getKnpMenu_HelperService());

        if (isset($this->services['mautic.helper.twig.menu'])) {
            return $this->services['mautic.helper.twig.menu'];
        }

        return $this->services['mautic.helper.twig.menu'] = new \Mautic\CoreBundle\Twig\Helper\MenuHelper($a);
    }

    /*
     * Gets the public 'mautic.helper.twig.security' shared service.
     *
     * @return \Mautic\CoreBundle\Twig\Helper\SecurityHelper
     */
    protected function getMautic_Helper_Twig_SecurityService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.helper.twig.security'])) {
            return $this->services['mautic.helper.twig.security'];
        }

        return $this->services['mautic.helper.twig.security'] = new \Mautic\CoreBundle\Twig\Helper\SecurityHelper(($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a, ($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()));
    }

    /*
     * Gets the public 'mautic.helper.update' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\UpdateHelper
     */
    protected function getMautic_Helper_UpdateService()
    {
        $a = ($this->services['mautic.helper.update_checks'] ?? $this->getMautic_Helper_UpdateChecksService());

        if (isset($this->services['mautic.helper.update'])) {
            return $this->services['mautic.helper.update'];
        }

        return $this->services['mautic.helper.update'] = new \Mautic\CoreBundle\Helper\UpdateHelper(($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.http.client'] ?? ($this->services['mautic.http.client'] = new \GuzzleHttp\Client())), ($this->services['mautic.helper.update.release_parser'] ?? $this->getMautic_Helper_Update_ReleaseParserService()), $a);
    }

    /*
     * Gets the public 'mautic.helper.update.release_parser' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\Update\Github\ReleaseParser
     */
    protected function getMautic_Helper_Update_ReleaseParserService()
    {
        return $this->services['mautic.helper.update.release_parser'] = new \Mautic\CoreBundle\Helper\Update\Github\ReleaseParser(($this->services['mautic.http.client'] ?? ($this->services['mautic.http.client'] = new \GuzzleHttp\Client())));
    }

    /*
     * Gets the public 'mautic.helper.update_checks' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\PreUpdateCheckHelper
     */
    protected function getMautic_Helper_UpdateChecksService()
    {
        $this->services['mautic.helper.update_checks'] = $instance = new \Mautic\CoreBundle\Helper\PreUpdateCheckHelper();

        $instance->addCheck(($this->services['mautic.update.checks.php'] ?? ($this->services['mautic.update.checks.php'] = new \Mautic\CoreBundle\Helper\Update\PreUpdateChecks\CheckPhpVersion())));
        $instance->addCheck(($this->services['mautic.update.checks.database'] ?? $this->getMautic_Update_Checks_DatabaseService()));

        return $instance;
    }

    /*
     * Gets the public 'mautic.helper.url' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\UrlHelper
     */
    protected function getMautic_Helper_UrlService()
    {
        return $this->services['mautic.helper.url'] = new \Mautic\CoreBundle\Helper\UrlHelper(($this->services['mautic.http.client'] ?? ($this->services['mautic.http.client'] = new \GuzzleHttp\Client())), $this->getEnv('nullable:resolve:MAUTIC_LINK_SHORTENER_URL'), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.helper.user' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\UserHelper
     */
    protected function getMautic_Helper_UserService()
    {
        return $this->services['mautic.helper.user'] = new \Mautic\CoreBundle\Helper\UserHelper(($this->services['.container.private.security.token_storage'] ?? $this->get_Container_Private_Security_TokenStorageService()));
    }

    /*
     * Gets the public 'mautic.http.client' shared autowired service.
     *
     * @return \GuzzleHttp\Client
     */
    protected function getMautic_Http_ClientService()
    {
        return $this->services['mautic.http.client'] = new \GuzzleHttp\Client();
    }

    /*
     * Gets the public 'mautic.install.configurator.step.check' shared service.
     *
     * @return \Mautic\InstallBundle\Configurator\Step\CheckStep
     */
    protected function getMautic_Install_Configurator_Step_CheckService()
    {
        $a = ($this->services['mautic.configurator'] ?? $this->getMautic_ConfiguratorService());

        if (isset($this->services['mautic.install.configurator.step.check'])) {
            return $this->services['mautic.install.configurator.step.check'];
        }

        return $this->services['mautic.install.configurator.step.check'] = new \Mautic\InstallBundle\Configurator\Step\CheckStep($a, \dirname(__DIR__, 4), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.cipher.openssl'] ?? ($this->services['mautic.cipher.openssl'] = new \Mautic\CoreBundle\Security\Cryptography\Cipher\Symmetric\OpenSSLCipher('prod'))));
    }

    /*
     * Gets the public 'mautic.install.configurator.step.doctrine' shared service.
     *
     * @return \Mautic\InstallBundle\Configurator\Step\DoctrineStep
     */
    protected function getMautic_Install_Configurator_Step_DoctrineService()
    {
        $a = ($this->services['mautic.configurator'] ?? $this->getMautic_ConfiguratorService());

        if (isset($this->services['mautic.install.configurator.step.doctrine'])) {
            return $this->services['mautic.install.configurator.step.doctrine'];
        }

        return $this->services['mautic.install.configurator.step.doctrine'] = new \Mautic\InstallBundle\Configurator\Step\DoctrineStep($a);
    }

    /*
     * Gets the public 'mautic.install.configurator.step.user' shared service.
     *
     * @return \Mautic\InstallBundle\Configurator\Step\UserStep
     */
    protected function getMautic_Install_Configurator_Step_UserService()
    {
        return $this->services['mautic.install.configurator.step.user'] = new \Mautic\InstallBundle\Configurator\Step\UserStep();
    }

    /*
     * Gets the public 'mautic.install.fixture.grape_js' shared service.
     *
     * @return \Mautic\InstallBundle\InstallFixtures\ORM\GrapesJsData
     */
    protected function getMautic_Install_Fixture_GrapeJsService()
    {
        return $this->services['mautic.install.fixture.grape_js'] = new \Mautic\InstallBundle\InstallFixtures\ORM\GrapesJsData();
    }

    /*
     * Gets the public 'mautic.install.fixture.lead_field' shared service.
     *
     * @return \Mautic\InstallBundle\InstallFixtures\ORM\LeadFieldData
     */
    protected function getMautic_Install_Fixture_LeadFieldService()
    {
        return $this->services['mautic.install.fixture.lead_field'] = new \Mautic\InstallBundle\InstallFixtures\ORM\LeadFieldData(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.install.fixture.report_data' shared service.
     *
     * @return \Mautic\InstallBundle\InstallFixtures\ORM\LoadReportData
     */
    protected function getMautic_Install_Fixture_ReportDataService()
    {
        return $this->services['mautic.install.fixture.report_data'] = new \Mautic\InstallBundle\InstallFixtures\ORM\LoadReportData();
    }

    /*
     * Gets the public 'mautic.install.fixture.role' shared service.
     *
     * @return \Mautic\InstallBundle\InstallFixtures\ORM\RoleData
     */
    protected function getMautic_Install_Fixture_RoleService()
    {
        return $this->services['mautic.install.fixture.role'] = new \Mautic\InstallBundle\InstallFixtures\ORM\RoleData(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.install.service' shared service.
     *
     * @return \Mautic\InstallBundle\Install\InstallService
     */
    protected function getMautic_Install_ServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.install.service'])) {
            return $this->services['mautic.install.service'];
        }
        $b = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->services['mautic.install.service'])) {
            return $this->services['mautic.install.service'];
        }
        $c = ($this->services['mautic.doctrine.loader.mautic_fixtures_loader'] ?? $this->getMautic_Doctrine_Loader_MauticFixturesLoaderService());

        if (isset($this->services['mautic.install.service'])) {
            return $this->services['mautic.install.service'];
        }

        return $this->services['mautic.install.service'] = new \Mautic\InstallBundle\Install\InstallService(($this->services['mautic.configurator'] ?? $this->getMautic_ConfiguratorService()), ($this->services['mautic.helper.cache'] ?? $this->getMautic_Helper_CacheService()), ($this->services['mautic.helper.paths'] ?? $this->getMautic_Helper_PathsService()), $a, ($this->services['translator'] ?? $this->getTranslator2Service()), ($this->services['kernel'] ?? $this->get('kernel', 1)), $b, ($this->privates['security.user_password_hasher'] ?? $this->getSecurity_UserPasswordHasherService()), $c);
    }

    /*
     * Gets the public 'mautic.integration.grapesjsbuilder' shared service.
     *
     * @return \MauticPlugin\GrapesJsBuilderBundle\Integration\GrapesJsBuilderIntegration
     */
    protected function getMautic_Integration_GrapesjsbuilderService()
    {
        return $this->services['mautic.integration.grapesjsbuilder'] = new \MauticPlugin\GrapesJsBuilderBundle\Integration\GrapesJsBuilderIntegration();
    }

    /*
     * Gets the public 'mautic.integrations.helper' shared service.
     *
     * @return \Mautic\IntegrationsBundle\Helper\IntegrationsHelper
     */
    protected function getMautic_Integrations_HelperService()
    {
        $a = ($this->services['mautic.plugin.integrations.repository.integration'] ?? $this->getMautic_Plugin_Integrations_Repository_IntegrationService());

        if (isset($this->services['mautic.integrations.helper'])) {
            return $this->services['mautic.integrations.helper'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.integrations.helper'])) {
            return $this->services['mautic.integrations.helper'];
        }

        $this->services['mautic.integrations.helper'] = $instance = new \Mautic\IntegrationsBundle\Helper\IntegrationsHelper($a, ($this->services['mautic.integrations.service.encryption'] ?? $this->getMautic_Integrations_Service_EncryptionService()), $b);

        $instance->addIntegration(($this->services['mautic.integration.grapesjsbuilder'] ?? ($this->services['mautic.integration.grapesjsbuilder'] = new \MauticPlugin\GrapesJsBuilderBundle\Integration\GrapesJsBuilderIntegration())));

        return $instance;
    }

    /*
     * Gets the public 'mautic.integrations.helper.builder_integrations' shared service.
     *
     * @return \Mautic\IntegrationsBundle\Helper\BuilderIntegrationsHelper
     */
    protected function getMautic_Integrations_Helper_BuilderIntegrationsService()
    {
        $a = ($this->services['mautic.integrations.helper'] ?? $this->getMautic_Integrations_HelperService());

        if (isset($this->services['mautic.integrations.helper.builder_integrations'])) {
            return $this->services['mautic.integrations.helper.builder_integrations'];
        }

        $this->services['mautic.integrations.helper.builder_integrations'] = $instance = new \Mautic\IntegrationsBundle\Helper\BuilderIntegrationsHelper($a);

        $instance->addIntegration(($this->services['grapesjsbuilder.integration.builder'] ?? ($this->services['grapesjsbuilder.integration.builder'] = new \MauticPlugin\GrapesJsBuilderBundle\Integration\Support\BuilderSupport())));

        return $instance;
    }

    /*
     * Gets the public 'mautic.integrations.service.encryption' shared service.
     *
     * @return \Mautic\IntegrationsBundle\Facade\EncryptionService
     */
    protected function getMautic_Integrations_Service_EncryptionService()
    {
        return $this->services['mautic.integrations.service.encryption'] = new \Mautic\IntegrationsBundle\Facade\EncryptionService(($this->services['mautic.helper.encryption'] ?? $this->getMautic_Helper_EncryptionService()));
    }

    /*
     * Gets the public 'mautic.integrations.subscriber.controller' shared service.
     *
     * @return \Mautic\IntegrationsBundle\EventListener\ControllerSubscriber
     */
    protected function getMautic_Integrations_Subscriber_ControllerService()
    {
        $a = ($this->services['mautic.integrations.helper'] ?? $this->getMautic_Integrations_HelperService());

        if (isset($this->services['mautic.integrations.subscriber.controller'])) {
            return $this->services['mautic.integrations.subscriber.controller'];
        }

        return $this->services['mautic.integrations.subscriber.controller'] = new \Mautic\IntegrationsBundle\EventListener\ControllerSubscriber($a, ($this->privates['controller_resolver'] ?? $this->getControllerResolverService()));
    }

    /*
     * Gets the public 'mautic.ip_lookup' shared service.
     *
     * @return \Mautic\CoreBundle\IpLookup\AbstractLookup
     */
    protected function getMautic_IpLookupService()
    {
        return $this->services['mautic.ip_lookup'] = ($this->services['mautic.ip_lookup.factory'] ?? $this->getMautic_IpLookup_FactoryService())->getService($this->getEnv('nullable:resolve:MAUTIC_IP_LOOKUP_SERVICE'), $this->getEnv('nullable:resolve:MAUTIC_IP_LOOKUP_AUTH'), $this->getEnv('json:resolve:MAUTIC_IP_LOOKUP_CONFIG'), ($this->services['mautic.http.client'] ?? ($this->services['mautic.http.client'] = new \GuzzleHttp\Client())));
    }

    /*
     * Gets the public 'mautic.ip_lookup.factory' shared service.
     *
     * @return \Mautic\CoreBundle\Factory\IpLookupFactory
     */
    protected function getMautic_IpLookup_FactoryService()
    {
        return $this->services['mautic.ip_lookup.factory'] = new \Mautic\CoreBundle\Factory\IpLookupFactory($this->parameters['mautic.ip_lookup_services'], ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.http.client'] ?? ($this->services['mautic.http.client'] = new \GuzzleHttp\Client())), $this->targetDir.'');
    }

    /*
     * Gets the public 'mautic.lead.factory.device_detector_factory' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\Factory\DeviceDetectorFactory\DeviceDetectorFactory
     */
    protected function getMautic_Lead_Factory_DeviceDetectorFactoryService()
    {
        return $this->services['mautic.lead.factory.device_detector_factory'] = new \Mautic\LeadBundle\Tracker\Factory\DeviceDetectorFactory\DeviceDetectorFactory(($this->services['mautic.cache.provider'] ?? $this->getMautic_Cache_ProviderService()));
    }

    /*
     * Gets the public 'mautic.lead.field.custom_field_column' shared service.
     *
     * @return \Mautic\LeadBundle\Field\CustomFieldColumn
     */
    protected function getMautic_Lead_Field_CustomFieldColumnService()
    {
        $a = ($this->services['mautic.schema.helper.column'] ?? $this->getMautic_Schema_Helper_ColumnService());

        if (isset($this->services['mautic.lead.field.custom_field_column'])) {
            return $this->services['mautic.lead.field.custom_field_column'];
        }
        $b = ($this->services['mautic.lead.field.lead_field_saver'] ?? $this->getMautic_Lead_Field_LeadFieldSaverService());

        if (isset($this->services['mautic.lead.field.custom_field_column'])) {
            return $this->services['mautic.lead.field.custom_field_column'];
        }
        $c = ($this->services['mautic.lead.field.custom_field_index'] ?? $this->getMautic_Lead_Field_CustomFieldIndexService());

        if (isset($this->services['mautic.lead.field.custom_field_column'])) {
            return $this->services['mautic.lead.field.custom_field_column'];
        }
        $d = ($this->services['mautic.lead.field.dispatcher.field_column_dispatcher'] ?? $this->getMautic_Lead_Field_Dispatcher_FieldColumnDispatcherService());

        if (isset($this->services['mautic.lead.field.custom_field_column'])) {
            return $this->services['mautic.lead.field.custom_field_column'];
        }

        return $this->services['mautic.lead.field.custom_field_column'] = new \Mautic\LeadBundle\Field\CustomFieldColumn($a, ($this->services['mautic.lead.field.schema_definition'] ?? ($this->services['mautic.lead.field.schema_definition'] = new \Mautic\LeadBundle\Field\SchemaDefinition())), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), $b, $c, $d, ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.lead.field.custom_field_index' shared service.
     *
     * @return \Mautic\LeadBundle\Field\CustomFieldIndex
     */
    protected function getMautic_Lead_Field_CustomFieldIndexService()
    {
        $a = ($this->services['mautic.schema.helper.index'] ?? $this->getMautic_Schema_Helper_IndexService());

        if (isset($this->services['mautic.lead.field.custom_field_index'])) {
            return $this->services['mautic.lead.field.custom_field_index'];
        }

        return $this->services['mautic.lead.field.custom_field_index'] = new \Mautic\LeadBundle\Field\CustomFieldIndex($a, ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.lead.field.fields_with_unique_identifier'] ?? $this->getMautic_Lead_Field_FieldsWithUniqueIdentifierService()));
    }

    /*
     * Gets the public 'mautic.lead.field.dispatcher.field_column_dispatcher' shared service.
     *
     * @return \Mautic\LeadBundle\Field\Dispatcher\FieldColumnDispatcher
     */
    protected function getMautic_Lead_Field_Dispatcher_FieldColumnDispatcherService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.field.dispatcher.field_column_dispatcher'])) {
            return $this->services['mautic.lead.field.dispatcher.field_column_dispatcher'];
        }

        return $this->services['mautic.lead.field.dispatcher.field_column_dispatcher'] = new \Mautic\LeadBundle\Field\Dispatcher\FieldColumnDispatcher($a, ($this->services['mautic.lead.field.settings.background_settings'] ?? $this->getMautic_Lead_Field_Settings_BackgroundSettingsService()));
    }

    /*
     * Gets the public 'mautic.lead.field.dispatcher.field_save_dispatcher' shared service.
     *
     * @return \Mautic\LeadBundle\Field\Dispatcher\FieldSaveDispatcher
     */
    protected function getMautic_Lead_Field_Dispatcher_FieldSaveDispatcherService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.field.dispatcher.field_save_dispatcher'])) {
            return $this->services['mautic.lead.field.dispatcher.field_save_dispatcher'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.field.dispatcher.field_save_dispatcher'])) {
            return $this->services['mautic.lead.field.dispatcher.field_save_dispatcher'];
        }

        return $this->services['mautic.lead.field.dispatcher.field_save_dispatcher'] = new \Mautic\LeadBundle\Field\Dispatcher\FieldSaveDispatcher($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.field.field_list' shared service.
     *
     * @return \Mautic\LeadBundle\Field\FieldList
     */
    protected function getMautic_Lead_Field_FieldListService()
    {
        return $this->services['mautic.lead.field.field_list'] = new \Mautic\LeadBundle\Field\FieldList(($this->services['mautic.lead.repository.field'] ?? $this->getMautic_Lead_Repository_FieldService()), ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.lead.field.fields_with_unique_identifier' shared service.
     *
     * @return \Mautic\LeadBundle\Field\FieldsWithUniqueIdentifier
     */
    protected function getMautic_Lead_Field_FieldsWithUniqueIdentifierService()
    {
        return $this->services['mautic.lead.field.fields_with_unique_identifier'] = new \Mautic\LeadBundle\Field\FieldsWithUniqueIdentifier(($this->services['mautic.lead.field.field_list'] ?? $this->getMautic_Lead_Field_FieldListService()));
    }

    /*
     * Gets the public 'mautic.lead.field.lead_field_saver' shared service.
     *
     * @return \Mautic\LeadBundle\Field\LeadFieldSaver
     */
    protected function getMautic_Lead_Field_LeadFieldSaverService()
    {
        $a = ($this->services['mautic.lead.repository.field'] ?? $this->getMautic_Lead_Repository_FieldService());

        if (isset($this->services['mautic.lead.field.lead_field_saver'])) {
            return $this->services['mautic.lead.field.lead_field_saver'];
        }
        $b = ($this->services['mautic.lead.field.dispatcher.field_save_dispatcher'] ?? $this->getMautic_Lead_Field_Dispatcher_FieldSaveDispatcherService());

        if (isset($this->services['mautic.lead.field.lead_field_saver'])) {
            return $this->services['mautic.lead.field.lead_field_saver'];
        }

        return $this->services['mautic.lead.field.lead_field_saver'] = new \Mautic\LeadBundle\Field\LeadFieldSaver($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.field.schema_definition' shared service.
     *
     * @return \Mautic\LeadBundle\Field\SchemaDefinition
     */
    protected function getMautic_Lead_Field_SchemaDefinitionService()
    {
        return $this->services['mautic.lead.field.schema_definition'] = new \Mautic\LeadBundle\Field\SchemaDefinition();
    }

    /*
     * Gets the public 'mautic.lead.field.settings.background_settings' shared service.
     *
     * @return \Mautic\LeadBundle\Field\Settings\BackgroundSettings
     */
    protected function getMautic_Lead_Field_Settings_BackgroundSettingsService()
    {
        return $this->services['mautic.lead.field.settings.background_settings'] = new \Mautic\LeadBundle\Field\Settings\BackgroundSettings(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.lead.fixture.categorizedleadlists' shared service.
     *
     * @return \Mautic\LeadBundle\DataFixtures\ORM\LoadCategorizedLeadListData
     */
    protected function getMautic_Lead_Fixture_CategorizedleadlistsService()
    {
        return $this->services['mautic.lead.fixture.categorizedleadlists'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadCategorizedLeadListData();
    }

    /*
     * Gets the public 'mautic.lead.fixture.category' shared service.
     *
     * @return \Mautic\LeadBundle\DataFixtures\ORM\LoadCategoryData
     */
    protected function getMautic_Lead_Fixture_CategoryService()
    {
        return $this->services['mautic.lead.fixture.category'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadCategoryData();
    }

    /*
     * Gets the public 'mautic.lead.fixture.company' shared service.
     *
     * @return \Mautic\LeadBundle\DataFixtures\ORM\LoadCompanyData
     */
    protected function getMautic_Lead_Fixture_CompanyService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\CompanyModel'] ?? $this->getCompanyModelService());

        if (isset($this->services['mautic.lead.fixture.company'])) {
            return $this->services['mautic.lead.fixture.company'];
        }

        return $this->services['mautic.lead.fixture.company'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadCompanyData($a);
    }

    /*
     * Gets the public 'mautic.lead.fixture.contact' shared service.
     *
     * @return \Mautic\LeadBundle\DataFixtures\ORM\LoadLeadData
     */
    protected function getMautic_Lead_Fixture_ContactService()
    {
        return $this->services['mautic.lead.fixture.contact'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadLeadData(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.lead.fixture.segment' shared service.
     *
     * @return \Mautic\LeadBundle\DataFixtures\ORM\LoadLeadListData
     */
    protected function getMautic_Lead_Fixture_SegmentService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['mautic.lead.fixture.segment'])) {
            return $this->services['mautic.lead.fixture.segment'];
        }

        return $this->services['mautic.lead.fixture.segment'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadLeadListData($a);
    }

    /*
     * Gets the public 'mautic.lead.fixture.test.click' shared service.
     *
     * @return \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadClickData
     */
    protected function getMautic_Lead_Fixture_Test_ClickService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['mautic.lead.fixture.test.click'])) {
            return $this->services['mautic.lead.fixture.test.click'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['mautic.lead.fixture.test.click'])) {
            return $this->services['mautic.lead.fixture.test.click'];
        }

        return $this->services['mautic.lead.fixture.test.click'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadClickData($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.fixture.test.dnc' shared service.
     *
     * @return \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadDncData
     */
    protected function getMautic_Lead_Fixture_Test_DncService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['mautic.lead.fixture.test.dnc'])) {
            return $this->services['mautic.lead.fixture.test.dnc'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['mautic.lead.fixture.test.dnc'])) {
            return $this->services['mautic.lead.fixture.test.dnc'];
        }

        return $this->services['mautic.lead.fixture.test.dnc'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadDncData($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.fixture.test.page_hit' shared service.
     *
     * @return \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadPageHitData
     */
    protected function getMautic_Lead_Fixture_Test_PageHitService()
    {
        return $this->services['mautic.lead.fixture.test.page_hit'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadPageHitData();
    }

    /*
     * Gets the public 'mautic.lead.fixture.test.segment' shared service.
     *
     * @return \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadSegmentsData
     */
    protected function getMautic_Lead_Fixture_Test_SegmentService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\ListModel'] ?? $this->getListModelService());

        if (isset($this->services['mautic.lead.fixture.test.segment'])) {
            return $this->services['mautic.lead.fixture.test.segment'];
        }
        $b = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['mautic.lead.fixture.test.segment'])) {
            return $this->services['mautic.lead.fixture.test.segment'];
        }

        return $this->services['mautic.lead.fixture.test.segment'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadSegmentsData($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.fixture.test.tag' shared service.
     *
     * @return \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadTagData
     */
    protected function getMautic_Lead_Fixture_Test_TagService()
    {
        return $this->services['mautic.lead.fixture.test.tag'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadTagData();
    }

    /*
     * Gets the public 'mautic.lead.helper.contact_request_helper' shared service.
     *
     * @return \Mautic\LeadBundle\Helper\ContactRequestHelper
     */
    protected function getMautic_Lead_Helper_ContactRequestHelperService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['mautic.lead.helper.contact_request_helper'])) {
            return $this->services['mautic.lead.helper.contact_request_helper'];
        }
        $b = ($this->services['mautic.tracker.contact'] ?? $this->getMautic_Tracker_ContactService());

        if (isset($this->services['mautic.lead.helper.contact_request_helper'])) {
            return $this->services['mautic.lead.helper.contact_request_helper'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.helper.contact_request_helper'])) {
            return $this->services['mautic.lead.helper.contact_request_helper'];
        }
        $d = ($this->services['mautic.lead.merger'] ?? $this->getMautic_Lead_MergerService());

        if (isset($this->services['mautic.lead.helper.contact_request_helper'])) {
            return $this->services['mautic.lead.helper.contact_request_helper'];
        }

        return $this->services['mautic.lead.helper.contact_request_helper'] = new \Mautic\LeadBundle\Helper\ContactRequestHelper($a, $b, ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), $c, $d);
    }

    /*
     * Gets the public 'mautic.lead.merger' shared service.
     *
     * @return \Mautic\LeadBundle\Deduplicate\ContactMerger
     */
    protected function getMautic_Lead_MergerService()
    {
        $a = ($this->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? $this->getLeadModelService());

        if (isset($this->services['mautic.lead.merger'])) {
            return $this->services['mautic.lead.merger'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.merger'])) {
            return $this->services['mautic.lead.merger'];
        }

        return $this->services['mautic.lead.merger'] = new \Mautic\LeadBundle\Deduplicate\ContactMerger($a, ($this->services['mautic.lead.repository.merged_records'] ?? $this->getMautic_Lead_Repository_MergedRecordsService()), $b, ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment.decorator.date.optionFactory' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\Date\DateOptionFactory
     */
    protected function getMautic_Lead_Model_LeadSegment_Decorator_Date_OptionFactoryService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_decorator_date'] ?? $this->getMautic_Lead_Model_LeadSegmentDecoratorDateService());

        if (isset($this->services['mautic.lead.model.lead_segment.decorator.date.optionFactory'])) {
            return $this->services['mautic.lead.model.lead_segment.decorator.date.optionFactory'];
        }

        return $this->services['mautic.lead.model.lead_segment.decorator.date.optionFactory'] = new \Mautic\LeadBundle\Segment\Decorator\Date\DateOptionFactory($a, ($this->services['mautic.lead.model.relative_date'] ?? $this->getMautic_Lead_Model_RelativeDateService()), ($this->services['mautic.lead.model.lead_segment.timezoneResolver'] ?? $this->getMautic_Lead_Model_LeadSegment_TimezoneResolverService()));
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment.timezoneResolver' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\Date\TimezoneResolver
     */
    protected function getMautic_Lead_Model_LeadSegment_TimezoneResolverService()
    {
        return $this->services['mautic.lead.model.lead_segment.timezoneResolver'] = new \Mautic\LeadBundle\Segment\Decorator\Date\TimezoneResolver(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))));
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_decorator_base' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\BaseDecorator
     */
    protected function getMautic_Lead_Model_LeadSegmentDecoratorBaseService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_filter_operator'] ?? $this->getMautic_Lead_Model_LeadSegmentFilterOperatorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_base'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_base'];
        }
        $b = ($this->services['mautic.lead.repository.lead_segment_filter_descriptor'] ?? $this->getMautic_Lead_Repository_LeadSegmentFilterDescriptorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_base'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_base'];
        }

        return $this->services['mautic.lead.model.lead_segment_decorator_base'] = new \Mautic\LeadBundle\Segment\Decorator\BaseDecorator($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_decorator_company' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\CompanyDecorator
     */
    protected function getMautic_Lead_Model_LeadSegmentDecoratorCompanyService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_filter_operator'] ?? $this->getMautic_Lead_Model_LeadSegmentFilterOperatorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_company'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_company'];
        }
        $b = ($this->services['mautic.lead.repository.lead_segment_filter_descriptor'] ?? $this->getMautic_Lead_Repository_LeadSegmentFilterDescriptorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_company'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_company'];
        }

        return $this->services['mautic.lead.model.lead_segment_decorator_company'] = new \Mautic\LeadBundle\Segment\Decorator\CompanyDecorator($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_decorator_custom_mapped' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\CustomMappedDecorator
     */
    protected function getMautic_Lead_Model_LeadSegmentDecoratorCustomMappedService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_filter_operator'] ?? $this->getMautic_Lead_Model_LeadSegmentFilterOperatorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'];
        }
        $b = ($this->services['mautic.lead.repository.lead_segment_filter_descriptor'] ?? $this->getMautic_Lead_Repository_LeadSegmentFilterDescriptorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'];
        }

        return $this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'] = new \Mautic\LeadBundle\Segment\Decorator\CustomMappedDecorator($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_decorator_date' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\DateDecorator
     */
    protected function getMautic_Lead_Model_LeadSegmentDecoratorDateService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_filter_operator'] ?? $this->getMautic_Lead_Model_LeadSegmentFilterOperatorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_date'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_date'];
        }
        $b = ($this->services['mautic.lead.repository.lead_segment_filter_descriptor'] ?? $this->getMautic_Lead_Repository_LeadSegmentFilterDescriptorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_date'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_date'];
        }

        return $this->services['mautic.lead.model.lead_segment_decorator_date'] = new \Mautic\LeadBundle\Segment\Decorator\DateDecorator($a, $b);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_decorator_factory' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Decorator\DecoratorFactory
     */
    protected function getMautic_Lead_Model_LeadSegmentDecoratorFactoryService()
    {
        $a = ($this->services['mautic.lead.repository.lead_segment_filter_descriptor'] ?? $this->getMautic_Lead_Repository_LeadSegmentFilterDescriptorService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }
        $b = ($this->services['mautic.lead.model.lead_segment_decorator_base'] ?? $this->getMautic_Lead_Model_LeadSegmentDecoratorBaseService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }
        $c = ($this->services['mautic.lead.model.lead_segment_decorator_custom_mapped'] ?? $this->getMautic_Lead_Model_LeadSegmentDecoratorCustomMappedService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }
        $d = ($this->services['mautic.lead.model.lead_segment.decorator.date.optionFactory'] ?? $this->getMautic_Lead_Model_LeadSegment_Decorator_Date_OptionFactoryService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }
        $e = ($this->services['mautic.lead.model.lead_segment_decorator_company'] ?? $this->getMautic_Lead_Model_LeadSegmentDecoratorCompanyService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }
        $f = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.model.lead_segment_decorator_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_decorator_factory'];
        }

        return $this->services['mautic.lead.model.lead_segment_decorator_factory'] = new \Mautic\LeadBundle\Segment\Decorator\DecoratorFactory($a, $b, $c, $d, $e, $f);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_filter_factory' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\ContactSegmentFilterFactory
     */
    protected function getMautic_Lead_Model_LeadSegmentFilterFactoryService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_schema_cache'] ?? $this->getMautic_Lead_Model_LeadSegmentSchemaCacheService());

        if (isset($this->services['mautic.lead.model.lead_segment_filter_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_filter_factory'];
        }
        $b = ($this->services['mautic.lead.model.lead_segment_decorator_factory'] ?? $this->getMautic_Lead_Model_LeadSegmentDecoratorFactoryService());

        if (isset($this->services['mautic.lead.model.lead_segment_filter_factory'])) {
            return $this->services['mautic.lead.model.lead_segment_filter_factory'];
        }

        return $this->services['mautic.lead.model.lead_segment_filter_factory'] = new \Mautic\LeadBundle\Segment\ContactSegmentFilterFactory($a, $this, $b);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_filter_operator' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\ContactSegmentFilterOperator
     */
    protected function getMautic_Lead_Model_LeadSegmentFilterOperatorService()
    {
        $a = ($this->services['mautic.lead.provider.fillterOperator'] ?? $this->getMautic_Lead_Provider_FillterOperatorService());

        if (isset($this->services['mautic.lead.model.lead_segment_filter_operator'])) {
            return $this->services['mautic.lead.model.lead_segment_filter_operator'];
        }

        return $this->services['mautic.lead.model.lead_segment_filter_operator'] = new \Mautic\LeadBundle\Segment\ContactSegmentFilterOperator($a);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_schema_cache' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\TableSchemaColumnsCache
     */
    protected function getMautic_Lead_Model_LeadSegmentSchemaCacheService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.model.lead_segment_schema_cache'])) {
            return $this->services['mautic.lead.model.lead_segment_schema_cache'];
        }

        return $this->services['mautic.lead.model.lead_segment_schema_cache'] = new \Mautic\LeadBundle\Segment\TableSchemaColumnsCache($a);
    }

    /*
     * Gets the public 'mautic.lead.model.lead_segment_service' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\ContactSegmentService
     */
    protected function getMautic_Lead_Model_LeadSegmentServiceService()
    {
        $a = ($this->services['mautic.lead.model.lead_segment_filter_factory'] ?? $this->getMautic_Lead_Model_LeadSegmentFilterFactoryService());

        if (isset($this->services['mautic.lead.model.lead_segment_service'])) {
            return $this->services['mautic.lead.model.lead_segment_service'];
        }
        $b = ($this->services['mautic.lead.repository.lead_segment_query_builder'] ?? $this->getMautic_Lead_Repository_LeadSegmentQueryBuilderService());

        if (isset($this->services['mautic.lead.model.lead_segment_service'])) {
            return $this->services['mautic.lead.model.lead_segment_service'];
        }

        return $this->services['mautic.lead.model.lead_segment_service'] = new \Mautic\LeadBundle\Segment\ContactSegmentService($a, $b, ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.lead.model.random_parameter_name' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\RandomParameterName
     */
    protected function getMautic_Lead_Model_RandomParameterNameService()
    {
        return $this->services['mautic.lead.model.random_parameter_name'] = new \Mautic\LeadBundle\Segment\RandomParameterName();
    }

    /*
     * Gets the public 'mautic.lead.model.relative_date' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\RelativeDate
     */
    protected function getMautic_Lead_Model_RelativeDateService()
    {
        return $this->services['mautic.lead.model.relative_date'] = new \Mautic\LeadBundle\Segment\RelativeDate(($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.lead.provider.fillterOperator' shared service.
     *
     * @return \Mautic\LeadBundle\Provider\FilterOperatorProvider
     */
    protected function getMautic_Lead_Provider_FillterOperatorService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.provider.fillterOperator'])) {
            return $this->services['mautic.lead.provider.fillterOperator'];
        }

        return $this->services['mautic.lead.provider.fillterOperator'] = new \Mautic\LeadBundle\Provider\FilterOperatorProvider($a, ($this->services['translator'] ?? $this->getTranslator2Service()));
    }

    /*
     * Gets the public 'mautic.lead.repository.company' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_CompanyService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.company'])) {
            return $this->services['mautic.lead.repository.company'];
        }

        $this->services['mautic.lead.repository.company'] = $instance = $a->getRepository('Mautic\\LeadBundle\\Entity\\Company');

        $instance->setUniqueIdentifiersOperator($this->getEnv('nullable:resolve:MAUTIC_COMPANY_UNIQUE_IDENTIFIERS_OPERATOR'));

        return $instance;
    }

    /*
     * Gets the public 'mautic.lead.repository.field' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_FieldService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.field'])) {
            return $this->services['mautic.lead.repository.field'];
        }

        return $this->services['mautic.lead.repository.field'] = $a->getRepository('Mautic\\LeadBundle\\Entity\\LeadField');
    }

    /*
     * Gets the public 'mautic.lead.repository.lead' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_LeadService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.lead'])) {
            return $this->services['mautic.lead.repository.lead'];
        }

        $this->services['mautic.lead.repository.lead'] = $instance = $a->getRepository('Mautic\\LeadBundle\\Entity\\Lead');

        $instance->setUniqueIdentifiersOperator($this->getEnv('nullable:resolve:MAUTIC_CONTACT_UNIQUE_IDENTIFIERS_OPERATOR'));
        $instance->setListLeadRepository(($this->services['mautic.lead.repository.list_lead'] ?? $this->getMautic_Lead_Repository_ListLeadService()));

        return $instance;
    }

    /*
     * Gets the public 'mautic.lead.repository.lead_device' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_LeadDeviceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.lead_device'])) {
            return $this->services['mautic.lead.repository.lead_device'];
        }

        return $this->services['mautic.lead.repository.lead_device'] = $a->getRepository('Mautic\\LeadBundle\\Entity\\LeadDevice');
    }

    /*
     * Gets the public 'mautic.lead.repository.lead_segment_filter_descriptor' shared service.
     *
     * @return \Mautic\LeadBundle\Services\ContactSegmentFilterDictionary
     */
    protected function getMautic_Lead_Repository_LeadSegmentFilterDescriptorService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.repository.lead_segment_filter_descriptor'])) {
            return $this->services['mautic.lead.repository.lead_segment_filter_descriptor'];
        }

        return $this->services['mautic.lead.repository.lead_segment_filter_descriptor'] = new \Mautic\LeadBundle\Services\ContactSegmentFilterDictionary($a);
    }

    /*
     * Gets the public 'mautic.lead.repository.lead_segment_query_builder' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Query\ContactSegmentQueryBuilder
     */
    protected function getMautic_Lead_Repository_LeadSegmentQueryBuilderService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.lead_segment_query_builder'])) {
            return $this->services['mautic.lead.repository.lead_segment_query_builder'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.lead.repository.lead_segment_query_builder'])) {
            return $this->services['mautic.lead.repository.lead_segment_query_builder'];
        }

        return $this->services['mautic.lead.repository.lead_segment_query_builder'] = new \Mautic\LeadBundle\Segment\Query\ContactSegmentQueryBuilder($a, ($this->services['mautic.lead.model.random_parameter_name'] ?? ($this->services['mautic.lead.model.random_parameter_name'] = new \Mautic\LeadBundle\Segment\RandomParameterName())), $b);
    }

    /*
     * Gets the public 'mautic.lead.repository.list_lead' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_ListLeadService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.list_lead'])) {
            return $this->services['mautic.lead.repository.list_lead'];
        }

        return $this->services['mautic.lead.repository.list_lead'] = $a->getRepository('Mautic\\LeadBundle\\Entity\\ListLead');
    }

    /*
     * Gets the public 'mautic.lead.repository.merged_records' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Lead_Repository_MergedRecordsService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.repository.merged_records'])) {
            return $this->services['mautic.lead.repository.merged_records'];
        }

        return $this->services['mautic.lead.repository.merged_records'] = $a->getRepository('Mautic\\LeadBundle\\Entity\\MergeRecord');
    }

    /*
     * Gets the public 'mautic.lead.segment.stat.chart.query.factory' shared service.
     *
     * @return \Mautic\LeadBundle\Segment\Stat\SegmentChartQueryFactory
     */
    protected function getMautic_Lead_Segment_Stat_Chart_Query_FactoryService()
    {
        return $this->services['mautic.lead.segment.stat.chart.query.factory'] = new \Mautic\LeadBundle\Segment\Stat\SegmentChartQueryFactory();
    }

    /*
     * Gets the public 'mautic.lead.service.contact_tracking_service' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\Service\ContactTrackingService\ContactTrackingService
     */
    protected function getMautic_Lead_Service_ContactTrackingServiceService()
    {
        $a = ($this->services['mautic.lead.repository.lead_device'] ?? $this->getMautic_Lead_Repository_LeadDeviceService());

        if (isset($this->services['mautic.lead.service.contact_tracking_service'])) {
            return $this->services['mautic.lead.service.contact_tracking_service'];
        }
        $b = ($this->services['mautic.lead.repository.merged_records'] ?? $this->getMautic_Lead_Repository_MergedRecordsService());

        if (isset($this->services['mautic.lead.service.contact_tracking_service'])) {
            return $this->services['mautic.lead.service.contact_tracking_service'];
        }

        return $this->services['mautic.lead.service.contact_tracking_service'] = new \Mautic\LeadBundle\Tracker\Service\ContactTrackingService\ContactTrackingService(($this->services['mautic.helper.cookie'] ?? $this->getMautic_Helper_CookieService()), $a, ($this->services['mautic.lead.repository.lead'] ?? $this->getMautic_Lead_Repository_LeadService()), $b, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'mautic.lead.service.device_creator_service' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\Service\DeviceCreatorService\DeviceCreatorService
     */
    protected function getMautic_Lead_Service_DeviceCreatorServiceService()
    {
        return $this->services['mautic.lead.service.device_creator_service'] = new \Mautic\LeadBundle\Tracker\Service\DeviceCreatorService\DeviceCreatorService();
    }

    /*
     * Gets the public 'mautic.lead.service.device_tracking_service' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\Service\DeviceTrackingService\DeviceTrackingService
     */
    protected function getMautic_Lead_Service_DeviceTrackingServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.lead.service.device_tracking_service'])) {
            return $this->services['mautic.lead.service.device_tracking_service'];
        }

        return $this->services['mautic.lead.service.device_tracking_service'] = new \Mautic\LeadBundle\Tracker\Service\DeviceTrackingService\DeviceTrackingService(($this->services['mautic.helper.cookie'] ?? $this->getMautic_Helper_CookieService()), $a, ($this->services['mautic.lead.repository.lead_device'] ?? $this->getMautic_Lead_Repository_LeadDeviceService()), ($this->services['mautic.helper.random'] ?? ($this->services['mautic.helper.random'] = new \Mautic\CoreBundle\Helper\RandomHelper\RandomHelper())), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()));
    }

    /*
     * Gets the public 'mautic.monolog.handler' shared service.
     *
     * @return \Mautic\CoreBundle\Monolog\Handler\FileLogHandler
     */
    protected function getMautic_Monolog_HandlerService()
    {
        $a = new \Monolog\Formatter\LineFormatter();
        $a->includeStacktraces(true);
        $a->ignoreEmptyContextAndExtra(true);

        return $this->services['mautic.monolog.handler'] = new \Mautic\CoreBundle\Monolog\Handler\FileLogHandler(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $a);
    }

    /*
     * Gets the public 'mautic.page.fixture.page' shared service.
     *
     * @return \Mautic\PageBundle\DataFixtures\ORM\LoadPageData
     */
    protected function getMautic_Page_Fixture_PageService()
    {
        $a = ($this->services['Mautic\\PageBundle\\Model\\PageModel'] ?? $this->getPageModelService());

        if (isset($this->services['mautic.page.fixture.page'])) {
            return $this->services['mautic.page.fixture.page'];
        }

        return $this->services['mautic.page.fixture.page'] = new \Mautic\PageBundle\DataFixtures\ORM\LoadPageData($a);
    }

    /*
     * Gets the public 'mautic.page.fixture.page_category' shared service.
     *
     * @return \Mautic\PageBundle\DataFixtures\ORM\LoadPageCategoryData
     */
    protected function getMautic_Page_Fixture_PageCategoryService()
    {
        $a = ($this->services['Mautic\\CategoryBundle\\Model\\CategoryModel'] ?? $this->getCategoryModelService());

        if (isset($this->services['mautic.page.fixture.page_category'])) {
            return $this->services['mautic.page.fixture.page_category'];
        }

        return $this->services['mautic.page.fixture.page_category'] = new \Mautic\PageBundle\DataFixtures\ORM\LoadPageCategoryData($a);
    }

    /*
     * Gets the public 'mautic.page.fixture.page_hit' shared service.
     *
     * @return \Mautic\PageBundle\DataFixtures\ORM\LoadPageHitData
     */
    protected function getMautic_Page_Fixture_PageHitService()
    {
        $a = ($this->services['Mautic\\PageBundle\\Model\\PageModel'] ?? $this->getPageModelService());

        if (isset($this->services['mautic.page.fixture.page_hit'])) {
            return $this->services['mautic.page.fixture.page_hit'];
        }

        return $this->services['mautic.page.fixture.page_hit'] = new \Mautic\PageBundle\DataFixtures\ORM\LoadPageHitData($a);
    }

    /*
     * Gets the public 'mautic.page.helper.token' shared service.
     *
     * @return \Mautic\PageBundle\Helper\TokenHelper
     */
    protected function getMautic_Page_Helper_TokenService()
    {
        $a = ($this->services['Mautic\\PageBundle\\Model\\PageModel'] ?? $this->getPageModelService());

        if (isset($this->services['mautic.page.helper.token'])) {
            return $this->services['mautic.page.helper.token'];
        }

        return $this->services['mautic.page.helper.token'] = new \Mautic\PageBundle\Helper\TokenHelper($a);
    }

    /*
     * Gets the public 'mautic.permission.manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getMautic_Permission_ManagerService()
    {
        return $this->services['mautic.permission.manager'] = ($this->services['doctrine'] ?? $this->getDoctrineService())->getManagerForClass('Mautic\\UserBundle\\Entity\\Permission');
    }

    /*
     * Gets the public 'mautic.permission.repository' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Permission_RepositoryService()
    {
        return $this->services['mautic.permission.repository'] = ($this->services['mautic.permission.manager'] ?? $this->getMautic_Permission_ManagerService())->getRepository('Mautic\\UserBundle\\Entity\\Permission');
    }

    /*
     * Gets the public 'mautic.plugin.integrations.repository.integration' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_Plugin_Integrations_Repository_IntegrationService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.plugin.integrations.repository.integration'])) {
            return $this->services['mautic.plugin.integrations.repository.integration'];
        }

        return $this->services['mautic.plugin.integrations.repository.integration'] = $a->getRepository('Mautic\\PluginBundle\\Entity\\Integration');
    }

    /*
     * Gets the public 'mautic.queue.service' shared service.
     *
     * @return \Mautic\QueueBundle\Queue\QueueService
     */
    protected function getMautic_Queue_ServiceService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.queue.service'])) {
            return $this->services['mautic.queue.service'];
        }

        return $this->services['mautic.queue.service'] = new \Mautic\QueueBundle\Queue\QueueService(($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $a, ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.schema.helper.column' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Helper\ColumnSchemaHelper
     */
    protected function getMautic_Schema_Helper_ColumnService()
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.schema.helper.column'])) {
            return $this->services['mautic.schema.helper.column'];
        }

        return $this->services['mautic.schema.helper.column'] = new \Mautic\CoreBundle\Doctrine\Helper\ColumnSchemaHelper($a, $this->getEnv('nullable:resolve:MAUTIC_DB_TABLE_PREFIX'));
    }

    /*
     * Gets the public 'mautic.schema.helper.index' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Helper\IndexSchemaHelper
     */
    protected function getMautic_Schema_Helper_IndexService()
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.schema.helper.index'])) {
            return $this->services['mautic.schema.helper.index'];
        }

        return $this->services['mautic.schema.helper.index'] = new \Mautic\CoreBundle\Doctrine\Helper\IndexSchemaHelper($a, $this->getEnv('nullable:resolve:MAUTIC_DB_TABLE_PREFIX'));
    }

    /*
     * Gets the public 'mautic.schema.helper.table' shared service.
     *
     * @return \Mautic\CoreBundle\Doctrine\Helper\TableSchemaHelper
     */
    protected function getMautic_Schema_Helper_TableService()
    {
        $a = ($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($this->services['mautic.schema.helper.table'])) {
            return $this->services['mautic.schema.helper.table'];
        }
        $b = ($this->services['mautic.schema.helper.column'] ?? $this->getMautic_Schema_Helper_ColumnService());

        if (isset($this->services['mautic.schema.helper.table'])) {
            return $this->services['mautic.schema.helper.table'];
        }

        return $this->services['mautic.schema.helper.table'] = new \Mautic\CoreBundle\Doctrine\Helper\TableSchemaHelper($a, $this->getEnv('nullable:resolve:MAUTIC_DB_TABLE_PREFIX'), $b);
    }

    /*
     * Gets the public 'mautic.security' shared service.
     *
     * @return \Mautic\CoreBundle\Security\Permissions\CorePermissions
     */
    protected function getMautic_SecurityService()
    {
        $a = ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this)));

        $this->services['mautic.security'] = $instance = new \Mautic\CoreBundle\Security\Permissions\CorePermissions(($this->services['mautic.helper.user'] ?? $this->getMautic_Helper_UserService()), ($this->services['translator'] ?? $this->getTranslator2Service()), $a, ['MauticCoreBundle' => ['isPlugin' => false, 'base' => 'Core', 'bundle' => 'CoreBundle', 'relative' => 'app/bundles/CoreBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle'), 'namespace' => 'Mautic\\CoreBundle', 'symfonyBundleName' => 'MauticCoreBundle', 'bundleClass' => 'Mautic\\CoreBundle\\MauticCoreBundle', 'permissionClasses' => ['Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions' => 'Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions'], 'config' => ['routes' => ['main' => ['mautic_core_ajax' => ['path' => '/ajax', 'controller' => 'Mautic\\CoreBundle\\Controller\\AjaxController::delegateAjaxAction'], 'mautic_core_update' => ['path' => '/update', 'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::indexAction'], 'mautic_core_update_schema' => ['path' => '/update/schema', 'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::schemaAction'], 'mautic_core_form_action' => ['path' => '/action/{objectAction}/{objectModel}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\FormController::executeAction', 'defaults' => ['objectModel' => '']], 'mautic_core_file_action' => ['path' => '/file/{objectAction}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\FileController::executeAction'], 'mautic_themes_index' => ['path' => '/themes', 'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::indexAction'], 'mautic_themes_action' => ['path' => '/themes/{objectAction}/{objectId}', 'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::executeAction']], 'public' => ['mautic_js' => ['path' => '/mtc.js', 'controller' => 'Mautic\\CoreBundle\\Controller\\JsController::indexAction'], 'mautic_base_index' => ['path' => '/', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::indexAction'], 'mautic_secure_root' => ['path' => '/s', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction'], 'mautic_secure_root_slash' => ['path' => '/s/', 'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction'], 'mautic_remove_trailing_slash' => ['path' => '/{url}', 'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction', 'method' => 'GET', 'requirements' => ['url' => '.*/$']]], 'api' => ['mautic_core_api_file_list' => ['path' => '/files/{dir}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::listAction'], 'mautic_core_api_file_create' => ['path' => '/files/{dir}/new', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::createAction', 'method' => 'POST'], 'mautic_core_api_file_delete' => ['path' => '/files/{dir}/{file}/delete', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::deleteAction', 'method' => 'DELETE'], 'mautic_core_api_theme_list' => ['path' => '/themes', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::listAction'], 'mautic_core_api_theme_get' => ['path' => '/themes/{theme}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::getAction'], 'mautic_core_api_theme_create' => ['path' => '/themes/new', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::newAction', 'method' => 'POST'], 'mautic_core_api_theme_delete' => ['path' => '/themes/{theme}/delete', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::deleteAction', 'method' => 'DELETE'], 'mautic_core_api_stats' => ['path' => '/stats/{table}', 'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\StatsApiController::listAction', 'defaults' => ['table' => '']]]], 'menu' => ['main' => ['mautic.core.components' => ['id' => 'mautic_components_root', 'iconClass' => 'fa-puzzle-piece', 'priority' => 60], 'mautic.core.channels' => ['id' => 'mautic_channels_root', 'iconClass' => 'fa-rss', 'priority' => 40]], 'admin' => ['mautic.theme.menu.index' => ['route' => 'mautic_themes_index', 'iconClass' => 'fa-newspaper-o', 'id' => 'mautic_themes_index', 'access' => 'core:themes:view']], 'extra' => ['priority' => -1000, 'items' => ['name' => 'extra', 'children' => []]], 'profile' => ['priority' => -1000, 'items' => ['name' => 'profile', 'children' => []]]], 'services' => ['main' => ['mautic.core.service.flashbag' => ['class' => 'Mautic\\CoreBundle\\Service\\FlashBag', 'arguments' => [0 => '@session', 1 => 'translator', 2 => 'request_stack', 3 => 'mautic.core.model.notification']], 'mautic.core.service.bulk_notification' => ['class' => 'Mautic\\CoreBundle\\Service\\BulkNotification', 'arguments' => [0 => 'mautic.core.model.notification']], 'mautic.core.service.local_file_adapter' => ['class' => 'Mautic\\CoreBundle\\Service\\LocalFileAdapterService', 'arguments' => [0 => '%env(resolve:MAUTIC_EL_FINDER_PATH)%']], 'mautic.core.service.log_processor' => ['class' => 'Mautic\\CoreBundle\\Monolog\\LogProcessor', 'tags' => [0 => 'monolog.processor']]], 'events' => ['mautic.core.subscriber.router' => ['class' => 'Mautic\\CoreBundle\\EventListener\\RouterSubscriber', 'arguments' => [0 => 'router', 1 => '%router.request_context.scheme%', 2 => '%router.request_context.host%', 3 => '%request_listener.https_port%', 4 => '%request_listener.http_port%', 5 => '%router.request_context.base_url%']]], 'forms' => ['mautic.form.type.coreconfig' => ['class' => 'Mautic\\CoreBundle\\Form\\Type\\ConfigType', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.language', 2 => 'mautic.ip_lookup.factory', 3 => '%mautic.ip_lookup_services%', 4 => 'mautic.ip_lookup']], 'mautic.form.type.dynamic_content_filter_entry_filters' => ['class' => 'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType', 'arguments' => [0 => 'translator'], 'methodCalls' => ['setConnection' => [0 => 'database_connection']]]], 'helpers' => ['mautic.helper.app_version' => ['class' => 'Mautic\\CoreBundle\\Helper\\AppVersion'], 'mautic.helper.twig.menu' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MenuHelper', 'arguments' => [0 => 'knp_menu.helper'], 'alias' => 'menu'], 'mautic.helper.twig.date' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\DateHelper', 'arguments' => [0 => '%mautic.date_format_full%', 1 => '%mautic.date_format_short%', 2 => '%mautic.date_format_dateonly%', 3 => '%mautic.date_format_timeonly%', 4 => 'translator', 5 => 'mautic.helper.core_parameters'], 'alias' => 'date'], 'mautic.helper.twig.gravatar' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\GravatarHelper', 'arguments' => [0 => 'mautic.helper.twig.default_avatar', 1 => 'mautic.helper.core_parameters', 2 => 'request_stack'], 'alias' => 'gravatar'], 'mautic.helper.twig.analytics' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\AnalyticsHelper', 'alias' => 'analytics', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.twig.config' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ConfigHelper', 'alias' => 'config', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.twig.mautibot' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MautibotHelper', 'alias' => 'mautibot'], 'mautic.helper.twig.button' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ButtonHelper', 'arguments' => [0 => 'twig', 1 => 'translator', 2 => 'event_dispatcher'], 'alias' => 'buttons'], 'mautic.helper.twig.content' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ContentHelper', 'arguments' => [0 => 'twig', 1 => 'event_dispatcher'], 'alias' => 'content'], 'mautic.helper.twig.formatter' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\FormatterHelper', 'arguments' => [0 => 'mautic.helper.twig.date', 1 => 'translator'], 'alias' => 'formatter'], 'mautic.helper.twig.version' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\VersionHelper', 'arguments' => [0 => 'mautic.helper.app_version'], 'alias' => 'version'], 'mautic.helper.twig.security' => ['class' => 'Mautic\\CoreBundle\\Twig\\Helper\\SecurityHelper', 'arguments' => [0 => 'mautic.security', 1 => 'request_stack', 2 => 'event_dispatcher', 3 => 'security.csrf.token_manager'], 'alias' => 'security'], 'mautic.helper.paths' => ['class' => 'Mautic\\CoreBundle\\Helper\\PathsHelper', 'arguments' => [0 => 'mautic.helper.user', 1 => 'mautic.helper.core_parameters', 2 => '%kernel.cache_dir%', 3 => '%kernel.logs_dir%', 4 => '%kernel.project_dir%']], 'mautic.helper.ip_lookup' => ['class' => 'Mautic\\CoreBundle\\Helper\\IpLookupHelper', 'arguments' => [0 => 'request_stack', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.ip_lookup']], 'mautic.helper.user' => ['class' => 'Mautic\\CoreBundle\\Helper\\UserHelper', 'arguments' => [0 => 'security.token_storage']], 'mautic.helper.core_parameters' => ['class' => 'Mautic\\CoreBundle\\Helper\\CoreParametersHelper', 'arguments' => [0 => 'service_container'], 'serviceAlias' => 'mautic.config'], 'mautic.helper.bundle' => ['class' => 'Mautic\\CoreBundle\\Helper\\BundleHelper', 'arguments' => [0 => '%mautic.bundles%', 1 => '%mautic.plugin.bundles%']], 'mautic.helper.phone_number' => ['class' => 'Mautic\\CoreBundle\\Helper\\PhoneNumberHelper'], 'mautic.helper.input_helper' => ['class' => 'Mautic\\CoreBundle\\Helper\\InputHelper'], 'mautic.helper.file_uploader' => ['class' => 'Mautic\\CoreBundle\\Helper\\FileUploader', 'arguments' => [0 => 'mautic.helper.file_path_resolver']], 'mautic.helper.file_path_resolver' => ['class' => 'Mautic\\CoreBundle\\Helper\\FilePathResolver', 'arguments' => [0 => 'symfony.filesystem', 1 => 'mautic.helper.input_helper']], 'mautic.helper.file_properties' => ['class' => 'Mautic\\CoreBundle\\Helper\\FileProperties'], 'mautic.helper.trailing_slash' => ['class' => 'Mautic\\CoreBundle\\Helper\\TrailingSlashHelper', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.helper.token_builder' => ['class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelper', 'arguments' => [0 => 'mautic.security', 1 => 'mautic.model.factory', 2 => 'database_connection', 3 => 'mautic.helper.user']], 'mautic.helper.token_builder.factory' => ['class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelperFactory', 'arguments' => [0 => 'mautic.security', 1 => 'mautic.model.factory', 2 => 'database_connection', 3 => 'mautic.helper.user']], 'mautic.helper.maxmind_do_not_sell_download' => ['class' => 'Mautic\\CoreBundle\\Helper\\MaxMindDoNotSellDownloadHelper', 'arguments' => [0 => '%mautic.ip_lookup_auth%', 1 => 'monolog.logger.mautic', 2 => 'mautic.native.connector', 3 => 'mautic.helper.core_parameters']], 'mautic.helper.update_checks' => ['class' => 'Mautic\\CoreBundle\\Helper\\PreUpdateCheckHelper']], 'menus' => ['mautic.menu.main' => ['alias' => 'main'], 'mautic.menu.admin' => ['alias' => 'admin', 'options' => ['template' => '@MauticCore/Menu/admin.html.twig']], 'mautic.menu.extra' => ['alias' => 'extra', 'options' => ['template' => '@MauticCore/Menu/extra.html.twig']], 'mautic.menu.profile' => ['alias' => 'profile', 'options' => ['template' => '@MauticCore/Menu/profile_inline.html.twig']]], 'other' => ['mautic.cache.warmer.middleware' => ['class' => 'Mautic\\CoreBundle\\Cache\\MiddlewareCacheWarmer', 'tag' => 'kernel.cache_warmer', 'arguments' => [0 => '%kernel.environment%']], 'symfony.filesystem' => ['class' => 'Symfony\\Component\\Filesystem\\Filesystem'], 'mautic.filesystem' => ['class' => 'Mautic\\CoreBundle\\Helper\\Filesystem'], 'symfony.finder' => ['class' => 'Symfony\\Component\\Finder\\Finder'], 'mautic.core.errorhandler.subscriber' => ['class' => 'Mautic\\CoreBundle\\EventListener\\ErrorHandlingListener', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'monolog.logger', 2 => '@=container.has(\'monolog.logger.chrome\') ? container.get(\'monolog.logger.chrome\') : null'], 'tag' => 'kernel.event_subscriber'], 'mautic.configurator' => ['class' => 'Mautic\\CoreBundle\\Configurator\\Configurator', 'arguments' => [0 => 'mautic.helper.paths']], 'mautic.di.env_processor.nullable' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\NullableProcessor', 'tag' => 'container.env_var_processor'], 'mautic.di.env_processor.int_nullable' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\IntNullableProcessor', 'tag' => 'container.env_var_processor'], 'mautic.di.env_processor.mauticconst' => ['class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\MauticConstProcessor', 'tag' => 'container.env_var_processor'], 'mautic.cipher.openssl' => ['class' => 'Mautic\\CoreBundle\\Security\\Cryptography\\Cipher\\Symmetric\\OpenSSLCipher', 'arguments' => [0 => '%kernel.environment%']], 'mautic.route_loader' => ['class' => 'Mautic\\CoreBundle\\Loader\\RouteLoader', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.core_parameters'], 'tag' => 'routing.loader'], 'mautic.security' => ['class' => 'Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions', 'arguments' => [0 => 'mautic.helper.user', 1 => 'translator', 2 => 'mautic.helper.core_parameters', 3 => '%mautic.bundles%', 4 => '%mautic.plugin.bundles%']], 'mautic.page.helper.factory' => ['class' => 'Mautic\\CoreBundle\\Factory\\PageHelperFactory', 'arguments' => [0 => 'session', 1 => 'mautic.helper.core_parameters']], 'mautic.translation.loader' => ['class' => 'Mautic\\CoreBundle\\Loader\\TranslationLoader', 'arguments' => [0 => 'mautic.helper.bundle', 1 => 'mautic.helper.paths'], 'tag' => 'translation.loader', 'alias' => 'mautic'], 'mautic.tblprefix_subscriber' => ['class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineEventsSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => '%mautic.db_table_prefix%'], 'mautic.database.version.provider' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\VersionProvider', 'arguments' => [0 => 'database_connection', 1 => 'mautic.helper.core_parameters']], 'mautic.generated.columns.provider' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\GeneratedColumnsProvider', 'arguments' => [0 => 'mautic.database.version.provider', 1 => 'event_dispatcher']], 'mautic.generated.columns.doctrine.listener' => ['class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineGeneratedColumnsListener', 'tag' => 'doctrine.event_listener', 'tagArguments' => ['event' => 'postGenerateSchema', 'lazy' => true], 'arguments' => [0 => 'mautic.generated.columns.provider', 1 => 'monolog.logger.mautic']], 'mautic.exception.listener' => ['class' => 'Mautic\\CoreBundle\\EventListener\\ExceptionListener', 'arguments' => [0 => 'router', 1 => 'Mautic\\CoreBundle\\Controller\\ExceptionController::showAction', 2 => 'monolog.logger.mautic'], 'tag' => 'kernel.event_listener', 'tagArguments' => ['event' => 'kernel.exception', 'method' => 'onKernelException', 'priority' => 255]], 'mautic.helper.cookie' => ['class' => 'Mautic\\CoreBundle\\Helper\\CookieHelper', 'arguments' => [0 => '%mautic.cookie_path%', 1 => '%mautic.cookie_domain%', 2 => '%mautic.cookie_secure%', 3 => '%mautic.cookie_httponly%', 4 => 'request_stack'], 'tag' => 'kernel.event_subscriber'], 'mautic.helper.cache_storage' => ['class' => 'Mautic\\CoreBundle\\Helper\\CacheStorageHelper', 'arguments' => [0 => '"db"', 1 => '%mautic.db_table_prefix%', 2 => 'doctrine.dbal.default_connection', 3 => '%kernel.cache_dir%']], 'mautic.helper.update' => ['class' => 'Mautic\\CoreBundle\\Helper\\UpdateHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'monolog.logger.mautic', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.http.client', 4 => 'mautic.helper.update.release_parser', 5 => 'mautic.helper.update_checks']], 'mautic.helper.update.release_parser' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\Github\\ReleaseParser', 'arguments' => [0 => 'mautic.http.client']], 'mautic.helper.cache' => ['class' => 'Mautic\\CoreBundle\\Helper\\CacheHelper', 'arguments' => [0 => '%kernel.cache_dir%', 1 => 'session', 2 => 'mautic.helper.paths', 3 => 'kernel']], 'mautic.helper.theme' => ['class' => 'Mautic\\CoreBundle\\Helper\\ThemeHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'twig', 2 => 'translator', 3 => 'mautic.helper.core_parameters', 4 => 'mautic.filesystem', 5 => 'symfony.finder', 6 => 'mautic.integrations.helper.builder_integrations'], 'methodCalls' => ['setDefaultTheme' => [0 => '%mautic.theme%']]], 'mautic.helper.encryption' => ['class' => 'Mautic\\CoreBundle\\Helper\\EncryptionHelper', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.cipher.openssl']], 'mautic.helper.url' => ['class' => 'Mautic\\CoreBundle\\Helper\\UrlHelper', 'arguments' => [0 => 'mautic.http.client', 1 => '%mautic.link_shortener_url%', 2 => 'monolog.logger.mautic']], 'mautic.helper.export' => ['class' => 'Mautic\\CoreBundle\\Helper\\ExportHelper', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.core_parameters', 2 => 'mautic.helper.file_path_resolver']], 'mautic.helper.composer' => ['class' => 'Mautic\\CoreBundle\\Helper\\ComposerHelper', 'arguments' => [0 => 'kernel', 1 => 'monolog.logger.mautic']], 'mautic.helper.menu' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuHelper', 'arguments' => [0 => 'mautic.security', 1 => 'request_stack', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.integration']], 'mautic.helper.hash' => ['class' => 'Mautic\\CoreBundle\\Helper\\HashHelper\\HashHelper'], 'mautic.helper.random' => ['class' => 'Mautic\\CoreBundle\\Helper\\RandomHelper\\RandomHelper'], 'mautic.helper.command' => ['class' => 'Mautic\\CoreBundle\\Helper\\CommandHelper', 'arguments' => 'kernel'], 'mautic.menu_renderer' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuRenderer', 'arguments' => [0 => 'knp_menu.matcher', 1 => 'twig'], 'tag' => 'knp_menu.renderer', 'alias' => 'mautic'], 'mautic.menu.builder' => ['class' => 'Mautic\\CoreBundle\\Menu\\MenuBuilder', 'arguments' => [0 => 'knp_menu.factory', 1 => 'knp_menu.matcher', 2 => 'event_dispatcher', 3 => 'mautic.helper.menu']], 'mautic.ip_lookup.factory' => ['class' => 'Mautic\\CoreBundle\\Factory\\IpLookupFactory', 'arguments' => [0 => '%mautic.ip_lookup_services%', 1 => 'monolog.logger.mautic', 2 => 'mautic.http.client', 3 => '%kernel.cache_dir%']], 'mautic.ip_lookup' => ['class' => 'Mautic\\CoreBundle\\IpLookup\\AbstractLookup', 'factory' => [0 => '@mautic.ip_lookup.factory', 1 => 'getService'], 'arguments' => [0 => '%mautic.ip_lookup_service%', 1 => '%mautic.ip_lookup_auth%', 2 => '%mautic.ip_lookup_config%', 3 => 'mautic.http.client']], 'mautic.native.connector' => ['class' => 'Symfony\\Contracts\\HttpClient\\HttpClientInterface', 'factory' => [0 => 'Symfony\\Component\\HttpClient\\HttpClient', 1 => 'create']], 'twig.controller.exception.class' => 'Mautic\\CoreBundle\\Controller\\ExceptionController', 'mautic.doctrine.loader.mautic_fixtures_loader' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Loader\\MauticFixturesLoader', 'arguments' => [0 => 'doctrine.fixtures.loader']], 'mautic.schema.helper.column' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\ColumnSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%']], 'mautic.schema.helper.index' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\IndexSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%']], 'mautic.schema.helper.table' => ['class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\TableSchemaHelper', 'arguments' => [0 => 'database_connection', 1 => '%mautic.db_table_prefix%', 2 => 'mautic.schema.helper.column']], 'mautic.form.list.validator.circular' => ['class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'request_stack'], 'tag' => 'validator.constraint_validator'], 'mautic.maxmind.doNotSellList' => ['class' => 'Mautic\\CoreBundle\\IpLookup\\DoNotSellList\\MaxMindDoNotSellList', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.monolog.handler' => ['class' => 'Mautic\\CoreBundle\\Monolog\\Handler\\FileLogHandler', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.monolog.fulltrace.formatter']], 'mautic.update.step_provider' => ['class' => 'Mautic\\CoreBundle\\Update\\StepProvider'], 'mautic.update.step.delete_cache' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\DeleteCacheStep', 'arguments' => [0 => 'mautic.helper.cache', 1 => 'translator'], 'tag' => 'mautic.update_step'], 'mautic.update.step.finalize' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\FinalizeUpdateStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.paths', 2 => 'session', 3 => 'mautic.helper.app_version'], 'tag' => 'mautic.update_step'], 'mautic.update.step.install_new_files' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\InstallNewFilesStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.update', 2 => 'mautic.helper.paths'], 'tag' => 'mautic.update_step'], 'mautic.update.step.remove_deleted_files' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\RemoveDeletedFilesStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.paths', 2 => 'monolog.logger.mautic'], 'tag' => 'mautic.update_step'], 'mautic.update.step.update_schema' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateSchemaStep', 'arguments' => [0 => 'translator', 1 => 'service_container'], 'tag' => 'mautic.update_step'], 'mautic.update.step.update_translations' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateTranslationsStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.language', 2 => 'monolog.logger.mautic'], 'tag' => 'mautic.update_step'], 'mautic.update.step.checks' => ['class' => 'Mautic\\CoreBundle\\Update\\Step\\PreUpdateChecksStep', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.update'], 'tag' => 'mautic.update_step'], 'mautic.update.checks.php' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckPhpVersion', 'tag' => 'mautic.update_check'], 'mautic.update.checks.database' => ['class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckDatabaseDriverAndVersion', 'arguments' => [0 => 'doctrine.orm.default_entity_manager'], 'tag' => 'mautic.update_check']], 'validator' => ['mautic.core.validator.file_upload' => ['class' => 'Mautic\\CoreBundle\\Validator\\FileUploadValidator', 'arguments' => [0 => 'translator']]]], 'ip_lookup_services' => $this->parameters['mautic.ip_lookup_services'], 'parameters' => ['site_url' => '', 'webroot' => '', '404_page' => '', 'cache_path' => '%kernel.project_dir%/var/cache', 'log_path' => '%kernel.project_dir%/var/logs', 'max_log_files' => 7, 'log_file_name' => 'mautic_%kernel.environment%.php', 'image_path' => 'media/images', 'tmp_path' => '%kernel.project_dir%/var/tmp', 'theme' => 'blank', 'theme_import_allowed_extensions' => [0 => 'json', 1 => 'twig', 2 => 'css', 3 => 'js', 4 => 'htm', 5 => 'html', 6 => 'txt', 7 => 'jpg', 8 => 'jpeg', 9 => 'png', 10 => 'gif'], 'db_driver' => 'pdo_mysql', 'db_host' => '127.0.0.1', 'db_port' => 3306, 'db_name' => '', 'db_user' => '', 'db_password' => '', 'db_table_prefix' => '', 'db_host_ro' => NULL, 'locale' => 'en_US', 'secret_key' => 'temp', 'dev_hosts' => [], 'trusted_hosts' => [], 'trusted_proxies' => [], 'rememberme_key' => '%mautic.secret_key%', 'rememberme_lifetime' => 31536000, 'rememberme_path' => '/', 'rememberme_domain' => '', 'default_pagelimit' => 30, 'default_timezone' => 'UTC', 'date_format_full' => 'F j, Y g:i a T', 'date_format_short' => 'D, M d', 'date_format_dateonly' => 'F j, Y', 'date_format_timeonly' => 'g:i a', 'ip_lookup_service' => 'maxmind_download', 'ip_lookup_auth' => '', 'ip_lookup_config' => [], 'ip_lookup_create_organization' => false, 'transifex_api_token' => '', 'update_stability' => 'stable', 'cookie_path' => '/', 'cookie_domain' => '', 'cookie_secure' => true, 'cookie_httponly' => false, 'do_not_track_ips' => [], 'do_not_track_bots' => [0 => 'MSNBOT', 1 => 'msnbot-media', 2 => 'bingbot', 3 => 'Googlebot', 4 => 'Google Web Preview', 5 => 'Mediapartners-Google', 6 => 'Baiduspider', 7 => 'Ezooms', 8 => 'YahooSeeker', 9 => 'Slurp', 10 => 'AltaVista', 11 => 'AVSearch', 12 => 'Mercator', 13 => 'Scooter', 14 => 'InfoSeek', 15 => 'Ultraseek', 16 => 'Lycos', 17 => 'Wget', 18 => 'YandexBot', 19 => 'Java/1.4.1_04', 20 => 'SiteBot', 21 => 'Exabot', 22 => 'AhrefsBot', 23 => 'MJ12bot', 24 => 'NetSeer crawler', 25 => 'TurnitinBot', 26 => 'magpie-crawler', 27 => 'Nutch Crawler', 28 => 'CMS Crawler', 29 => 'rogerbot', 30 => 'Domnutch', 31 => 'ssearch_bot', 32 => 'XoviBot', 33 => 'digincore', 34 => 'fr-crawler', 35 => 'SeznamBot', 36 => 'Seznam screenshot-generator', 37 => 'Facebot', 38 => 'facebookexternalhit', 39 => 'SimplePie', 40 => 'Riddler', 41 => '007ac9 Crawler', 42 => '360Spider', 43 => 'A6-Indexer', 44 => 'ADmantX', 45 => 'AHC', 46 => 'AISearchBot', 47 => 'APIs-Google', 48 => 'Aboundex', 49 => 'AddThis', 50 => 'Adidxbot', 51 => 'AdsBot-Google', 52 => 'AdsTxtCrawler', 53 => 'AdvBot', 54 => 'Ahrefs', 55 => 'AlphaBot', 56 => 'Amazon CloudFront', 57 => 'AndersPinkBot', 58 => 'Apache-HttpClient', 59 => 'Apercite', 60 => 'AppEngine-Google', 61 => 'Applebot', 62 => 'ArchiveBot', 63 => 'BDCbot', 64 => 'BIGLOTRON', 65 => 'BLEXBot', 66 => 'BLP_bbot', 67 => 'BTWebClient', 68 => 'BUbiNG', 69 => 'Baidu-YunGuanCe', 70 => 'Barkrowler', 71 => 'BehloolBot', 72 => 'BingPreview', 73 => 'BomboraBot', 74 => 'Bot.AraTurka.com', 75 => 'BoxcarBot', 76 => 'BrandVerity', 77 => 'Buck', 78 => 'CC Metadata Scaper', 79 => 'CCBot', 80 => 'CapsuleChecker', 81 => 'Cliqzbot', 82 => 'CloudFlare-AlwaysOnline', 83 => 'Companybook-Crawler', 84 => 'ContextAd Bot', 85 => 'CrunchBot', 86 => 'CrystalSemanticsBot', 87 => 'CyberPatrol', 88 => 'DareBoost', 89 => 'Datafeedwatch', 90 => 'Daum', 91 => 'DeuSu', 92 => 'developers.google.com', 93 => 'Diffbot', 94 => 'Digg Deeper', 95 => 'Digincore bot', 96 => 'Discordbot', 97 => 'Disqus', 98 => 'DnyzBot', 99 => 'Domain Re-Animator Bot', 100 => 'DomainStatsBot', 101 => 'DuckDuckBot', 102 => 'DuckDuckGo-Favicons-Bot', 103 => 'EZID', 104 => 'Embedly', 105 => 'EveryoneSocialBot', 106 => 'ExtLinksBot', 107 => 'FAST Enterprise Crawler', 108 => 'FAST-WebCrawler', 109 => 'Feedfetcher-Google', 110 => 'Feedly', 111 => 'Feedspotbot', 112 => 'FemtosearchBot', 113 => 'Fetch', 114 => 'Fever', 115 => 'Flamingo_SearchEngine', 116 => 'FlipboardProxy', 117 => 'Fyrebot', 118 => 'GarlikCrawler', 119 => 'Genieo', 120 => 'Gigablast', 121 => 'Gigabot', 122 => 'GingerCrawler', 123 => 'Gluten Free Crawler', 124 => 'GnowitNewsbot', 125 => 'Go-http-client', 126 => 'Google-Adwords-Instant', 127 => 'Gowikibot', 128 => 'GrapeshotCrawler', 129 => 'Grobbot', 130 => 'HTTrack', 131 => 'Hatena', 132 => 'IAS crawler', 133 => 'ICC-Crawler', 134 => 'IndeedBot', 135 => 'InterfaxScanBot', 136 => 'IstellaBot', 137 => 'James BOT', 138 => 'Jamie\'s Spider', 139 => 'Jetslide', 140 => 'Jetty', 141 => 'Jugendschutzprogramm-Crawler', 142 => 'K7MLWCBot', 143 => 'Kemvibot', 144 => 'KosmioBot', 145 => 'Landau-Media-Spider', 146 => 'Laserlikebot', 147 => 'Leikibot', 148 => 'Linguee Bot', 149 => 'LinkArchiver', 150 => 'LinkedInBot', 151 => 'LivelapBot', 152 => 'Luminator-robots', 153 => 'Mail.RU_Bot', 154 => 'Mastodon', 155 => 'MauiBot', 156 => 'Mediatoolkitbot', 157 => 'MegaIndex', 158 => 'MeltwaterNews', 159 => 'MetaJobBot', 160 => 'MetaURI', 161 => 'Miniflux', 162 => 'MojeekBot', 163 => 'Moreover', 164 => 'MuckRack', 165 => 'Multiviewbot', 166 => 'NING', 167 => 'NerdByNature.Bot', 168 => 'NetcraftSurveyAgent', 169 => 'Netvibes', 170 => 'Nimbostratus-Bot', 171 => 'Nuzzel', 172 => 'Ocarinabot', 173 => 'OpenHoseBot', 174 => 'OrangeBot', 175 => 'OutclicksBot', 176 => 'PR-CY.RU', 177 => 'PaperLiBot', 178 => 'Pcore-HTTP', 179 => 'PhantomJS', 180 => 'PiplBot', 181 => 'PocketParser', 182 => 'Primalbot', 183 => 'PrivacyAwareBot', 184 => 'Pulsepoint', 185 => 'Python-urllib', 186 => 'Qwantify', 187 => 'RankActiveLinkBot', 188 => 'RetrevoPageAnalyzer', 189 => 'SBL-BOT', 190 => 'SEMrushBot', 191 => 'SEOkicks', 192 => 'SWIMGBot', 193 => 'SafeDNSBot', 194 => 'SafeSearch microdata crawler', 195 => 'ScoutJet', 196 => 'Scrapy', 197 => 'Screaming Frog SEO Spider', 198 => 'SemanticScholarBot', 199 => 'SimpleCrawler', 200 => 'Siteimprove.com', 201 => 'SkypeUriPreview', 202 => 'Slack-ImgProxy', 203 => 'Slackbot', 204 => 'Snacktory', 205 => 'SocialRankIOBot', 206 => 'Sogou', 207 => 'Sonic', 208 => 'StorygizeBot', 209 => 'SurveyBot', 210 => 'Sysomos', 211 => 'TangibleeBot', 212 => 'TelegramBot', 213 => 'Teoma', 214 => 'Thinklab', 215 => 'TinEye', 216 => 'ToutiaoSpider', 217 => 'Traackr.com', 218 => 'Trove', 219 => 'TweetmemeBot', 220 => 'Twitterbot', 221 => 'Twurly', 222 => 'Upflow', 223 => 'UptimeRobot', 224 => 'UsineNouvelleCrawler', 225 => 'Veoozbot', 226 => 'WeSEE:Search', 227 => 'WhatsApp', 228 => 'Xenu Link Sleuth', 229 => 'Y!J', 230 => 'YaK', 231 => 'Yahoo Link Preview', 232 => 'Yeti', 233 => 'YisouSpider', 234 => 'Zabbix', 235 => 'ZoominfoBot', 236 => 'ZumBot', 237 => 'ZuperlistBot', 238 => '^LCC ', 239 => 'acapbot', 240 => 'acoonbot', 241 => 'adbeat_bot', 242 => 'adscanner', 243 => 'aiHitBot', 244 => 'antibot', 245 => 'arabot', 246 => 'archive.org_bot', 247 => 'axios', 248 => 'backlinkcrawler', 249 => 'betaBot', 250 => 'bibnum.bnf', 251 => 'binlar', 252 => 'bitlybot', 253 => 'blekkobot', 254 => 'blogmuraBot', 255 => 'bnf.fr_bot', 256 => 'bot-pge.chlooe.com', 257 => 'botify', 258 => 'brainobot', 259 => 'buzzbot', 260 => 'cXensebot', 261 => 'careerbot', 262 => 'centurybot9', 263 => 'changedetection', 264 => 'check_http', 265 => 'citeseerxbot', 266 => 'coccoc', 267 => 'collection@infegy.com', 268 => 'content crawler spider', 269 => 'contxbot', 270 => 'convera', 271 => 'crawler4j', 272 => 'curl', 273 => 'datagnionbot', 274 => 'dcrawl', 275 => 'deadlinkchecker', 276 => 'discobot', 277 => 'domaincrawler', 278 => 'dotbot', 279 => 'drupact', 280 => 'ec2linkfinder', 281 => 'edisterbot', 282 => 'electricmonk', 283 => 'elisabot', 284 => 'epicbot', 285 => 'eright', 286 => 'europarchive.org', 287 => 'exabot', 288 => 'ezooms', 289 => 'filterdb.iss.net', 290 => 'findlink', 291 => 'findthatfile', 292 => 'findxbot', 293 => 'fluffy', 294 => 'fuelbot', 295 => 'g00g1e.net', 296 => 'g2reader-bot', 297 => 'gnam gnam spider', 298 => 'google-xrawler', 299 => 'grub.org', 300 => 'gslfbot', 301 => 'heritrix', 302 => 'http_get', 303 => 'httpunit', 304 => 'ia_archiver', 305 => 'ichiro', 306 => 'imrbot', 307 => 'integromedb', 308 => 'intelium_bot', 309 => 'ip-web-crawler.com', 310 => 'ips-agent', 311 => 'iskanie', 312 => 'it2media-domain-crawler', 313 => 'jyxobot', 314 => 'lb-spider', 315 => 'libwww', 316 => 'linkapediabot', 317 => 'linkdex', 318 => 'lipperhey', 319 => 'lssbot', 320 => 'lssrocketcrawler', 321 => 'ltx71', 322 => 'mappydata', 323 => 'memorybot', 324 => 'mindUpBot', 325 => 'mlbot', 326 => 'moatbot', 327 => 'msnbot', 328 => 'msrbot', 329 => 'nerdybot', 330 => 'netEstate NE Crawler', 331 => 'netresearchserver', 332 => 'newsharecounts', 333 => 'newspaper', 334 => 'niki-bot', 335 => 'nutch', 336 => 'okhttp', 337 => 'omgili', 338 => 'openindexspider', 339 => 'page2rss', 340 => 'panscient', 341 => 'phpcrawl', 342 => 'pingdom', 343 => 'pinterest', 344 => 'postrank', 345 => 'proximic', 346 => 'psbot', 347 => 'purebot', 348 => 'python-requests', 349 => 'redditbot', 350 => 'scribdbot', 351 => 'seekbot', 352 => 'semanticbot', 353 => 'sentry', 354 => 'seoscanners', 355 => 'seznambot', 356 => 'sistrix crawler', 357 => 'sitebot', 358 => 'siteexplorer.info', 359 => 'smtbot', 360 => 'spbot', 361 => 'speedy', 362 => 'summify', 363 => 'tagoobot', 364 => 'toplistbot', 365 => 'tracemyfile', 366 => 'trendictionbot', 367 => 'turnitinbot', 368 => 'twengabot', 369 => 'um-LN', 370 => 'urlappendbot', 371 => 'vebidoobot', 372 => 'vkShare', 373 => 'voilabot', 374 => 'wbsearchbot', 375 => 'web-archive-net.com.bot', 376 => 'webcompanycrawler', 377 => 'webmon', 378 => 'wget', 379 => 'wocbot', 380 => 'woobot', 381 => 'woriobot', 382 => 'wotbox', 383 => 'xovibot', 384 => 'yacybot', 385 => 'yandex.com', 386 => 'yanga', 387 => 'yoozBot', 388 => 'zgrab'], 'do_not_track_internal_ips' => [], 'track_private_ip_ranges' => false, 'link_shortener_url' => NULL, 'cached_data_timeout' => 10, 'batch_sleep_time' => 1, 'batch_campaign_sleep_time' => false, 'transliterate_page_title' => false, 'cors_restrict_domains' => true, 'cors_valid_domains' => [], 'headers_sts' => false, 'headers_sts_expire_time' => 60, 'headers_sts_subdomains' => false, 'headers_sts_preload' => false, 'max_entity_lock_time' => 0, 'default_daterange_filter' => '-1 month', 'debug' => false, 'rss_notification_url' => '', 'translations_list_url' => 'https://language-packs.mautic.com/manifest.json', 'translations_fetch_url' => 'https://language-packs.mautic.com/', 'stats_update_url' => 'https://updates.mautic.org/stats/send', 'install_source' => 'Mautic', 'system_update_url' => 'https://api.github.com/repos/mautic/mautic/releases', 'editor_fonts' => [0 => ['name' => 'Arial', 'font' => 'Arial, Helvetica Neue, Helvetica, sans-serif'], 1 => ['name' => 'Bitter', 'font' => 'Bitter, Georgia, Times, Times New Roman, serif', 'url' => 'https://fonts.googleapis.com/css?family=Bitter'], 2 => ['name' => 'Courier New', 'font' => 'Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace'], 3 => ['name' => 'Droid Serif', 'font' => 'Droid Serif, Georgia, Times, Times New Roman, serif', 'url' => 'https://fonts.googleapis.com/css?family=Droid+Serif'], 4 => ['name' => 'Georgia', 'font' => 'Georgia, Times, Times New Roman, serif'], 5 => ['name' => 'Helvetica', 'font' => 'Helvetica Neue, Helvetica, Arial, sans-serif'], 6 => ['name' => 'Lato', 'font' => 'Lato, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Lato'], 7 => ['name' => 'Lucida Sans Unicode', 'font' => 'Lucida Sans Unicode, Lucida Grande, Lucida Sans, Geneva, Verdana, sans-serif'], 8 => ['name' => 'Montserrat', 'font' => 'Montserrat, Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Montserrat'], 9 => ['name' => 'Open Sans', 'font' => 'Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Open+Sans'], 10 => ['name' => 'Roboto', 'font' => 'Roboto, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Roboto'], 11 => ['name' => 'Source Sans Pro', 'font' => 'Source Sans Pro, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Source+Sans+Pro'], 12 => ['name' => 'Tahoma', 'font' => 'Tahoma, Geneva, Segoe, sans-serif'], 13 => ['name' => 'Times New Roman', 'font' => 'TimesNewRoman, Times New Roman, Times, Beskerville, Georgia, serif'], 14 => ['name' => 'Trebuchet MS', 'font' => 'Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif'], 15 => ['name' => 'Ubuntu', 'font' => 'Ubuntu, Tahoma, Verdana, Segoe, sans-serif', 'url' => 'https://fonts.googleapis.com/css?family=Ubuntu'], 16 => ['name' => 'Verdana', 'font' => 'Verdana, Geneva, sans-serif'], 17 => ['name' => 'ヒラギノ角ゴ Pro W3', 'font' => 'ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, sans-serif'], 18 => ['name' => 'メイリオ', 'font' => 'メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, sans-serif']], 'composer_updates' => false, 'load_froala_assets' => false, 'redis_primary_only' => false]]], 'MauticApiBundle' => ['isPlugin' => false, 'base' => 'Api', 'bundle' => 'ApiBundle', 'relative' => 'app/bundles/ApiBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle'), 'namespace' => 'Mautic\\ApiBundle', 'symfonyBundleName' => 'MauticApiBundle', 'bundleClass' => 'Mautic\\ApiBundle\\MauticApiBundle', 'permissionClasses' => ['Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions' => 'Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions'], 'config' => ['routes' => ['public' => ['fos_oauth_server_token' => ['path' => '/oauth/v2/token', 'controller' => 'fos_oauth_server.controller.token:tokenAction', 'method' => 'GET|POST'], 'fos_oauth_server_authorize' => ['path' => '/oauth/v2/authorize', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\AuthorizeController::authorizeAction', 'method' => 'GET|POST'], 'mautic_oauth2_server_auth_login' => ['path' => '/oauth/v2/authorize_login', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginAction', 'method' => 'GET|POST'], 'mautic_oauth2_server_auth_login_check' => ['path' => '/oauth/v2/authorize_login_check', 'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginCheckAction', 'method' => 'GET|POST']], 'main' => ['mautic_client_index' => ['path' => '/credentials/{page}', 'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::indexAction'], 'mautic_client_action' => ['path' => '/credentials/{objectAction}/{objectId}', 'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::executeAction']]], 'menu' => ['admin' => ['items' => ['mautic.api.client.menu.index' => ['route' => 'mautic_client_index', 'iconClass' => 'fa-puzzle-piece', 'access' => 'api:clients:view', 'checks' => ['parameters' => ['api_enabled' => true]]]]]], 'services' => ['helpers' => ['mautic.api.helper.entity_result' => ['class' => 'Mautic\\ApiBundle\\Helper\\EntityResultHelper']], 'other' => ['mautic.api.oauth.event_listener' => ['class' => 'Mautic\\ApiBundle\\EventListener\\PreAuthorizationEventListener', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.security', 2 => 'translator'], 'tags' => [0 => 'kernel.event_listener', 1 => 'kernel.event_listener'], 'tagArguments' => [0 => ['event' => 'fos_oauth_server.pre_authorization_process', 'method' => 'onPreAuthorizationProcess'], 1 => ['event' => 'fos_oauth_server.post_authorization_process', 'method' => 'onPostAuthorizationProcess']]], 'fos_oauth_server.security.authentication.listener.class' => 'Mautic\\ApiBundle\\Security\\OAuth2\\Firewall\\OAuthListener', 'mautic.validator.oauthcallback' => ['class' => 'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator', 'tag' => 'validator.constraint_validator']]], 'parameters' => ['api_enabled' => false, 'api_enable_basic_auth' => false, 'api_oauth2_access_token_lifetime' => 60, 'api_oauth2_refresh_token_lifetime' => 14, 'api_batch_max_limit' => 200, 'api_rate_limiter_limit' => 0, 'api_rate_limiter_cache' => ['adapter' => 'cache.adapter.filesystem']]]], 'MauticAssetBundle' => ['isPlugin' => false, 'base' => 'Asset', 'bundle' => 'AssetBundle', 'relative' => 'app/bundles/AssetBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle'), 'namespace' => 'Mautic\\AssetBundle', 'symfonyBundleName' => 'MauticAssetBundle', 'bundleClass' => 'Mautic\\AssetBundle\\MauticAssetBundle', 'permissionClasses' => ['Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions'], 'config' => ['routes' => ['main' => ['mautic_asset_index' => ['path' => '/assets/{page}', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::indexAction'], 'mautic_asset_remote' => ['path' => '/assets/remote', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::remoteAction'], 'mautic_asset_action' => ['path' => '/assets/{objectAction}/{objectId}', 'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::executeAction']], 'api' => ['mautic_api_assetsstandard' => ['standard_entity' => true, 'name' => 'assets', 'path' => '/assets', 'controller' => 'Mautic\\AssetBundle\\Controller\\Api\\AssetApiController']], 'public' => ['mautic_asset_download' => ['path' => '/asset/{slug}', 'controller' => 'Mautic\\AssetBundle\\Controller\\PublicController::downloadAction', 'defaults' => ['slug' => '']]]], 'menu' => ['main' => ['items' => ['mautic.asset.assets' => ['route' => 'mautic_asset_index', 'access' => [0 => 'asset:assets:viewown', 1 => 'asset:assets:viewother'], 'parent' => 'mautic.core.components', 'priority' => 300]]]], 'categories' => ['asset' => NULL], 'services' => ['permissions' => ['mautic.asset.permissions' => ['class' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions', 'arguments' => [0 => 'mautic.helper.core_parameters']]], 'others' => ['mautic.asset.upload.error.handler' => ['class' => 'Mautic\\AssetBundle\\ErrorHandler\\DropzoneErrorHandler', 'arguments' => 'mautic.factory'], 'oneup_uploader.controller.dropzone.class' => 'Mautic\\AssetBundle\\Controller\\UploadController'], 'fixtures' => ['mautic.asset.fixture.asset' => ['class' => 'Mautic\\AssetBundle\\DataFixtures\\ORM\\LoadAssetData', 'tag' => 'doctrine.fixture.orm']], 'repositories' => ['mautic.asset.repository.download' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\AssetBundle\\Entity\\Download']]], 'parameters' => ['upload_dir' => '%kernel.project_dir%/media/files', 'max_size' => '6', 'allowed_extensions' => [0 => 'csv', 1 => 'doc', 2 => 'docx', 3 => 'epub', 4 => 'gif', 5 => 'jpg', 6 => 'jpeg', 7 => 'mpg', 8 => 'mpeg', 9 => 'mp3', 10 => 'odt', 11 => 'odp', 12 => 'ods', 13 => 'pdf', 14 => 'png', 15 => 'ppt', 16 => 'pptx', 17 => 'tif', 18 => 'tiff', 19 => 'txt', 20 => 'xls', 21 => 'xlsx', 22 => 'wav']]]], 'MauticCampaignBundle' => ['isPlugin' => false, 'base' => 'Campaign', 'bundle' => 'CampaignBundle', 'relative' => 'app/bundles/CampaignBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle'), 'namespace' => 'Mautic\\CampaignBundle', 'symfonyBundleName' => 'MauticCampaignBundle', 'bundleClass' => 'Mautic\\CampaignBundle\\MauticCampaignBundle', 'permissionClasses' => ['Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions' => 'Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions'], 'config' => ['routes' => ['main' => ['mautic_campaignevent_action' => ['path' => '/campaigns/events/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\EventController::executeAction'], 'mautic_campaignsource_action' => ['path' => '/campaigns/sources/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\SourceController::executeAction'], 'mautic_campaign_index' => ['path' => '/campaigns/{page}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::indexAction'], 'mautic_campaign_action' => ['path' => '/campaigns/{objectAction}/{objectId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::executeAction'], 'mautic_campaign_contacts' => ['path' => '/campaigns/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::contactsAction'], 'mautic_campaign_preview' => ['path' => '/campaign/preview/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction']], 'api' => ['mautic_api_campaignsstandard' => ['standard_entity' => true, 'name' => 'campaigns', 'path' => '/campaigns', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController'], 'mautic_api_campaigneventsstandard' => ['standard_entity' => true, 'supported_endpoints' => [0 => 'getone', 1 => 'getall'], 'name' => 'events', 'path' => '/campaigns/events', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventApiController'], 'mautic_api_campaigns_events_contact' => ['path' => '/campaigns/events/contact/{contactId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction', 'method' => 'GET'], 'mautic_api_campaigns_edit_contact_event' => ['path' => '/campaigns/events/{eventId}/contact/{contactId}/edit', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editContactEventAction', 'method' => 'PUT'], 'mautic_api_campaigns_batchedit_events' => ['path' => '/campaigns/events/batch/edit', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editEventsAction', 'method' => 'PUT'], 'mautic_api_campaign_contact_events' => ['path' => '/campaigns/{campaignId}/events/contact/{contactId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction', 'method' => 'GET'], 'mautic_api_campaigngetcontacts' => ['path' => '/campaigns/{id}/contacts', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::getContactsAction'], 'mautic_api_campaignaddcontact' => ['path' => '/campaigns/{id}/contact/{leadId}/add', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::addLeadAction', 'method' => 'POST'], 'mautic_api_campaignremovecontact' => ['path' => '/campaigns/{id}/contact/{leadId}/remove', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::removeLeadAction', 'method' => 'POST'], 'mautic_api_contact_clone_campaign' => ['path' => '/campaigns/clone/{campaignId}', 'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::cloneCampaignAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.campaign.menu.index' => ['iconClass' => 'fa-clock-o', 'route' => 'mautic_campaign_index', 'access' => 'campaign:campaigns:view', 'priority' => 50]]], 'categories' => ['campaign' => NULL], 'services' => ['repositories' => ['mautic.campaign.repository.campaign' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Campaign']], 'mautic.campaign.repository.lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Lead']], 'mautic.campaign.repository.event' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Event']], 'mautic.campaign.repository.lead_event_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\LeadEventLog']], 'mautic.campaign.repository.summary' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\CampaignBundle\\Entity\\Summary']]], 'execution' => ['mautic.campaign.contact_finder.kickoff' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\KickoffContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.campaign.repository.campaign', 2 => 'monolog.logger.mautic']], 'mautic.campaign.contact_finder.scheduled' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\ScheduledContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'monolog.logger.mautic']], 'mautic.campaign.contact_finder.inactive' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\InactiveContactFinder', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.campaign.repository.lead', 2 => 'monolog.logger.mautic']], 'mautic.campaign.dispatcher.action' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ActionDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'monolog.logger.mautic', 2 => 'mautic.campaign.scheduler', 3 => 'mautic.campaign.helper.notification', 4 => 'mautic.campaign.legacy_event_dispatcher']], 'mautic.campaign.dispatcher.condition' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ConditionDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.campaign.dispatcher.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\DecisionDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.campaign.legacy_event_dispatcher']], 'mautic.campaign.event_logger' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Logger\\EventLogger', 'arguments' => [0 => 'mautic.helper.ip_lookup', 1 => 'mautic.tracker.contact', 2 => 'mautic.campaign.repository.lead_event_log', 3 => 'mautic.campaign.repository.lead', 4 => 'mautic.campaign.model.summary']], 'mautic.campaign.event_collector' => ['class' => 'Mautic\\CampaignBundle\\EventCollector\\EventCollector', 'arguments' => [0 => 'translator', 1 => 'event_dispatcher']], 'mautic.campaign.scheduler.datetime' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\DateTime', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.campaign.scheduler.interval' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\Interval', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.helper.core_parameters']], 'mautic.campaign.scheduler' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\EventScheduler', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.campaign.event_logger', 2 => 'mautic.campaign.scheduler.interval', 3 => 'mautic.campaign.scheduler.datetime', 4 => 'mautic.campaign.event_collector', 5 => 'event_dispatcher', 6 => 'mautic.helper.core_parameters']], 'mautic.campaign.executioner.action' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ActionExecutioner', 'arguments' => [0 => 'mautic.campaign.dispatcher.action', 1 => 'mautic.campaign.event_logger']], 'mautic.campaign.executioner.condition' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ConditionExecutioner', 'arguments' => [0 => 'mautic.campaign.dispatcher.condition']], 'mautic.campaign.executioner.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\DecisionExecutioner', 'arguments' => [0 => 'mautic.campaign.event_logger', 1 => 'mautic.campaign.dispatcher.decision']], 'mautic.campaign.event_executioner' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\EventExecutioner', 'arguments' => [0 => 'mautic.campaign.event_collector', 1 => 'mautic.campaign.event_logger', 2 => 'mautic.campaign.executioner.action', 3 => 'mautic.campaign.executioner.condition', 4 => 'mautic.campaign.executioner.decision', 5 => 'monolog.logger.mautic', 6 => 'mautic.campaign.scheduler', 7 => 'mautic.campaign.helper.removed_contact_tracker', 8 => 'mautic.campaign.repository.lead']], 'mautic.campaign.executioner.kickoff' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\KickoffExecutioner', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.campaign.contact_finder.kickoff', 2 => 'translator', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.scheduler']], 'mautic.campaign.executioner.scheduled' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\ScheduledExecutioner', 'arguments' => [0 => 'mautic.campaign.repository.lead_event_log', 1 => 'monolog.logger.mautic', 2 => 'translator', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.scheduler', 5 => 'mautic.campaign.contact_finder.scheduled'], 'tag' => 'kernel.reset', 'tagArguments' => ['method' => 'reset']], 'mautic.campaign.executioner.realtime' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\RealTimeExecutioner', 'arguments' => [0 => 'monolog.logger.mautic', 1 => 'mautic.lead.model.lead', 2 => 'mautic.campaign.repository.event', 3 => 'mautic.campaign.event_executioner', 4 => 'mautic.campaign.executioner.decision', 5 => 'mautic.campaign.event_collector', 6 => 'mautic.campaign.scheduler', 7 => 'mautic.tracker.contact', 8 => 'mautic.campaign.helper.decision']], 'mautic.campaign.executioner.inactive' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\InactiveExecutioner', 'arguments' => [0 => 'mautic.campaign.contact_finder.inactive', 1 => 'monolog.logger.mautic', 2 => 'translator', 3 => 'mautic.campaign.scheduler', 4 => 'mautic.campaign.helper.inactivity', 5 => 'mautic.campaign.event_executioner']], 'mautic.campaign.helper.decision' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\DecisionHelper', 'arguments' => [0 => 'mautic.campaign.repository.lead']], 'mautic.campaign.helper.inactivity' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\InactiveHelper', 'arguments' => [0 => 'mautic.campaign.scheduler', 1 => 'mautic.campaign.contact_finder.inactive', 2 => 'mautic.campaign.repository.lead_event_log', 3 => 'mautic.campaign.repository.event', 4 => 'monolog.logger.mautic', 5 => 'mautic.campaign.helper.decision']], 'mautic.campaign.helper.removed_contact_tracker' => ['class' => 'Mautic\\CampaignBundle\\Helper\\RemovedContactTracker'], 'mautic.campaign.helper.notification' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\NotificationHelper', 'arguments' => [0 => 'mautic.user.model.user', 1 => 'mautic.core.model.notification', 2 => 'translator', 3 => 'router', 4 => 'mautic.helper.core_parameters']], 'mautic.campaign.legacy_event_dispatcher' => ['class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\LegacyEventDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.campaign.scheduler', 2 => 'monolog.logger.mautic', 3 => 'mautic.campaign.helper.notification', 4 => 'mautic.factory', 5 => 'mautic.tracker.contact']]], 'membership' => ['mautic.campaign.membership.adder' => ['class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Adder', 'arguments' => [0 => 'mautic.campaign.repository.lead', 1 => 'mautic.campaign.repository.lead_event_log']], 'mautic.campaign.membership.remover' => ['class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Remover', 'arguments' => [0 => 'mautic.campaign.repository.lead', 1 => 'mautic.campaign.repository.lead_event_log', 2 => 'translator', 3 => 'mautic.helper.twig.date']], 'mautic.campaign.membership.event_dispatcher' => ['class' => 'Mautic\\CampaignBundle\\Membership\\EventDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.campaign.membership.manager' => ['class' => 'Mautic\\CampaignBundle\\Membership\\MembershipManager', 'arguments' => [0 => 'mautic.campaign.membership.adder', 1 => 'mautic.campaign.membership.remover', 2 => 'mautic.campaign.membership.event_dispatcher', 3 => 'mautic.campaign.repository.lead', 4 => 'monolog.logger.mautic']], 'mautic.campaign.membership.builder' => ['class' => 'Mautic\\CampaignBundle\\Membership\\MembershipBuilder', 'arguments' => [0 => 'mautic.campaign.membership.manager', 1 => 'mautic.campaign.repository.lead', 2 => 'mautic.lead.repository.lead', 3 => 'translator']]], 'services' => ['mautic.campaign.service.campaign' => ['class' => 'Mautic\\CampaignBundle\\Service\\Campaign', 'arguments' => [0 => 'mautic.campaign.repository.campaign', 1 => 'mautic.email.repository.email']]], 'fixtures' => ['mautic.campaign.fixture.campaign' => ['class' => 'Mautic\\CampaignBundle\\DataFixtures\\ORM\\CampaignData', 'tag' => 'doctrine.fixture.orm', 'optional' => true]]], 'parameters' => ['campaign_time_wait_on_event_false' => 'PT1H', 'campaign_use_summary' => 0, 'campaign_by_range' => 0]]], 'MauticCategoryBundle' => ['isPlugin' => false, 'base' => 'Category', 'bundle' => 'CategoryBundle', 'relative' => 'app/bundles/CategoryBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle'), 'namespace' => 'Mautic\\CategoryBundle', 'symfonyBundleName' => 'MauticCategoryBundle', 'bundleClass' => 'Mautic\\CategoryBundle\\MauticCategoryBundle', 'permissionClasses' => ['Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions' => 'Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions'], 'config' => ['routes' => ['main' => ['mautic_category_batch_contact_set' => ['path' => '/categories/batch/contact/set', 'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::execAction'], 'mautic_category_batch_contact_view' => ['path' => '/categories/batch/contact/view', 'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::indexAction'], 'mautic_category_index' => ['path' => '/categories/{bundle}/{page}', 'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::indexAction', 'defaults' => ['bundle' => 'category']], 'mautic_category_action' => ['path' => '/categories/{bundle}/{objectAction}/{objectId}', 'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::executeCategoryAction', 'defaults' => ['bundle' => 'category']]], 'api' => ['mautic_api_categoriesstandard' => ['standard_entity' => true, 'name' => 'categories', 'path' => '/categories', 'controller' => 'Mautic\\CategoryBundle\\Controller\\Api\\CategoryApiController']]], 'menu' => ['admin' => ['mautic.category.menu.index' => ['route' => 'mautic_category_index', 'access' => 'category:categories:view', 'iconClass' => 'fa-folder', 'id' => 'mautic_category_index']]]]], 'MauticChannelBundle' => ['isPlugin' => false, 'base' => 'Channel', 'bundle' => 'ChannelBundle', 'relative' => 'app/bundles/ChannelBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle'), 'namespace' => 'Mautic\\ChannelBundle', 'symfonyBundleName' => 'MauticChannelBundle', 'bundleClass' => 'Mautic\\ChannelBundle\\MauticChannelBundle', 'permissionClasses' => ['Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions' => 'Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions'], 'config' => ['routes' => ['main' => ['mautic_message_index' => ['path' => '/messages/{page}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::indexAction'], 'mautic_message_contacts' => ['path' => '/messages/contacts/{objectId}/{channel}/{page}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::contactsAction'], 'mautic_message_action' => ['path' => '/messages/{objectAction}/{objectId}', 'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::executeAction'], 'mautic_channel_batch_contact_set' => ['path' => '/channels/batch/contact/set', 'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::setAction'], 'mautic_channel_batch_contact_view' => ['path' => '/channels/batch/contact/view', 'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::indexAction']], 'api' => ['mautic_api_messagetandard' => ['standard_entity' => true, 'name' => 'messages', 'path' => '/messages', 'controller' => 'Mautic\\ChannelBundle\\Controller\\Api\\MessageApiController']], 'public' => []], 'menu' => ['main' => ['mautic.channel.messages' => ['route' => 'mautic_message_index', 'access' => [0 => 'channel:messages:viewown', 1 => 'channel:messages:viewother'], 'parent' => 'mautic.core.channels', 'priority' => 110]], 'admin' => [], 'profile' => [], 'extra' => []], 'categories' => ['messages' => NULL], 'services' => ['helpers' => ['mautic.channel.helper.channel_list' => ['class' => 'Mautic\\ChannelBundle\\Helper\\ChannelListHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'translator'], 'alias' => 'channel']], 'repositories' => ['mautic.channel.repository.message_queue' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\ChannelBundle\\Entity\\MessageQueue']]]], 'parameters' => []]], 'MauticConfigBundle' => ['isPlugin' => false, 'base' => 'Config', 'bundle' => 'ConfigBundle', 'relative' => 'app/bundles/ConfigBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ConfigBundle'), 'namespace' => 'Mautic\\ConfigBundle', 'symfonyBundleName' => 'MauticConfigBundle', 'bundleClass' => 'Mautic\\ConfigBundle\\MauticConfigBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => ['mautic_config_action' => ['path' => '/config/{objectAction}/{objectId}', 'controller' => 'Mautic\\ConfigBundle\\Controller\\ConfigController::executeAction'], 'mautic_sysinfo_index' => ['path' => '/sysinfo', 'controller' => 'Mautic\\ConfigBundle\\Controller\\SysinfoController::indexAction']]], 'menu' => ['admin' => ['mautic.config.menu.index' => ['route' => 'mautic_config_action', 'routeParameters' => ['objectAction' => 'edit'], 'iconClass' => 'fa-cogs', 'id' => 'mautic_config_index', 'access' => 'admin'], 'mautic.sysinfo.menu.index' => ['route' => 'mautic_sysinfo_index', 'iconClass' => 'fa-life-ring', 'id' => 'mautic_sysinfo_index', 'access' => 'admin', 'checks' => ['parameters' => ['sysinfo_disabled' => false]]]]], 'parameters' => ['config_allowed_parameters' => [0 => 'kernel.project_dir', 1 => 'kernel.logs_dir']]]], 'MauticDashboardBundle' => ['isPlugin' => false, 'base' => 'Dashboard', 'bundle' => 'DashboardBundle', 'relative' => 'app/bundles/DashboardBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle'), 'namespace' => 'Mautic\\DashboardBundle', 'symfonyBundleName' => 'MauticDashboardBundle', 'bundleClass' => 'Mautic\\DashboardBundle\\MauticDashboardBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => ['mautic_dashboard_index' => ['path' => '/dashboard', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::indexAction'], 'mautic_dashboard_widget' => ['path' => '/dashboard/widget/{widgetId}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::widgetAction'], 'mautic_dashboard_action' => ['path' => '/dashboard/{objectAction}/{objectId}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::executeAction']], 'api' => ['mautic_widget_types' => ['path' => '/data', 'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getTypesAction'], 'mautic_widget_data' => ['path' => '/data/{type}', 'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getDataAction']]], 'menu' => ['main' => ['priority' => 100, 'items' => ['mautic.dashboard.menu.index' => ['route' => 'mautic_dashboard_index', 'iconClass' => 'fa-th-large']]]], 'services' => ['other' => ['mautic.dashboard.widget' => ['class' => 'Mautic\\DashboardBundle\\Dashboard\\Widget', 'arguments' => [0 => 'mautic.dashboard.model.dashboard', 1 => 'mautic.helper.user', 2 => 'session']]]], 'parameters' => ['dashboard_import_dir' => '%kernel.project_dir%/media/dashboards', 'dashboard_import_user_dir' => NULL]]], 'MauticDynamicContentBundle' => ['isPlugin' => false, 'base' => 'DynamicContent', 'bundle' => 'DynamicContentBundle', 'relative' => 'app/bundles/DynamicContentBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle'), 'namespace' => 'Mautic\\DynamicContentBundle', 'symfonyBundleName' => 'MauticDynamicContentBundle', 'bundleClass' => 'Mautic\\DynamicContentBundle\\MauticDynamicContentBundle', 'permissionClasses' => ['Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions' => 'Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions'], 'config' => ['menu' => ['main' => ['items' => ['mautic.dynamicContent.dynamicContent' => ['route' => 'mautic_dynamicContent_index', 'access' => [0 => 'dynamiccontent:dynamiccontents:viewown', 1 => 'dynamiccontent:dynamiccontents:viewother'], 'parent' => 'mautic.core.components', 'priority' => 90]]]], 'routes' => ['main' => ['mautic_dynamicContent_index' => ['path' => '/dwc/{page}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::indexAction'], 'mautic_dynamicContent_action' => ['path' => '/dwc/{objectAction}/{objectId}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::executeAction']], 'public' => ['mautic_api_dynamicContent_index' => ['path' => '/dwc', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::getAction'], 'mautic_api_dynamicContent_action' => ['path' => '/dwc/{objectAlias}', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::processAction']], 'api' => ['mautic_api_dynamicContent_standard' => ['standard_entity' => true, 'name' => 'dynamicContents', 'path' => '/dynamiccontents', 'controller' => 'Mautic\\DynamicContentBundle\\Controller\\Api\\DynamicContentApiController']]], 'services' => ['forms' => ['mautic.form.type.dwc_entry_filters' => ['class' => 'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType', 'arguments' => [0 => 'translator'], 'methodCalls' => ['setConnection' => [0 => 'database_connection']]]], 'repositories' => ['mautic.dynamicContent.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\DynamicContentBundle\\Entity\\Stat']], 'other' => ['mautic.helper.dynamicContent' => ['class' => 'Mautic\\DynamicContentBundle\\Helper\\DynamicContentHelper', 'arguments' => [0 => 'mautic.dynamicContent.model.dynamicContent', 1 => 'mautic.campaign.executioner.realtime', 2 => 'event_dispatcher', 3 => 'mautic.lead.model.lead']]]]]], 'MauticEmailBundle' => ['isPlugin' => false, 'base' => 'Email', 'bundle' => 'EmailBundle', 'relative' => 'app/bundles/EmailBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle'), 'namespace' => 'Mautic\\EmailBundle', 'symfonyBundleName' => 'MauticEmailBundle', 'bundleClass' => 'Mautic\\EmailBundle\\MauticEmailBundle', 'permissionClasses' => ['Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions' => 'Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions'], 'config' => ['routes' => ['main' => ['mautic_email_index' => ['path' => '/emails/{page}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::indexAction'], 'mautic_email_graph_stats' => ['path' => '/emails-graph-stats/{objectId}/{isVariant}/{dateFrom}/{dateTo}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailGraphStatsController::viewAction'], 'mautic_email_action' => ['path' => '/emails/{objectAction}/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::executeAction'], 'mautic_email_contacts' => ['path' => '/emails/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::contactsAction']], 'api' => ['mautic_api_emailstandard' => ['standard_entity' => true, 'name' => 'emails', 'path' => '/emails', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController'], 'mautic_api_sendemail' => ['path' => '/emails/{id}/send', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendAction', 'method' => 'POST'], 'mautic_api_sendcontactemail' => ['path' => '/emails/{id}/contact/{leadId}/send', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendLeadAction', 'method' => 'POST'], 'mautic_api_reply' => ['path' => '/emails/reply/{trackingHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::replyAction', 'method' => 'POST']], 'public' => ['mautic_plugin_tracker' => ['path' => '/plugin/{integration}/tracking.gif', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::pluginTrackingGifAction', 'requirements' => ['integration' => '.+']], 'mautic_email_tracker' => ['path' => '/email/{idHash}.gif', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::trackingImageAction'], 'mautic_email_webview' => ['path' => '/email/view/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::indexAction'], 'mautic_email_unsubscribe' => ['path' => '/email/unsubscribe/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::unsubscribeAction'], 'mautic_email_resubscribe' => ['path' => '/email/resubscribe/{idHash}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::resubscribeAction'], 'mautic_mailer_transport_callback' => ['path' => '/mailer/callback', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::mailerCallbackAction'], 'mautic_email_preview' => ['path' => '/email/preview/{objectId}', 'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction']]], 'menu' => ['main' => ['items' => ['mautic.email.emails' => ['route' => 'mautic_email_index', 'access' => [0 => 'email:emails:viewown', 1 => 'email:emails:viewother'], 'parent' => 'mautic.core.channels', 'priority' => 100]]]], 'categories' => ['email' => NULL], 'services' => ['other' => ['mautic.di.env_processor.mailerdsn' => ['class' => 'Mautic\\EmailBundle\\DependencyInjection\\EnvProcessor\\MailerDsnEnvVarProcessor', 'tag' => 'container.env_var_processor'], 'mautic.helper.mailbox' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Mailbox', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.helper.paths']], 'mautic.message.search.contact' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Search\\ContactFinder', 'arguments' => [0 => 'mautic.email.repository.stat', 1 => 'mautic.lead.repository.lead', 2 => 'monolog.logger.mautic']], 'mautic.message.processor.bounce' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce', 'arguments' => [0 => 'mailer.default_transport', 1 => 'mautic.message.search.contact', 2 => 'mautic.email.repository.stat', 3 => 'mautic.lead.model.lead', 4 => 'translator', 5 => 'monolog.logger.mautic', 6 => 'mautic.lead.model.dnc']], 'mautic.message.processor.unsubscribe' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Unsubscribe', 'arguments' => [0 => 'mailer.default_transport', 1 => 'mautic.message.search.contact', 2 => 'translator', 3 => 'monolog.logger.mautic', 4 => 'mautic.lead.model.dnc']], 'mautic.message.processor.feedbackloop' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\FeedbackLoop', 'arguments' => [0 => 'mautic.message.search.contact', 1 => 'translator', 2 => 'monolog.logger.mautic', 3 => 'mautic.lead.model.dnc']], 'mautic.message.processor.replier' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Reply', 'arguments' => [0 => 'mautic.email.repository.stat', 1 => 'mautic.message.search.contact', 2 => 'mautic.lead.model.lead', 3 => 'event_dispatcher', 4 => 'monolog.logger.mautic', 5 => 'mautic.tracker.contact', 6 => 'mautic.helper.email.address']], 'mautic.helper.mailer' => ['class' => 'Mautic\\EmailBundle\\Helper\\MailHelper', 'arguments' => [0 => 'mautic.factory', 1 => 'mailer']], 'mautic.validator.email' => ['class' => 'Mautic\\EmailBundle\\Helper\\EmailValidator', 'arguments' => [0 => 'translator', 1 => 'event_dispatcher']], 'mautic.email.fetcher' => ['class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Fetcher', 'arguments' => [0 => 'mautic.helper.mailbox', 1 => 'event_dispatcher', 2 => 'translator']], 'mautic.email.helper.stat' => ['class' => 'Mautic\\EmailBundle\\Stat\\StatHelper', 'arguments' => [0 => 'mautic.email.repository.stat']], 'mautic.email.helper.request.storage' => ['class' => 'Mautic\\EmailBundle\\Helper\\RequestStorageHelper', 'arguments' => [0 => 'mautic.helper.cache_storage']], 'mautic.email.helper.stats_collection' => ['class' => 'Mautic\\EmailBundle\\Helper\\StatsCollectionHelper', 'arguments' => [0 => 'mautic.email.stats.helper_container']], 'mautic.email.stats.helper_container' => ['class' => 'Mautic\\EmailBundle\\Stats\\StatHelperContainer'], 'mautic.email.stats.helper_bounced' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\BouncedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_clicked' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\ClickedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_failed' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\FailedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_opened' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\OpenedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_sent' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\SentHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper'], 'mautic.email.stats.helper_unsubscribed' => ['class' => 'Mautic\\EmailBundle\\Stats\\Helper\\UnsubscribedHelper', 'arguments' => [0 => 'mautic.stats.aggregate.collector', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.generated.columns.provider', 3 => 'mautic.helper.user'], 'tag' => 'mautic.email_stat_helper']], 'validator' => ['mautic.email.validator.multiple_emails_valid_validator' => ['class' => 'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator', 'arguments' => [0 => 'mautic.validator.email'], 'tag' => 'validator.constraint_validator'], 'mautic.email.validator.email_or_token_list_validator' => ['class' => 'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator', 'arguments' => [0 => 'mautic.validator.email', 1 => 'mautic.lead.validator.custom_field'], 'tag' => 'validator.constraint_validator']], 'repositories' => ['mautic.email.repository.email' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\Email']], 'mautic.email.repository.emailReply' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\EmailReply']], 'mautic.email.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\EmailBundle\\Entity\\Stat']]], 'fixtures' => ['mautic.email.fixture.email' => ['class' => 'Mautic\\EmailBundle\\DataFixtures\\ORM\\LoadEmailData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.email.model.email']]]], 'parameters' => ['mailer_from_name' => 'Mautic', 'mailer_from_email' => 'email@yoursite.com', 'mailer_reply_to_email' => NULL, 'mailer_return_path' => NULL, 'mailer_append_tracking_pixel' => true, 'mailer_convert_embed_images' => false, 'mailer_custom_headers' => [], 'mailer_dsn' => 'smtp://localhost:25', 'unsubscribe_text' => NULL, 'webview_text' => NULL, 'unsubscribe_message' => NULL, 'resubscribe_message' => NULL, 'monitored_email' => ['general' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'use_attachments' => false], 'EmailBundle_bounces' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL], 'EmailBundle_unsubscribes' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL], 'EmailBundle_replies' => ['address' => NULL, 'host' => NULL, 'port' => '993', 'encryption' => '/ssl', 'user' => NULL, 'password' => NULL, 'override_settings' => 0, 'folder' => NULL]], 'mailer_is_owner' => false, 'default_signature_text' => NULL, 'email_frequency_number' => 0, 'email_frequency_time' => 'DAY', 'show_contact_preferences' => false, 'show_contact_frequency' => false, 'show_contact_pause_dates' => false, 'show_contact_preferred_channels' => false, 'show_contact_categories' => false, 'show_contact_segments' => false, 'disable_trackable_urls' => false, 'theme_email_default' => 'blank', 'mailer_memory_msg_limit' => 100, 'minify_email_html' => false]]], 'MauticFormBundle' => ['isPlugin' => false, 'base' => 'Form', 'bundle' => 'FormBundle', 'relative' => 'app/bundles/FormBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/FormBundle'), 'namespace' => 'Mautic\\FormBundle', 'symfonyBundleName' => 'MauticFormBundle', 'bundleClass' => 'Mautic\\FormBundle\\MauticFormBundle', 'permissionClasses' => ['Mautic\\FormBundle\\Security\\Permissions\\FormPermissions' => 'Mautic\\FormBundle\\Security\\Permissions\\FormPermissions'], 'config' => ['routes' => ['main' => ['mautic_formaction_action' => ['path' => '/forms/action/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\ActionController::executeAction'], 'mautic_formfield_action' => ['path' => '/forms/field/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\FieldController::executeAction'], 'mautic_form_index' => ['path' => '/forms/{page}', 'controller' => 'Mautic\\FormBundle\\Controller\\FormController::indexAction'], 'mautic_form_results' => ['path' => '/forms/results/{objectId}/{page}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::indexAction'], 'mautic_form_export' => ['path' => '/forms/results/{objectId}/export/{format}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::exportAction', 'defaults' => ['format' => 'csv']], 'mautic_form_results_action' => ['path' => '/forms/results/{formId}/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::executeAction', 'defaults' => ['objectId' => 0]], 'mautic_form_action' => ['path' => '/forms/{objectAction}/{objectId}', 'controller' => 'Mautic\\FormBundle\\Controller\\FormController::executeAction']], 'api' => ['mautic_api_formstandard' => ['standard_entity' => true, 'name' => 'forms', 'path' => '/forms', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController'], 'mautic_api_formresults' => ['path' => '/forms/{formId}/submissions', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesAction'], 'mautic_api_formresult' => ['path' => '/forms/{formId}/submissions/{submissionId}', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntityAction'], 'mautic_api_contactformresults' => ['path' => '/forms/{formId}/submissions/contact/{contactId}', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesForContactAction'], 'mautic_api_formdeletefields' => ['path' => '/forms/{formId}/fields/delete', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteFieldsAction', 'method' => 'DELETE'], 'mautic_api_formdeleteactions' => ['path' => '/forms/{formId}/actions/delete', 'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteActionsAction', 'method' => 'DELETE']], 'public' => ['mautic_form_file_download' => ['path' => '/forms/results/file/{submissionId}/{field}', 'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::downloadFileAction'], 'mautic_form_postresults' => ['path' => '/form/submit', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::submitAction'], 'mautic_form_generateform' => ['path' => '/form/generate.js', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::generateAction'], 'mautic_form_postmessage' => ['path' => '/form/message', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::messageAction'], 'mautic_form_preview' => ['path' => '/form/{id}', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::previewAction', 'defaults' => ['id' => '0']], 'mautic_form_embed' => ['path' => '/form/embed/{id}', 'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::embedAction'], 'mautic_form_postresults_ajax' => ['path' => '/form/submit/ajax', 'controller' => 'Mautic\\FormBundle\\Controller\\AjaxController::submitAction']]], 'menu' => ['main' => ['items' => ['mautic.form.forms' => ['route' => 'mautic_form_index', 'access' => [0 => 'form:forms:viewown', 1 => 'form:forms:viewother'], 'parent' => 'mautic.core.components', 'priority' => 200]]]], 'categories' => ['form' => NULL], 'services' => ['forms' => ['mautic.form.type.field' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\FieldType', 'arguments' => [0 => 'translator', 1 => 'mautic.form.collector.object', 2 => 'mautic.form.collector.field', 3 => 'mautic.form.collector.already.mapped.field'], 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]], 'mautic.form.type.form_submitaction_sendemail' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.core_parameters'], 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]], 'mautic.form.type.form_submitaction_repost' => ['class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType', 'methodCalls' => ['setFieldModel' => [0 => 'mautic.form.model.field'], 'setFormModel' => [0 => 'mautic.form.model.form']]]], 'repositories' => ['mautic.form.repository.form' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\FormBundle\\Entity\\Form'], 'mautic.form.repository.submission' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => 'Mautic\\FormBundle\\Entity\\Submission']], 'other' => ['mautic.form.collector.object' => ['class' => 'Mautic\\FormBundle\\Collector\\ObjectCollector', 'arguments' => [0 => 'event_dispatcher']], 'mautic.form.collector.field' => ['class' => 'Mautic\\FormBundle\\Collector\\FieldCollector', 'arguments' => [0 => 'event_dispatcher']], 'mautic.form.collector.mapped.object' => ['class' => 'Mautic\\FormBundle\\Collector\\MappedObjectCollector', 'arguments' => [0 => 'mautic.form.collector.field']], 'mautic.form.collector.already.mapped.field' => ['class' => 'Mautic\\FormBundle\\Collector\\AlreadyMappedFieldCollector', 'arguments' => [0 => 'mautic.cache.provider']], 'mautic.helper.form.field_helper' => ['class' => 'Mautic\\FormBundle\\Helper\\FormFieldHelper', 'arguments' => [0 => 'translator', 1 => 'validator']], 'mautic.form.helper.form_uploader' => ['class' => 'Mautic\\FormBundle\\Helper\\FormUploader', 'arguments' => [0 => 'mautic.helper.file_uploader', 1 => 'mautic.helper.core_parameters']], 'mautic.form.helper.token' => ['class' => 'Mautic\\FormBundle\\Helper\\TokenHelper', 'arguments' => [0 => 'mautic.form.model.form', 1 => 'mautic.security']], 'mautic.form.service.field.value.transformer' => ['class' => 'Mautic\\FormBundle\\Event\\Service\\FieldValueTransformer', 'arguments' => [0 => 'router']], 'mautic.form.helper.properties.accessor' => ['class' => 'Mautic\\FormBundle\\Helper\\PropertiesAccessor', 'arguments' => [0 => 'mautic.form.model.form']]], 'validator' => ['mautic.form.validator.upload_field_validator' => ['class' => 'Mautic\\FormBundle\\Validator\\UploadFieldValidator', 'arguments' => [0 => 'mautic.core.validator.file_upload']], 'mautic.form.validator.constraint.file_extension_constraint_validator' => ['class' => 'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator', 'arguments' => [0 => 'mautic.helper.core_parameters'], 'tags' => ['name' => 'validator.constraint_validator', 'alias' => 'file_extension_constraint_validator']]], 'fixtures' => ['mautic.form.fixture.form' => ['class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.form.model.form', 1 => 'mautic.form.model.field', 2 => 'mautic.form.model.action', 3 => 'event_dispatcher']], 'mautic.form.fixture.form_result' => ['class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormResultData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page', 1 => 'mautic.form.model.submission']]]], 'parameters' => ['form_upload_dir' => '%kernel.project_dir%/media/files/form', 'blacklisted_extensions' => [0 => 'php', 1 => 'sh'], 'do_not_submit_emails' => [], 'form_results_data_sources' => false, 'successful_submit_action' => 'top']]], 'MauticInstallBundle' => ['isPlugin' => false, 'base' => 'Install', 'bundle' => 'InstallBundle', 'relative' => 'app/bundles/InstallBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/InstallBundle'), 'namespace' => 'Mautic\\InstallBundle', 'symfonyBundleName' => 'MauticInstallBundle', 'bundleClass' => 'Mautic\\InstallBundle\\MauticInstallBundle', 'permissionClasses' => [], 'config' => ['routes' => ['public' => ['mautic_installer_home' => ['path' => '/installer', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction'], 'mautic_installer_remove_slash' => ['path' => '/installer/', 'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction'], 'mautic_installer_step' => ['path' => '/installer/step/{index}', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction'], 'mautic_installer_final' => ['path' => '/installer/final', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::finalAction'], 'mautic_installer_catchcall' => ['path' => '/installer/{noerror}', 'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction', 'requirements' => ['noerror' => '^(?).+']]]], 'services' => ['fixtures' => ['mautic.install.fixture.lead_field' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LeadFieldData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'translator']], 'mautic.install.fixture.role' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\RoleData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'translator']], 'mautic.install.fixture.report_data' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LoadReportData', 'tag' => 'doctrine.fixture.orm', 'arguments' => []], 'mautic.install.fixture.grape_js' => ['class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\GrapesJsData', 'tag' => 'doctrine.fixture.orm', 'arguments' => []]], 'other' => ['mautic.install.configurator.step.check' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\CheckStep', 'arguments' => [0 => 'mautic.configurator', 1 => '%kernel.project_dir%', 2 => 'request_stack', 3 => 'mautic.cipher.openssl'], 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 0]], 'mautic.install.configurator.step.doctrine' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\DoctrineStep', 'arguments' => [0 => 'mautic.configurator'], 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 1]], 'mautic.install.configurator.step.user' => ['class' => 'Mautic\\InstallBundle\\Configurator\\Step\\UserStep', 'tag' => 'mautic.configurator.step', 'tagArguments' => ['priority' => 2]], 'mautic.install.service' => ['class' => 'Mautic\\InstallBundle\\Install\\InstallService', 'arguments' => [0 => 'mautic.configurator', 1 => 'mautic.helper.cache', 2 => 'mautic.helper.paths', 3 => 'doctrine.orm.entity_manager', 4 => 'translator', 5 => 'kernel', 6 => 'validator', 7 => 'security.password_hasher', 8 => 'mautic.doctrine.loader.mautic_fixtures_loader']], 'mautic.install.leadcolumns' => ['class' => 'Mautic\\InstallBundle\\EventListener\\DoctrineEventSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => []]]]]], 'IntegrationsBundle' => ['isPlugin' => false, 'base' => 'Integrations', 'bundle' => 'IntegrationsBundle', 'relative' => 'app/bundles/IntegrationsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle'), 'namespace' => 'Mautic\\IntegrationsBundle', 'symfonyBundleName' => 'IntegrationsBundle', 'bundleClass' => 'Mautic\\IntegrationsBundle\\IntegrationsBundle', 'permissionClasses' => [], 'config' => ['name' => 'Integrations', 'description' => 'Adds support for plugin integrations', 'author' => 'Mautic, Inc.', 'routes' => ['main' => ['mautic_integration_config' => ['path' => '/integration/{integration}/config', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\ConfigController::editAction'], 'mautic_integration_config_field_pagination' => ['path' => '/integration/{integration}/config/{object}/{page}', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\FieldPaginationController::paginateAction', 'defaults' => ['page' => 1]], 'mautic_integration_config_field_update' => ['path' => '/integration/{integration}/config/{object}/field/{field}', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\UpdateFieldController::updateAction']], 'public' => ['mautic_integration_public_callback' => ['path' => '/integration/{integration}/callback', 'controller' => 'Mautic\\IntegrationsBundle\\Controller\\AuthController::callbackAction']]], 'services' => ['events' => ['mautic.integrations.subscriber.controller' => ['class' => 'Mautic\\IntegrationsBundle\\EventListener\\ControllerSubscriber', 'arguments' => [0 => 'mautic.integrations.helper', 1 => 'controller_resolver']]], 'helpers' => ['mautic.integrations.helper.variable_expresser' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\VariableExpresser\\VariableExpresserHelper'], 'mautic.integrations.helper' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper', 'arguments' => [0 => 'mautic.plugin.integrations.repository.integration', 1 => 'mautic.integrations.service.encryption', 2 => 'event_dispatcher']], 'mautic.integrations.helper.auth_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\AuthIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.sync_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\SyncIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper', 1 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.helper.config_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\ConfigIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.builder_integrations' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\BuilderIntegrationsHelper', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.helper.field_validator' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\FieldValidationHelper', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 1 => 'translator']]], 'other' => ['mautic.integrations.service.encryption' => ['class' => 'Mautic\\IntegrationsBundle\\Facade\\EncryptionService', 'arguments' => [0 => 'mautic.helper.encryption']], 'mautic.integrations.internal.object_provider' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.integrations.sync.notification.helper.owner_provider' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\OwnerProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.auth_provider.api_key' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory'], 'mautic.integrations.auth_provider.basic_auth' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\HttpFactory'], 'mautic.integrations.auth_provider.oauth1atwolegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth1aTwoLegged\\HttpFactory'], 'mautic.integrations.auth_provider.oauth2twolegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory'], 'mautic.integrations.auth_provider.oauth2threelegged' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\HttpFactory'], 'mautic.integrations.auth_provider.token_persistence_factory' => ['class' => 'Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory', 'arguments' => [0 => 'mautic.integrations.helper']], 'mautic.integrations.token.parser' => ['class' => 'Mautic\\IntegrationsBundle\\Helper\\TokenParser']], 'repositories' => ['mautic.integrations.repository.field_change' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\IntegrationsBundle\\Entity\\FieldChange']], 'mautic.integrations.repository.object_mapping' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\IntegrationsBundle\\Entity\\ObjectMapping']], 'mautic.plugin.integrations.repository.integration' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PluginBundle\\Entity\\Integration']]], 'sync' => ['mautic.sync.logger' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Logger\\DebugLogger', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.integrations.helper.sync_judge' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\SyncJudge'], 'mautic.integrations.helper.contact_object' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\ContactObjectHelper', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.lead.repository.lead', 2 => 'doctrine.dbal.default_connection', 3 => 'mautic.lead.model.field', 4 => 'mautic.lead.model.dnc', 5 => 'mautic.lead.model.company']], 'mautic.integrations.helper.company_object' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\CompanyObjectHelper', 'arguments' => [0 => 'mautic.lead.model.company', 1 => 'mautic.lead.repository.company', 2 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.data_exchange.mautic.order_executioner' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\OrderExecutioner', 'arguments' => [0 => 'mautic.integrations.helper.sync_mapping', 1 => 'event_dispatcher', 2 => 'mautic.integrations.internal.object_provider', 3 => 'mautic.integrations.internal.reference_resolver', 4 => 'mautic.integrations.internal.field_validator']], 'mautic.integrations.internal.field_validator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\FieldValidator', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'mautic.integrations.sync.notification.bulk_notification']], 'mautic.integrations.internal.reference_resolver' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\ReferenceResolver', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.data_exchange.mautic.field_helper' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Helper\\FieldHelper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.integrations.helper.variable_expresser', 2 => 'mautic.channel.helper.channel_list', 3 => 'translator', 4 => 'event_dispatcher', 5 => 'mautic.integrations.internal.object_provider']], 'mautic.integrations.sync.sync_process.value_helper' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Helper\\ValueHelper', 'arguments' => []], 'mautic.integrations.sync.data_exchange.mautic.field_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FieldBuilder', 'arguments' => [0 => 'router', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.helper.contact_object']], 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FullObjectReportBuilder', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic.field_builder', 1 => 'mautic.integrations.internal.object_provider', 2 => 'event_dispatcher']], 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\PartialObjectReportBuilder', 'arguments' => [0 => 'mautic.integrations.repository.field_change', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.sync.data_exchange.mautic.field_builder', 3 => 'mautic.integrations.internal.object_provider', 4 => 'event_dispatcher']], 'mautic.integrations.sync.data_exchange.mautic' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\MauticSyncDataExchange', 'arguments' => [0 => 'mautic.integrations.repository.field_change', 1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper', 2 => 'mautic.integrations.helper.sync_mapping', 3 => 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder', 4 => 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder', 5 => 'mautic.integrations.sync.data_exchange.mautic.order_executioner']], 'mautic.integrations.sync.integration_process.object_change_generator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\ObjectChangeGenerator', 'arguments' => [0 => 'mautic.integrations.sync.sync_process.value_helper']], 'mautic.integrations.sync.integration_process' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\IntegrationSyncProcess', 'arguments' => [0 => 'mautic.integrations.helper.sync_date', 1 => 'mautic.integrations.helper.sync_mapping', 2 => 'mautic.integrations.sync.integration_process.object_change_generator']], 'mautic.integrations.sync.internal_process.object_change_generator' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\ObjectChangeGenerator', 'arguments' => [0 => 'mautic.integrations.helper.sync_judge', 1 => 'mautic.integrations.sync.sync_process.value_helper', 2 => 'mautic.integrations.sync.data_exchange.mautic.field_helper']], 'mautic.integrations.sync.internal_process' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\MauticSyncProcess', 'arguments' => [0 => 'mautic.integrations.helper.sync_date', 1 => 'mautic.integrations.sync.internal_process.object_change_generator']], 'mautic.integrations.sync.service' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncService\\SyncService', 'arguments' => [0 => 'mautic.integrations.sync.data_exchange.mautic', 1 => 'mautic.integrations.helper.sync_date', 2 => 'mautic.integrations.helper.sync_mapping', 3 => 'mautic.integrations.sync.helper.relations', 4 => 'mautic.integrations.helper.sync_integrations', 5 => 'event_dispatcher', 6 => 'mautic.integrations.sync.notifier', 7 => 'mautic.integrations.sync.integration_process', 8 => 'mautic.integrations.sync.internal_process'], 'methodCalls' => ['initiateDebugLogger' => [0 => 'mautic.sync.logger']]], 'mautic.integrations.helper.sync_date' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\SyncDateHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.helper.sync_mapping' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\MappingHelper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.integrations.repository.object_mapping', 2 => 'mautic.integrations.internal.object_provider', 3 => 'event_dispatcher']], 'mautic.integrations.sync.helper.relations' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\RelationsHelper', 'arguments' => [0 => 'mautic.integrations.helper.sync_mapping']], 'mautic.integrations.sync.notifier' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Notifier', 'arguments' => [0 => 'mautic.integrations.sync.notification.handler_container', 1 => 'mautic.integrations.helper.sync_integrations', 2 => 'mautic.integrations.helper.config_integrations']], 'mautic.integrations.sync.notification.writer' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Writer', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'mautic.core.model.auditlog', 2 => 'doctrine.orm.entity_manager']], 'mautic.integrations.sync.notification.handler_container' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\HandlerContainer'], 'mautic.integrations.sync.notification.handler_company' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\CompanyNotificationHandler', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.helper_user_notification', 2 => 'mautic.integrations.sync.notification.helper_company'], 'tag' => 'mautic.sync.notification_handler'], 'mautic.integrations.sync.notification.handler_contact' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\ContactNotificationHandler', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.lead.repository.lead_event_log', 2 => 'doctrine.orm.entity_manager', 3 => 'mautic.integrations.sync.notification.helper_user_summary_notification'], 'tag' => 'mautic.sync.notification_handler'], 'mautic.integrations.sync.notification.helper_company' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\CompanyHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.notification.helper_user' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserHelper', 'arguments' => [0 => 'doctrine.dbal.default_connection']], 'mautic.integrations.sync.notification.helper_route' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\RouteHelper', 'arguments' => [0 => 'mautic.integrations.internal.object_provider', 1 => 'event_dispatcher']], 'mautic.integrations.sync.notification.helper_user_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationHelper', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.user_notification_builder']], 'mautic.integrations.sync.notification.user_notification_builder' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationBuilder', 'arguments' => [0 => 'mautic.integrations.sync.notification.helper_user', 1 => 'mautic.integrations.sync.notification.helper.owner_provider', 2 => 'mautic.integrations.sync.notification.helper_route', 3 => 'translator']], 'mautic.integrations.sync.notification.bulk_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\BulkNotification', 'arguments' => [0 => 'mautic.core.service.bulk_notification', 1 => 'mautic.integrations.sync.notification.user_notification_builder', 2 => 'doctrine.orm.entity_manager']], 'mautic.integrations.sync.notification.helper_user_summary_notification' => ['class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserSummaryNotificationHelper', 'arguments' => [0 => 'mautic.integrations.sync.notification.writer', 1 => 'mautic.integrations.sync.notification.helper_user', 2 => 'mautic.integrations.sync.notification.helper.owner_provider', 3 => 'mautic.integrations.sync.notification.helper_route', 4 => 'translator']]]]]], 'MauticLeadBundle' => ['isPlugin' => false, 'base' => 'Lead', 'bundle' => 'LeadBundle', 'relative' => 'app/bundles/LeadBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle'), 'namespace' => 'Mautic\\LeadBundle', 'symfonyBundleName' => 'MauticLeadBundle', 'bundleClass' => 'Mautic\\LeadBundle\\MauticLeadBundle', 'permissionClasses' => ['Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions' => 'Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions'], 'config' => ['routes' => ['main' => ['mautic_plugin_timeline_index' => ['path' => '/plugin/{integration}/timeline/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginIndexAction', 'requirements' => ['integration' => '.+']], 'mautic_plugin_timeline_view' => ['path' => '/plugin/{integration}/timeline/view/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginViewAction', 'requirements' => ['integration' => '.+', 'leadId' => '\\d+']], 'mautic_segment_batch_contact_set' => ['path' => '/segments/batch/contact/set', 'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::setAction'], 'mautic_segment_batch_contact_view' => ['path' => '/segments/batch/contact/view', 'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::indexAction'], 'mautic_segment_index' => ['path' => '/segments/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::indexAction'], 'mautic_segment_action' => ['path' => '/segments/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::executeAction'], 'mautic_contactfield_index' => ['path' => '/contacts/fields/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::indexAction'], 'mautic_contactfield_action' => ['path' => '/contacts/fields/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::executeAction'], 'mautic_contact_index' => ['path' => '/contacts/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::indexAction'], 'mautic_contactnote_index' => ['path' => '/contacts/notes/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::indexAction', 'defaults' => ['leadId' => 0], 'requirements' => ['leadId' => '\\d+']], 'mautic_contactnote_action' => ['path' => '/contacts/notes/{leadId}/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::executeNoteAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contacttimeline_action' => ['path' => '/contacts/timeline/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::indexAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_timeline_export_action' => ['path' => '/contacts/timeline/batchExport/{leadId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::batchExportAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_auditlog_action' => ['path' => '/contacts/auditlog/{leadId}/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::indexAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_auditlog_export_action' => ['path' => '/contacts/auditlog/batchExport/{leadId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::batchExportAction', 'requirements' => ['leadId' => '\\d+']], 'mautic_contact_export_action' => ['path' => '/contacts/contact/export/{contactId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactExportAction', 'requirements' => ['contactId' => '\\d+']], 'mautic_import_index' => ['path' => '/{object}/import/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::indexAction'], 'mautic_import_action' => ['path' => '/{object}/import/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::executeAction'], 'mautic_contact_action' => ['path' => '/contacts/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::executeAction'], 'mautic_company_index' => ['path' => '/companies/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::indexAction'], 'mautic_company_contacts_list' => ['path' => '/company/{objectId}/contacts/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::contactsListAction', 'requirements' => ['objectId' => '\\d+']], 'mautic_company_action' => ['path' => '/companies/{objectAction}/{objectId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::executeAction'], 'mautic_company_export_action' => ['path' => '/companies/company/export/{companyId}', 'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::companyExportAction', 'requirements' => ['companyId' => '\\d+']], 'mautic_segment_contacts' => ['path' => '/segment/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::contactsAction'], 'mautic_contact_stats' => ['path' => '/contacts/view/{objectId}/stats', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactStatsAction'], 'mautic_contact_export_download' => ['path' => '/contacts/export/download/{fileName}', 'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::downloadExportAction']], 'api' => ['mautic_api_contactsstandard' => ['standard_entity' => true, 'name' => 'contacts', 'path' => '/contacts', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController'], 'mautic_api_dncaddcontact' => ['path' => '/contacts/{id}/dnc/{channel}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addDncAction', 'method' => 'POST', 'defaults' => ['channel' => 'email']], 'mautic_api_dncremovecontact' => ['path' => '/contacts/{id}/dnc/{channel}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeDncAction', 'method' => 'POST'], 'mautic_api_getcontactevents' => ['path' => '/contacts/{id}/activity', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getActivityAction'], 'mautic_api_getcontactsevents' => ['path' => '/contacts/activity', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getAllActivityAction'], 'mautic_api_getcontactnotes' => ['path' => '/contacts/{id}/notes', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getNotesAction'], 'mautic_api_getcontactdevices' => ['path' => '/contacts/{id}/devices', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getDevicesAction'], 'mautic_api_getcontactcampaigns' => ['path' => '/contacts/{id}/campaigns', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCampaignsAction'], 'mautic_api_getcontactssegments' => ['path' => '/contacts/{id}/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getListsAction'], 'mautic_api_getcontactscompanies' => ['path' => '/contacts/{id}/companies', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCompaniesAction'], 'mautic_api_utmcreateevent' => ['path' => '/contacts/{id}/utm/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addUtmTagsAction', 'method' => 'POST'], 'mautic_api_utmremoveevent' => ['path' => '/contacts/{id}/utm/{utmid}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeUtmTagsAction', 'method' => 'POST'], 'mautic_api_getcontactowners' => ['path' => '/contacts/list/owners', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getOwnersAction'], 'mautic_api_getcontactfields' => ['path' => '/contacts/list/fields', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getFieldsAction'], 'mautic_api_getcontactsegments' => ['path' => '/contacts/list/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::getListsAction'], 'mautic_api_segmentsstandard' => ['standard_entity' => true, 'name' => 'lists', 'path' => '/segments', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController'], 'mautic_api_segmentaddcontact' => ['path' => '/segments/{id}/contact/{leadId}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadAction', 'method' => 'POST'], 'mautic_api_segmentaddcontacts' => ['path' => '/segments/{id}/contacts/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadsAction', 'method' => 'POST'], 'mautic_api_segmentremovecontact' => ['path' => '/segments/{id}/contact/{leadId}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::removeLeadAction', 'method' => 'POST'], 'mautic_api_companiesstandard' => ['standard_entity' => true, 'name' => 'companies', 'path' => '/companies', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController'], 'mautic_api_companyaddcontact' => ['path' => '/companies/{companyId}/contact/{contactId}/add', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::addContactAction', 'method' => 'POST'], 'mautic_api_companyremovecontact' => ['path' => '/companies/{companyId}/contact/{contactId}/remove', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::removeContactAction', 'method' => 'POST'], 'mautic_api_fieldsstandard' => ['standard_entity' => true, 'name' => 'fields', 'path' => '/fields/{object}', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\FieldApiController', 'defaults' => ['object' => 'contact']], 'mautic_api_notesstandard' => ['standard_entity' => true, 'name' => 'notes', 'path' => '/notes', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\NoteApiController'], 'mautic_api_devicesstandard' => ['standard_entity' => true, 'name' => 'devices', 'path' => '/devices', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\DeviceApiController'], 'mautic_api_tagsstandard' => ['standard_entity' => true, 'name' => 'tags', 'path' => '/tags', 'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\TagApiController']]], 'menu' => ['main' => ['items' => ['mautic.lead.leads' => ['iconClass' => 'fa-user', 'access' => [0 => 'lead:leads:viewown', 1 => 'lead:leads:viewother'], 'route' => 'mautic_contact_index', 'priority' => 80], 'mautic.companies.menu.index' => ['route' => 'mautic_company_index', 'iconClass' => 'fa-building-o', 'access' => [0 => 'lead:leads:viewother'], 'priority' => 75], 'mautic.lead.list.menu.index' => ['iconClass' => 'fa-pie-chart', 'access' => [0 => 'lead:leads:viewown', 1 => 'lead:leads:viewother'], 'route' => 'mautic_segment_index', 'priority' => 70]]], 'admin' => ['priority' => 50, 'items' => ['mautic.lead.field.menu.index' => ['id' => 'mautic_lead_field', 'iconClass' => 'fa-list', 'route' => 'mautic_contactfield_index', 'access' => 'lead:fields:full']]]], 'categories' => ['segment' => NULL], 'services' => ['events' => ['mautic.lead.serializer.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\SerializerSubscriber', 'arguments' => [0 => 'request_stack'], 'tag' => 'jms_serializer.event_subscriber', 'tagArguments' => ['event' => 'serializer.post_serialize']], 'mautic.lead.export_scheduled_audit_log_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerAuditLogSubscriber', 'arguments' => [0 => 'mautic.core.model.auditlog', 1 => 'mautic.helper.ip_lookup']], 'mautic.lead.export_scheduled_logger_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerLoggerSubscriber', 'arguments' => [0 => 'logger']], 'mautic.lead.export_scheduled_notification_subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerNotificationSubscriber', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'translator']], 'mautic.lead.contact_scheduled_export.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\ContactScheduledExportSubscriber', 'arguments' => [0 => 'mautic.lead.model.export_scheduler']]], 'other' => ['mautic.lead.doctrine.subscriber' => ['class' => 'Mautic\\LeadBundle\\EventListener\\DoctrineSubscriber', 'tag' => 'doctrine.event_subscriber', 'arguments' => [0 => 'monolog.logger.mautic']], 'mautic.validator.leadlistaccess' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator', 'arguments' => [0 => 'mautic.lead.model.list'], 'tag' => 'validator.constraint_validator', 'alias' => 'leadlist_access'], 'mautic.validator.emailaddress' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator', 'arguments' => [0 => 'mautic.validator.email'], 'tag' => 'validator.constraint_validator'], 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator', 'tag' => 'validator.constraint_validator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.helper.field.alias', 2 => '@doctrine.orm.entity_manager', 3 => 'translator', 4 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => ['class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator', 'tag' => 'validator.constraint_validator', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.helper.field.alias']], 'mautic.lead.constraint.alias' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator', 'arguments' => [0 => 'mautic.lead.repository.lead_list', 1 => 'mautic.helper.user'], 'tag' => 'validator.constraint_validator', 'alias' => 'uniqueleadlist'], 'mautic.lead.validator.custom_field' => ['class' => 'Mautic\\LeadBundle\\Validator\\CustomFieldValidator', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'translator']], 'mautic.lead_list.constraint.in_use' => ['class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator', 'arguments' => [0 => 'mautic.lead.model.list'], 'tag' => 'validator.constraint_validator', 'alias' => 'segment_in_use'], 'mautic.lead.event.dispatcher' => ['class' => 'Mautic\\LeadBundle\\Helper\\LeadChangeEventDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.merger' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactMerger', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.lead.repository.merged_records', 2 => 'event_dispatcher', 3 => 'monolog.logger.mautic']], 'mautic.lead.deduper' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactDeduper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.merger', 2 => 'mautic.lead.repository.lead']], 'mautic.company.deduper' => ['class' => 'Mautic\\LeadBundle\\Deduplicate\\CompanyDeduper', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.repository.company']], 'mautic.lead.helper.primary_company' => ['class' => 'Mautic\\LeadBundle\\Helper\\PrimaryCompanyHelper', 'arguments' => [0 => 'mautic.lead.repository.company_lead']], 'mautic.lead.helper.contact_request_helper' => ['class' => 'Mautic\\LeadBundle\\Helper\\ContactRequestHelper', 'arguments' => [0 => 'mautic.lead.model.lead', 1 => 'mautic.tracker.contact', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.ip_lookup', 4 => 'request_stack', 5 => 'monolog.logger.mautic', 6 => 'event_dispatcher', 7 => 'mautic.lead.merger']], 'mautic.lead.validator.length' => ['class' => 'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator', 'tag' => 'validator.constraint_validator'], 'mautic.lead.segment.stat.dependencies' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentDependencies', 'arguments' => [0 => 'mautic.email.model.email', 1 => 'mautic.campaign.model.campaign', 2 => 'mautic.form.model.action', 3 => 'mautic.lead.model.list', 4 => 'mautic.point.model.triggerevent', 5 => 'mautic.report.model.report']], 'mautic.lead.segment.stat.chart.query.factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentChartQueryFactory', 'arguments' => []], 'mautic.lead.segment.stat.campaign.share' => ['class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentCampaignShare', 'arguments' => [0 => 'mautic.campaign.model.campaign', 1 => 'mautic.helper.cache_storage', 2 => '@doctrine.orm.entity_manager']], 'mautic.lead.columns.dictionary' => ['class' => 'Mautic\\LeadBundle\\Services\\ContactColumnsDictionary', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'translator', 2 => 'mautic.helper.core_parameters']], 'mautic.lead.model.lead_segment_filter_factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterFactory', 'arguments' => [0 => 'mautic.lead.model.lead_segment_schema_cache', 1 => '@service_container', 2 => 'mautic.lead.model.lead_segment_decorator_factory']], 'mautic.tracker.contact' => ['class' => 'Mautic\\LeadBundle\\Tracker\\ContactTracker', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'mautic.lead.service.contact_tracking_service', 2 => 'mautic.tracker.device', 3 => 'mautic.security', 4 => 'monolog.logger.mautic', 5 => 'mautic.helper.ip_lookup', 6 => 'request_stack', 7 => 'mautic.helper.core_parameters', 8 => 'event_dispatcher', 9 => 'mautic.lead.model.field']], 'mautic.tracker.device' => ['class' => 'Mautic\\LeadBundle\\Tracker\\DeviceTracker', 'arguments' => [0 => 'mautic.lead.service.device_creator_service', 1 => 'mautic.lead.factory.device_detector_factory', 2 => 'mautic.lead.service.device_tracking_service', 3 => 'monolog.logger.mautic']], 'mautic.lead.field.custom_field_column' => ['class' => 'Mautic\\LeadBundle\\Field\\CustomFieldColumn', 'arguments' => [0 => 'mautic.schema.helper.column', 1 => 'mautic.lead.field.schema_definition', 2 => 'monolog.logger.mautic', 3 => 'mautic.lead.field.lead_field_saver', 4 => 'mautic.lead.field.custom_field_index', 5 => 'mautic.lead.field.dispatcher.field_column_dispatcher', 6 => 'translator']], 'mautic.lead.field.custom_field_index' => ['class' => 'Mautic\\LeadBundle\\Field\\CustomFieldIndex', 'arguments' => [0 => 'mautic.schema.helper.index', 1 => 'monolog.logger.mautic', 2 => 'mautic.lead.field.fields_with_unique_identifier']], 'mautic.lead.repository.lead_segment_filter_descriptor' => ['class' => 'Mautic\\LeadBundle\\Services\\ContactSegmentFilterDictionary', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.service.segment_dependency_tree_factory' => ['class' => 'Mautic\\LeadBundle\\Services\\SegmentDependencyTreeFactory', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'router']], 'mautic.lead.repository.lead_segment_query_builder' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\ContactSegmentQueryBuilder', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.lead.model.random_parameter_name', 2 => 'event_dispatcher']], 'mautic.lead.model.lead_segment_service' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentService', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_factory', 1 => 'mautic.lead.repository.lead_segment_query_builder', 2 => 'monolog.logger.mautic']], 'mautic.lead.model.lead_segment_schema_cache' => ['class' => 'Mautic\\LeadBundle\\Segment\\TableSchemaColumnsCache', 'arguments' => [0 => 'doctrine.orm.entity_manager']], 'mautic.lead.model.relative_date' => ['class' => 'Mautic\\LeadBundle\\Segment\\RelativeDate', 'arguments' => [0 => 'translator']], 'mautic.lead.model.lead_segment_filter_operator' => ['class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterOperator', 'arguments' => [0 => 'mautic.lead.provider.fillterOperator']], 'mautic.lead.model.lead_segment_decorator_factory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DecoratorFactory', 'arguments' => [0 => 'mautic.lead.repository.lead_segment_filter_descriptor', 1 => 'mautic.lead.model.lead_segment_decorator_base', 2 => 'mautic.lead.model.lead_segment_decorator_custom_mapped', 3 => 'mautic.lead.model.lead_segment.decorator.date.optionFactory', 4 => 'mautic.lead.model.lead_segment_decorator_company', 5 => 'event_dispatcher']], 'mautic.lead.model.lead_segment_decorator_base' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\BaseDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_custom_mapped' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CustomMappedDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_company' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CompanyDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment_decorator_date' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DateDecorator', 'arguments' => [0 => 'mautic.lead.model.lead_segment_filter_operator', 1 => 'mautic.lead.repository.lead_segment_filter_descriptor']], 'mautic.lead.model.lead_segment.decorator.date.optionFactory' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\DateOptionFactory', 'arguments' => [0 => 'mautic.lead.model.lead_segment_decorator_date', 1 => 'mautic.lead.model.relative_date', 2 => 'mautic.lead.model.lead_segment.timezoneResolver']], 'mautic.lead.model.lead_segment.timezoneResolver' => ['class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\TimezoneResolver', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.provider.fillterOperator' => ['class' => 'Mautic\\LeadBundle\\Provider\\FilterOperatorProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'translator']], 'mautic.lead.provider.typeOperator' => ['class' => 'Mautic\\LeadBundle\\Provider\\TypeOperatorProvider', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.lead.provider.fillterOperator']], 'mautic.lead.provider.fieldChoices' => ['class' => 'Mautic\\LeadBundle\\Provider\\FieldChoicesProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.provider.formAdjustments' => ['class' => 'Mautic\\LeadBundle\\Provider\\FormAdjustmentsProvider', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.model.random_parameter_name' => ['class' => 'Mautic\\LeadBundle\\Segment\\RandomParameterName'], 'mautic.lead.segment.operator_options' => ['class' => 'Mautic\\LeadBundle\\Segment\\OperatorOptions'], 'mautic.lead.reportbundle.fields_builder' => ['class' => 'Mautic\\LeadBundle\\Report\\FieldsBuilder', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.model.list', 2 => 'mautic.user.model.user', 3 => 'mautic.lead.model.lead']], 'mautic.lead.factory.device_detector_factory' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Factory\\DeviceDetectorFactory\\DeviceDetectorFactory', 'arguments' => [0 => 'mautic.cache.provider']], 'mautic.lead.service.contact_tracking_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\ContactTrackingService\\ContactTrackingService', 'arguments' => [0 => 'mautic.helper.cookie', 1 => 'mautic.lead.repository.lead_device', 2 => 'mautic.lead.repository.lead', 3 => 'mautic.lead.repository.merged_records', 4 => 'request_stack']], 'mautic.lead.service.device_creator_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceCreatorService\\DeviceCreatorService'], 'mautic.lead.service.device_tracking_service' => ['class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceTrackingService\\DeviceTrackingService', 'arguments' => [0 => 'mautic.helper.cookie', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.lead.repository.lead_device', 3 => 'mautic.helper.random', 4 => 'request_stack', 5 => 'mautic.security']], 'mautic.lead.field.schema_definition' => ['class' => 'Mautic\\LeadBundle\\Field\\SchemaDefinition'], 'mautic.lead.field.dispatcher.field_save_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldSaveDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'doctrine.orm.entity_manager']], 'mautic.lead.field.dispatcher.field_column_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnDispatcher', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.lead.field.settings.background_settings']], 'mautic.lead.field.dispatcher.field_column_background_dispatcher' => ['class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnBackgroundJobDispatcher', 'arguments' => [0 => 'event_dispatcher']], 'mautic.lead.field.fields_with_unique_identifier' => ['class' => 'Mautic\\LeadBundle\\Field\\FieldsWithUniqueIdentifier', 'arguments' => [0 => 'mautic.lead.field.field_list']], 'mautic.lead.field.field_list' => ['class' => 'Mautic\\LeadBundle\\Field\\FieldList', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'translator']], 'mautic.lead.field.identifier_fields' => ['class' => 'Mautic\\LeadBundle\\Field\\IdentifierFields', 'arguments' => [0 => 'mautic.lead.field.fields_with_unique_identifier', 1 => 'mautic.lead.field.field_list']], 'mautic.lead.field.lead_field_saver' => ['class' => 'Mautic\\LeadBundle\\Field\\LeadFieldSaver', 'arguments' => [0 => 'mautic.lead.repository.field', 1 => 'mautic.lead.field.dispatcher.field_save_dispatcher']], 'mautic.lead.field.settings.background_settings' => ['class' => 'Mautic\\LeadBundle\\Field\\Settings\\BackgroundSettings', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.field.settings.background_service' => ['class' => 'Mautic\\LeadBundle\\Field\\BackgroundService', 'arguments' => [0 => 'mautic.lead.model.field', 1 => 'mautic.lead.field.custom_field_column', 2 => 'mautic.lead.field.lead_field_saver', 3 => 'mautic.lead.field.dispatcher.field_column_background_dispatcher', 4 => 'mautic.lead.field.notification.custom_field']], 'mautic.lead.field.notification.custom_field' => ['class' => 'Mautic\\LeadBundle\\Field\\Notification\\CustomFieldNotification', 'arguments' => [0 => 'mautic.core.model.notification', 1 => 'mautic.user.model.user', 2 => 'translator']]], 'repositories' => ['mautic.lead.repository.company' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\Company'], 'methodCalls' => ['setUniqueIdentifiersOperator' => [0 => '%mautic.company_unique_identifiers_operator%']]], 'mautic.lead.repository.company_lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\CompanyLead']], 'mautic.lead.repository.stages_lead_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\StagesChangeLog']], 'mautic.lead.repository.dnc' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\DoNotContact']], 'mautic.lead.repository.lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\Lead'], 'methodCalls' => ['setUniqueIdentifiersOperator' => [0 => '%mautic.contact_unique_identifiers_operator%'], 'setListLeadRepository' => [0 => '@mautic.lead.repository.list_lead']]], 'mautic.lead.repository.list_lead' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\ListLead']], 'mautic.lead.repository.frequency_rule' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\FrequencyRule']], 'mautic.lead.repository.lead_event_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadEventLog']], 'mautic.lead.repository.lead_device' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadDevice']], 'mautic.lead.repository.lead_list' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadList']], 'mautic.lead.repository.points_change_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\PointsChangeLog']], 'mautic.lead.repository.merged_records' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\MergeRecord']], 'mautic.lead.repository.field' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\LeadBundle\\Entity\\LeadField']], 'mautic.lead.query.builder.basic' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\BaseFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.foreign.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignValueFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.foreign.func' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignFuncFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.dnc' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\DoNotContactFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.integration' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\IntegrationCampaignFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.sessions' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SessionsFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.complex_relation.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ComplexRelationValueFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']], 'mautic.lead.query.builder.special.leadlist' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SegmentReferenceFilterQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'mautic.lead.repository.lead_segment_query_builder', 2 => 'doctrine.orm.entity_manager', 3 => 'mautic.lead.model.lead_segment_filter_factory', 4 => 'event_dispatcher']], 'mautic.lead.query.builder.channel_click.value' => ['class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ChannelClickQueryBuilder', 'arguments' => [0 => 'mautic.lead.model.random_parameter_name', 1 => 'event_dispatcher']]], 'helpers' => ['mautic.helper.twig.avatar' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\AvatarHelper', 'arguments' => [0 => 'twig.helper.assets', 1 => 'mautic.helper.paths', 2 => 'mautic.helper.twig.gravatar', 3 => 'mautic.helper.twig.default_avatar'], 'alias' => 'lead_avatar'], 'mautic.helper.twig.default_avatar' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DefaultAvatarHelper', 'arguments' => [0 => 'mautic.helper.paths', 1 => 'twig.helper.assets'], 'alias' => 'default_avatar'], 'mautic.helper.field.alias' => ['class' => 'Mautic\\LeadBundle\\Helper\\FieldAliasHelper', 'arguments' => [0 => 'mautic.lead.model.field']], 'mautic.helper.twig.dnc_reason' => ['class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DncReasonHelper', 'arguments' => [0 => 'translator'], 'alias' => 'lead_dnc_reason'], 'mautic.helper.segment.count.cache' => ['class' => 'Mautic\\LeadBundle\\Helper\\SegmentCountCacheHelper', 'arguments' => [0 => 'mautic.helper.cache_storage']]], 'fixtures' => ['mautic.lead.fixture.company' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCompanyData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.company']], 'mautic.lead.fixture.contact' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'mautic.lead.fixture.segment' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadListData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list']], 'mautic.lead.fixture.category' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategoryData', 'tag' => 'doctrine.fixture.orm'], 'mautic.lead.fixture.categorizedleadlists' => ['class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategorizedLeadListData', 'tag' => 'doctrine.fixture.orm'], 'mautic.lead.fixture.test.page_hit' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadPageHitData', 'tag' => 'doctrine.fixture.orm', 'optional' => true], 'mautic.lead.fixture.test.segment' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadSegmentsData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.click' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadClickData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.dnc' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadDncData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.lead.model.list', 1 => 'mautic.lead.model.lead'], 'optional' => true], 'mautic.lead.fixture.test.tag' => ['class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadTagData', 'tag' => 'doctrine.fixture.orm', 'optional' => true]]], 'parameters' => ['parallel_import_limit' => 1, 'background_import_if_more_rows_than' => 0, 'contact_columns' => [0 => 'name', 1 => 'email', 2 => 'location', 3 => 'stage', 4 => 'points', 5 => 'last_active', 6 => 'id'], 'create_custom_field_in_background' => false, 'company_unique_identifiers_operator' => 'OR', 'contact_unique_identifiers_operator' => 'OR', 'segment_rebuild_time_warning' => 30, 'segment_build_time_warning' => 30, 'contact_export_in_background' => true, 'contact_export_dir' => '%kernel.project_dir%/media/files/temp', 'contact_export_batch_size' => 20000]]], 'MarketplaceBundle' => ['isPlugin' => false, 'base' => 'Marketplace', 'bundle' => 'MarketplaceBundle', 'relative' => 'app/bundles/MarketplaceBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle'), 'namespace' => 'Mautic\\MarketplaceBundle', 'symfonyBundleName' => 'MarketplaceBundle', 'bundleClass' => 'Mautic\\MarketplaceBundle\\MarketplaceBundle', 'permissionClasses' => ['Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions'], 'config' => ['routes' => ['main' => ['mautic_marketplace_list' => ['path' => '/marketplace/{page}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\ListController::listAction', 'method' => 'GET|POST', 'defaults' => ['page' => 1]], 'mautic_marketplace_detail' => ['path' => '/marketplace/detail/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\DetailController::viewAction', 'method' => 'GET'], 'mautic_marketplace_install' => ['path' => '/marketplace/install/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\InstallController::viewAction', 'method' => 'GET|POST'], 'mautic_marketplace_remove' => ['path' => '/marketplace/remove/{vendor}/{package}', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\RemoveController::viewAction', 'method' => 'GET|POST'], 'mautic_marketplace_clear_cache' => ['path' => '/marketplace/clear/cache', 'controller' => 'Mautic\\MarketplaceBundle\\Controller\\CacheController::clearAction', 'method' => 'GET']]], 'services' => ['permissions' => ['marketplace.permissions' => ['class' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'marketplace.service.config']]], 'api' => ['marketplace.api.connection' => ['class' => 'Mautic\\MarketplaceBundle\\Api\\Connection', 'arguments' => [0 => 'mautic.http.client', 1 => 'monolog.logger.mautic']]], 'other' => ['marketplace.service.plugin_collector' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\PluginCollector', 'arguments' => [0 => 'marketplace.api.connection', 1 => 'marketplace.service.allowlist']], 'marketplace.service.route_provider' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\RouteProvider', 'arguments' => [0 => 'router']], 'marketplace.service.config' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\Config', 'arguments' => [0 => 'mautic.helper.core_parameters']], 'marketplace.service.allowlist' => ['class' => 'Mautic\\MarketplaceBundle\\Service\\Allowlist', 'arguments' => [0 => 'marketplace.service.config', 1 => 'mautic.cache.provider', 2 => 'mautic.http.client']]]], 'parameters' => ['marketplace_enabled' => true, 'marketplace_allowlist_url' => 'https://raw.githubusercontent.com/mautic/marketplace-allowlist/main/allowlist.json', 'marketplace_allowlist_cache_ttl_seconds' => 3600]]], 'MauticMessengerBundle' => ['isPlugin' => false, 'base' => 'Messenger', 'bundle' => 'MessengerBundle', 'relative' => 'app/bundles/MessengerBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/MessengerBundle'), 'namespace' => 'Mautic\\MessengerBundle', 'symfonyBundleName' => 'MauticMessengerBundle', 'bundleClass' => 'Mautic\\MessengerBundle\\MauticMessengerBundle', 'permissionClasses' => [], 'config' => ['parameters' => ['messenger_dsn_email' => 'sync://', 'messenger_dsn_failed' => NULL, 'messenger_retry_strategy_max_retries' => 3, 'messenger_retry_strategy_delay' => 1000, 'messenger_retry_strategy_multiplier' => 2.0, 'messenger_retry_strategy_max_delay' => 0]]], 'MauticNotificationBundle' => ['isPlugin' => false, 'base' => 'Notification', 'bundle' => 'NotificationBundle', 'relative' => 'app/bundles/NotificationBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle'), 'namespace' => 'Mautic\\NotificationBundle', 'symfonyBundleName' => 'MauticNotificationBundle', 'bundleClass' => 'Mautic\\NotificationBundle\\MauticNotificationBundle', 'permissionClasses' => ['Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions' => 'Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions'], 'config' => ['services' => ['events' => ['mautic.notification.campaignbundle.subscriber' => ['class' => 'Mautic\\NotificationBundle\\EventListener\\CampaignSubscriber', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'mautic.notification.model.notification', 2 => 'mautic.notification.api', 3 => 'event_dispatcher', 4 => 'mautic.lead.model.dnc']]], 'helpers' => ['mautic.helper.notification' => ['class' => 'Mautic\\NotificationBundle\\Helper\\NotificationHelper', 'alias' => 'notification_helper', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'twig.helper.assets', 2 => 'mautic.helper.core_parameters', 3 => 'mautic.helper.integration', 4 => 'router', 5 => 'request_stack', 6 => 'mautic.lead.model.dnc']]], 'other' => ['mautic.notification.api' => ['class' => 'Mautic\\NotificationBundle\\Api\\OneSignalApi', 'arguments' => [0 => 'mautic.http.client', 1 => 'mautic.page.model.trackable', 2 => 'mautic.helper.integration'], 'alias' => 'notification_api']], 'repositories' => ['mautic.notification.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\NotificationBundle\\Entity\\Stat']]], 'integrations' => ['mautic.integration.onesignal' => ['class' => 'Mautic\\NotificationBundle\\Integration\\OneSignalIntegration', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.cache_storage', 2 => 'doctrine.orm.entity_manager', 3 => 'session', 4 => 'request_stack', 5 => 'router', 6 => 'translator', 7 => 'logger', 8 => 'mautic.helper.encryption', 9 => 'mautic.lead.model.lead', 10 => 'mautic.lead.model.company', 11 => 'mautic.helper.paths', 12 => 'mautic.core.model.notification', 13 => 'mautic.lead.model.field', 14 => 'mautic.plugin.model.integration_entity', 15 => 'mautic.lead.model.dnc']]]], 'routes' => ['main' => ['mautic_notification_index' => ['path' => '/notifications/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::indexAction'], 'mautic_notification_action' => ['path' => '/notifications/{objectAction}/{objectId}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::executeAction'], 'mautic_notification_contacts' => ['path' => '/notifications/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::contactsAction'], 'mautic_mobile_notification_index' => ['path' => '/mobile_notifications/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::indexAction'], 'mautic_mobile_notification_action' => ['path' => '/mobile_notifications/{objectAction}/{objectId}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::executeAction'], 'mautic_mobile_notification_contacts' => ['path' => '/mobile_notifications/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::contactsAction']], 'public' => ['mautic_receive_notification' => ['path' => '/notification/receive', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::receiveAction'], 'mautic_subscribe_notification' => ['path' => '/notification/subscribe', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::subscribeAction'], 'mautic_notification_popup' => ['path' => '/notification', 'controller' => 'Mautic\\NotificationBundle\\Controller\\PopupController::indexAction'], 'mautic_onesignal_worker' => ['path' => '/OneSignalSDKWorker.js', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::workerAction'], 'mautic_onesignal_updater' => ['path' => '/OneSignalSDKUpdaterWorker.js', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::updaterAction'], 'mautic_onesignal_manifest' => ['path' => '/manifest.json', 'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::manifestAction'], 'mautic_app_notification' => ['path' => '/notification/appcallback', 'controller' => 'Mautic\\NotificationBundle\\Controller\\AppCallbackController::indexAction']], 'api' => ['mautic_api_notificationsstandard' => ['standard_entity' => true, 'name' => 'notifications', 'path' => '/notifications', 'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController']]], 'menu' => ['main' => ['items' => ['mautic.notification.notifications' => ['route' => 'mautic_notification_index', 'access' => [0 => 'notification:notifications:viewown', 1 => 'notification:notifications:viewother'], 'checks' => ['integration' => ['OneSignal' => ['enabled' => true]]], 'parent' => 'mautic.core.channels', 'priority' => 80], 'mautic.notification.mobile_notifications' => ['route' => 'mautic_mobile_notification_index', 'access' => [0 => 'notification:mobile_notifications:viewown', 1 => 'notification:mobile_notifications:viewother'], 'checks' => ['integration' => ['OneSignal' => ['enabled' => true, 'features' => [0 => 'mobile']]]], 'parent' => 'mautic.core.channels', 'priority' => 65]]]], 'parameters' => ['notification_enabled' => false, 'notification_landing_page_enabled' => true, 'notification_tracking_page_enabled' => false, 'notification_app_id' => NULL, 'notification_rest_api_key' => NULL, 'notification_safari_web_id' => NULL, 'gcm_sender_id' => '482941778795', 'notification_subdomain_name' => NULL, 'welcomenotification_enabled' => true, 'campaign_send_notification_to_author' => true, 'campaign_notification_email_addresses' => NULL, 'webhook_send_notification_to_author' => true, 'webhook_notification_email_addresses' => NULL]]], 'MauticPageBundle' => ['isPlugin' => false, 'base' => 'Page', 'bundle' => 'PageBundle', 'relative' => 'app/bundles/PageBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PageBundle'), 'namespace' => 'Mautic\\PageBundle', 'symfonyBundleName' => 'MauticPageBundle', 'bundleClass' => 'Mautic\\PageBundle\\MauticPageBundle', 'permissionClasses' => ['Mautic\\PageBundle\\Security\\Permissions\\PagePermissions' => 'Mautic\\PageBundle\\Security\\Permissions\\PagePermissions'], 'config' => ['routes' => ['main' => ['mautic_page_index' => ['path' => '/pages/{page}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::indexAction'], 'mautic_page_action' => ['path' => '/pages/{objectAction}/{objectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::executeAction'], 'mautic_page_results' => ['path' => '/pages/results/{objectId}/{page}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::resultsAction'], 'mautic_page_export' => ['path' => '/pages/results/{objectId}/export/{format}', 'controller' => 'Mautic\\PageBundle\\Controller\\PageController::exportAction', 'defaults' => ['format' => 'csv']]], 'public' => ['mautic_page_tracker' => ['path' => '/mtracking.gif', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingImageAction'], 'mautic_page_tracker_cors' => ['path' => '/mtc/event', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingAction'], 'mautic_page_tracker_getcontact' => ['path' => '/mtc', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::getContactIdAction'], 'mautic_url_redirect' => ['path' => '/r/{redirectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction'], 'mautic_page_redirect' => ['path' => '/redirect/{redirectId}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction'], 'mautic_page_preview' => ['path' => '/page/preview/{id}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::previewAction'], 'mautic_gated_video_hit' => ['path' => '/video/hit', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::hitVideoAction']], 'api' => ['mautic_api_pagesstandard' => ['standard_entity' => true, 'name' => 'pages', 'path' => '/pages', 'controller' => 'Mautic\\PageBundle\\Controller\\Api\\PageApiController']], 'catchall' => ['mautic_page_public' => ['path' => '/{slug}', 'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::indexAction', 'requirements' => ['slug' => '^(?!(_(profiler|wdt)|css|images|js|favicon.ico|apps/bundles/|plugins/)).+']]]], 'menu' => ['main' => ['items' => ['mautic.page.pages' => ['route' => 'mautic_page_index', 'access' => [0 => 'page:pages:viewown', 1 => 'page:pages:viewother'], 'parent' => 'mautic.core.components', 'priority' => 100]]]], 'categories' => ['page' => NULL], 'services' => ['repositories' => ['mautic.page.repository.hit' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Hit']], 'mautic.page.repository.page' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Page']], 'mautic.page.repository.redirect' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PageBundle\\Entity\\Redirect']]], 'fixtures' => ['mautic.page.fixture.page_category' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageCategoryData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.category.model.category']], 'mautic.page.fixture.page' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page']], 'mautic.page.fixture.page_hit' => ['class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageHitData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.page.model.page']]], 'other' => ['mautic.page.helper.token' => ['class' => 'Mautic\\PageBundle\\Helper\\TokenHelper', 'arguments' => 'mautic.page.model.page'], 'mautic.page.helper.tracking' => ['class' => 'Mautic\\PageBundle\\Helper\\TrackingHelper', 'arguments' => [0 => 'session', 1 => 'mautic.helper.core_parameters', 2 => 'request_stack', 3 => 'mautic.tracker.contact']]]], 'parameters' => ['cat_in_page_url' => false, 'google_analytics' => NULL, 'track_contact_by_ip' => false, 'track_by_tracking_url' => false, 'redirect_list_types' => [301 => 'mautic.page.form.redirecttype.permanent', 302 => 'mautic.page.form.redirecttype.temporary'], 'google_analytics_id' => NULL, 'google_analytics_trackingpage_enabled' => false, 'google_analytics_landingpage_enabled' => false, 'google_analytics_anonymize_ip' => false, 'facebook_pixel_id' => NULL, 'facebook_pixel_trackingpage_enabled' => false, 'facebook_pixel_landingpage_enabled' => false, 'do_not_track_404_anonymous' => false]]], 'MauticPluginBundle' => ['isPlugin' => false, 'base' => 'Plugin', 'bundle' => 'PluginBundle', 'relative' => 'app/bundles/PluginBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle'), 'namespace' => 'Mautic\\PluginBundle', 'symfonyBundleName' => 'MauticPluginBundle', 'bundleClass' => 'Mautic\\PluginBundle\\MauticPluginBundle', 'permissionClasses' => ['Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions' => 'Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions'], 'config' => ['routes' => ['main' => ['mautic_integration_auth_callback_secure' => ['path' => '/plugins/integrations/authcallback/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction'], 'mautic_integration_auth_postauth_secure' => ['path' => '/plugins/integrations/authstatus/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction'], 'mautic_plugin_index' => ['path' => '/plugins', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::indexAction'], 'mautic_plugin_config' => ['path' => '/plugins/config/{name}/{page}', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::configAction'], 'mautic_plugin_info' => ['path' => '/plugins/info/{name}', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::infoAction'], 'mautic_plugin_reload' => ['path' => '/plugins/reload', 'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::reloadAction']], 'public' => ['mautic_integration_auth_user' => ['path' => '/plugins/integrations/authuser/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authUserAction'], 'mautic_integration_auth_callback' => ['path' => '/plugins/integrations/authcallback/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction'], 'mautic_integration_auth_postauth' => ['path' => '/plugins/integrations/authstatus/{integration}', 'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction']]], 'menu' => ['admin' => ['priority' => 50, 'items' => ['mautic.plugin.plugins' => ['id' => 'mautic_plugin_root', 'iconClass' => 'fa-plus-circle', 'access' => 'plugin:plugins:manage', 'route' => 'mautic_plugin_index']]]], 'services' => ['other' => ['mautic.helper.integration' => ['class' => 'Mautic\\PluginBundle\\Helper\\IntegrationHelper', 'arguments' => [0 => 'service_container', 1 => 'doctrine.orm.entity_manager', 2 => 'mautic.helper.paths', 3 => 'mautic.helper.bundle', 4 => 'mautic.helper.core_parameters', 5 => 'twig', 6 => 'mautic.plugin.model.plugin']], 'mautic.plugin.helper.reload' => ['class' => 'Mautic\\PluginBundle\\Helper\\ReloadHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.factory']]], 'facades' => ['mautic.plugin.facade.reload' => ['class' => 'Mautic\\PluginBundle\\Facade\\ReloadFacade', 'arguments' => [0 => 'mautic.plugin.model.plugin', 1 => 'mautic.plugin.helper.reload', 2 => 'translator']]]]]], 'MauticPointBundle' => ['isPlugin' => false, 'base' => 'Point', 'bundle' => 'PointBundle', 'relative' => 'app/bundles/PointBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/PointBundle'), 'namespace' => 'Mautic\\PointBundle', 'symfonyBundleName' => 'MauticPointBundle', 'bundleClass' => 'Mautic\\PointBundle\\MauticPointBundle', 'permissionClasses' => ['Mautic\\PointBundle\\Security\\Permissions\\PointPermissions' => 'Mautic\\PointBundle\\Security\\Permissions\\PointPermissions'], 'config' => ['routes' => ['main' => ['mautic_pointtriggerevent_action' => ['path' => '/points/triggers/events/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerEventController::executeAction'], 'mautic_pointtrigger_index' => ['path' => '/points/triggers/{page}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::indexAction'], 'mautic_pointtrigger_action' => ['path' => '/points/triggers/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::executeAction'], 'mautic_point_index' => ['path' => '/points/{page}', 'controller' => 'Mautic\\PointBundle\\Controller\\PointController::indexAction'], 'mautic_point_action' => ['path' => '/points/{objectAction}/{objectId}', 'controller' => 'Mautic\\PointBundle\\Controller\\PointController::executeAction']], 'api' => ['mautic_api_pointactionsstandard' => ['standard_entity' => true, 'name' => 'points', 'path' => '/points', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController'], 'mautic_api_getpointactiontypes' => ['path' => '/points/actions/types', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::getPointActionTypesAction'], 'mautic_api_pointtriggersstandard' => ['standard_entity' => true, 'name' => 'triggers', 'path' => '/points/triggers', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController'], 'mautic_api_getpointtriggereventtypes' => ['path' => '/points/triggers/events/types', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::getPointTriggerEventTypesAction'], 'mautic_api_pointtriggerdeleteevents' => ['path' => '/points/triggers/{triggerId}/events/delete', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::deletePointTriggerEventsAction', 'method' => 'DELETE'], 'mautic_api_adjustcontactpoints' => ['path' => '/contacts/{leadId}/points/{operator}/{delta}', 'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::adjustPointsAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.points.menu.root' => ['id' => 'mautic_points_root', 'iconClass' => 'fa-calculator', 'access' => [0 => 'point:points:view', 1 => 'point:triggers:view'], 'priority' => 30, 'children' => ['mautic.point.menu.index' => ['route' => 'mautic_point_index', 'access' => 'point:points:view'], 'mautic.point.trigger.menu.index' => ['route' => 'mautic_pointtrigger_index', 'access' => 'point:triggers:view']]]]], 'categories' => ['point' => NULL], 'services' => ['repositories' => ['mautic.point.repository.lead_point_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PointBundle\\Entity\\LeadPointLog']], 'mautic.point.repository.lead_trigger_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\PointBundle\\Entity\\LeadTriggerLog']]]]]], 'MauticReportBundle' => ['isPlugin' => false, 'base' => 'Report', 'bundle' => 'ReportBundle', 'relative' => 'app/bundles/ReportBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle'), 'namespace' => 'Mautic\\ReportBundle', 'symfonyBundleName' => 'MauticReportBundle', 'bundleClass' => 'Mautic\\ReportBundle\\MauticReportBundle', 'permissionClasses' => ['Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions' => 'Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions'], 'config' => ['routes' => ['main' => ['mautic_report_index' => ['path' => '/reports/{page}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::indexAction'], 'mautic_report_export' => ['path' => '/reports/view/{objectId}/export/{format}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::exportAction', 'defaults' => ['format' => 'csv']], 'mautic_report_download' => ['path' => '/reports/download/{reportId}/{format}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::downloadAction', 'defaults' => ['format' => 'csv']], 'mautic_report_view' => ['path' => '/reports/view/{objectId}/{reportPage}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::viewAction', 'defaults' => ['reportPage' => 1], 'requirements' => ['reportPage' => '\\d+']], 'mautic_report_schedule_preview' => ['path' => '/reports/schedule/preview/{isScheduled}/{scheduleUnit}/{scheduleDay}/{scheduleMonthFrequency}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::indexAction', 'defaults' => ['isScheduled' => 0, 'scheduleUnit' => '', 'scheduleDay' => '', 'scheduleMonthFrequency' => '']], 'mautic_report_schedule' => ['path' => '/reports/schedule/{reportId}/now', 'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::nowAction'], 'mautic_report_action' => ['path' => '/reports/{objectAction}/{objectId}', 'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::executeAction']], 'api' => ['mautic_api_getreports' => ['path' => '/reports', 'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getEntitiesAction'], 'mautic_api_getreport' => ['path' => '/reports/{id}', 'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getReportAction']]], 'menu' => ['main' => ['mautic.report.reports' => ['route' => 'mautic_report_index', 'iconClass' => 'fa-line-chart', 'access' => [0 => 'report:reports:viewown', 1 => 'report:reports:viewother'], 'priority' => 20]]], 'services' => ['helpers' => ['mautic.report.helper.report' => ['class' => 'Mautic\\ReportBundle\\Helper\\ReportHelper', 'alias' => 'report']], 'validator' => ['mautic.report.validator.schedule_is_valid_validator' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator', 'arguments' => [0 => 'mautic.report.model.scheduler_builder'], 'tag' => 'validator.constraint_validator']], 'other' => ['mautic.report.model.scheduler_builder' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerBuilder', 'arguments' => [0 => 'mautic.report.model.scheduler_template_factory']], 'mautic.report.model.scheduler_template_factory' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Factory\\SchedulerTemplateFactory', 'arguments' => []], 'mautic.report.model.scheduler_date_builder' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Date\\DateBuilder', 'arguments' => [0 => 'mautic.report.model.scheduler_builder']], 'mautic.report.model.scheduler_planner' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SchedulerPlanner', 'arguments' => [0 => 'mautic.report.model.scheduler_date_builder', 1 => 'doctrine.orm.default_entity_manager']], 'mautic.report.model.send_schedule' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SendSchedule', 'arguments' => [0 => 'mautic.helper.mailer', 1 => 'mautic.report.model.message_schedule', 2 => 'mautic.report.model.file_handler']], 'mautic.report.model.file_handler' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\FileHandler', 'arguments' => [0 => 'mautic.helper.file_path_resolver', 1 => 'mautic.helper.file_properties', 2 => 'mautic.helper.core_parameters']], 'mautic.report.model.message_schedule' => ['class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\MessageSchedule', 'arguments' => [0 => 'translator', 1 => 'mautic.helper.file_properties', 2 => 'mautic.helper.core_parameters', 3 => 'router']], 'mautic.report.model.report_data_adapter' => ['class' => 'Mautic\\ReportBundle\\Adapter\\ReportDataAdapter', 'arguments' => [0 => 'mautic.report.model.report']]]], 'parameters' => ['report_temp_dir' => '%kernel.project_dir%/media/files/temp', 'report_export_batch_size' => 1000, 'report_export_max_filesize_in_bytes' => 5000000, 'csv_always_enclose' => false]]], 'MauticSmsBundle' => ['isPlugin' => false, 'base' => 'Sms', 'bundle' => 'SmsBundle', 'relative' => 'app/bundles/SmsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle'), 'namespace' => 'Mautic\\SmsBundle', 'symfonyBundleName' => 'MauticSmsBundle', 'bundleClass' => 'Mautic\\SmsBundle\\MauticSmsBundle', 'permissionClasses' => ['Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions' => 'Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions'], 'config' => ['services' => ['helpers' => ['mautic.helper.sms' => ['class' => 'Mautic\\SmsBundle\\Helper\\SmsHelper', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.lead.model.lead', 2 => 'mautic.helper.phone_number', 3 => 'mautic.sms.model.sms', 4 => 'mautic.helper.integration', 5 => 'mautic.lead.model.dnc'], 'alias' => 'sms_helper']], 'other' => ['mautic.sms.transport_chain' => ['class' => 'Mautic\\SmsBundle\\Sms\\TransportChain', 'arguments' => [0 => '%mautic.sms_transport%', 1 => 'mautic.helper.integration', 2 => 'monolog.logger.mautic']], 'mautic.sms.callback_handler_container' => ['class' => 'Mautic\\SmsBundle\\Callback\\HandlerContainer'], 'mautic.sms.helper.contact' => ['class' => 'Mautic\\SmsBundle\\Helper\\ContactHelper', 'arguments' => [0 => 'mautic.lead.repository.lead', 1 => 'doctrine.dbal.default_connection', 2 => 'mautic.helper.phone_number']], 'mautic.sms.helper.reply' => ['class' => 'Mautic\\SmsBundle\\Helper\\ReplyHelper', 'arguments' => [0 => 'event_dispatcher', 1 => 'monolog.logger.mautic', 2 => 'mautic.tracker.contact']], 'mautic.sms.twilio.configuration' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\Configuration', 'arguments' => [0 => 'mautic.helper.integration']], 'mautic.sms.twilio.transport' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioTransport', 'arguments' => [0 => 'mautic.sms.twilio.configuration', 1 => 'monolog.logger.mautic'], 'tag' => 'mautic.sms_transport', 'tagArguments' => ['integrationAlias' => 'Twilio'], 'serviceAliases' => [0 => 'sms_api', 1 => 'mautic.sms.api']], 'mautic.sms.twilio.callback' => ['class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioCallback', 'arguments' => [0 => 'mautic.sms.helper.contact', 1 => 'mautic.sms.twilio.configuration'], 'tag' => 'mautic.sms_callback_handler'], 'mautic.sms.transport.twilio' => ['class' => 'Mautic\\SmsBundle\\Api\\TwilioApi', 'arguments' => [0 => 'mautic.sms.twilio.configuration', 1 => 'monolog.logger.mautic']], 'mautic.sms.broadcast.executioner' => ['class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastExecutioner', 'arguments' => [0 => 'mautic.sms.model.sms', 1 => 'mautic.sms.broadcast.query', 2 => 'translator', 3 => 'mautic.lead.repository.lead']], 'mautic.sms.broadcast.query' => ['class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastQuery', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.sms.model.sms']]], 'integrations' => ['mautic.integration.twilio' => ['class' => 'Mautic\\SmsBundle\\Integration\\TwilioIntegration', 'arguments' => [0 => 'event_dispatcher', 1 => 'mautic.helper.cache_storage', 2 => 'doctrine.orm.entity_manager', 3 => 'session', 4 => 'request_stack', 5 => 'router', 6 => 'translator', 7 => 'logger', 8 => 'mautic.helper.encryption', 9 => 'mautic.lead.model.lead', 10 => 'mautic.lead.model.company', 11 => 'mautic.helper.paths', 12 => 'mautic.core.model.notification', 13 => 'mautic.lead.model.field', 14 => 'mautic.plugin.model.integration_entity', 15 => 'mautic.lead.model.dnc']]], 'repositories' => ['mautic.sms.repository.stat' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\SmsBundle\\Entity\\Stat']]]], 'routes' => ['main' => ['mautic_sms_index' => ['path' => '/sms/{page}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::indexAction'], 'mautic_sms_action' => ['path' => '/sms/{objectAction}/{objectId}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::executeAction'], 'mautic_sms_contacts' => ['path' => '/sms/view/{objectId}/contact/{page}', 'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::contactsAction']], 'public' => ['mautic_sms_callback' => ['path' => '/sms/{transport}/callback', 'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction'], 'mautic_receive_sms' => ['path' => '/sms/receive', 'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction', 'defaults' => ['transport' => 'twilio']]], 'api' => ['mautic_api_smsesstandard' => ['standard_entity' => true, 'name' => 'smses', 'path' => '/smses', 'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController'], 'mautic_api_smses_send' => ['path' => '/smses/{id}/contact/{contactId}/send', 'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController::sendAction']]], 'menu' => ['main' => ['items' => ['mautic.sms.smses' => ['route' => 'mautic_sms_index', 'access' => [0 => 'sms:smses:viewown', 1 => 'sms:smses:viewother'], 'parent' => 'mautic.core.channels', 'checks' => ['integration' => ['Twilio' => ['enabled' => true]]], 'priority' => 70]]]], 'parameters' => ['sms_enabled' => false, 'sms_username' => NULL, 'sms_password' => NULL, 'sms_sending_phone_number' => NULL, 'sms_frequency_number' => 0, 'sms_frequency_time' => 'DAY', 'sms_transport' => 'mautic.sms.twilio.transport']]], 'MauticStageBundle' => ['isPlugin' => false, 'base' => 'Stage', 'bundle' => 'StageBundle', 'relative' => 'app/bundles/StageBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/StageBundle'), 'namespace' => 'Mautic\\StageBundle', 'symfonyBundleName' => 'MauticStageBundle', 'bundleClass' => 'Mautic\\StageBundle\\MauticStageBundle', 'permissionClasses' => ['Mautic\\StageBundle\\Security\\Permissions\\StagePermissions' => 'Mautic\\StageBundle\\Security\\Permissions\\StagePermissions'], 'config' => ['routes' => ['main' => ['mautic_stage_index' => ['path' => '/stages/{page}', 'controller' => 'Mautic\\StageBundle\\Controller\\StageController::indexAction'], 'mautic_stage_action' => ['path' => '/stages/{objectAction}/{objectId}', 'controller' => 'Mautic\\StageBundle\\Controller\\StageController::executeAction']], 'api' => ['mautic_api_stagesstandard' => ['standard_entity' => true, 'name' => 'stages', 'path' => '/stages', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController'], 'mautic_api_stageddcontact' => ['path' => '/stages/{id}/contact/{contactId}/add', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::addContactAction', 'method' => 'POST'], 'mautic_api_stageremovecontact' => ['path' => '/stages/{id}/contact/{contactId}/remove', 'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::removeContactAction', 'method' => 'POST']]], 'menu' => ['main' => ['mautic.stages.menu.index' => ['route' => 'mautic_stage_index', 'iconClass' => 'fa-tachometer', 'access' => [0 => 'stage:stages:view'], 'priority' => 25]]], 'categories' => ['stage' => NULL], 'services' => ['repositories' => ['mautic.stage.repository.lead_stage_log' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\StageBundle\\Entity\\LeadStageLog']], 'mautic.stage.repository.stage' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\StageBundle\\Entity\\Stage']]]]]], 'MauticStatsBundle' => ['isPlugin' => false, 'base' => 'Stats', 'bundle' => 'StatsBundle', 'relative' => 'app/bundles/StatsBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/StatsBundle'), 'namespace' => 'Mautic\\StatsBundle', 'symfonyBundleName' => 'MauticStatsBundle', 'bundleClass' => 'Mautic\\StatsBundle\\MauticStatsBundle', 'permissionClasses' => [], 'config' => ['services' => ['other' => ['mautic.stats.aggregate.collector' => ['class' => 'Mautic\\StatsBundle\\Aggregate\\Collector', 'arguments' => [0 => 'event_dispatcher']]]]]], 'MauticUserBundle' => ['isPlugin' => false, 'base' => 'User', 'bundle' => 'UserBundle', 'relative' => 'app/bundles/UserBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/UserBundle'), 'namespace' => 'Mautic\\UserBundle', 'symfonyBundleName' => 'MauticUserBundle', 'bundleClass' => 'Mautic\\UserBundle\\MauticUserBundle', 'permissionClasses' => ['Mautic\\UserBundle\\Security\\Permissions\\UserPermissions' => 'Mautic\\UserBundle\\Security\\Permissions\\UserPermissions'], 'config' => ['menu' => ['admin' => ['mautic.user.users' => ['access' => 'user:users:view', 'route' => 'mautic_user_index', 'iconClass' => 'fa-users'], 'mautic.user.roles' => ['access' => 'user:roles:view', 'route' => 'mautic_role_index', 'iconClass' => 'fa-lock']]], 'routes' => ['main' => ['login' => ['path' => '/login', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginAction'], 'mautic_user_logincheck' => ['path' => '/login_check', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginCheckAction'], 'mautic_user_logout' => ['path' => '/logout'], 'mautic_sso_login' => ['path' => '/sso_login/{integration}', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginAction'], 'mautic_sso_login_check' => ['path' => '/sso_login_check/{integration}', 'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginCheckAction'], 'lightsaml_sp.login' => ['path' => '/saml/login', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::loginAction'], 'lightsaml_sp.login_check' => ['path' => '/saml/login_check'], 'mautic_user_index' => ['path' => '/users/{page}', 'controller' => 'Mautic\\UserBundle\\Controller\\UserController::indexAction'], 'mautic_user_action' => ['path' => '/users/{objectAction}/{objectId}', 'controller' => 'Mautic\\UserBundle\\Controller\\UserController::executeAction'], 'mautic_role_index' => ['path' => '/roles/{page}', 'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::indexAction'], 'mautic_role_action' => ['path' => '/roles/{objectAction}/{objectId}', 'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::executeAction'], 'mautic_user_account' => ['path' => '/account', 'controller' => 'Mautic\\UserBundle\\Controller\\ProfileController::indexAction']], 'api' => ['mautic_api_usersstandard' => ['standard_entity' => true, 'name' => 'users', 'path' => '/users', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController'], 'mautic_api_getself' => ['path' => '/users/self', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getSelfAction'], 'mautic_api_checkpermission' => ['path' => '/users/{id}/permissioncheck', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::isGrantedAction', 'method' => 'POST'], 'mautic_api_getuserroles' => ['path' => '/users/list/roles', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getRolesAction'], 'mautic_api_rolesstandard' => ['standard_entity' => true, 'name' => 'roles', 'path' => '/roles', 'controller' => 'Mautic\\UserBundle\\Controller\\Api\\RoleApiController']], 'public' => ['mautic_user_passwordreset' => ['path' => '/passwordreset', 'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetAction'], 'mautic_user_passwordresetconfirm' => ['path' => '/passwordresetconfirm', 'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetConfirmAction'], 'lightsaml_sp.metadata' => ['path' => '/saml/metadata.xml', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::metadataAction'], 'lightsaml_sp.discovery' => ['path' => '/saml/discovery', 'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::discoveryAction']]], 'services' => ['other' => ['mautic.user.manager' => ['class' => 'Doctrine\\ORM\\EntityManager', 'arguments' => 'Mautic\\UserBundle\\Entity\\User', 'factory' => [0 => '@doctrine', 1 => 'getManagerForClass']], 'mautic.permission.manager' => ['class' => 'Doctrine\\ORM\\EntityManager', 'arguments' => 'Mautic\\UserBundle\\Entity\\Permission', 'factory' => [0 => '@doctrine', 1 => 'getManagerForClass']], 'mautic.user.form_guard_authenticator' => ['class' => 'Mautic\\UserBundle\\Security\\Authenticator\\FormAuthenticator', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'security.password_hasher', 2 => 'event_dispatcher', 3 => 'request_stack', 4 => 'security.csrf.token_manager', 5 => 'router']], 'mautic.user.preauth_authenticator' => ['class' => 'Mautic\\UserBundle\\Security\\Authenticator\\PreAuthAuthenticator', 'arguments' => [0 => 'mautic.helper.integration', 1 => 'event_dispatcher', 2 => 'request_stack', 3 => '', 4 => ''], 'public' => false], 'mautic.user.provider' => ['class' => 'Mautic\\UserBundle\\Security\\Provider\\UserProvider', 'arguments' => [0 => 'mautic.user.repository', 1 => 'mautic.permission.repository', 2 => 'session', 3 => 'event_dispatcher', 4 => 'security.password_hasher']], 'mautic.security.authentication_listener' => ['class' => 'Mautic\\UserBundle\\Security\\Firewall\\AuthenticationListener', 'arguments' => [0 => 'mautic.security.authentication_handler', 1 => 'security.token_storage', 2 => 'security.authentication.manager', 3 => 'monolog.logger', 4 => 'event_dispatcher', 5 => '', 6 => 'mautic.permission.repository', 7 => 'doctrine.orm.default_entity_manager'], 'public' => false], 'mautic.security.authentication_handler' => ['class' => 'Mautic\\UserBundle\\Security\\Authentication\\AuthenticationHandler', 'arguments' => [0 => 'router']], 'mautic.security.logout_handler' => ['class' => 'Mautic\\UserBundle\\EventListener\\LogoutListener', 'tagArguments' => ['event' => 'Symfony\\Component\\Security\\Http\\Event\\LogoutEvent'], 'tag' => 'kernel.event_listener', 'arguments' => [0 => 'mautic.user.model.user', 1 => 'event_dispatcher', 2 => 'mautic.helper.user']], 'mautic.security.saml.credential_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\CredentialsStore', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => '%mautic.saml_idp_entity_id%'], 'tag' => 'lightsaml.own_credential_store'], 'mautic.security.saml.trust_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\TrustOptionsStore', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => '%mautic.saml_idp_entity_id%'], 'tag' => 'lightsaml.trust_options_store'], 'mautic.security.saml.entity_descriptor_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\EntityDescriptorStore', 'arguments' => [0 => 'mautic.helper.core_parameters'], 'tag' => 'lightsaml.idp_entity_store'], 'mautic.security.saml.id_store' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\IdStore', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'lightsaml.system.time_provider']], 'mautic.security.saml.username_mapper' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserMapper', 'arguments' => [0 => ['email' => '%mautic.saml_idp_email_attribute%', 'username' => '%mautic.saml_idp_username_attribute%', 'firstname' => '%mautic.saml_idp_firstname_attribute%', 'lastname' => '%mautic.saml_idp_lastname_attribute%']]], 'mautic.security.saml.user_creator' => ['class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserCreator', 'arguments' => [0 => 'doctrine.orm.entity_manager', 1 => 'mautic.security.saml.username_mapper', 2 => 'mautic.user.model.user', 3 => 'security.password_hasher', 4 => '%mautic.saml_idp_default_role%']], 'mautic.user.model.user_token_service' => ['class' => 'Mautic\\UserBundle\\Model\\UserToken\\UserTokenService', 'arguments' => [0 => 'mautic.helper.random', 1 => 'mautic.user.repository.user_token']]], 'repositories' => ['mautic.user.repository.user_token' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => [0 => 'Mautic\\UserBundle\\Entity\\UserToken'], 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository']], 'mautic.user.repository' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => 'Mautic\\UserBundle\\Entity\\User', 'factory' => [0 => '@mautic.user.manager', 1 => 'getRepository']], 'mautic.permission.repository' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'arguments' => 'Mautic\\UserBundle\\Entity\\Permission', 'factory' => [0 => '@mautic.permission.manager', 1 => 'getRepository']]], 'fixtures' => ['mautic.user.fixture.role' => ['class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadRoleData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'mautic.user.model.role']], 'mautic.user.fixture.user' => ['class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadUserData', 'tag' => 'doctrine.fixture.orm', 'arguments' => [0 => 'security.password_hasher']]]], 'parameters' => ['saml_idp_metadata' => '', 'saml_idp_entity_id' => '', 'saml_idp_own_certificate' => '', 'saml_idp_own_private_key' => '', 'saml_idp_own_password' => '', 'saml_idp_email_attribute' => '', 'saml_idp_username_attribute' => '', 'saml_idp_firstname_attribute' => '', 'saml_idp_lastname_attribute' => '', 'saml_idp_default_role' => '']]], 'MauticWebhookBundle' => ['isPlugin' => false, 'base' => 'Webhook', 'bundle' => 'WebhookBundle', 'relative' => 'app/bundles/WebhookBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle'), 'namespace' => 'Mautic\\WebhookBundle', 'symfonyBundleName' => 'MauticWebhookBundle', 'bundleClass' => 'Mautic\\WebhookBundle\\MauticWebhookBundle', 'permissionClasses' => ['Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions' => 'Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions'], 'config' => ['routes' => ['main' => ['mautic_webhook_index' => ['path' => '/webhooks/{page}', 'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::indexAction'], 'mautic_webhook_action' => ['path' => '/webhooks/{objectAction}/{objectId}', 'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::executeAction']], 'api' => ['mautic_api_webhookstandard' => ['standard_entity' => true, 'name' => 'hooks', 'path' => '/hooks', 'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController'], 'mautic_api_webhookevents' => ['path' => '/hooks/triggers', 'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController::getTriggersAction']]], 'menu' => ['admin' => ['items' => ['mautic.webhook.webhooks' => ['id' => 'mautic_webhook_root', 'iconClass' => 'fa-exchange', 'access' => [0 => 'webhook:webhooks:viewown', 1 => 'webhook:webhooks:viewother'], 'route' => 'mautic_webhook_index']]]], 'services' => ['others' => ['mautic.webhook.notificator.webhookkillnotificator' => ['class' => 'Mautic\\WebhookBundle\\Notificator\\WebhookKillNotificator', 'arguments' => [0 => 'translator', 1 => 'router', 2 => 'mautic.core.model.notification', 3 => 'doctrine.orm.entity_manager', 4 => 'mautic.helper.mailer', 5 => 'mautic.helper.core_parameters']], 'mautic.webhook.campaign.helper' => ['class' => 'Mautic\\WebhookBundle\\Helper\\CampaignHelper', 'arguments' => [0 => 'mautic.http.client', 1 => 'mautic.lead.model.company', 2 => 'event_dispatcher']], 'mautic.webhook.http.client' => ['class' => 'Mautic\\WebhookBundle\\Http\\Client', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'mautic.http.client']]], 'repositories' => ['mautic.webhook.repository.queue' => ['class' => 'Doctrine\\ORM\\EntityRepository', 'factory' => [0 => '@doctrine.orm.entity_manager', 1 => 'getRepository'], 'arguments' => [0 => 'Mautic\\WebhookBundle\\Entity\\WebhookQueue']]]], 'parameters' => ['webhook_limit' => 10, 'webhook_time_limit' => 600, 'webhook_log_max' => 1000, 'clean_webhook_logs_in_background' => false, 'webhook_disable_limit' => 100, 'webhook_timeout' => 15, 'queue_mode' => 'immediate_process', 'events_orderby_dir' => 'ASC', 'webhook_email_details' => true]]], 'MauticCacheBundle' => ['isPlugin' => false, 'base' => 'Cache', 'bundle' => 'CacheBundle', 'relative' => 'app/bundles/CacheBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/CacheBundle'), 'namespace' => 'Mautic\\CacheBundle', 'symfonyBundleName' => 'MauticCacheBundle', 'bundleClass' => 'Mautic\\CacheBundle\\MauticCacheBundle', 'permissionClasses' => [], 'config' => ['routes' => ['main' => [], 'public' => [], 'api' => []], 'menu' => [], 'services' => ['events' => ['mautic.cache.clear_cache_subscriber' => ['class' => 'Mautic\\CacheBundle\\EventListener\\CacheClearSubscriber', 'tags' => [0 => 'kernel.cache_clearer'], 'arguments' => [0 => 'mautic.cache.provider', 1 => 'monolog.logger.mautic']]], 'other' => ['mautic.cache.provider' => ['class' => 'Mautic\\CacheBundle\\Cache\\CacheProvider', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'service_container']], 'mautic.cache.adapter.filesystem' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\FilesystemTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_prefix%', 1 => '%mautic.cache_lifetime%', 2 => '%mautic.tmp_path%'], 'tag' => 'mautic.cache.adapter'], 'mautic.cache.adapter.memcached' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\MemcachedTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_adapter_memcached%', 1 => '%mautic.cache_prefix%', 2 => '%mautic.cache_lifetime%'], 'tag' => 'mautic.cache.adapter'], 'mautic.cache.adapter.redis' => ['class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\RedisTagAwareAdapter', 'arguments' => [0 => '%mautic.cache_adapter_redis%', 1 => '%mautic.cache_prefix%', 2 => '%mautic.cache_lifetime%', 3 => '%mautic.redis_primary_only%'], 'tag' => 'mautic.cache.adapter']], 'models' => [], 'validator' => []], 'parameters' => ['cache_adapter' => 'mautic.cache.adapter.filesystem', 'cache_prefix' => '', 'cache_lifetime' => 86400, 'cache_adapter_memcached' => ['servers' => [0 => 'memcached://localhost'], 'options' => ['compression' => true, 'libketama_compatible' => true, 'serializer' => 'igbinary']], 'cache_adapter_redis' => ['dsn' => 'redis://localhost', 'options' => ['lazy' => false, 'persistent' => 0, 'persistent_id' => NULL, 'timeout' => 30, 'read_timeout' => 0, 'retry_interval' => 0]]]]], 'MauticQueueBundle' => ['isPlugin' => false, 'base' => 'Queue', 'bundle' => 'QueueBundle', 'relative' => 'app/bundles/QueueBundle', 'directory' => (\dirname(__DIR__, 4).'/app/bundles/QueueBundle'), 'namespace' => 'Mautic\\QueueBundle', 'symfonyBundleName' => 'MauticQueueBundle', 'bundleClass' => 'Mautic\\QueueBundle\\MauticQueueBundle', 'permissionClasses' => [], 'config' => ['services' => ['other' => ['mautic.queue.service' => ['class' => 'Mautic\\QueueBundle\\Queue\\QueueService', 'arguments' => [0 => 'mautic.helper.core_parameters', 1 => 'event_dispatcher', 2 => 'monolog.logger.mautic']], 'mautic.queue.helper.rabbitmq_consumer' => ['class' => 'Mautic\\QueueBundle\\Helper\\RabbitMqConsumer', 'arguments' => [0 => 'mautic.queue.service']]]], 'parameters' => ['queue_protocol' => '', 'rabbitmq_host' => 'localhost', 'rabbitmq_port' => '5672', 'rabbitmq_vhost' => '/', 'rabbitmq_user' => 'guest', 'rabbitmq_password' => 'guest', 'rabbitmq_idle_timeout' => 0, 'rabbitmq_idle_timeout_exit_code' => 0, 'beanstalkd_host' => 'localhost', 'beanstalkd_port' => '11300', 'beanstalkd_timeout' => '60']]]], $this->parameters['mautic.plugin.bundles']);

        $instance->setPermissionObject(new \Mautic\AssetBundle\Security\Permissions\AssetPermissions($a));
        $instance->setPermissionObject(new \Mautic\MarketplaceBundle\Security\Permissions\MarketplacePermissions($a, ($this->services['marketplace.service.config'] ?? $this->getMarketplace_Service_ConfigService())));

        return $instance;
    }

    /*
     * Gets the public 'mautic.stats.aggregate.collector' shared service.
     *
     * @return \Mautic\StatsBundle\Aggregate\Collector
     */
    protected function getMautic_Stats_Aggregate_CollectorService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.stats.aggregate.collector'])) {
            return $this->services['mautic.stats.aggregate.collector'];
        }

        return $this->services['mautic.stats.aggregate.collector'] = new \Mautic\StatsBundle\Aggregate\Collector($a);
    }

    /*
     * Gets the public 'mautic.tracker.contact' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\ContactTracker
     */
    protected function getMautic_Tracker_ContactService()
    {
        $a = ($this->services['mautic.lead.repository.lead'] ?? $this->getMautic_Lead_Repository_LeadService());

        if (isset($this->services['mautic.tracker.contact'])) {
            return $this->services['mautic.tracker.contact'];
        }
        $b = ($this->services['mautic.lead.service.contact_tracking_service'] ?? $this->getMautic_Lead_Service_ContactTrackingServiceService());

        if (isset($this->services['mautic.tracker.contact'])) {
            return $this->services['mautic.tracker.contact'];
        }
        $c = ($this->services['mautic.tracker.device'] ?? $this->getMautic_Tracker_DeviceService());

        if (isset($this->services['mautic.tracker.contact'])) {
            return $this->services['mautic.tracker.contact'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.tracker.contact'])) {
            return $this->services['mautic.tracker.contact'];
        }
        $e = ($this->services['Mautic\\LeadBundle\\Model\\FieldModel'] ?? $this->getFieldModel2Service());

        if (isset($this->services['mautic.tracker.contact'])) {
            return $this->services['mautic.tracker.contact'];
        }

        return $this->services['mautic.tracker.contact'] = new \Mautic\LeadBundle\Tracker\ContactTracker($a, $b, $c, ($this->services['mautic.security'] ?? $this->getMautic_SecurityService()), ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()), ($this->services['mautic.helper.ip_lookup'] ?? $this->getMautic_Helper_IpLookupService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['mautic.helper.core_parameters'] ?? ($this->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($this))), $d, $e);
    }

    /*
     * Gets the public 'mautic.tracker.device' shared service.
     *
     * @return \Mautic\LeadBundle\Tracker\DeviceTracker
     */
    protected function getMautic_Tracker_DeviceService()
    {
        $a = ($this->services['mautic.lead.service.device_tracking_service'] ?? $this->getMautic_Lead_Service_DeviceTrackingServiceService());

        if (isset($this->services['mautic.tracker.device'])) {
            return $this->services['mautic.tracker.device'];
        }

        return $this->services['mautic.tracker.device'] = new \Mautic\LeadBundle\Tracker\DeviceTracker(($this->services['mautic.lead.service.device_creator_service'] ?? ($this->services['mautic.lead.service.device_creator_service'] = new \Mautic\LeadBundle\Tracker\Service\DeviceCreatorService\DeviceCreatorService())), ($this->services['mautic.lead.factory.device_detector_factory'] ?? $this->getMautic_Lead_Factory_DeviceDetectorFactoryService()), $a, ($this->services['monolog.logger.mautic'] ?? $this->getMonolog_Logger_MauticService()));
    }

    /*
     * Gets the public 'mautic.update.checks.database' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\Update\PreUpdateChecks\CheckDatabaseDriverAndVersion
     */
    protected function getMautic_Update_Checks_DatabaseService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.update.checks.database'])) {
            return $this->services['mautic.update.checks.database'];
        }

        return $this->services['mautic.update.checks.database'] = new \Mautic\CoreBundle\Helper\Update\PreUpdateChecks\CheckDatabaseDriverAndVersion($a);
    }

    /*
     * Gets the public 'mautic.update.checks.php' shared service.
     *
     * @return \Mautic\CoreBundle\Helper\Update\PreUpdateChecks\CheckPhpVersion
     */
    protected function getMautic_Update_Checks_PhpService()
    {
        return $this->services['mautic.update.checks.php'] = new \Mautic\CoreBundle\Helper\Update\PreUpdateChecks\CheckPhpVersion();
    }

    /*
     * Gets the public 'mautic.user.fixture.role' shared service.
     *
     * @return \Mautic\UserBundle\DataFixtures\ORM\LoadRoleData
     */
    protected function getMautic_User_Fixture_RoleService()
    {
        $a = ($this->services['Mautic\\UserBundle\\Model\\RoleModel'] ?? $this->getRoleModelService());

        if (isset($this->services['mautic.user.fixture.role'])) {
            return $this->services['mautic.user.fixture.role'];
        }

        return $this->services['mautic.user.fixture.role'] = new \Mautic\UserBundle\DataFixtures\ORM\LoadRoleData($a);
    }

    /*
     * Gets the public 'mautic.user.fixture.user' shared service.
     *
     * @return \Mautic\UserBundle\DataFixtures\ORM\LoadUserData
     */
    protected function getMautic_User_Fixture_UserService()
    {
        return $this->services['mautic.user.fixture.user'] = new \Mautic\UserBundle\DataFixtures\ORM\LoadUserData(($this->privates['security.user_password_hasher'] ?? $this->getSecurity_UserPasswordHasherService()));
    }

    /*
     * Gets the public 'mautic.user.manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getMautic_User_ManagerService()
    {
        return $this->services['mautic.user.manager'] = ($this->services['doctrine'] ?? $this->getDoctrineService())->getManagerForClass('Mautic\\UserBundle\\Entity\\User');
    }

    /*
     * Gets the public 'mautic.user.model.user_token_service' shared service.
     *
     * @return \Mautic\UserBundle\Model\UserToken\UserTokenService
     */
    protected function getMautic_User_Model_UserTokenServiceService()
    {
        $a = ($this->services['mautic.user.repository.user_token'] ?? $this->getMautic_User_Repository_UserTokenService());

        if (isset($this->services['mautic.user.model.user_token_service'])) {
            return $this->services['mautic.user.model.user_token_service'];
        }

        return $this->services['mautic.user.model.user_token_service'] = new \Mautic\UserBundle\Model\UserToken\UserTokenService(($this->services['mautic.helper.random'] ?? ($this->services['mautic.helper.random'] = new \Mautic\CoreBundle\Helper\RandomHelper\RandomHelper())), $a);
    }

    /*
     * Gets the public 'mautic.user.provider' shared service.
     *
     * @return \Mautic\UserBundle\Security\Provider\UserProvider
     */
    protected function getMautic_User_ProviderService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.user.provider'])) {
            return $this->services['mautic.user.provider'];
        }

        return $this->services['mautic.user.provider'] = new \Mautic\UserBundle\Security\Provider\UserProvider(($this->services['mautic.user.repository'] ?? $this->getMautic_User_RepositoryService()), ($this->services['mautic.permission.repository'] ?? $this->getMautic_Permission_RepositoryService()), ($this->services['.container.private.session'] ?? $this->get_Container_Private_SessionService()), $a, ($this->privates['security.user_password_hasher'] ?? $this->getSecurity_UserPasswordHasherService()));
    }

    /*
     * Gets the public 'mautic.user.repository' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_User_RepositoryService()
    {
        return $this->services['mautic.user.repository'] = ($this->services['mautic.user.manager'] ?? $this->getMautic_User_ManagerService())->getRepository('Mautic\\UserBundle\\Entity\\User');
    }

    /*
     * Gets the public 'mautic.user.repository.user_token' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getMautic_User_Repository_UserTokenService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->services['mautic.user.repository.user_token'])) {
            return $this->services['mautic.user.repository.user_token'];
        }

        return $this->services['mautic.user.repository.user_token'] = $a->getRepository('Mautic\\UserBundle\\Entity\\UserToken');
    }

    /*
     * Gets the public 'mautic.validator.email' shared service.
     *
     * @return \Mautic\EmailBundle\Helper\EmailValidator
     */
    protected function getMautic_Validator_EmailService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mautic.validator.email'])) {
            return $this->services['mautic.validator.email'];
        }

        return $this->services['mautic.validator.email'] = new \Mautic\EmailBundle\Helper\EmailValidator(($this->services['translator'] ?? $this->getTranslator2Service()), $a);
    }

    /*
     * Gets the public 'messenger.default_bus' shared service.
     *
     * @return \Symfony\Component\Messenger\MessageBus
     */
    protected function getMessenger_DefaultBusService()
    {
        return $this->services['messenger.default_bus'] = new \Symfony\Component\Messenger\MessageBus(new RewindableGenerator(function () {
            yield 0 => ($this->privates['messenger.bus.default.middleware.add_bus_name_stamp_middleware'] ?? ($this->privates['messenger.bus.default.middleware.add_bus_name_stamp_middleware'] = new \Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware('messenger.bus.default')));
            yield 1 => ($this->privates['messenger.middleware.reject_redelivered_message_middleware'] ?? ($this->privates['messenger.middleware.reject_redelivered_message_middleware'] = new \Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware()));
            yield 2 => ($this->privates['messenger.middleware.dispatch_after_current_bus'] ?? ($this->privates['messenger.middleware.dispatch_after_current_bus'] = new \Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware()));
            yield 3 => ($this->privates['messenger.middleware.failed_message_processing_middleware'] ?? ($this->privates['messenger.middleware.failed_message_processing_middleware'] = new \Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware()));
            yield 4 => ($this->privates['messenger.middleware.send_message'] ?? $this->load('getMessenger_Middleware_SendMessageService'));
            yield 5 => ($this->privates['messenger.bus.default.middleware.handle_message'] ?? $this->load('getMessenger_Bus_Default_Middleware_HandleMessageService'));
        }, 6));
    }

    /*
     * Gets the public 'monolog.logger.mautic' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_MauticService()
    {
        $this->services['monolog.logger.mautic'] = $instance = new \Symfony\Bridge\Monolog\Logger('mautic');

        $instance->pushProcessor(($this->services['mautic.core.service.log_processor'] ?? ($this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor())));
        $instance->pushHandler(($this->services['mautic.monolog.handler'] ?? $this->getMautic_Monolog_HandlerService()));

        return $instance;
    }

    /*
     * Gets the public 'oneup_uploader.templating.uploader_helper' shared service.
     *
     * @return \Oneup\UploaderBundle\Templating\Helper\UploaderHelper
     */
    protected function getOneupUploader_Templating_UploaderHelperService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->services['oneup_uploader.templating.uploader_helper'])) {
            return $this->services['oneup_uploader.templating.uploader_helper'];
        }

        return $this->services['oneup_uploader.templating.uploader_helper'] = new \Oneup\UploaderBundle\Templating\Helper\UploaderHelper($a, $this->parameters['oneup_uploader.maxsize']);
    }

    /*
     * Gets the public 'oneup_uploader.twig.extension.uploader' shared service.
     *
     * @return \Oneup\UploaderBundle\Twig\Extension\UploaderExtension
     */
    protected function getOneupUploader_Twig_Extension_UploaderService()
    {
        return $this->services['oneup_uploader.twig.extension.uploader'] = new \Oneup\UploaderBundle\Twig\Extension\UploaderExtension(($this->services['oneup_uploader.templating.uploader_helper'] ?? $this->getOneupUploader_Templating_UploaderHelperService()));
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected function getRouterService()
    {
        $a = new \Symfony\Bridge\Monolog\Logger('router');
        $a->pushProcessor(($this->services['mautic.core.service.log_processor'] ?? ($this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor())));
        $a->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        $this->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $this), (\dirname(__DIR__, 4).'/app/config/routing.php'), ['cache_dir' => $this->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => NULL], ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))), $a, $this->getEnv('nullable:resolve:MAUTIC_LOCALE'));

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? ($this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory())));
        $instance->addExpressionLanguageProvider(($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /*
     * Gets the public 'symfony.filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function getSymfony_FilesystemService()
    {
        return $this->services['symfony.filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /*
     * Gets the public 'symfony.finder' shared service.
     *
     * @return \Symfony\Component\Finder\Finder
     */
    protected function getSymfony_FinderService()
    {
        return $this->services['symfony.finder'] = new \Symfony\Component\Finder\Finder();
    }

    /*
     * Gets the public 'translator' shared service.
     *
     * @return \Mautic\CoreBundle\Translation\Translator
     */
    protected function getTranslator2Service()
    {
        return $this->services['translator'] = new \Mautic\CoreBundle\Translation\Translator(($this->services['translator.default'] ?? $this->getTranslator_DefaultService()));
    }

    /*
     * Gets the public 'translator.default' shared service.
     *
     * @return \Mautic\CoreBundle\Translation\TranslatorLoader
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Mautic\CoreBundle\Translation\TranslatorLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'mautic.translation.loader' => ['services', 'mautic.translation.loader', 'getMautic_Translation_LoaderService', true],
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
        ], [
            'mautic.translation.loader' => '?',
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), new \Symfony\Component\Translation\Formatter\MessageFormatter(new \Symfony\Component\Translation\IdentityTranslator()), $this->getEnv('nullable:resolve:MAUTIC_LOCALE'), ['translation.loader.php' => [0 => 'php'], 'translation.loader.yml' => [0 => 'yaml', 1 => 'yml'], 'translation.loader.xliff' => [0 => 'xlf', 1 => 'xliff'], 'translation.loader.po' => [0 => 'po'], 'translation.loader.mo' => [0 => 'mo'], 'translation.loader.qt' => [0 => 'ts'], 'translation.loader.csv' => [0 => 'csv'], 'translation.loader.res' => [0 => 'res'], 'translation.loader.dat' => [0 => 'dat'], 'translation.loader.ini' => [0 => 'ini'], 'translation.loader.json' => [0 => 'json'], 'mautic.translation.loader' => [0 => 'mautic']], ['cache_dir' => ($this->targetDir.''.'/translations'), 'debug' => false, 'resource_files' => ['af' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.af.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ar.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf')], 'az' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.az.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.be.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.bg.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf')], 'bs' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.bs.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ca.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf')], 'cs' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.cs.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf')], 'cy' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf')], 'da' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.da.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.da.xlf')], 'de' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.de.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.de.xlf'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.de.yml')], 'el' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.el.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.en.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.en.xlf'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.en.yml'), 4 => (\dirname(__DIR__, 5).'/vendor/oneup/uploader-bundle/src/Resources/translations/OneupUploaderBundle.en.yml')], 'es' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.es.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.es.xlf')], 'et' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.et.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.eu.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf')], 'fa' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.fa.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf')], 'fi' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.fi.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf')], 'fr' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.fr.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.fr.yml'), 4 => (\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle/Resources/translations/messages.fr.xlf')], 'gl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.gl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.he.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.hr.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf')], 'hu' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.hu.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf')], 'hy' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.hy.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.id.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.id.xlf')], 'it' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.it.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.it.xlf')], 'ja' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ja.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf')], 'lb' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.lb.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.lt.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf')], 'lv' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.lv.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mn' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.mn.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.my.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.nb.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.nl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.nl.yml')], 'nn' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.nn.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.no.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.no.xlf')], 'pl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.pl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf')], 'pt' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.pt.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf')], 'pt_BR' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf')], 'ro' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ro.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf')], 'ru' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ru.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf')], 'sk' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sk.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf')], 'sl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations/FOSOAuthServerBundle.sl.yml')], 'sq' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sq.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.sv.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf')], 'th' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.th.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.th.xlf')], 'tl' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.tl.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.tr.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf')], 'uk' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.uk.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf')], 'ur' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.ur.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.uz.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.vi.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf')], 'zh_TW' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations/validators.zh_TW.xlf'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf')]], 'scanned_directories' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations'), 4 => (\dirname(__DIR__, 5).'/vendor/oneup/uploader-bundle/src/Resources/translations'), 5 => (\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle/Resources/translations'), 6 => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle/translations'), 7 => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle/translations'), 8 => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle/translations'), 9 => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle/translations'), 10 => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle/translations'), 11 => (\dirname(__DIR__, 4).'/app/bundles/ConfigBundle/translations'), 12 => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle/translations'), 13 => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle/translations'), 14 => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle/translations'), 15 => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle/translations'), 16 => (\dirname(__DIR__, 4).'/app/bundles/FormBundle/translations'), 17 => (\dirname(__DIR__, 4).'/app/bundles/InstallBundle/translations'), 18 => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle/translations'), 19 => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle/translations'), 20 => (\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle/translations'), 21 => (\dirname(__DIR__, 4).'/app/bundles/MessengerBundle/translations'), 22 => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle/translations'), 23 => (\dirname(__DIR__, 4).'/app/bundles/PageBundle/translations'), 24 => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle/translations'), 25 => (\dirname(__DIR__, 4).'/app/bundles/PointBundle/translations'), 26 => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle/translations'), 27 => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle/translations'), 28 => (\dirname(__DIR__, 4).'/app/bundles/StageBundle/translations'), 29 => (\dirname(__DIR__, 4).'/app/bundles/UserBundle/translations'), 30 => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle/translations'), 31 => (\dirname(__DIR__, 4).'/plugins/MauticGmailBundle/translations'), 32 => (\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle/translations'), 33 => (\dirname(__DIR__, 4).'/plugins/MauticCloudStorageBundle/translations'), 34 => (\dirname(__DIR__, 4).'/plugins/MauticFullContactBundle/translations'), 35 => (\dirname(__DIR__, 4).'/plugins/MauticClearbitBundle/translations'), 36 => (\dirname(__DIR__, 4).'/plugins/MauticOutlookBundle/translations'), 37 => (\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle/translations'), 38 => (\dirname(__DIR__, 4).'/plugins/MauticCrmBundle/translations'), 39 => (\dirname(__DIR__, 4).'/plugins/MauticFocusBundle/translations'), 40 => (\dirname(__DIR__, 4).'/plugins/MauticSocialBundle/translations'), 41 => (\dirname(__DIR__, 4).'/plugins/MauticEmailMarketingBundle/translations'), 42 => (\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle/translations'), 43 => (\dirname(__DIR__, 4).'/translations'), 44 => (\dirname(__DIR__, 5).'/vendor/symfony/framework-bundle/translations'), 45 => (\dirname(__DIR__, 5).'/vendor/symfony/security-bundle/translations'), 46 => (\dirname(__DIR__, 5).'/vendor/symfony/monolog-bundle/translations'), 47 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-bundle/translations'), 48 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-fixtures-bundle/translations'), 49 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-migrations-bundle/translations'), 50 => (\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu-bundle/src/translations'), 51 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/rest-bundle/translations'), 52 => (\dirname(__DIR__, 5).'/vendor/jms/serializer-bundle/translations'), 53 => (\dirname(__DIR__, 5).'/vendor/symfony/twig-bundle/translations'), 54 => (\dirname(__DIR__, 5).'/vendor/sensio/framework-extra-bundle/src/translations'), 55 => (\dirname(__DIR__, 5).'/vendor/lightsaml/symfony-bridge/src/LightSaml/SymfonyBridgeBundle/translations'), 56 => (\dirname(__DIR__, 5).'/vendor/lightsaml/sp-bundle/src/LightSaml/SpBundle/translations'), 57 => (\dirname(__DIR__, 5).'/vendor/helios-ag/fm-elfinder-bundle/src/translations'), 58 => (\dirname(__DIR__, 5).'/vendor/exercise/htmlpurifier-bundle/src/translations'), 59 => (\dirname(__DIR__, 4).'/app/bundles/StatsBundle/translations'), 60 => (\dirname(__DIR__, 4).'/app/bundles/CacheBundle/translations'), 61 => (\dirname(__DIR__, 4).'/app/bundles/QueueBundle/translations'), 62 => (\dirname(__DIR__, 4).'/plugins/MauticZapierBundle/translations')], 'cache_vary' => ['scanned_directories' => [0 => (\dirname(__DIR__, 5).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/translations'), 2 => (\dirname(__DIR__, 5).'/vendor/symfony/security-core/Resources/translations'), 3 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/translations'), 4 => (\dirname(__DIR__, 5).'/vendor/oneup/uploader-bundle/src/Resources/translations'), 5 => (\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle/Resources/translations'), 6 => 'app/bundles/ApiBundle/translations', 7 => 'app/bundles/AssetBundle/translations', 8 => 'app/bundles/CampaignBundle/translations', 9 => 'app/bundles/CategoryBundle/translations', 10 => 'app/bundles/ChannelBundle/translations', 11 => 'app/bundles/ConfigBundle/translations', 12 => 'app/bundles/CoreBundle/translations', 13 => 'app/bundles/DashboardBundle/translations', 14 => 'app/bundles/DynamicContentBundle/translations', 15 => 'app/bundles/EmailBundle/translations', 16 => 'app/bundles/FormBundle/translations', 17 => 'app/bundles/InstallBundle/translations', 18 => 'app/bundles/IntegrationsBundle/translations', 19 => 'app/bundles/LeadBundle/translations', 20 => 'app/bundles/MarketplaceBundle/translations', 21 => 'app/bundles/MessengerBundle/translations', 22 => 'app/bundles/NotificationBundle/translations', 23 => 'app/bundles/PageBundle/translations', 24 => 'app/bundles/PluginBundle/translations', 25 => 'app/bundles/PointBundle/translations', 26 => 'app/bundles/ReportBundle/translations', 27 => 'app/bundles/SmsBundle/translations', 28 => 'app/bundles/StageBundle/translations', 29 => 'app/bundles/UserBundle/translations', 30 => 'app/bundles/WebhookBundle/translations', 31 => 'plugins/MauticGmailBundle/translations', 32 => 'plugins/GrapesJsBuilderBundle/translations', 33 => 'plugins/MauticCloudStorageBundle/translations', 34 => 'plugins/MauticFullContactBundle/translations', 35 => 'plugins/MauticClearbitBundle/translations', 36 => 'plugins/MauticOutlookBundle/translations', 37 => 'plugins/MauticTagManagerBundle/translations', 38 => 'plugins/MauticCrmBundle/translations', 39 => 'plugins/MauticFocusBundle/translations', 40 => 'plugins/MauticSocialBundle/translations', 41 => 'plugins/MauticEmailMarketingBundle/translations', 42 => 'plugins/MauticCitrixBundle/translations', 43 => 'translations', 44 => (\dirname(__DIR__, 5).'/vendor/symfony/framework-bundle/translations'), 45 => (\dirname(__DIR__, 5).'/vendor/symfony/security-bundle/translations'), 46 => (\dirname(__DIR__, 5).'/vendor/symfony/monolog-bundle/translations'), 47 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-bundle/translations'), 48 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-fixtures-bundle/translations'), 49 => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-migrations-bundle/translations'), 50 => (\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu-bundle/src/translations'), 51 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/rest-bundle/translations'), 52 => (\dirname(__DIR__, 5).'/vendor/jms/serializer-bundle/translations'), 53 => (\dirname(__DIR__, 5).'/vendor/symfony/twig-bundle/translations'), 54 => (\dirname(__DIR__, 5).'/vendor/sensio/framework-extra-bundle/src/translations'), 55 => (\dirname(__DIR__, 5).'/vendor/lightsaml/symfony-bridge/src/LightSaml/SymfonyBridgeBundle/translations'), 56 => (\dirname(__DIR__, 5).'/vendor/lightsaml/sp-bundle/src/LightSaml/SpBundle/translations'), 57 => (\dirname(__DIR__, 5).'/vendor/helios-ag/fm-elfinder-bundle/src/translations'), 58 => (\dirname(__DIR__, 5).'/vendor/exercise/htmlpurifier-bundle/src/translations'), 59 => 'app/bundles/StatsBundle/translations', 60 => 'app/bundles/CacheBundle/translations', 61 => 'app/bundles/QueueBundle/translations', 62 => 'plugins/MauticZapierBundle/translations']]], []);

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? ($this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory())));
        $instance->setFallbackLocales([0 => 'en_US']);

        return $instance;
    }

    /*
     * Gets the private '.service_locator.GalGXm6' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_GalGXm6Service()
    {
        return $this->privates['.service_locator.GalGXm6'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaSubscriberService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaSubscriberService', true],
            'doctrine.orm.listeners.pdo_cache_adapter_doctrine_schema_subscriber' => ['privates', 'doctrine.orm.listeners.pdo_cache_adapter_doctrine_schema_subscriber', 'getDoctrine_Orm_Listeners_PdoCacheAdapterDoctrineSchemaSubscriberService', true],
            'doctrine.orm.messenger.doctrine_schema_subscriber' => ['privates', 'doctrine.orm.messenger.doctrine_schema_subscriber', 'getDoctrine_Orm_Messenger_DoctrineSchemaSubscriberService', true],
            'mautic.generated.columns.doctrine.listener' => ['services', 'mautic.generated.columns.doctrine.listener', 'getMautic_Generated_Columns_Doctrine_ListenerService', true],
            'mautic.install.leadcolumns' => ['services', 'mautic.install.leadcolumns', 'getMautic_Install_LeadcolumnsService', true],
            'mautic.lead.doctrine.subscriber' => ['services', 'mautic.lead.doctrine.subscriber', 'getMautic_Lead_Doctrine_SubscriberService', true],
            'mautic.tblprefix_subscriber' => ['services', 'mautic.tblprefix_subscriber', 'getMautic_TblprefixSubscriberService', true],
        ], [
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber' => '?',
            'doctrine.orm.listeners.pdo_cache_adapter_doctrine_schema_subscriber' => '?',
            'doctrine.orm.messenger.doctrine_schema_subscriber' => '?',
            'mautic.generated.columns.doctrine.listener' => '?',
            'mautic.install.leadcolumns' => '?',
            'mautic.lead.doctrine.subscriber' => '?',
            'mautic.tblprefix_subscriber' => '?',
        ]);
    }

    /*
     * Gets the private '.service_locator.mx0UMmY' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_Mx0UMmYService()
    {
        return $this->privates['.service_locator.mx0UMmY'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'doctrine' => ['services', 'doctrine', 'getDoctrineService', false],
            'form.factory' => ['services', '.container.private.form.factory', 'get_Container_Private_Form_FactoryService', false],
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'message_bus' => ['services', 'messenger.default_bus', 'getMessenger_DefaultBusService', false],
            'messenger.default_bus' => ['services', 'messenger.default_bus', 'getMessenger_DefaultBusService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.authorization_checker' => ['services', '.container.private.security.authorization_checker', 'get_Container_Private_Security_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['services', '.container.private.security.csrf.token_manager', 'get_Container_Private_Security_Csrf_TokenManagerService', false],
            'security.token_storage' => ['services', '.container.private.security.token_storage', 'get_Container_Private_Security_TokenStorageService', false],
            'session' => ['privates', '.session.deprecated', 'get_Session_DeprecatedService', true],
            'twig' => ['services', '.container.private.twig', 'get_Container_Private_TwigService', false],
        ], [
            'doctrine' => '?',
            'form.factory' => '?',
            'http_kernel' => '?',
            'message_bus' => '?',
            'messenger.default_bus' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.token_storage' => '?',
            'session' => '.session.deprecated',
            'twig' => '?',
        ]);
    }

    /*
     * Gets the private '.service_locator.rhcbusF' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_RhcbusFService()
    {
        return $this->privates['.service_locator.rhcbusF'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'security.firewall.map.context.api' => ['privates', 'security.firewall.map.context.api', 'getSecurity_Firewall_Map_Context_ApiService', true],
            'security.firewall.map.context.dev' => ['privates', 'security.firewall.map.context.dev', 'getSecurity_Firewall_Map_Context_DevService', true],
            'security.firewall.map.context.install' => ['privates', 'security.firewall.map.context.install', 'getSecurity_Firewall_Map_Context_InstallService', true],
            'security.firewall.map.context.login' => ['privates', 'security.firewall.map.context.login', 'getSecurity_Firewall_Map_Context_LoginService', true],
            'security.firewall.map.context.main' => ['privates', 'security.firewall.map.context.main', 'getSecurity_Firewall_Map_Context_MainService', true],
            'security.firewall.map.context.oauth2_area' => ['privates', 'security.firewall.map.context.oauth2_area', 'getSecurity_Firewall_Map_Context_Oauth2AreaService', true],
            'security.firewall.map.context.oauth2_token' => ['privates', 'security.firewall.map.context.oauth2_token', 'getSecurity_Firewall_Map_Context_Oauth2TokenService', true],
            'security.firewall.map.context.public' => ['privates', 'security.firewall.map.context.public', 'getSecurity_Firewall_Map_Context_PublicService', true],
            'security.firewall.map.context.saml_discovery' => ['privates', 'security.firewall.map.context.saml_discovery', 'getSecurity_Firewall_Map_Context_SamlDiscoveryService', true],
            'security.firewall.map.context.saml_login' => ['privates', 'security.firewall.map.context.saml_login', 'getSecurity_Firewall_Map_Context_SamlLoginService', true],
            'security.firewall.map.context.sso_login' => ['privates', 'security.firewall.map.context.sso_login', 'getSecurity_Firewall_Map_Context_SsoLoginService', true],
        ], [
            'security.firewall.map.context.api' => '?',
            'security.firewall.map.context.dev' => '?',
            'security.firewall.map.context.install' => '?',
            'security.firewall.map.context.login' => '?',
            'security.firewall.map.context.main' => '?',
            'security.firewall.map.context.oauth2_area' => '?',
            'security.firewall.map.context.oauth2_token' => '?',
            'security.firewall.map.context.public' => '?',
            'security.firewall.map.context.saml_discovery' => '?',
            'security.firewall.map.context.saml_login' => '?',
            'security.firewall.map.context.sso_login' => '?',
        ]);
    }

    /*
     * Gets the private 'annotations.cache_adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected function getAnnotations_CacheAdapterService()
    {
        return \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/annotations.php'), ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()));
    }

    /*
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\PsrCachedReader
     */
    protected function getAnnotations_CachedReaderService()
    {
        return $this->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\PsrCachedReader(($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService()), $this->getAnnotations_CacheAdapterService(), false);
    }

    /*
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $this->privates['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required', NULL);

        return $instance;
    }

    /*
     * Gets the private 'api_rate_limiter_cache' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getApiRateLimiterCacheService()
    {
        $this->privates['api_rate_limiter_cache'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('egHfSgnvE2', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        $a = ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());

        return $this->privates['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), new \Symfony\Component\Asset\Context\RequestStackContext(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a->getBaseUrl(), $a->isSecure())), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0));
    }

    /*
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_AnnotationsService()
    {
        return $this->privates['cache.annotations'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('Bq3bQ4zVBb', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.property_info' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_PropertyInfoService()
    {
        return $this->privates['cache.property_info'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('AAHkEOasay', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_ValidatorService()
    {
        return $this->privates['cache.validator'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('KELb+6x7vD', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'controller_resolver' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected function getControllerResolverService()
    {
        return $this->privates['controller_resolver'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()));
    }

    /*
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, NULL, NULL, 0, false, false, NULL);
    }

    /*
     * Gets the private 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($this->parameters['doctrine.dbal.connection_factory.types'], new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite']));
    }

    /*
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected function getDoctrine_Dbal_DefaultConnection_EventManagerService()
    {
        $a = ($this->privates['.service_locator.GalGXm6'] ?? $this->get_ServiceLocator_GalGXm6Service());

        if (isset($this->privates['doctrine.dbal.default_connection.event_manager'])) {
            return $this->privates['doctrine.dbal.default_connection.event_manager'];
        }

        return $this->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($a, [0 => 'doctrine.orm.messenger.doctrine_schema_subscriber', 1 => 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber', 2 => 'doctrine.orm.listeners.pdo_cache_adapter_doctrine_schema_subscriber', 3 => 'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber', 4 => 'mautic.tblprefix_subscriber', 5 => 'mautic.install.leadcolumns', 6 => 'mautic.lead.doctrine.subscriber', 7 => [0 => [0 => 'loadClassMetadata'], 1 => 'doctrine.orm.default_listeners.attach_entity_listeners'], 8 => [0 => [0 => 'postGenerateSchema'], 1 => 'mautic.generated.columns.doctrine.listener']]);
    }

    /*
     * Gets the private 'doctrine.fixtures.loader' shared service.
     *
     * @return \Doctrine\Bundle\FixturesBundle\Loader\SymfonyFixturesLoader
     */
    protected function getDoctrine_Fixtures_LoaderService()
    {
        $this->privates['doctrine.fixtures.loader'] = $instance = new \Doctrine\Bundle\FixturesBundle\Loader\SymfonyFixturesLoader($this);

        $instance->addFixtures([0 => ['fixture' => ($this->services['mautic.asset.fixture.asset'] ?? ($this->services['mautic.asset.fixture.asset'] = new \Mautic\AssetBundle\DataFixtures\ORM\LoadAssetData())), 'groups' => []], 1 => ['fixture' => ($this->services['mautic.campaign.fixture.campaign'] ?? ($this->services['mautic.campaign.fixture.campaign'] = new \Mautic\CampaignBundle\DataFixtures\ORM\CampaignData())), 'groups' => []], 2 => ['fixture' => ($this->services['mautic.email.fixture.email'] ?? $this->getMautic_Email_Fixture_EmailService()), 'groups' => []], 3 => ['fixture' => ($this->services['mautic.form.fixture.form'] ?? $this->getMautic_Form_Fixture_FormService()), 'groups' => []], 4 => ['fixture' => ($this->services['mautic.form.fixture.form_result'] ?? $this->getMautic_Form_Fixture_FormResultService()), 'groups' => []], 5 => ['fixture' => ($this->services['mautic.install.fixture.lead_field'] ?? $this->getMautic_Install_Fixture_LeadFieldService()), 'groups' => []], 6 => ['fixture' => ($this->services['mautic.install.fixture.role'] ?? $this->getMautic_Install_Fixture_RoleService()), 'groups' => []], 7 => ['fixture' => ($this->services['mautic.install.fixture.report_data'] ?? ($this->services['mautic.install.fixture.report_data'] = new \Mautic\InstallBundle\InstallFixtures\ORM\LoadReportData())), 'groups' => []], 8 => ['fixture' => ($this->services['mautic.install.fixture.grape_js'] ?? ($this->services['mautic.install.fixture.grape_js'] = new \Mautic\InstallBundle\InstallFixtures\ORM\GrapesJsData())), 'groups' => []], 9 => ['fixture' => ($this->services['mautic.lead.fixture.company'] ?? $this->getMautic_Lead_Fixture_CompanyService()), 'groups' => []], 10 => ['fixture' => ($this->services['mautic.lead.fixture.contact'] ?? $this->getMautic_Lead_Fixture_ContactService()), 'groups' => []], 11 => ['fixture' => ($this->services['mautic.lead.fixture.segment'] ?? $this->getMautic_Lead_Fixture_SegmentService()), 'groups' => []], 12 => ['fixture' => ($this->services['mautic.lead.fixture.category'] ?? ($this->services['mautic.lead.fixture.category'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadCategoryData())), 'groups' => []], 13 => ['fixture' => ($this->services['mautic.lead.fixture.categorizedleadlists'] ?? ($this->services['mautic.lead.fixture.categorizedleadlists'] = new \Mautic\LeadBundle\DataFixtures\ORM\LoadCategorizedLeadListData())), 'groups' => []], 14 => ['fixture' => ($this->services['mautic.lead.fixture.test.page_hit'] ?? ($this->services['mautic.lead.fixture.test.page_hit'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadPageHitData())), 'groups' => []], 15 => ['fixture' => ($this->services['mautic.lead.fixture.test.segment'] ?? $this->getMautic_Lead_Fixture_Test_SegmentService()), 'groups' => []], 16 => ['fixture' => ($this->services['mautic.lead.fixture.test.click'] ?? $this->getMautic_Lead_Fixture_Test_ClickService()), 'groups' => []], 17 => ['fixture' => ($this->services['mautic.lead.fixture.test.dnc'] ?? $this->getMautic_Lead_Fixture_Test_DncService()), 'groups' => []], 18 => ['fixture' => ($this->services['mautic.lead.fixture.test.tag'] ?? ($this->services['mautic.lead.fixture.test.tag'] = new \Mautic\LeadBundle\Tests\DataFixtures\ORM\LoadTagData())), 'groups' => []], 19 => ['fixture' => ($this->services['mautic.page.fixture.page_category'] ?? $this->getMautic_Page_Fixture_PageCategoryService()), 'groups' => []], 20 => ['fixture' => ($this->services['mautic.page.fixture.page'] ?? $this->getMautic_Page_Fixture_PageService()), 'groups' => []], 21 => ['fixture' => ($this->services['mautic.page.fixture.page_hit'] ?? $this->getMautic_Page_Fixture_PageHitService()), 'groups' => []], 22 => ['fixture' => ($this->services['mautic.user.fixture.role'] ?? $this->getMautic_User_Fixture_RoleService()), 'groups' => []], 23 => ['fixture' => ($this->services['mautic.user.fixture.user'] ?? $this->getMautic_User_Fixture_UserService()), 'groups' => []], 24 => ['fixture' => ($this->services['mautic.citrix.fixture.load_citrix_data'] ?? ($this->services['mautic.citrix.fixture.load_citrix_data'] = new \MauticPlugin\MauticCitrixBundle\Tests\DataFixtures\ORM\LoadCitrixData())), 'groups' => []]]);

        return $instance;
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected function getExceptionListenerService()
    {
        return $this->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), false, []);
    }

    /*
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    protected function getForm_RegistryService()
    {
        return $this->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'FM\\ElfinderBundle\\Form\\Type\\ElFinderType' => ['privates', 'fm_elfinder.form.type', 'getFmElfinder_Form_TypeService', true],
            'FOS\\OAuthServerBundle\\Form\\Type\\AuthorizeFormType' => ['privates', 'fos_oauth_server.authorize.form.type', 'getFosOauthServer_Authorize_Form_TypeService', true],
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixActionType' => ['services', 'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixActionType', 'getCitrixActionTypeService', true],
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignActionType' => ['services', 'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignActionType', 'getCitrixCampaignActionTypeService', true],
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignEventType' => ['services', 'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignEventType', 'getCitrixCampaignEventTypeService', true],
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixListType' => ['services', 'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixListType', 'getCitrixListTypeService', true],
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\BatchLookupType' => ['services', 'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\BatchLookupType', 'getBatchLookupTypeService', true],
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\LookupType' => ['services', 'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\LookupType', 'getLookupTypeService', true],
            'MauticPlugin\\MauticCrmBundle\\Form\\Type\\IntegrationCampaignsTaskType' => ['services', 'MauticPlugin\\MauticCrmBundle\\Form\\Type\\IntegrationCampaignsTaskType', 'getIntegrationCampaignsTaskTypeService', true],
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\ConstantContactType' => ['services', 'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\ConstantContactType', 'getConstantContactTypeService', true],
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\IcontactType' => ['services', 'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\IcontactType', 'getIcontactTypeService', true],
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\MailchimpType' => ['services', 'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\MailchimpType', 'getMailchimpTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ColorType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ColorType', 'getColorTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ContentType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ContentType', 'getContentTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusListType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusListType', 'getFocusListTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusPropertiesType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusPropertiesType', 'getFocusPropertiesTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusShowType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusShowType', 'getFocusShowTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusType', 'getFocusTypeService', true],
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\PropertiesType' => ['services', 'MauticPlugin\\MauticFocusBundle\\Form\\Type\\PropertiesType', 'getPropertiesTypeService', true],
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\BatchLookupType' => ['services', 'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\BatchLookupType', 'getBatchLookupType2Service', true],
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\LookupType' => ['services', 'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\LookupType', 'getLookupType2Service', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\ConfigType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\ConfigType', 'getConfigTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\FacebookType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\FacebookType', 'getFacebookTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\MonitoringType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\MonitoringType', 'getMonitoringTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\SocialLoginType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\SocialLoginType', 'getSocialLoginTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetListType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetListType', 'getTweetListTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetSendType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetSendType', 'getTweetSendTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetType', 'getTweetTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterAbstractType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterAbstractType', 'getTwitterAbstractTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterCustomType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterCustomType', 'getTwitterCustomTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterHashtagType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterHashtagType', 'getTwitterHashtagTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterMentionType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterMentionType', 'getTwitterMentionTypeService', true],
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterType' => ['services', 'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterType', 'getTwitterTypeService', true],
            'MauticPlugin\\MauticTagManagerBundle\\Form\\Type\\TagEntityType' => ['services', 'MauticPlugin\\MauticTagManagerBundle\\Form\\Type\\TagEntityType', 'getTagEntityTypeService', true],
            'Mautic\\ApiBundle\\Form\\Type\\ClientType' => ['services', 'Mautic\\ApiBundle\\Form\\Type\\ClientType', 'getClientTypeService', true],
            'Mautic\\ApiBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\ApiBundle\\Form\\Type\\ConfigType', 'getConfigType2Service', true],
            'Mautic\\AssetBundle\\Form\\Type\\AssetListType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\AssetListType', 'getAssetListTypeService', true],
            'Mautic\\AssetBundle\\Form\\Type\\AssetType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\AssetType', 'getAssetTypeService', true],
            'Mautic\\AssetBundle\\Form\\Type\\CampaignEventAssetDownloadType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\CampaignEventAssetDownloadType', 'getCampaignEventAssetDownloadTypeService', true],
            'Mautic\\AssetBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\ConfigType', 'getConfigType3Service', true],
            'Mautic\\AssetBundle\\Form\\Type\\FormSubmitActionDownloadFileType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\FormSubmitActionDownloadFileType', 'getFormSubmitActionDownloadFileTypeService', true],
            'Mautic\\AssetBundle\\Form\\Type\\PointActionAssetDownloadType' => ['services', 'Mautic\\AssetBundle\\Form\\Type\\PointActionAssetDownloadType', 'getPointActionAssetDownloadTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventAddRemoveLeadType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventAddRemoveLeadType', 'getCampaignEventAddRemoveLeadTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventJumpToEventType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventJumpToEventType', 'getCampaignEventJumpToEventTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventLeadChangeType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventLeadChangeType', 'getCampaignEventLeadChangeTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignLeadSourceType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignLeadSourceType', 'getCampaignLeadSourceTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignListType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignListType', 'getCampaignListTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\CampaignType', 'getCampaignTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\ConfigType', 'getConfigType4Service', true],
            'Mautic\\CampaignBundle\\Form\\Type\\EventCanvasSettingsType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\EventCanvasSettingsType', 'getEventCanvasSettingsTypeService', true],
            'Mautic\\CampaignBundle\\Form\\Type\\EventType' => ['services', 'Mautic\\CampaignBundle\\Form\\Type\\EventType', 'getEventTypeService', true],
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryBundlesType' => ['services', 'Mautic\\CategoryBundle\\Form\\Type\\CategoryBundlesType', 'getCategoryBundlesTypeService', true],
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryListType' => ['services', 'Mautic\\CategoryBundle\\Form\\Type\\CategoryListType', 'getCategoryListTypeService', true],
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryType' => ['services', 'Mautic\\CategoryBundle\\Form\\Type\\CategoryType', 'getCategoryTypeService', true],
            'Mautic\\ChannelBundle\\Form\\Type\\ChannelType' => ['services', 'Mautic\\ChannelBundle\\Form\\Type\\ChannelType', 'getChannelTypeService', true],
            'Mautic\\ChannelBundle\\Form\\Type\\MessageListType' => ['services', 'Mautic\\ChannelBundle\\Form\\Type\\MessageListType', 'getMessageListTypeService', true],
            'Mautic\\ChannelBundle\\Form\\Type\\MessageSendType' => ['services', 'Mautic\\ChannelBundle\\Form\\Type\\MessageSendType', 'getMessageSendTypeService', true],
            'Mautic\\ChannelBundle\\Form\\Type\\MessageType' => ['services', 'Mautic\\ChannelBundle\\Form\\Type\\MessageType', 'getMessageTypeService', true],
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigFileType' => ['services', 'Mautic\\ConfigBundle\\Form\\Type\\ConfigFileType', 'getConfigFileTypeService', true],
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\ConfigBundle\\Form\\Type\\ConfigType', 'getConfigType5Service', true],
            'Mautic\\ConfigBundle\\Form\\Type\\DsnType' => ['services', 'Mautic\\ConfigBundle\\Form\\Type\\DsnType', 'getDsnTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\BooleanType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\BooleanType', 'getBooleanTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\BuilderSectionType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\BuilderSectionType', 'getBuilderSectionTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\ButtonGroupType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\ButtonGroupType', 'getButtonGroupTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\ConfigThemeType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\ConfigThemeType', 'getConfigThemeTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\ConfigType' => ['services', 'mautic.form.type.coreconfig', 'getMautic_Form_Type_CoreconfigService', true],
            'Mautic\\CoreBundle\\Form\\Type\\CountryType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\CountryType', 'getCountryTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DatePickerType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\DatePickerType', 'getDatePickerTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DateRangeType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\DateRangeType', 'getDateRangeTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType' => ['services', 'mautic.form.type.dynamic_content_filter_entry_filters', 'getMautic_Form_Type_DynamicContentFilterEntryFiltersService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryType', 'getDynamicContentFilterEntryTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterType', 'getDynamicContentFilterTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\DynamicListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\DynamicListType', 'getDynamicListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\EntityLookupType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\EntityLookupType', 'getEntityLookupTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\FormButtonsType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\FormButtonsType', 'getFormButtonsTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\GatedVideoType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\GatedVideoType', 'getGatedVideoTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\IpLookupDownloadDataStoreButtonType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\IpLookupDownloadDataStoreButtonType', 'getIpLookupDownloadDataStoreButtonTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\LocaleType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\LocaleType', 'getLocaleTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\LookupType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\LookupType', 'getLookupType3Service', true],
            'Mautic\\CoreBundle\\Form\\Type\\MultiselectType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\MultiselectType', 'getMultiselectTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType', 'getPublishDownDateTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType', 'getPublishUpDateTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\RegionType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\RegionType', 'getRegionTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SelectType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SelectType', 'getSelectTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotButtonType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotButtonType', 'getSlotButtonTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotCategoryListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotCategoryListType', 'getSlotCategoryListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotChannelFrequencyType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotChannelFrequencyType', 'getSlotChannelFrequencyTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotCodeModeType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotCodeModeType', 'getSlotCodeModeTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotDwcType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotDwcType', 'getSlotDwcTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotDynamicContentType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotDynamicContentType', 'getSlotDynamicContentTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCaptionType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotImageCaptionType', 'getSlotImageCaptionTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCardType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotImageCardType', 'getSlotImageCardTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotImageType', 'getSlotImageTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotPreferredChannelType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotPreferredChannelType', 'getSlotPreferredChannelTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSavePrefsButtonType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSavePrefsButtonType', 'getSlotSavePrefsButtonTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSegmentListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSegmentListType', 'getSlotSegmentListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSeparatorType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSeparatorType', 'getSlotSeparatorTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialFollowType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSocialFollowType', 'getSlotSocialFollowTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialShareType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSocialShareType', 'getSlotSocialShareTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotSuccessMessageType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotSuccessMessageType', 'getSlotSuccessMessageTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotTextType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotTextType', 'getSlotTextTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SlotType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SlotType', 'getSlotTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SortableListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SortableListType', 'getSortableListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\SortableValueLabelListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\SortableValueLabelListType', 'getSortableValueLabelListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\StandAloneButtonType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\StandAloneButtonType', 'getStandAloneButtonTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\TelType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\TelType', 'getTelTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\ThemeListType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\ThemeListType', 'getThemeListTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\ThemeUploadType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\ThemeUploadType', 'getThemeUploadTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\TimeFormatType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\TimeFormatType', 'getTimeFormatTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\TimezoneType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\TimezoneType', 'getTimezoneTypeService', true],
            'Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType' => ['services', 'Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType', 'getYesNoButtonGroupTypeService', true],
            'Mautic\\DashboardBundle\\Form\\Type\\UploadType' => ['services', 'Mautic\\DashboardBundle\\Form\\Type\\UploadType', 'getUploadTypeService', true],
            'Mautic\\DashboardBundle\\Form\\Type\\WidgetType' => ['services', 'Mautic\\DashboardBundle\\Form\\Type\\WidgetType', 'getWidgetTypeService', true],
            'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType' => ['services', 'mautic.form.type.dwc_entry_filters', 'getMautic_Form_Type_DwcEntryFiltersService', true],
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentDecisionType' => ['services', 'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentDecisionType', 'getDynamicContentDecisionTypeService', true],
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentListType' => ['services', 'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentListType', 'getDynamicContentListTypeService', true],
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentSendType' => ['services', 'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentSendType', 'getDynamicContentSendTypeService', true],
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentType' => ['services', 'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentType', 'getDynamicContentTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\AbTestPropertiesType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\AbTestPropertiesType', 'getAbTestPropertiesTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\BatchSendType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\BatchSendType', 'getBatchSendTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredEmailType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredEmailType', 'getConfigMonitoredEmailTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredMailboxesType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredMailboxesType', 'getConfigMonitoredMailboxesTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\ConfigType', 'getConfigType6Service', true],
            'Mautic\\EmailBundle\\Form\\Type\\DashboardBestHoursWidgetType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\DashboardBestHoursWidgetType', 'getDashboardBestHoursWidgetTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\DashboardEmailsInTimeWidgetType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\DashboardEmailsInTimeWidgetType', 'getDashboardEmailsInTimeWidgetTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\DashboardMostHitEmailRedirectsWidgetType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\DashboardMostHitEmailRedirectsWidgetType', 'getDashboardMostHitEmailRedirectsWidgetTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\DashboardSentEmailToContactsWidgetType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\DashboardSentEmailToContactsWidgetType', 'getDashboardSentEmailToContactsWidgetTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailClickDecisionType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailClickDecisionType', 'getEmailClickDecisionTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailListType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailListType', 'getEmailListTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailOpenType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailOpenType', 'getEmailOpenTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailSendType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailSendType', 'getEmailSendTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailToUserType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailToUserType', 'getEmailToUserTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailType', 'getEmailTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\EmailUtmTagsType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\EmailUtmTagsType', 'getEmailUtmTagsTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\ExampleSendType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\ExampleSendType', 'getExampleSendTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\FormSubmitActionUserEmailType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\FormSubmitActionUserEmailType', 'getFormSubmitActionUserEmailTypeService', true],
            'Mautic\\EmailBundle\\Form\\Type\\VariantType' => ['services', 'Mautic\\EmailBundle\\Form\\Type\\VariantType', 'getVariantTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\ActionType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\ActionType', 'getActionTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormFieldValueType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormFieldValueType', 'getCampaignEventFormFieldValueTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormSubmitType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormSubmitType', 'getCampaignEventFormSubmitTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\ConfigFormType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\ConfigFormType', 'getConfigFormTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FieldType' => ['services', 'mautic.form.type.field', 'getMautic_Form_Type_FieldService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldCaptchaType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldCaptchaType', 'getFormFieldCaptchaTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldConditionType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldConditionType', 'getFormFieldConditionTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldEmailType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldEmailType', 'getFormFieldEmailTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldFileType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldFileType', 'getFormFieldFileTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldGroupType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldGroupType', 'getFormFieldGroupTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldHTMLType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldHTMLType', 'getFormFieldHTMLTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPageBreakType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldPageBreakType', 'getFormFieldPageBreakTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPlaceholderType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldPlaceholderType', 'getFormFieldPlaceholderTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldSelectType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldSelectType', 'getFormFieldSelectTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTelType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldTelType', 'getFormFieldTelTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTextType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormFieldTextType', 'getFormFieldTextTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormListType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormListType', 'getFormListTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\FormType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\FormType', 'getFormTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\PointActionFormSubmitType' => ['services', 'Mautic\\FormBundle\\Form\\Type\\PointActionFormSubmitType', 'getPointActionFormSubmitTypeService', true],
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType' => ['services', 'mautic.form.type.form_submitaction_sendemail', 'getMautic_Form_Type_FormSubmitactionSendemailService', true],
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType' => ['services', 'mautic.form.type.form_submitaction_repost', 'getMautic_Form_Type_FormSubmitactionRepostService', true],
            'Mautic\\InstallBundle\\Configurator\\Form\\CheckStepType' => ['services', 'Mautic\\InstallBundle\\Configurator\\Form\\CheckStepType', 'getCheckStepTypeService', true],
            'Mautic\\InstallBundle\\Configurator\\Form\\DoctrineStepType' => ['services', 'Mautic\\InstallBundle\\Configurator\\Form\\DoctrineStepType', 'getDoctrineStepTypeService', true],
            'Mautic\\InstallBundle\\Configurator\\Form\\UserStepType' => ['services', 'Mautic\\InstallBundle\\Configurator\\Form\\UserStepType', 'getUserStepTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\ActivityListType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\ActivityListType', 'getActivityListTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationConfigType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationConfigType', 'getIntegrationConfigTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationFeatureSettingsType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationFeatureSettingsType', 'getIntegrationFeatureSettingsTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsFieldMappingsType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsFieldMappingsType', 'getIntegrationSyncSettingsFieldMappingsTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldMappingType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldMappingType', 'getIntegrationSyncSettingsObjectFieldMappingTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldType', 'getIntegrationSyncSettingsObjectFieldTypeService', true],
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsType' => ['services', 'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsType', 'getIntegrationSyncSettingsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ActionAddUtmTagsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ActionAddUtmTagsType', 'getActionAddUtmTagsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ActionRemoveDoNotContact' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ActionRemoveDoNotContact', 'getActionRemoveDoNotContactService', true],
            'Mautic\\LeadBundle\\Form\\Type\\AddToCompanyActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\AddToCompanyActionType', 'getAddToCompanyActionTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\BatchType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\BatchType', 'getBatchTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionAddDNCType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignActionAddDNCType', 'getCampaignActionAddDNCTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionRemoveDNCType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignActionRemoveDNCType', 'getCampaignActionRemoveDNCTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignConditionLeadPageHitType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignConditionLeadPageHitType', 'getCampaignConditionLeadPageHitTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadCampaignsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadCampaignsType', 'getCampaignEventLeadCampaignsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDNCType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDNCType', 'getCampaignEventLeadDNCTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDeviceType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDeviceType', 'getCampaignEventLeadDeviceTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadFieldValueType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadFieldValueType', 'getCampaignEventLeadFieldValueTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadOwnerType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadOwnerType', 'getCampaignEventLeadOwnerTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadSegmentsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadSegmentsType', 'getCampaignEventLeadSegmentsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadStagesType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadStagesType', 'getCampaignEventLeadStagesTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadTagsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadTagsType', 'getCampaignEventLeadTagsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ChangeOwnerType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ChangeOwnerType', 'getChangeOwnerTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CompanyChangeScoreActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CompanyChangeScoreActionType', 'getCompanyChangeScoreActionTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CompanyListType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CompanyListType', 'getCompanyListTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CompanyMergeType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CompanyMergeType', 'getCompanyMergeTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\CompanyType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\CompanyType', 'getCompanyTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ConfigCompanyType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ConfigCompanyType', 'getConfigCompanyTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ConfigType', 'getConfigType7Service', true],
            'Mautic\\LeadBundle\\Form\\Type\\ContactChannelsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ContactChannelsType', 'getContactChannelsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ContactColumnsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ContactColumnsType', 'getContactColumnsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ContactFrequencyType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ContactFrequencyType', 'getContactFrequencyTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsInTimeWidgetType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsInTimeWidgetType', 'getDashboardLeadsInTimeWidgetTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsLifetimeWidgetType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsLifetimeWidgetType', 'getDashboardLeadsLifetimeWidgetTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\DashboardSegmentsBuildTime' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\DashboardSegmentsBuildTime', 'getDashboardSegmentsBuildTimeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\DeviceType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\DeviceType', 'getDeviceTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\DncType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\DncType', 'getDncTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\EmailType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\EmailType', 'getEmailType2Service', true],
            'Mautic\\LeadBundle\\Form\\Type\\FieldType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\FieldType', 'getFieldTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\FilterPropertiesType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\FilterPropertiesType', 'getFilterPropertiesTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\FilterType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\FilterType', 'getFilterTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\FormSubmitActionPointsChangeType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\FormSubmitActionPointsChangeType', 'getFormSubmitActionPointsChangeTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadCategoryType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadCategoryType', 'getLeadCategoryTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadFieldsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadFieldsType', 'getLeadFieldsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportFieldType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadImportFieldType', 'getLeadImportFieldTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadImportType', 'getLeadImportTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadListType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadListType', 'getLeadListTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\LeadType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\LeadType', 'getLeadTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ListActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ListActionType', 'getListActionTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ListType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ListType', 'getListTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\MergeType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\MergeType', 'getMergeTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\ModifyLeadTagsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\ModifyLeadTagsType', 'getModifyLeadTagsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\NoteType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\NoteType', 'getNoteTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\OwnerType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\OwnerType', 'getOwnerTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\PointActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\PointActionType', 'getPointActionTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\PreferenceChannelsType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\PreferenceChannelsType', 'getPreferenceChannelsTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\SegmentConfigType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\SegmentConfigType', 'getSegmentConfigTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\StageType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\StageType', 'getStageTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\TagEntityType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\TagEntityType', 'getTagEntityType2Service', true],
            'Mautic\\LeadBundle\\Form\\Type\\TagType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\TagType', 'getTagTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\UpdateCompanyActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\UpdateCompanyActionType', 'getUpdateCompanyActionTypeService', true],
            'Mautic\\LeadBundle\\Form\\Type\\UpdateLeadActionType' => ['services', 'Mautic\\LeadBundle\\Form\\Type\\UpdateLeadActionType', 'getUpdateLeadActionTypeService', true],
            'Mautic\\MessengerBundle\\Form\\Type\\ConfigType' => ['privates', 'Mautic\\MessengerBundle\\Form\\Type\\ConfigType', 'getConfigType14Service', true],
            'Mautic\\NotificationBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\ConfigType', 'getConfigType8Service', true],
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationDetailsType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationDetailsType', 'getMobileNotificationDetailsTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationListType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationListType', 'getMobileNotificationListTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationSendType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationSendType', 'getMobileNotificationSendTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationType', 'getMobileNotificationTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationConfigType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\NotificationConfigType', 'getNotificationConfigTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationListType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\NotificationListType', 'getNotificationListTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationSendType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\NotificationSendType', 'getNotificationSendTypeService', true],
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationType' => ['services', 'Mautic\\NotificationBundle\\Form\\Type\\NotificationType', 'getNotificationTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\AbTestPropertiesType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\AbTestPropertiesType', 'getAbTestPropertiesType2Service', true],
            'Mautic\\PageBundle\\Form\\Type\\CampaignEventPageHitType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\CampaignEventPageHitType', 'getCampaignEventPageHitTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\ConfigTrackingPageType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\ConfigTrackingPageType', 'getConfigTrackingPageTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\ConfigType', 'getConfigType9Service', true],
            'Mautic\\PageBundle\\Form\\Type\\DashboardHitsInTimeWidgetType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\DashboardHitsInTimeWidgetType', 'getDashboardHitsInTimeWidgetTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PageListType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PageListType', 'getPageListTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PagePublishDatesType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PagePublishDatesType', 'getPagePublishDatesTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PageType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PageType', 'getPageTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PointActionPageHitType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PointActionPageHitType', 'getPointActionPageHitTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PointActionUrlHitType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PointActionUrlHitType', 'getPointActionUrlHitTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\PreferenceCenterListType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\PreferenceCenterListType', 'getPreferenceCenterListTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\RedirectListType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\RedirectListType', 'getRedirectListTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\TrackingPixelSendType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\TrackingPixelSendType', 'getTrackingPixelSendTypeService', true],
            'Mautic\\PageBundle\\Form\\Type\\VariantType' => ['services', 'Mautic\\PageBundle\\Form\\Type\\VariantType', 'getVariantType2Service', true],
            'Mautic\\PluginBundle\\Form\\Type\\CompanyFieldsType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\CompanyFieldsType', 'getCompanyFieldsTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\DetailsType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\DetailsType', 'getDetailsTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\FeatureSettingsType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\FeatureSettingsType', 'getFeatureSettingsTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\FieldsType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\FieldsType', 'getFieldsTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationCampaignsType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\IntegrationCampaignsType', 'getIntegrationCampaignsTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationConfigType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\IntegrationConfigType', 'getIntegrationConfigType2Service', true],
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationsListType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\IntegrationsListType', 'getIntegrationsListTypeService', true],
            'Mautic\\PluginBundle\\Form\\Type\\KeysType' => ['services', 'Mautic\\PluginBundle\\Form\\Type\\KeysType', 'getKeysTypeService', true],
            'Mautic\\PointBundle\\Form\\Type\\GenericPointSettingsType' => ['services', 'Mautic\\PointBundle\\Form\\Type\\GenericPointSettingsType', 'getGenericPointSettingsTypeService', true],
            'Mautic\\PointBundle\\Form\\Type\\PointActionType' => ['services', 'Mautic\\PointBundle\\Form\\Type\\PointActionType', 'getPointActionType2Service', true],
            'Mautic\\PointBundle\\Form\\Type\\PointType' => ['services', 'Mautic\\PointBundle\\Form\\Type\\PointType', 'getPointTypeService', true],
            'Mautic\\PointBundle\\Form\\Type\\TriggerEventType' => ['services', 'Mautic\\PointBundle\\Form\\Type\\TriggerEventType', 'getTriggerEventTypeService', true],
            'Mautic\\PointBundle\\Form\\Type\\TriggerType' => ['services', 'Mautic\\PointBundle\\Form\\Type\\TriggerType', 'getTriggerTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\AggregatorType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\AggregatorType', 'getAggregatorTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\ConfigType', 'getConfigType10Service', true],
            'Mautic\\ReportBundle\\Form\\Type\\DynamicFiltersType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\DynamicFiltersType', 'getDynamicFiltersTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\FilterSelectorType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\FilterSelectorType', 'getFilterSelectorTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\ReportFiltersType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\ReportFiltersType', 'getReportFiltersTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\ReportSettingsType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\ReportSettingsType', 'getReportSettingsTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\ReportType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\ReportType', 'getReportTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\ReportWidgetType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\ReportWidgetType', 'getReportWidgetTypeService', true],
            'Mautic\\ReportBundle\\Form\\Type\\TableOrderType' => ['services', 'Mautic\\ReportBundle\\Form\\Type\\TableOrderType', 'getTableOrderTypeService', true],
            'Mautic\\SmsBundle\\Form\\Type\\CampaignReplyType' => ['services', 'Mautic\\SmsBundle\\Form\\Type\\CampaignReplyType', 'getCampaignReplyTypeService', true],
            'Mautic\\SmsBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\SmsBundle\\Form\\Type\\ConfigType', 'getConfigType11Service', true],
            'Mautic\\SmsBundle\\Form\\Type\\SmsListType' => ['services', 'Mautic\\SmsBundle\\Form\\Type\\SmsListType', 'getSmsListTypeService', true],
            'Mautic\\SmsBundle\\Form\\Type\\SmsSendType' => ['services', 'Mautic\\SmsBundle\\Form\\Type\\SmsSendType', 'getSmsSendTypeService', true],
            'Mautic\\SmsBundle\\Form\\Type\\SmsType' => ['services', 'Mautic\\SmsBundle\\Form\\Type\\SmsType', 'getSmsTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\GenericStageActionType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\GenericStageActionType', 'getGenericStageActionTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\StageActionChangeType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\StageActionChangeType', 'getStageActionChangeTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\StageActionListType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\StageActionListType', 'getStageActionListTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\StageActionType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\StageActionType', 'getStageActionTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\StageListType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\StageListType', 'getStageListTypeService', true],
            'Mautic\\StageBundle\\Form\\Type\\StageType' => ['services', 'Mautic\\StageBundle\\Form\\Type\\StageType', 'getStageType2Service', true],
            'Mautic\\UserBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\ConfigType', 'getConfigType12Service', true],
            'Mautic\\UserBundle\\Form\\Type\\ContactType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\ContactType', 'getContactTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetConfirmType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\PasswordResetConfirmType', 'getPasswordResetConfirmTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\PasswordResetType', 'getPasswordResetTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\PermissionListType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\PermissionListType', 'getPermissionListTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\PermissionsType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\PermissionsType', 'getPermissionsTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\RoleListType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\RoleListType', 'getRoleListTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\RoleType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\RoleType', 'getRoleTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\UserListType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\UserListType', 'getUserListTypeService', true],
            'Mautic\\UserBundle\\Form\\Type\\UserType' => ['services', 'Mautic\\UserBundle\\Form\\Type\\UserType', 'getUserTypeService', true],
            'Mautic\\WebhookBundle\\Form\\Type\\CampaignEventSendWebhookType' => ['services', 'Mautic\\WebhookBundle\\Form\\Type\\CampaignEventSendWebhookType', 'getCampaignEventSendWebhookTypeService', true],
            'Mautic\\WebhookBundle\\Form\\Type\\ConfigType' => ['services', 'Mautic\\WebhookBundle\\Form\\Type\\ConfigType', 'getConfigType13Service', true],
            'Mautic\\WebhookBundle\\Form\\Type\\WebhookType' => ['services', 'Mautic\\WebhookBundle\\Form\\Type\\WebhookType', 'getWebhookTypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['services', '.container.private.form.type.file', 'get_Container_Private_Form_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'FM\\ElfinderBundle\\Form\\Type\\ElFinderType' => '?',
            'FOS\\OAuthServerBundle\\Form\\Type\\AuthorizeFormType' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixActionType' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignActionType' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixCampaignEventType' => '?',
            'MauticPlugin\\MauticCitrixBundle\\Form\\Type\\CitrixListType' => '?',
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\BatchLookupType' => '?',
            'MauticPlugin\\MauticClearbitBundle\\Form\\Type\\LookupType' => '?',
            'MauticPlugin\\MauticCrmBundle\\Form\\Type\\IntegrationCampaignsTaskType' => '?',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\ConstantContactType' => '?',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\IcontactType' => '?',
            'MauticPlugin\\MauticEmailMarketingBundle\\Form\\Type\\MailchimpType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ColorType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\ContentType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusListType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusPropertiesType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusShowType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\FocusType' => '?',
            'MauticPlugin\\MauticFocusBundle\\Form\\Type\\PropertiesType' => '?',
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\BatchLookupType' => '?',
            'MauticPlugin\\MauticFullContactBundle\\Form\\Type\\LookupType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\ConfigType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\FacebookType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\MonitoringType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\SocialLoginType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetListType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetSendType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TweetType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterAbstractType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterCustomType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterHashtagType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterMentionType' => '?',
            'MauticPlugin\\MauticSocialBundle\\Form\\Type\\TwitterType' => '?',
            'MauticPlugin\\MauticTagManagerBundle\\Form\\Type\\TagEntityType' => '?',
            'Mautic\\ApiBundle\\Form\\Type\\ClientType' => '?',
            'Mautic\\ApiBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\AssetListType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\AssetType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\CampaignEventAssetDownloadType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\FormSubmitActionDownloadFileType' => '?',
            'Mautic\\AssetBundle\\Form\\Type\\PointActionAssetDownloadType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventAddRemoveLeadType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventJumpToEventType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignEventLeadChangeType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignLeadSourceType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignListType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\CampaignType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\EventCanvasSettingsType' => '?',
            'Mautic\\CampaignBundle\\Form\\Type\\EventType' => '?',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryBundlesType' => '?',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryListType' => '?',
            'Mautic\\CategoryBundle\\Form\\Type\\CategoryType' => '?',
            'Mautic\\ChannelBundle\\Form\\Type\\ChannelType' => '?',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageListType' => '?',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageSendType' => '?',
            'Mautic\\ChannelBundle\\Form\\Type\\MessageType' => '?',
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigFileType' => '?',
            'Mautic\\ConfigBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\ConfigBundle\\Form\\Type\\DsnType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\BooleanType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\BuilderSectionType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\ButtonGroupType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\ConfigThemeType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\CountryType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DatePickerType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DateRangeType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\DynamicListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\EntityLookupType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\FormButtonsType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\GatedVideoType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\IpLookupDownloadDataStoreButtonType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\LocaleType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\LookupType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\MultiselectType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\RegionType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SelectType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotButtonType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotCategoryListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotChannelFrequencyType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotCodeModeType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotDwcType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotDynamicContentType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCaptionType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageCardType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotImageType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotPreferredChannelType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSavePrefsButtonType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSegmentListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSeparatorType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialFollowType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSocialShareType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotSuccessMessageType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotTextType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SlotType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SortableListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\SortableValueLabelListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\StandAloneButtonType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\TelType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\ThemeListType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\ThemeUploadType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\TimeFormatType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\TimezoneType' => '?',
            'Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType' => '?',
            'Mautic\\DashboardBundle\\Form\\Type\\UploadType' => '?',
            'Mautic\\DashboardBundle\\Form\\Type\\WidgetType' => '?',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType' => '?',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentDecisionType' => '?',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentListType' => '?',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentSendType' => '?',
            'Mautic\\DynamicContentBundle\\Form\\Type\\DynamicContentType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\AbTestPropertiesType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\BatchSendType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredEmailType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigMonitoredMailboxesType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardBestHoursWidgetType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardEmailsInTimeWidgetType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardMostHitEmailRedirectsWidgetType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\DashboardSentEmailToContactsWidgetType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailClickDecisionType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailListType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailOpenType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailSendType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailToUserType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\EmailUtmTagsType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\ExampleSendType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\FormSubmitActionUserEmailType' => '?',
            'Mautic\\EmailBundle\\Form\\Type\\VariantType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\ActionType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormFieldValueType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\CampaignEventFormSubmitType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\ConfigFormType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FieldType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldCaptchaType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldConditionType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldEmailType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldFileType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldGroupType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldHTMLType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPageBreakType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldPlaceholderType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldSelectType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTelType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormFieldTextType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormListType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\FormType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\PointActionFormSubmitType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType' => '?',
            'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType' => '?',
            'Mautic\\InstallBundle\\Configurator\\Form\\CheckStepType' => '?',
            'Mautic\\InstallBundle\\Configurator\\Form\\DoctrineStepType' => '?',
            'Mautic\\InstallBundle\\Configurator\\Form\\UserStepType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\ActivityListType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationConfigType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationFeatureSettingsType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsFieldMappingsType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldMappingType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsObjectFieldType' => '?',
            'Mautic\\IntegrationsBundle\\Form\\Type\\IntegrationSyncSettingsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ActionAddUtmTagsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ActionRemoveDoNotContact' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\AddToCompanyActionType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\BatchType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionAddDNCType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignActionRemoveDNCType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignConditionLeadPageHitType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadCampaignsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDNCType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadDeviceType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadFieldValueType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadOwnerType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadSegmentsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadStagesType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CampaignEventLeadTagsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ChangeOwnerType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyChangeScoreActionType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyListType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyMergeType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\CompanyType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ConfigCompanyType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ContactChannelsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ContactColumnsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ContactFrequencyType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsInTimeWidgetType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardLeadsLifetimeWidgetType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\DashboardSegmentsBuildTime' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\DeviceType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\DncType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\EmailType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\FieldType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\FilterPropertiesType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\FilterType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\FormSubmitActionPointsChangeType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadCategoryType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadFieldsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportFieldType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadImportType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadListType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\LeadType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ListActionType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ListType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\MergeType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\ModifyLeadTagsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\NoteType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\OwnerType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\PointActionType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\PreferenceChannelsType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\SegmentConfigType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\StageType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\TagEntityType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\TagType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\UpdateCompanyActionType' => '?',
            'Mautic\\LeadBundle\\Form\\Type\\UpdateLeadActionType' => '?',
            'Mautic\\MessengerBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationDetailsType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationListType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationSendType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\MobileNotificationType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationConfigType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationListType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationSendType' => '?',
            'Mautic\\NotificationBundle\\Form\\Type\\NotificationType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\AbTestPropertiesType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\CampaignEventPageHitType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\ConfigTrackingPageType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\DashboardHitsInTimeWidgetType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PageListType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PagePublishDatesType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PageType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PointActionPageHitType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PointActionUrlHitType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\PreferenceCenterListType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\RedirectListType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\TrackingPixelSendType' => '?',
            'Mautic\\PageBundle\\Form\\Type\\VariantType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\CompanyFieldsType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\DetailsType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\FeatureSettingsType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\FieldsType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationCampaignsType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationConfigType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\IntegrationsListType' => '?',
            'Mautic\\PluginBundle\\Form\\Type\\KeysType' => '?',
            'Mautic\\PointBundle\\Form\\Type\\GenericPointSettingsType' => '?',
            'Mautic\\PointBundle\\Form\\Type\\PointActionType' => '?',
            'Mautic\\PointBundle\\Form\\Type\\PointType' => '?',
            'Mautic\\PointBundle\\Form\\Type\\TriggerEventType' => '?',
            'Mautic\\PointBundle\\Form\\Type\\TriggerType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\AggregatorType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\DynamicFiltersType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\FilterSelectorType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\ReportFiltersType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\ReportSettingsType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\ReportType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\ReportWidgetType' => '?',
            'Mautic\\ReportBundle\\Form\\Type\\TableOrderType' => '?',
            'Mautic\\SmsBundle\\Form\\Type\\CampaignReplyType' => '?',
            'Mautic\\SmsBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\SmsBundle\\Form\\Type\\SmsListType' => '?',
            'Mautic\\SmsBundle\\Form\\Type\\SmsSendType' => '?',
            'Mautic\\SmsBundle\\Form\\Type\\SmsType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\GenericStageActionType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\StageActionChangeType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\StageActionListType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\StageActionType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\StageListType' => '?',
            'Mautic\\StageBundle\\Form\\Type\\StageType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\ContactType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetConfirmType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\PasswordResetType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\PermissionListType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\PermissionsType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\RoleListType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\RoleType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\UserListType' => '?',
            'Mautic\\UserBundle\\Form\\Type\\UserType' => '?',
            'Mautic\\WebhookBundle\\Form\\Type\\CampaignEventSendWebhookType' => '?',
            'Mautic\\WebhookBundle\\Form\\Type\\ConfigType' => '?',
            'Mautic\\WebhookBundle\\Form\\Type\\WebhookType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.form.transformation_failure_handling'] ?? $this->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($this->privates['form.type_extension.csrf'] ?? $this->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($this->privates['fos_rest.form.extension.csrf_disable'] ?? $this->load('getFosRest_Form_Extension_CsrfDisableService'));
        }, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.repeated.validator'] ?? ($this->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.submit.validator'] ?? ($this->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['exercise_html_purifier.form.text_type_extension'] ?? $this->load('getExerciseHtmlPurifier_Form_TextTypeExtensionService'));
        }, 1)], new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($this->privates['form.type_guesser.doctrine'] ?? $this->load('getForm_TypeGuesser_DoctrineService'));
        }, 2))], new \Symfony\Component\Form\ResolvedFormTypeFactory());
    }

    /*
     * Gets the private 'fos_rest.body_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->privates['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener(new \FOS\RestBundle\Decoder\ContainerDecoderProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'fos_rest.decoder.json' => ['privates', 'fos_rest.decoder.json', 'getFosRest_Decoder_JsonService', true],
        ], [
            'fos_rest.decoder.json' => '?',
        ]), ['json' => 'fos_rest.decoder.json']), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /*
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('nullable:resolve:MAUTIC_SECRET_KEY')))), '/_fragment');
    }

    /*
     * Gets the private 'framework_extra_bundle.argument_name_convertor' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter
     */
    protected function getFrameworkExtraBundle_ArgumentNameConvertorService()
    {
        return $this->privates['framework_extra_bundle.argument_name_convertor'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory())));
    }

    /*
     * Gets the private 'framework_extra_bundle.event.is_granted' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener
     */
    protected function getFrameworkExtraBundle_Event_IsGrantedService()
    {
        return $this->privates['framework_extra_bundle.event.is_granted'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), ($this->services['.container.private.security.authorization_checker'] ?? $this->get_Container_Private_Security_AuthorizationCheckerService()));
    }

    /*
     * Gets the private 'knp_menu.helper' shared service.
     *
     * @return \Knp\Menu\Twig\Helper
     */
    protected function getKnpMenu_HelperService()
    {
        return $this->privates['knp_menu.helper'] = new \Knp\Menu\Twig\Helper(new \Knp\Menu\Renderer\PsrProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'admin' => ['privates', 'mautic.menu_renderer.admin', 'getMautic_MenuRenderer_AdminService', true],
            'extra' => ['privates', 'mautic.menu_renderer.extra', 'getMautic_MenuRenderer_ExtraService', true],
            'list' => ['privates', 'knp_menu.renderer.list', 'getKnpMenu_Renderer_ListService', true],
            'main' => ['privates', 'mautic.menu_renderer.main', 'getMautic_MenuRenderer_MainService', true],
            'mautic' => ['services', 'mautic.menu_renderer', 'getMautic_MenuRendererService', true],
            'profile' => ['privates', 'mautic.menu_renderer.profile', 'getMautic_MenuRenderer_ProfileService', true],
            'twig' => ['privates', 'knp_menu.renderer.twig', 'getKnpMenu_Renderer_TwigService', true],
        ], [
            'admin' => '?',
            'extra' => '?',
            'list' => '?',
            'main' => '?',
            'mautic' => '?',
            'profile' => '?',
            'twig' => '?',
        ]), 'mautic', [], false), new \Knp\Menu\Provider\ChainProvider(new RewindableGenerator(function () {
            yield 0 => ($this->privates['knp_menu.menu_provider.lazy'] ?? $this->load('getKnpMenu_MenuProvider_LazyService'));
            yield 1 => ($this->privates['knp_menu.menu_provider.builder_alias'] ?? $this->load('getKnpMenu_MenuProvider_BuilderAliasService'));
        }, 2)), ($this->privates['knp_menu.manipulator'] ?? ($this->privates['knp_menu.manipulator'] = new \Knp\Menu\Util\MenuManipulator())), ($this->services['knp_menu.matcher'] ?? $this->getKnpMenu_MatcherService()));
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected function getLocaleAwareListenerService()
    {
        return $this->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () {
            yield 0 => ($this->privates['slugger'] ?? ($this->privates['slugger'] = new \Symfony\Component\String\Slugger\AsciiSlugger($this->getEnv('nullable:resolve:MAUTIC_LOCALE'))));
            yield 1 => ($this->services['translator.default'] ?? $this->getTranslator_DefaultService());
            yield 2 => ($this->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $this->getTranslatorService());
        }, 3), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->privates['locale_listener'])) {
            return $this->privates['locale_listener'];
        }

        return $this->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $this->getEnv('nullable:resolve:MAUTIC_LOCALE'), $a, false, []);
    }

    /*
     * Gets the private 'mailer.transports' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\Transports
     */
    protected function getMailer_TransportsService()
    {
        $a = ($this->services['Mautic\\EmailBundle\\Mailer\\Transport\\TransportFactory'] ?? $this->getTransportFactoryService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }

        return $this->privates['mailer.transports'] = $a->fromStrings(['main' => $this->getEnv('mailer:MAUTIC_MAILER_DSN')]);
    }

    /*
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/logs/prod.php'), 7, 400, true, NULL);
        $a->pushProcessor(new \Monolog\Processor\PsrLogMessageProcessor());
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');

        return $this->privates['monolog.handler.main'] = new \Monolog\Handler\FingersCrossedHandler($a, 400, '200', true, true, NULL);
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_LoggerService()
    {
        $this->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(($this->services['mautic.core.service.log_processor'] ?? ($this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor())));
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->privates['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(($this->services['mautic.core.service.log_processor'] ?? ($this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor())));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->privates['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(($this->services['mautic.core.service.log_processor'] ?? ($this->services['mautic.core.service.log_processor'] = new \Mautic\CoreBundle\Monolog\LogProcessor())));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'noxlogic_rate_limit.header_modification_listener' shared service.
     *
     * @return \Noxlogic\RateLimitBundle\EventListener\HeaderModificationListener
     */
    protected function getNoxlogicRateLimit_HeaderModificationListenerService()
    {
        $this->privates['noxlogic_rate_limit.header_modification_listener'] = $instance = new \Noxlogic\RateLimitBundle\EventListener\HeaderModificationListener();

        $instance->setParameter('rate_response_code', 429);
        $instance->setParameter('display_headers', true);
        $instance->setParameter('header_limit_name', 'X-RateLimit-Limit');
        $instance->setParameter('header_remaining_name', 'X-RateLimit-Remaining');
        $instance->setParameter('header_reset_name', 'X-RateLimit-Reset');

        return $instance;
    }

    /*
     * Gets the private 'noxlogic_rate_limit.rate_limit_annotation_listener' shared service.
     *
     * @return \Noxlogic\RateLimitBundle\EventListener\RateLimitAnnotationListener
     */
    protected function getNoxlogicRateLimit_RateLimitAnnotationListenerService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['noxlogic_rate_limit.rate_limit_annotation_listener'])) {
            return $this->privates['noxlogic_rate_limit.rate_limit_annotation_listener'];
        }
        $b = new \Noxlogic\RateLimitBundle\Service\RateLimitService();
        $b->setStorage(new \Noxlogic\RateLimitBundle\Service\Storage\PsrCache(($this->privates['api_rate_limiter_cache'] ?? $this->getApiRateLimiterCacheService())));

        $this->privates['noxlogic_rate_limit.rate_limit_annotation_listener'] = $instance = new \Noxlogic\RateLimitBundle\EventListener\RateLimitAnnotationListener($a, $b, new \Noxlogic\RateLimitBundle\Util\PathLimitProcessor($this->parameters['noxlogic_rate_limit.path_limits']));

        $instance->setParameter('enabled', false);
        $instance->setParameter('rate_response_code', 429);
        $instance->setParameter('rate_response_message', '{ "errors": [ { "code": 429, "message": "You exceeded the rate limit of 0 API calls per hour.", "details": [] } ]}');
        $instance->setParameter('rate_response_exception', NULL);

        return $instance;
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected function getParameterBagService()
    {
        return $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this);
    }

    /*
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected function getRouter_ExpressionLanguageProviderService()
    {
        return $this->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
        ], [
            'env' => 'Closure',
        ]));
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        $this->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri($this->getEnv('MAUTIC_REQUEST_CONTEXT_BASE_URL'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HOST'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_SCHEME'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTP_PORT'), $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTPS_PORT'));

        $instance->setParameter('_functions', ($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->privates['router_listener'])) {
            return $this->privates['router_listener'];
        }

        return $this->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        return $this->privates['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () {
            yield 0 => ($this->privates['security.access.authenticated_voter'] ?? $this->load('getSecurity_Access_AuthenticatedVoterService'));
            yield 1 => ($this->privates['security.access.role_hierarchy_voter'] ?? $this->load('getSecurity_Access_RoleHierarchyVoterService'));
            yield 2 => ($this->privates['security.access.expression_voter'] ?? $this->load('getSecurity_Access_ExpressionVoterService'));
        }, 3), new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false));
    }

    /*
     * Gets the private 'security.csrf.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage
     */
    protected function getSecurity_Csrf_TokenStorageService()
    {
        return $this->privates['security.csrf.token_storage'] = new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected function getSecurity_FirewallService()
    {
        $a = ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());

        if (isset($this->privates['security.firewall'])) {
            return $this->privates['security.firewall'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['security.firewall'])) {
            return $this->privates['security.firewall'];
        }

        return $this->privates['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener($a, $b, ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService()));
    }

    /*
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected function getSecurity_Firewall_MapService()
    {
        $a = ($this->privates['.service_locator.rhcbusF'] ?? $this->get_ServiceLocator_RhcbusFService());

        if (isset($this->privates['security.firewall.map'])) {
            return $this->privates['security.firewall.map'];
        }

        return $this->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () {
            yield 'security.firewall.map.context.install' => ($this->privates['.security.request_matcher.7c6aqIZ'] ?? ($this->privates['.security.request_matcher.7c6aqIZ'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/installer')));
            yield 'security.firewall.map.context.dev' => ($this->privates['.security.request_matcher.Iy.T22O'] ?? ($this->privates['.security.request_matcher.Iy.T22O'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/')));
            yield 'security.firewall.map.context.login' => ($this->privates['.security.request_matcher.hFKleTR'] ?? ($this->privates['.security.request_matcher.hFKleTR'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/s/login$')));
            yield 'security.firewall.map.context.sso_login' => ($this->privates['.security.request_matcher.hAcIhbP'] ?? ($this->privates['.security.request_matcher.hAcIhbP'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/s/sso_login')));
            yield 'security.firewall.map.context.saml_login' => ($this->privates['.security.request_matcher.HKz5.ct'] ?? ($this->privates['.security.request_matcher.HKz5.ct'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/s/saml/login$')));
            yield 'security.firewall.map.context.saml_discovery' => ($this->privates['.security.request_matcher.yLKFkOs'] ?? ($this->privates['.security.request_matcher.yLKFkOs'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/saml/discovery$')));
            yield 'security.firewall.map.context.oauth2_token' => ($this->privates['.security.request_matcher.0Awr3sc'] ?? ($this->privates['.security.request_matcher.0Awr3sc'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/oauth/v2/token')));
            yield 'security.firewall.map.context.oauth2_area' => ($this->privates['.security.request_matcher.mh4kgE6'] ?? ($this->privates['.security.request_matcher.mh4kgE6'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/oauth/v2/authorize')));
            yield 'security.firewall.map.context.api' => ($this->privates['.security.request_matcher.p4VlLPC'] ?? ($this->privates['.security.request_matcher.p4VlLPC'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api')));
            yield 'security.firewall.map.context.main' => ($this->privates['.security.request_matcher.rr37K7x'] ?? ($this->privates['.security.request_matcher.rr37K7x'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/(s/|elfinder|efconnect)')));
            yield 'security.firewall.map.context.public' => ($this->privates['.security.request_matcher.3UEFixr'] ?? ($this->privates['.security.request_matcher.3UEFixr'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/')));
        }, 11));
    }

    /*
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $a = ($this->services['router'] ?? $this->getRouterService());

        if (isset($this->privates['security.logout_url_generator'])) {
            return $this->privates['security.logout_url_generator'];
        }

        $this->privates['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a, ($this->services['.container.private.security.token_storage'] ?? $this->get_Container_Private_Security_TokenStorageService()));

        $instance->registerListener('main', '/s/logout', 'logout', '_csrf_token', NULL, 'mautic');

        return $instance;
    }

    /*
     * Gets the private 'security.password_hasher_factory' shared service.
     *
     * @return \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory
     */
    protected function getSecurity_PasswordHasherFactoryService()
    {
        return $this->privates['security.password_hasher_factory'] = new \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory(['Symfony\\Component\\Security\\Core\\User\\User' => ['class' => 'Symfony\\Component\\PasswordHasher\\Hasher\\NativePasswordHasher', 'arguments' => [0 => NULL, 1 => NULL, 2 => NULL, 3 => '2y']], 'Mautic\\UserBundle\\Entity\\User' => ['class' => 'Symfony\\Component\\PasswordHasher\\Hasher\\NativePasswordHasher', 'arguments' => [0 => NULL, 1 => NULL, 2 => NULL, 3 => '2y']]]);
    }

    /*
     * Gets the private 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy($this->parameters['security.role_hierarchy.roles']);
    }

    /*
     * Gets the private 'security.user_password_hasher' shared service.
     *
     * @return \Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher
     */
    protected function getSecurity_UserPasswordHasherService()
    {
        return $this->privates['security.user_password_hasher'] = new \Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher(($this->privates['security.password_hasher_factory'] ?? $this->getSecurity_PasswordHasherFactoryService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->privates['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->privates['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ($this->privates['security.authentication.trust_resolver'] ?? ($this->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver())), ($this->privates['security.role_hierarchy'] ?? $this->getSecurity_RoleHierarchyService()), ($this->services['.container.private.security.token_storage'] ?? $this->get_Container_Private_Security_TokenStorageService()), ($this->services['.container.private.security.authorization_checker'] ?? $this->get_Container_Private_Security_AuthorizationCheckerService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        $this->privates['sensio_framework_extra.view.listener'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener(new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'twig' => ['services', '.container.private.twig', 'get_Container_Private_TwigService', false],
        ], [
            'twig' => '?',
        ]))->withContext('sensio_framework_extra.view.listener', $this));

        return $instance;
    }

    /*
     * Gets the private 'session.factory' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\SessionFactory
     */
    protected function getSession_FactoryService()
    {
        $a = ($this->privates['session_listener'] ?? $this->getSessionListenerService());

        if (isset($this->privates['session.factory'])) {
            return $this->privates['session.factory'];
        }

        return $this->privates['session.factory'] = new \Symfony\Component\HttpFoundation\Session\SessionFactory(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $this->load('getSession_Storage_Factory_ServiceService'), [0 => $a, 1 => 'onSessionUsage']);
    }

    /*
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'initialized_session' => ['services', '.container.private.session', NULL, false],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'session' => ['services', '.container.private.session', 'get_Container_Private_SessionService', false],
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', false],
        ], [
            'initialized_session' => '?',
            'logger' => '?',
            'session' => '?',
            'session_factory' => '?',
        ]), false, $this->getParameter('session.storage.options'));
    }

    /*
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected function getValidator_BuilderService()
    {
        $this->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $a = new \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor(new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
            yield 1 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 2), new RewindableGenerator(function () {
            yield 0 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 2), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0), new RewindableGenerator(function () {
            yield 0 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 2), new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 1)), ($this->privates['cache.property_info'] ?? $this->getCache_PropertyInfoService()));

        $instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator' => ['services', 'mautic.validator.oauthcallback', 'getMautic_Validator_OauthcallbackService', true],
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator' => ['services', 'mautic.form.list.validator.circular', 'getMautic_Form_List_Validator_CircularService', true],
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => ['services', 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator', 'getFileEncodingValidatorService', true],
            'Mautic\\EmailBundle\\Validator\\DsnValidator' => ['services', 'Mautic\\EmailBundle\\Validator\\DsnValidator', 'getDsnValidatorService', true],
            'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator' => ['services', 'mautic.email.validator.email_or_token_list_validator', 'getMautic_Email_Validator_EmailOrTokenListValidatorService', true],
            'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator' => ['services', 'mautic.email.validator.multiple_emails_valid_validator', 'getMautic_Email_Validator_MultipleEmailsValidValidatorService', true],
            'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator' => ['services', 'mautic.form.validator.constraint.file_extension_constraint_validator', 'getMautic_Form_Validator_Constraint_FileExtensionConstraintValidatorService', true],
            'Mautic\\FormBundle\\Validator\\Constraint\\PhoneNumberConstraintValidator' => ['services', 'Mautic\\FormBundle\\Validator\\Constraint\\PhoneNumberConstraintValidator', 'getPhoneNumberConstraintValidatorService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator' => ['services', 'mautic.validator.emailaddress', 'getMautic_Validator_EmailaddressService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => ['services', 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator', 'getFieldAliasKeywordValidatorService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator' => ['services', 'mautic.validator.leadlistaccess', 'getMautic_Validator_LeadlistaccessService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator' => ['services', 'mautic.lead_list.constraint.in_use', 'getMautic_LeadList_Constraint_InUseService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueCustomFieldValidator' => ['services', 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueCustomFieldValidator', 'getUniqueCustomFieldValidatorService', true],
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator' => ['services', 'mautic.lead.constraint.alias', 'getMautic_Lead_Constraint_AliasService', true],
            'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator' => ['services', 'mautic.lead.validator.length', 'getMautic_Lead_Validator_LengthService', true],
            'Mautic\\MessengerBundle\\Validator\\DsnValidator' => ['privates', 'Mautic\\MessengerBundle\\Validator\\DsnValidator', 'getDsnValidator2Service', true],
            'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator' => ['services', 'mautic.report.validator.schedule_is_valid_validator', 'getMautic_Report_Validator_ScheduleIsValidValidatorService', true],
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'leadlist_access' => ['services', 'mautic.validator.leadlistaccess', 'getMautic_Validator_LeadlistaccessService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'segment_in_use' => ['services', 'mautic.lead_list.constraint.in_use', 'getMautic_LeadList_Constraint_InUseService', true],
            'uniqueleadlist' => ['services', 'mautic.lead.constraint.alias', 'getMautic_Lead_Constraint_AliasService', true],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
        ], [
            'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator' => '?',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator' => '?',
            'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => '?',
            'Mautic\\EmailBundle\\Validator\\DsnValidator' => '?',
            'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator' => '?',
            'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator' => '?',
            'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator' => '?',
            'Mautic\\FormBundle\\Validator\\Constraint\\PhoneNumberConstraintValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueCustomFieldValidator' => '?',
            'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator' => '?',
            'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator' => '?',
            'Mautic\\MessengerBundle\\Validator\\DsnValidator' => '?',
            'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator' => '?',
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'leadlist_access' => '?',
            'security.validator.user_password' => '?',
            'segment_in_use' => '?',
            'uniqueleadlist' => '?',
            'validator.expression' => '?',
        ])));
        if ($this->has('translator')) {
            $instance->setTranslator(($this->services['translator'] ?? $this->getTranslator2Service()));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings([0 => (\dirname(__DIR__, 5).'/vendor/symfony/form/Resources/config/validation.xml'), 1 => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle/Resources/config/validation.xml')]);
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->setMappingCache(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/validation.php'), ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService())));
        $instance->addObjectInitializers([0 => new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($this->services['doctrine'] ?? $this->getDoctrineService()))]);
        $instance->addLoader(new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL));
        $instance->addLoader(new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader(($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService()), NULL));

        return $instance;
    }

    /*
     * Gets the public 'cache_clearer' alias.
     *
     * @return object The ".container.private.cache_clearer" service.
     */
    protected function getCacheClearerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "cache_clearer" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.cache_clearer');
    }

    /*
     * Gets the public 'filesystem' alias.
     *
     * @return object The ".container.private.filesystem" service.
     */
    protected function getFilesystemService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "filesystem" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.filesystem');
    }

    /*
     * Gets the public 'security.csrf.token_manager' alias.
     *
     * @return object The ".container.private.security.csrf.token_manager" service.
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "security.csrf.token_manager" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.security.csrf.token_manager');
    }

    /*
     * Gets the public 'form.factory' alias.
     *
     * @return object The ".container.private.form.factory" service.
     */
    protected function getForm_FactoryService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "form.factory" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.form.factory');
    }

    /*
     * Gets the public 'form.type.file' alias.
     *
     * @return object The ".container.private.form.type.file" service.
     */
    protected function getForm_Type_FileService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "form.type.file" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.form.type.file');
    }

    /*
     * Gets the public 'validator' alias.
     *
     * @return object The ".container.private.validator" service.
     */
    protected function getValidatorService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "validator" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.validator');
    }

    /*
     * Gets the public 'security.authorization_checker' alias.
     *
     * @return object The ".container.private.security.authorization_checker" service.
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        trigger_deprecation('symfony/security-bundle', '5.3', 'Accessing the "security.authorization_checker" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.security.authorization_checker');
    }

    /*
     * Gets the public 'security.token_storage' alias.
     *
     * @return object The ".container.private.security.token_storage" service.
     */
    protected function getSecurity_TokenStorageService()
    {
        trigger_deprecation('symfony/security-bundle', '5.3', 'Accessing the "security.token_storage" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.security.token_storage');
    }

    /*
     * Gets the public 'twig' alias.
     *
     * @return object The ".container.private.twig" service.
     */
    protected function getTwigService()
    {
        trigger_deprecation('symfony/twig-bundle', '5.2', 'Accessing the "twig" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.twig');
    }

    /*
     * Gets the public 'security.password_encoder' alias.
     *
     * @return object The ".container.private.security.password_encoder" service.
     */
    protected function getSecurity_PasswordEncoderService()
    {
        trigger_deprecation('symfony/security-bundle', '5.3', 'Accessing the "security.password_encoder" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.security.password_encoder');
    }

    /*
     * Gets the public 'session' alias.
     *
     * @return object The ".container.private.session" service.
     */
    protected function getSessionService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.3', 'Accessing the "session" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.session');
    }

    /**
     * @return array|bool|float|int|string|\UnitEnum|null
     */
    public function getParameter(string $name)
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'mautic.site_url' => false,
        'mautic.webroot' => false,
        'mautic.404_page' => false,
        'mautic.cache_path' => false,
        'mautic.log_path' => false,
        'mautic.max_log_files' => false,
        'mautic.log_file_name' => false,
        'mautic.image_path' => false,
        'mautic.tmp_path' => false,
        'mautic.theme' => false,
        'mautic.theme_import_allowed_extensions' => false,
        'mautic.db_driver' => false,
        'mautic.db_host' => false,
        'mautic.db_port' => false,
        'mautic.db_name' => false,
        'mautic.db_user' => false,
        'mautic.db_password' => false,
        'mautic.db_table_prefix' => false,
        'mautic.db_host_ro' => false,
        'mautic.locale' => false,
        'mautic.secret_key' => false,
        'mautic.dev_hosts' => false,
        'mautic.trusted_hosts' => false,
        'mautic.trusted_proxies' => false,
        'mautic.rememberme_key' => false,
        'mautic.rememberme_lifetime' => false,
        'mautic.rememberme_path' => false,
        'mautic.rememberme_domain' => false,
        'mautic.default_pagelimit' => false,
        'mautic.default_timezone' => false,
        'mautic.date_format_full' => false,
        'mautic.date_format_short' => false,
        'mautic.date_format_dateonly' => false,
        'mautic.date_format_timeonly' => false,
        'mautic.ip_lookup_service' => false,
        'mautic.ip_lookup_auth' => false,
        'mautic.ip_lookup_config' => false,
        'mautic.ip_lookup_create_organization' => false,
        'mautic.transifex_api_token' => false,
        'mautic.update_stability' => false,
        'mautic.cookie_path' => false,
        'mautic.cookie_domain' => false,
        'mautic.cookie_secure' => false,
        'mautic.cookie_httponly' => false,
        'mautic.do_not_track_ips' => false,
        'mautic.do_not_track_bots' => false,
        'mautic.do_not_track_internal_ips' => false,
        'mautic.track_private_ip_ranges' => false,
        'mautic.link_shortener_url' => false,
        'mautic.cached_data_timeout' => false,
        'mautic.batch_sleep_time' => false,
        'mautic.batch_campaign_sleep_time' => false,
        'mautic.transliterate_page_title' => false,
        'mautic.cors_restrict_domains' => false,
        'mautic.cors_valid_domains' => false,
        'mautic.headers_sts' => false,
        'mautic.headers_sts_expire_time' => false,
        'mautic.headers_sts_subdomains' => false,
        'mautic.headers_sts_preload' => false,
        'mautic.max_entity_lock_time' => false,
        'mautic.default_daterange_filter' => false,
        'mautic.debug' => false,
        'mautic.rss_notification_url' => false,
        'mautic.translations_list_url' => false,
        'mautic.translations_fetch_url' => false,
        'mautic.stats_update_url' => false,
        'mautic.install_source' => false,
        'mautic.system_update_url' => false,
        'mautic.editor_fonts' => false,
        'mautic.composer_updates' => false,
        'mautic.load_froala_assets' => false,
        'mautic.redis_primary_only' => false,
        'mautic.api_enabled' => false,
        'mautic.api_enable_basic_auth' => false,
        'mautic.api_oauth2_access_token_lifetime' => false,
        'mautic.api_oauth2_refresh_token_lifetime' => false,
        'mautic.api_batch_max_limit' => false,
        'mautic.api_rate_limiter_limit' => false,
        'mautic.api_rate_limiter_cache' => false,
        'mautic.upload_dir' => false,
        'mautic.max_size' => false,
        'mautic.allowed_extensions' => false,
        'mautic.campaign_time_wait_on_event_false' => false,
        'mautic.campaign_use_summary' => false,
        'mautic.campaign_by_range' => false,
        'mautic.config_allowed_parameters' => false,
        'mautic.dashboard_import_dir' => false,
        'mautic.dashboard_import_user_dir' => false,
        'mautic.mailer_from_name' => false,
        'mautic.mailer_from_email' => false,
        'mautic.mailer_reply_to_email' => false,
        'mautic.mailer_return_path' => false,
        'mautic.mailer_append_tracking_pixel' => false,
        'mautic.mailer_convert_embed_images' => false,
        'mautic.mailer_custom_headers' => false,
        'mautic.mailer_dsn' => false,
        'mautic.unsubscribe_text' => false,
        'mautic.webview_text' => false,
        'mautic.unsubscribe_message' => false,
        'mautic.resubscribe_message' => false,
        'mautic.monitored_email' => false,
        'mautic.mailer_is_owner' => false,
        'mautic.default_signature_text' => false,
        'mautic.email_frequency_number' => false,
        'mautic.email_frequency_time' => false,
        'mautic.show_contact_preferences' => false,
        'mautic.show_contact_frequency' => false,
        'mautic.show_contact_pause_dates' => false,
        'mautic.show_contact_preferred_channels' => false,
        'mautic.show_contact_categories' => false,
        'mautic.show_contact_segments' => false,
        'mautic.disable_trackable_urls' => false,
        'mautic.theme_email_default' => false,
        'mautic.mailer_memory_msg_limit' => false,
        'mautic.minify_email_html' => false,
        'mautic.form_upload_dir' => false,
        'mautic.blacklisted_extensions' => false,
        'mautic.do_not_submit_emails' => false,
        'mautic.form_results_data_sources' => false,
        'mautic.successful_submit_action' => false,
        'mautic.parallel_import_limit' => false,
        'mautic.background_import_if_more_rows_than' => false,
        'mautic.contact_columns' => false,
        'mautic.create_custom_field_in_background' => false,
        'mautic.company_unique_identifiers_operator' => false,
        'mautic.contact_unique_identifiers_operator' => false,
        'mautic.segment_rebuild_time_warning' => false,
        'mautic.segment_build_time_warning' => false,
        'mautic.contact_export_in_background' => false,
        'mautic.contact_export_dir' => false,
        'mautic.contact_export_batch_size' => false,
        'mautic.marketplace_enabled' => false,
        'mautic.marketplace_allowlist_url' => false,
        'mautic.marketplace_allowlist_cache_ttl_seconds' => false,
        'mautic.messenger_dsn_email' => false,
        'mautic.messenger_dsn_failed' => false,
        'mautic.messenger_retry_strategy_max_retries' => false,
        'mautic.messenger_retry_strategy_delay' => false,
        'mautic.messenger_retry_strategy_multiplier' => false,
        'mautic.messenger_retry_strategy_max_delay' => false,
        'mautic.notification_enabled' => false,
        'mautic.notification_landing_page_enabled' => false,
        'mautic.notification_tracking_page_enabled' => false,
        'mautic.notification_app_id' => false,
        'mautic.notification_rest_api_key' => false,
        'mautic.notification_safari_web_id' => false,
        'mautic.gcm_sender_id' => false,
        'mautic.notification_subdomain_name' => false,
        'mautic.welcomenotification_enabled' => false,
        'mautic.campaign_send_notification_to_author' => false,
        'mautic.campaign_notification_email_addresses' => false,
        'mautic.webhook_send_notification_to_author' => false,
        'mautic.webhook_notification_email_addresses' => false,
        'mautic.cat_in_page_url' => false,
        'mautic.google_analytics' => false,
        'mautic.track_contact_by_ip' => false,
        'mautic.track_by_tracking_url' => false,
        'mautic.redirect_list_types' => false,
        'mautic.google_analytics_id' => false,
        'mautic.google_analytics_trackingpage_enabled' => false,
        'mautic.google_analytics_landingpage_enabled' => false,
        'mautic.google_analytics_anonymize_ip' => false,
        'mautic.facebook_pixel_id' => false,
        'mautic.facebook_pixel_trackingpage_enabled' => false,
        'mautic.facebook_pixel_landingpage_enabled' => false,
        'mautic.do_not_track_404_anonymous' => false,
        'mautic.report_temp_dir' => false,
        'mautic.report_export_batch_size' => false,
        'mautic.report_export_max_filesize_in_bytes' => false,
        'mautic.csv_always_enclose' => false,
        'mautic.sms_enabled' => false,
        'mautic.sms_username' => false,
        'mautic.sms_password' => false,
        'mautic.sms_sending_phone_number' => false,
        'mautic.sms_frequency_number' => false,
        'mautic.sms_frequency_time' => false,
        'mautic.sms_transport' => false,
        'mautic.saml_idp_metadata' => false,
        'mautic.saml_idp_entity_id' => false,
        'mautic.saml_idp_own_certificate' => false,
        'mautic.saml_idp_own_private_key' => false,
        'mautic.saml_idp_own_password' => false,
        'mautic.saml_idp_email_attribute' => false,
        'mautic.saml_idp_username_attribute' => false,
        'mautic.saml_idp_firstname_attribute' => false,
        'mautic.saml_idp_lastname_attribute' => false,
        'mautic.saml_idp_default_role' => false,
        'mautic.webhook_limit' => false,
        'mautic.webhook_time_limit' => false,
        'mautic.webhook_log_max' => false,
        'mautic.clean_webhook_logs_in_background' => false,
        'mautic.webhook_disable_limit' => false,
        'mautic.webhook_timeout' => false,
        'mautic.queue_mode' => false,
        'mautic.events_orderby_dir' => false,
        'mautic.webhook_email_details' => false,
        'mautic.cache_adapter' => false,
        'mautic.cache_prefix' => false,
        'mautic.cache_lifetime' => false,
        'mautic.cache_adapter_memcached' => false,
        'mautic.cache_adapter_redis' => false,
        'mautic.queue_protocol' => false,
        'mautic.rabbitmq_host' => false,
        'mautic.rabbitmq_port' => false,
        'mautic.rabbitmq_vhost' => false,
        'mautic.rabbitmq_user' => false,
        'mautic.rabbitmq_password' => false,
        'mautic.rabbitmq_idle_timeout' => false,
        'mautic.rabbitmq_idle_timeout_exit_code' => false,
        'mautic.beanstalkd_host' => false,
        'mautic.beanstalkd_port' => false,
        'mautic.beanstalkd_timeout' => false,
        'mautic.image_path_exclude' => false,
        'mautic.static_url' => false,
        'mautic.website_snapshot_url' => false,
        'mautic.website_snapshot_key' => false,
        'mautic.twitter_handle_field' => false,
        'router.request_context.host' => false,
        'router.request_context.scheme' => false,
        'router.request_context.base_url' => false,
        'request_listener.http_port' => false,
        'request_listener.https_port' => false,
        'kernel.secret' => false,
        'kernel.default_locale' => false,
        'session.storage.options' => false,
        'validator.mapping.cache.file' => false,
        'doctrine.orm.proxy_dir' => false,
        'fos_oauth_server.server.options' => false,
        'oneup_uploader.chunks' => false,
        'oneup_uploader.orphanage' => false,
        'oneup_uploader.config.asset' => false,
        'oneup_uploader.config' => false,
        'lightsaml.own.entity_id' => false,
        'fm_elfinder' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        switch ($name) {
            case 'kernel.runtime_environment': $value = $this->getEnv('default:kernel.environment:APP_RUNTIME_ENV'); break;
            case 'kernel.build_dir': $value = $this->targetDir.''; break;
            case 'kernel.cache_dir': $value = $this->targetDir.''; break;
            case 'mautic.site_url': $value = $this->getEnv('nullable:resolve:MAUTIC_SITE_URL'); break;
            case 'mautic.webroot': $value = $this->getEnv('nullable:resolve:MAUTIC_WEBROOT'); break;
            case 'mautic.404_page': $value = $this->getEnv('nullable:resolve:MAUTIC_404_PAGE'); break;
            case 'mautic.cache_path': $value = $this->getEnv('nullable:resolve:MAUTIC_CACHE_PATH'); break;
            case 'mautic.log_path': $value = $this->getEnv('nullable:resolve:MAUTIC_LOG_PATH'); break;
            case 'mautic.max_log_files': $value = $this->getEnv('intNullable:resolve:MAUTIC_MAX_LOG_FILES'); break;
            case 'mautic.log_file_name': $value = $this->getEnv('nullable:resolve:MAUTIC_LOG_FILE_NAME'); break;
            case 'mautic.image_path': $value = $this->getEnv('nullable:resolve:MAUTIC_IMAGE_PATH'); break;
            case 'mautic.tmp_path': $value = $this->getEnv('nullable:resolve:MAUTIC_TMP_PATH'); break;
            case 'mautic.theme': $value = $this->getEnv('nullable:resolve:MAUTIC_THEME'); break;
            case 'mautic.theme_import_allowed_extensions': $value = $this->getEnv('json:resolve:MAUTIC_THEME_IMPORT_ALLOWED_EXTENSIONS'); break;
            case 'mautic.db_driver': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_DRIVER'); break;
            case 'mautic.db_host': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_HOST'); break;
            case 'mautic.db_port': $value = $this->getEnv('intNullable:resolve:MAUTIC_DB_PORT'); break;
            case 'mautic.db_name': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_NAME'); break;
            case 'mautic.db_user': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_USER'); break;
            case 'mautic.db_password': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_PASSWORD'); break;
            case 'mautic.db_table_prefix': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_TABLE_PREFIX'); break;
            case 'mautic.db_host_ro': $value = $this->getEnv('nullable:resolve:MAUTIC_DB_HOST_RO'); break;
            case 'mautic.locale': $value = $this->getEnv('nullable:resolve:MAUTIC_LOCALE'); break;
            case 'mautic.secret_key': $value = $this->getEnv('nullable:resolve:MAUTIC_SECRET_KEY'); break;
            case 'mautic.dev_hosts': $value = $this->getEnv('json:resolve:MAUTIC_DEV_HOSTS'); break;
            case 'mautic.trusted_hosts': $value = $this->getEnv('json:resolve:MAUTIC_TRUSTED_HOSTS'); break;
            case 'mautic.trusted_proxies': $value = $this->getEnv('json:resolve:MAUTIC_TRUSTED_PROXIES'); break;
            case 'mautic.rememberme_key': $value = $this->getEnv('nullable:resolve:MAUTIC_REMEMBERME_KEY'); break;
            case 'mautic.rememberme_lifetime': $value = $this->getEnv('int:resolve:MAUTIC_REMEMBERME_LIFETIME'); break;
            case 'mautic.rememberme_path': $value = $this->getEnv('nullable:resolve:MAUTIC_REMEMBERME_PATH'); break;
            case 'mautic.rememberme_domain': $value = $this->getEnv('nullable:resolve:MAUTIC_REMEMBERME_DOMAIN'); break;
            case 'mautic.default_pagelimit': $value = $this->getEnv('intNullable:resolve:MAUTIC_DEFAULT_PAGELIMIT'); break;
            case 'mautic.default_timezone': $value = $this->getEnv('nullable:resolve:MAUTIC_DEFAULT_TIMEZONE'); break;
            case 'mautic.date_format_full': $value = $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_FULL'); break;
            case 'mautic.date_format_short': $value = $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_SHORT'); break;
            case 'mautic.date_format_dateonly': $value = $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_DATEONLY'); break;
            case 'mautic.date_format_timeonly': $value = $this->getEnv('nullable:resolve:MAUTIC_DATE_FORMAT_TIMEONLY'); break;
            case 'mautic.ip_lookup_service': $value = $this->getEnv('nullable:resolve:MAUTIC_IP_LOOKUP_SERVICE'); break;
            case 'mautic.ip_lookup_auth': $value = $this->getEnv('nullable:resolve:MAUTIC_IP_LOOKUP_AUTH'); break;
            case 'mautic.ip_lookup_config': $value = $this->getEnv('json:resolve:MAUTIC_IP_LOOKUP_CONFIG'); break;
            case 'mautic.ip_lookup_create_organization': $value = $this->getEnv('bool:resolve:MAUTIC_IP_LOOKUP_CREATE_ORGANIZATION'); break;
            case 'mautic.transifex_api_token': $value = $this->getEnv('nullable:resolve:MAUTIC_TRANSIFEX_API_TOKEN'); break;
            case 'mautic.update_stability': $value = $this->getEnv('nullable:resolve:MAUTIC_UPDATE_STABILITY'); break;
            case 'mautic.cookie_path': $value = $this->getEnv('nullable:resolve:MAUTIC_COOKIE_PATH'); break;
            case 'mautic.cookie_domain': $value = $this->getEnv('nullable:resolve:MAUTIC_COOKIE_DOMAIN'); break;
            case 'mautic.cookie_secure': $value = $this->getEnv('bool:resolve:MAUTIC_COOKIE_SECURE'); break;
            case 'mautic.cookie_httponly': $value = $this->getEnv('bool:resolve:MAUTIC_COOKIE_HTTPONLY'); break;
            case 'mautic.do_not_track_ips': $value = $this->getEnv('json:resolve:MAUTIC_DO_NOT_TRACK_IPS'); break;
            case 'mautic.do_not_track_bots': $value = $this->getEnv('json:resolve:MAUTIC_DO_NOT_TRACK_BOTS'); break;
            case 'mautic.do_not_track_internal_ips': $value = $this->getEnv('json:resolve:MAUTIC_DO_NOT_TRACK_INTERNAL_IPS'); break;
            case 'mautic.track_private_ip_ranges': $value = $this->getEnv('bool:resolve:MAUTIC_TRACK_PRIVATE_IP_RANGES'); break;
            case 'mautic.link_shortener_url': $value = $this->getEnv('nullable:resolve:MAUTIC_LINK_SHORTENER_URL'); break;
            case 'mautic.cached_data_timeout': $value = $this->getEnv('intNullable:resolve:MAUTIC_CACHED_DATA_TIMEOUT'); break;
            case 'mautic.batch_sleep_time': $value = $this->getEnv('intNullable:resolve:MAUTIC_BATCH_SLEEP_TIME'); break;
            case 'mautic.batch_campaign_sleep_time': $value = $this->getEnv('bool:resolve:MAUTIC_BATCH_CAMPAIGN_SLEEP_TIME'); break;
            case 'mautic.transliterate_page_title': $value = $this->getEnv('bool:resolve:MAUTIC_TRANSLITERATE_PAGE_TITLE'); break;
            case 'mautic.cors_restrict_domains': $value = $this->getEnv('bool:resolve:MAUTIC_CORS_RESTRICT_DOMAINS'); break;
            case 'mautic.cors_valid_domains': $value = $this->getEnv('json:resolve:MAUTIC_CORS_VALID_DOMAINS'); break;
            case 'mautic.headers_sts': $value = $this->getEnv('bool:resolve:MAUTIC_HEADERS_STS'); break;
            case 'mautic.headers_sts_expire_time': $value = $this->getEnv('intNullable:resolve:MAUTIC_HEADERS_STS_EXPIRE_TIME'); break;
            case 'mautic.headers_sts_subdomains': $value = $this->getEnv('bool:resolve:MAUTIC_HEADERS_STS_SUBDOMAINS'); break;
            case 'mautic.headers_sts_preload': $value = $this->getEnv('bool:resolve:MAUTIC_HEADERS_STS_PRELOAD'); break;
            case 'mautic.max_entity_lock_time': $value = $this->getEnv('intNullable:resolve:MAUTIC_MAX_ENTITY_LOCK_TIME'); break;
            case 'mautic.default_daterange_filter': $value = $this->getEnv('nullable:resolve:MAUTIC_DEFAULT_DATERANGE_FILTER'); break;
            case 'mautic.debug': $value = $this->getEnv('bool:resolve:MAUTIC_DEBUG'); break;
            case 'mautic.rss_notification_url': $value = $this->getEnv('nullable:resolve:MAUTIC_RSS_NOTIFICATION_URL'); break;
            case 'mautic.translations_list_url': $value = $this->getEnv('nullable:resolve:MAUTIC_TRANSLATIONS_LIST_URL'); break;
            case 'mautic.translations_fetch_url': $value = $this->getEnv('nullable:resolve:MAUTIC_TRANSLATIONS_FETCH_URL'); break;
            case 'mautic.stats_update_url': $value = $this->getEnv('nullable:resolve:MAUTIC_STATS_UPDATE_URL'); break;
            case 'mautic.install_source': $value = $this->getEnv('nullable:resolve:MAUTIC_INSTALL_SOURCE'); break;
            case 'mautic.system_update_url': $value = $this->getEnv('nullable:resolve:MAUTIC_SYSTEM_UPDATE_URL'); break;
            case 'mautic.editor_fonts': $value = $this->getEnv('json:resolve:MAUTIC_EDITOR_FONTS'); break;
            case 'mautic.composer_updates': $value = $this->getEnv('bool:resolve:MAUTIC_COMPOSER_UPDATES'); break;
            case 'mautic.load_froala_assets': $value = $this->getEnv('bool:resolve:MAUTIC_LOAD_FROALA_ASSETS'); break;
            case 'mautic.redis_primary_only': $value = $this->getEnv('bool:resolve:MAUTIC_REDIS_PRIMARY_ONLY'); break;
            case 'mautic.api_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_API_ENABLED'); break;
            case 'mautic.api_enable_basic_auth': $value = $this->getEnv('bool:resolve:MAUTIC_API_ENABLE_BASIC_AUTH'); break;
            case 'mautic.api_oauth2_access_token_lifetime': $value = $this->getEnv('intNullable:resolve:MAUTIC_API_OAUTH2_ACCESS_TOKEN_LIFETIME'); break;
            case 'mautic.api_oauth2_refresh_token_lifetime': $value = $this->getEnv('intNullable:resolve:MAUTIC_API_OAUTH2_REFRESH_TOKEN_LIFETIME'); break;
            case 'mautic.api_batch_max_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_API_BATCH_MAX_LIMIT'); break;
            case 'mautic.api_rate_limiter_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_API_RATE_LIMITER_LIMIT'); break;
            case 'mautic.api_rate_limiter_cache': $value = $this->getEnv('json:resolve:MAUTIC_API_RATE_LIMITER_CACHE'); break;
            case 'mautic.upload_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_UPLOAD_DIR'); break;
            case 'mautic.max_size': $value = $this->getEnv('nullable:resolve:MAUTIC_MAX_SIZE'); break;
            case 'mautic.allowed_extensions': $value = $this->getEnv('json:resolve:MAUTIC_ALLOWED_EXTENSIONS'); break;
            case 'mautic.campaign_time_wait_on_event_false': $value = $this->getEnv('nullable:resolve:MAUTIC_CAMPAIGN_TIME_WAIT_ON_EVENT_FALSE'); break;
            case 'mautic.campaign_use_summary': $value = $this->getEnv('intNullable:resolve:MAUTIC_CAMPAIGN_USE_SUMMARY'); break;
            case 'mautic.campaign_by_range': $value = $this->getEnv('intNullable:resolve:MAUTIC_CAMPAIGN_BY_RANGE'); break;
            case 'mautic.config_allowed_parameters': $value = $this->getEnv('json:resolve:MAUTIC_CONFIG_ALLOWED_PARAMETERS'); break;
            case 'mautic.dashboard_import_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_DASHBOARD_IMPORT_DIR'); break;
            case 'mautic.dashboard_import_user_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_DASHBOARD_IMPORT_USER_DIR'); break;
            case 'mautic.mailer_from_name': $value = $this->getEnv('nullable:resolve:MAUTIC_MAILER_FROM_NAME'); break;
            case 'mautic.mailer_from_email': $value = $this->getEnv('nullable:resolve:MAUTIC_MAILER_FROM_EMAIL'); break;
            case 'mautic.mailer_reply_to_email': $value = $this->getEnv('nullable:resolve:MAUTIC_MAILER_REPLY_TO_EMAIL'); break;
            case 'mautic.mailer_return_path': $value = $this->getEnv('nullable:resolve:MAUTIC_MAILER_RETURN_PATH'); break;
            case 'mautic.mailer_append_tracking_pixel': $value = $this->getEnv('bool:resolve:MAUTIC_MAILER_APPEND_TRACKING_PIXEL'); break;
            case 'mautic.mailer_convert_embed_images': $value = $this->getEnv('bool:resolve:MAUTIC_MAILER_CONVERT_EMBED_IMAGES'); break;
            case 'mautic.mailer_custom_headers': $value = $this->getEnv('json:resolve:MAUTIC_MAILER_CUSTOM_HEADERS'); break;
            case 'mautic.mailer_dsn': $value = $this->getEnv('nullable:resolve:MAUTIC_MAILER_DSN'); break;
            case 'mautic.unsubscribe_text': $value = $this->getEnv('nullable:resolve:MAUTIC_UNSUBSCRIBE_TEXT'); break;
            case 'mautic.webview_text': $value = $this->getEnv('nullable:resolve:MAUTIC_WEBVIEW_TEXT'); break;
            case 'mautic.unsubscribe_message': $value = $this->getEnv('nullable:resolve:MAUTIC_UNSUBSCRIBE_MESSAGE'); break;
            case 'mautic.resubscribe_message': $value = $this->getEnv('nullable:resolve:MAUTIC_RESUBSCRIBE_MESSAGE'); break;
            case 'mautic.monitored_email': $value = $this->getEnv('json:resolve:MAUTIC_MONITORED_EMAIL'); break;
            case 'mautic.mailer_is_owner': $value = $this->getEnv('bool:resolve:MAUTIC_MAILER_IS_OWNER'); break;
            case 'mautic.default_signature_text': $value = $this->getEnv('nullable:resolve:MAUTIC_DEFAULT_SIGNATURE_TEXT'); break;
            case 'mautic.email_frequency_number': $value = $this->getEnv('intNullable:resolve:MAUTIC_EMAIL_FREQUENCY_NUMBER'); break;
            case 'mautic.email_frequency_time': $value = $this->getEnv('nullable:resolve:MAUTIC_EMAIL_FREQUENCY_TIME'); break;
            case 'mautic.show_contact_preferences': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_PREFERENCES'); break;
            case 'mautic.show_contact_frequency': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_FREQUENCY'); break;
            case 'mautic.show_contact_pause_dates': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_PAUSE_DATES'); break;
            case 'mautic.show_contact_preferred_channels': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_PREFERRED_CHANNELS'); break;
            case 'mautic.show_contact_categories': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_CATEGORIES'); break;
            case 'mautic.show_contact_segments': $value = $this->getEnv('bool:resolve:MAUTIC_SHOW_CONTACT_SEGMENTS'); break;
            case 'mautic.disable_trackable_urls': $value = $this->getEnv('bool:resolve:MAUTIC_DISABLE_TRACKABLE_URLS'); break;
            case 'mautic.theme_email_default': $value = $this->getEnv('nullable:resolve:MAUTIC_THEME_EMAIL_DEFAULT'); break;
            case 'mautic.mailer_memory_msg_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_MAILER_MEMORY_MSG_LIMIT'); break;
            case 'mautic.minify_email_html': $value = $this->getEnv('bool:resolve:MAUTIC_MINIFY_EMAIL_HTML'); break;
            case 'mautic.form_upload_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_FORM_UPLOAD_DIR'); break;
            case 'mautic.blacklisted_extensions': $value = $this->getEnv('json:resolve:MAUTIC_BLACKLISTED_EXTENSIONS'); break;
            case 'mautic.do_not_submit_emails': $value = $this->getEnv('json:resolve:MAUTIC_DO_NOT_SUBMIT_EMAILS'); break;
            case 'mautic.form_results_data_sources': $value = $this->getEnv('bool:resolve:MAUTIC_FORM_RESULTS_DATA_SOURCES'); break;
            case 'mautic.successful_submit_action': $value = $this->getEnv('nullable:resolve:MAUTIC_SUCCESSFUL_SUBMIT_ACTION'); break;
            case 'mautic.parallel_import_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_PARALLEL_IMPORT_LIMIT'); break;
            case 'mautic.background_import_if_more_rows_than': $value = $this->getEnv('intNullable:resolve:MAUTIC_BACKGROUND_IMPORT_IF_MORE_ROWS_THAN'); break;
            case 'mautic.contact_columns': $value = $this->getEnv('json:resolve:MAUTIC_CONTACT_COLUMNS'); break;
            case 'mautic.create_custom_field_in_background': $value = $this->getEnv('bool:resolve:MAUTIC_CREATE_CUSTOM_FIELD_IN_BACKGROUND'); break;
            case 'mautic.company_unique_identifiers_operator': $value = $this->getEnv('nullable:resolve:MAUTIC_COMPANY_UNIQUE_IDENTIFIERS_OPERATOR'); break;
            case 'mautic.contact_unique_identifiers_operator': $value = $this->getEnv('nullable:resolve:MAUTIC_CONTACT_UNIQUE_IDENTIFIERS_OPERATOR'); break;
            case 'mautic.segment_rebuild_time_warning': $value = $this->getEnv('intNullable:resolve:MAUTIC_SEGMENT_REBUILD_TIME_WARNING'); break;
            case 'mautic.segment_build_time_warning': $value = $this->getEnv('intNullable:resolve:MAUTIC_SEGMENT_BUILD_TIME_WARNING'); break;
            case 'mautic.contact_export_in_background': $value = $this->getEnv('bool:resolve:MAUTIC_CONTACT_EXPORT_IN_BACKGROUND'); break;
            case 'mautic.contact_export_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_CONTACT_EXPORT_DIR'); break;
            case 'mautic.contact_export_batch_size': $value = $this->getEnv('intNullable:resolve:MAUTIC_CONTACT_EXPORT_BATCH_SIZE'); break;
            case 'mautic.marketplace_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_MARKETPLACE_ENABLED'); break;
            case 'mautic.marketplace_allowlist_url': $value = $this->getEnv('nullable:resolve:MAUTIC_MARKETPLACE_ALLOWLIST_URL'); break;
            case 'mautic.marketplace_allowlist_cache_ttl_seconds': $value = $this->getEnv('intNullable:resolve:MAUTIC_MARKETPLACE_ALLOWLIST_CACHE_TTL_SECONDS'); break;
            case 'mautic.messenger_dsn_email': $value = $this->getEnv('nullable:resolve:MAUTIC_MESSENGER_DSN_EMAIL'); break;
            case 'mautic.messenger_dsn_failed': $value = $this->getEnv('nullable:resolve:MAUTIC_MESSENGER_DSN_FAILED'); break;
            case 'mautic.messenger_retry_strategy_max_retries': $value = $this->getEnv('intNullable:resolve:MAUTIC_MESSENGER_RETRY_STRATEGY_MAX_RETRIES'); break;
            case 'mautic.messenger_retry_strategy_delay': $value = $this->getEnv('intNullable:resolve:MAUTIC_MESSENGER_RETRY_STRATEGY_DELAY'); break;
            case 'mautic.messenger_retry_strategy_multiplier': $value = $this->getEnv('float:resolve:MAUTIC_MESSENGER_RETRY_STRATEGY_MULTIPLIER'); break;
            case 'mautic.messenger_retry_strategy_max_delay': $value = $this->getEnv('intNullable:resolve:MAUTIC_MESSENGER_RETRY_STRATEGY_MAX_DELAY'); break;
            case 'mautic.notification_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_NOTIFICATION_ENABLED'); break;
            case 'mautic.notification_landing_page_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_NOTIFICATION_LANDING_PAGE_ENABLED'); break;
            case 'mautic.notification_tracking_page_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_NOTIFICATION_TRACKING_PAGE_ENABLED'); break;
            case 'mautic.notification_app_id': $value = $this->getEnv('nullable:resolve:MAUTIC_NOTIFICATION_APP_ID'); break;
            case 'mautic.notification_rest_api_key': $value = $this->getEnv('nullable:resolve:MAUTIC_NOTIFICATION_REST_API_KEY'); break;
            case 'mautic.notification_safari_web_id': $value = $this->getEnv('nullable:resolve:MAUTIC_NOTIFICATION_SAFARI_WEB_ID'); break;
            case 'mautic.gcm_sender_id': $value = $this->getEnv('nullable:resolve:MAUTIC_GCM_SENDER_ID'); break;
            case 'mautic.notification_subdomain_name': $value = $this->getEnv('nullable:resolve:MAUTIC_NOTIFICATION_SUBDOMAIN_NAME'); break;
            case 'mautic.welcomenotification_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_WELCOMENOTIFICATION_ENABLED'); break;
            case 'mautic.campaign_send_notification_to_author': $value = $this->getEnv('bool:resolve:MAUTIC_CAMPAIGN_SEND_NOTIFICATION_TO_AUTHOR'); break;
            case 'mautic.campaign_notification_email_addresses': $value = $this->getEnv('nullable:resolve:MAUTIC_CAMPAIGN_NOTIFICATION_EMAIL_ADDRESSES'); break;
            case 'mautic.webhook_send_notification_to_author': $value = $this->getEnv('bool:resolve:MAUTIC_WEBHOOK_SEND_NOTIFICATION_TO_AUTHOR'); break;
            case 'mautic.webhook_notification_email_addresses': $value = $this->getEnv('nullable:resolve:MAUTIC_WEBHOOK_NOTIFICATION_EMAIL_ADDRESSES'); break;
            case 'mautic.cat_in_page_url': $value = $this->getEnv('bool:resolve:MAUTIC_CAT_IN_PAGE_URL'); break;
            case 'mautic.google_analytics': $value = $this->getEnv('nullable:resolve:MAUTIC_GOOGLE_ANALYTICS'); break;
            case 'mautic.track_contact_by_ip': $value = $this->getEnv('bool:resolve:MAUTIC_TRACK_CONTACT_BY_IP'); break;
            case 'mautic.track_by_tracking_url': $value = $this->getEnv('bool:resolve:MAUTIC_TRACK_BY_TRACKING_URL'); break;
            case 'mautic.redirect_list_types': $value = $this->getEnv('json:resolve:MAUTIC_REDIRECT_LIST_TYPES'); break;
            case 'mautic.google_analytics_id': $value = $this->getEnv('nullable:resolve:MAUTIC_GOOGLE_ANALYTICS_ID'); break;
            case 'mautic.google_analytics_trackingpage_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_GOOGLE_ANALYTICS_TRACKINGPAGE_ENABLED'); break;
            case 'mautic.google_analytics_landingpage_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_GOOGLE_ANALYTICS_LANDINGPAGE_ENABLED'); break;
            case 'mautic.google_analytics_anonymize_ip': $value = $this->getEnv('bool:resolve:MAUTIC_GOOGLE_ANALYTICS_ANONYMIZE_IP'); break;
            case 'mautic.facebook_pixel_id': $value = $this->getEnv('nullable:resolve:MAUTIC_FACEBOOK_PIXEL_ID'); break;
            case 'mautic.facebook_pixel_trackingpage_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_FACEBOOK_PIXEL_TRACKINGPAGE_ENABLED'); break;
            case 'mautic.facebook_pixel_landingpage_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_FACEBOOK_PIXEL_LANDINGPAGE_ENABLED'); break;
            case 'mautic.do_not_track_404_anonymous': $value = $this->getEnv('bool:resolve:MAUTIC_DO_NOT_TRACK_404_ANONYMOUS'); break;
            case 'mautic.report_temp_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_REPORT_TEMP_DIR'); break;
            case 'mautic.report_export_batch_size': $value = $this->getEnv('intNullable:resolve:MAUTIC_REPORT_EXPORT_BATCH_SIZE'); break;
            case 'mautic.report_export_max_filesize_in_bytes': $value = $this->getEnv('intNullable:resolve:MAUTIC_REPORT_EXPORT_MAX_FILESIZE_IN_BYTES'); break;
            case 'mautic.csv_always_enclose': $value = $this->getEnv('bool:resolve:MAUTIC_CSV_ALWAYS_ENCLOSE'); break;
            case 'mautic.sms_enabled': $value = $this->getEnv('bool:resolve:MAUTIC_SMS_ENABLED'); break;
            case 'mautic.sms_username': $value = $this->getEnv('nullable:resolve:MAUTIC_SMS_USERNAME'); break;
            case 'mautic.sms_password': $value = $this->getEnv('nullable:resolve:MAUTIC_SMS_PASSWORD'); break;
            case 'mautic.sms_sending_phone_number': $value = $this->getEnv('nullable:resolve:MAUTIC_SMS_SENDING_PHONE_NUMBER'); break;
            case 'mautic.sms_frequency_number': $value = $this->getEnv('intNullable:resolve:MAUTIC_SMS_FREQUENCY_NUMBER'); break;
            case 'mautic.sms_frequency_time': $value = $this->getEnv('nullable:resolve:MAUTIC_SMS_FREQUENCY_TIME'); break;
            case 'mautic.sms_transport': $value = $this->getEnv('nullable:resolve:MAUTIC_SMS_TRANSPORT'); break;
            case 'mautic.saml_idp_metadata': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_METADATA'); break;
            case 'mautic.saml_idp_entity_id': $value = $this->getEnv('MAUTIC_SAML_ENTITY_ID'); break;
            case 'mautic.saml_idp_own_certificate': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_OWN_CERTIFICATE'); break;
            case 'mautic.saml_idp_own_private_key': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_OWN_PRIVATE_KEY'); break;
            case 'mautic.saml_idp_own_password': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_OWN_PASSWORD'); break;
            case 'mautic.saml_idp_email_attribute': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_EMAIL_ATTRIBUTE'); break;
            case 'mautic.saml_idp_username_attribute': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_USERNAME_ATTRIBUTE'); break;
            case 'mautic.saml_idp_firstname_attribute': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_FIRSTNAME_ATTRIBUTE'); break;
            case 'mautic.saml_idp_lastname_attribute': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_LASTNAME_ATTRIBUTE'); break;
            case 'mautic.saml_idp_default_role': $value = $this->getEnv('nullable:resolve:MAUTIC_SAML_IDP_DEFAULT_ROLE'); break;
            case 'mautic.webhook_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_WEBHOOK_LIMIT'); break;
            case 'mautic.webhook_time_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_WEBHOOK_TIME_LIMIT'); break;
            case 'mautic.webhook_log_max': $value = $this->getEnv('intNullable:resolve:MAUTIC_WEBHOOK_LOG_MAX'); break;
            case 'mautic.clean_webhook_logs_in_background': $value = $this->getEnv('bool:resolve:MAUTIC_CLEAN_WEBHOOK_LOGS_IN_BACKGROUND'); break;
            case 'mautic.webhook_disable_limit': $value = $this->getEnv('intNullable:resolve:MAUTIC_WEBHOOK_DISABLE_LIMIT'); break;
            case 'mautic.webhook_timeout': $value = $this->getEnv('intNullable:resolve:MAUTIC_WEBHOOK_TIMEOUT'); break;
            case 'mautic.queue_mode': $value = $this->getEnv('nullable:resolve:MAUTIC_QUEUE_MODE'); break;
            case 'mautic.events_orderby_dir': $value = $this->getEnv('nullable:resolve:MAUTIC_EVENTS_ORDERBY_DIR'); break;
            case 'mautic.webhook_email_details': $value = $this->getEnv('bool:resolve:MAUTIC_WEBHOOK_EMAIL_DETAILS'); break;
            case 'mautic.cache_adapter': $value = $this->getEnv('nullable:resolve:MAUTIC_CACHE_ADAPTER'); break;
            case 'mautic.cache_prefix': $value = $this->getEnv('nullable:resolve:MAUTIC_CACHE_PREFIX'); break;
            case 'mautic.cache_lifetime': $value = $this->getEnv('intNullable:resolve:MAUTIC_CACHE_LIFETIME'); break;
            case 'mautic.cache_adapter_memcached': $value = $this->getEnv('json:resolve:MAUTIC_CACHE_ADAPTER_MEMCACHED'); break;
            case 'mautic.cache_adapter_redis': $value = $this->getEnv('json:resolve:MAUTIC_CACHE_ADAPTER_REDIS'); break;
            case 'mautic.queue_protocol': $value = $this->getEnv('nullable:resolve:MAUTIC_QUEUE_PROTOCOL'); break;
            case 'mautic.rabbitmq_host': $value = $this->getEnv('nullable:resolve:MAUTIC_RABBITMQ_HOST'); break;
            case 'mautic.rabbitmq_port': $value = $this->getEnv('nullable:resolve:MAUTIC_RABBITMQ_PORT'); break;
            case 'mautic.rabbitmq_vhost': $value = $this->getEnv('nullable:resolve:MAUTIC_RABBITMQ_VHOST'); break;
            case 'mautic.rabbitmq_user': $value = $this->getEnv('nullable:resolve:MAUTIC_RABBITMQ_USER'); break;
            case 'mautic.rabbitmq_password': $value = $this->getEnv('nullable:resolve:MAUTIC_RABBITMQ_PASSWORD'); break;
            case 'mautic.rabbitmq_idle_timeout': $value = $this->getEnv('intNullable:resolve:MAUTIC_RABBITMQ_IDLE_TIMEOUT'); break;
            case 'mautic.rabbitmq_idle_timeout_exit_code': $value = $this->getEnv('intNullable:resolve:MAUTIC_RABBITMQ_IDLE_TIMEOUT_EXIT_CODE'); break;
            case 'mautic.beanstalkd_host': $value = $this->getEnv('nullable:resolve:MAUTIC_BEANSTALKD_HOST'); break;
            case 'mautic.beanstalkd_port': $value = $this->getEnv('nullable:resolve:MAUTIC_BEANSTALKD_PORT'); break;
            case 'mautic.beanstalkd_timeout': $value = $this->getEnv('nullable:resolve:MAUTIC_BEANSTALKD_TIMEOUT'); break;
            case 'mautic.image_path_exclude': $value = $this->getEnv('json:resolve:MAUTIC_IMAGE_PATH_EXCLUDE'); break;
            case 'mautic.static_url': $value = $this->getEnv('nullable:resolve:MAUTIC_STATIC_URL'); break;
            case 'mautic.website_snapshot_url': $value = $this->getEnv('nullable:resolve:MAUTIC_WEBSITE_SNAPSHOT_URL'); break;
            case 'mautic.website_snapshot_key': $value = $this->getEnv('nullable:resolve:MAUTIC_WEBSITE_SNAPSHOT_KEY'); break;
            case 'mautic.twitter_handle_field': $value = $this->getEnv('nullable:resolve:MAUTIC_TWITTER_HANDLE_FIELD'); break;
            case 'router.request_context.host': $value = $this->getEnv('MAUTIC_REQUEST_CONTEXT_HOST'); break;
            case 'router.request_context.scheme': $value = $this->getEnv('MAUTIC_REQUEST_CONTEXT_SCHEME'); break;
            case 'router.request_context.base_url': $value = $this->getEnv('MAUTIC_REQUEST_CONTEXT_BASE_URL'); break;
            case 'request_listener.http_port': $value = $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTP_PORT'); break;
            case 'request_listener.https_port': $value = $this->getEnv('MAUTIC_REQUEST_CONTEXT_HTTPS_PORT'); break;
            case 'kernel.secret': $value = $this->getEnv('nullable:resolve:MAUTIC_SECRET_KEY'); break;
            case 'kernel.default_locale': $value = $this->getEnv('nullable:resolve:MAUTIC_LOCALE'); break;
            case 'session.storage.options': $value = [
                'cache_limiter' => '0',
                'name' => $this->getEnv('MAUTIC_SESSION_NAME'),
                'cookie_secure' => false,
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_probability' => 1,
            ]; break;
            case 'validator.mapping.cache.file': $value = ($this->targetDir.''.'/validation.php'); break;
            case 'doctrine.orm.proxy_dir': $value = ($this->targetDir.''.'/doctrine/orm/Proxies'); break;
            case 'fos_oauth_server.server.options': $value = [
                'access_token_lifetime' => $this->getEnv('int:MAUTIC_API_OAUTH2_ACCESS_TOKEN_LIFETIME'),
                'refresh_token_lifetime' => $this->getEnv('int:MAUTIC_API_OAUTH2_REFRESH_TOKEN_LIFETIME'),
            ]; break;
            case 'oneup_uploader.chunks': $value = [
                'maxage' => 604800,
                'storage' => [
                    'type' => 'filesystem',
                    'filesystem' => NULL,
                    'directory' => ($this->targetDir.''.'/uploader/chunks'),
                    'stream_wrapper' => NULL,
                    'sync_buffer_size' => '100K',
                    'prefix' => 'chunks',
                ],
                'load_distribution' => true,
            ]; break;
            case 'oneup_uploader.orphanage': $value = [
                'maxage' => 604800,
                'directory' => ($this->targetDir.''.'/uploader/orphanage'),
            ]; break;
            case 'oneup_uploader.config.asset': $value = [
                'error_handler' => 'mautic.asset.upload.error.handler',
                'frontend' => 'custom',
                'custom_frontend' => [
                    'class' => 'Mautic\\AssetBundle\\Controller\\UploadController',
                    'name' => 'mautic',
                ],
                'storage' => [
                    'directory' => $this->getEnv('nullable:resolve:MAUTIC_UPLOAD_DIR'),
                    'service' => NULL,
                    'type' => 'filesystem',
                    'filesystem' => NULL,
                    'stream_wrapper' => NULL,
                    'sync_buffer_size' => '100K',
                ],
                'route_prefix' => '',
                'endpoints' => [
                    'upload' => NULL,
                    'progress' => NULL,
                    'cancel' => NULL,
                ],
                'allowed_mimetypes' => [

                ],
                'disallowed_mimetypes' => [

                ],
                'max_size' => 9223372036854775807,
                'use_orphanage' => false,
                'enable_progress' => false,
                'enable_cancelation' => false,
                'namer' => 'oneup_uploader.namer.uniqid',
                'root_folder' => false,
            ]; break;
            case 'oneup_uploader.config': $value = [
                'mappings' => [
                    'asset' => [
                        'error_handler' => 'mautic.asset.upload.error.handler',
                        'frontend' => 'custom',
                        'custom_frontend' => [
                            'class' => 'Mautic\\AssetBundle\\Controller\\UploadController',
                            'name' => 'mautic',
                        ],
                        'storage' => [
                            'directory' => $this->getEnv('nullable:resolve:MAUTIC_UPLOAD_DIR'),
                            'service' => NULL,
                            'type' => 'filesystem',
                            'filesystem' => NULL,
                            'stream_wrapper' => NULL,
                            'sync_buffer_size' => '100K',
                        ],
                        'route_prefix' => '',
                        'endpoints' => [
                            'upload' => NULL,
                            'progress' => NULL,
                            'cancel' => NULL,
                        ],
                        'allowed_mimetypes' => [

                        ],
                        'disallowed_mimetypes' => [

                        ],
                        'max_size' => 9223372036854775807,
                        'use_orphanage' => false,
                        'enable_progress' => false,
                        'enable_cancelation' => false,
                        'namer' => 'oneup_uploader.namer.uniqid',
                        'root_folder' => false,
                    ],
                ],
                'chunks' => [
                    'maxage' => 604800,
                    'storage' => [
                        'type' => 'filesystem',
                        'filesystem' => NULL,
                        'directory' => ($this->targetDir.''.'/uploader/chunks'),
                        'stream_wrapper' => NULL,
                        'sync_buffer_size' => '100K',
                        'prefix' => 'chunks',
                    ],
                    'load_distribution' => true,
                ],
                'orphanage' => [
                    'maxage' => 604800,
                    'directory' => ($this->targetDir.''.'/uploader/orphanage'),
                ],
                'twig' => true,
            ]; break;
            case 'lightsaml.own.entity_id': $value = $this->getEnv('MAUTIC_SAML_ENTITY_ID'); break;
            case 'fm_elfinder': $value = [
                'assets_path' => 'media/assets',
                'instances' => [
                    'default' => [
                        'locale' => $this->getEnv('nullable:resolve:MAUTIC_LOCALE'),
                        'cors_support' => true,
                        'editor' => 'custom',
                        'editor_template' => '@bundles/CoreBundle/Assets/js/libraries/filemanager/index.html.twig',
                        'fullscreen' => true,
                        'relative_path' => false,
                        'connector' => [
                            'debug' => false,
                            'binds' => [
                                'upload.pre mkdir.pre mkfile.pre rename.pre archive.pre ls.pre' => [
                                    0 => 'Plugin.Sanitizer.cmdPreprocess',
                                ],
                                'upload.presave paste.copyfrom' => [
                                    0 => 'Plugin.Sanitizer.onUpLoadPreSave',
                                ],
                            ],
                            'plugins' => [
                                'Sanitizer' => [
                                    'enable' => true,
                                    'callBack' => '\\Mautic\\CoreBundle\\Helper\\InputHelper::transliterateFilename',
                                ],
                            ],
                            'roots' => [
                                'local' => [
                                    'driver' => 'Flysystem',
                                    'path' => '',
                                    'flysystem' => [
                                        'type' => 'custom',
                                        'adapter_service' => 'mautic.core.service.local_file_adapter',
                                        'options' => [
                                            'local' => [
                                                'enabled' => false,
                                                'path' => '',
                                            ],
                                            'ftp' => [
                                                'enabled' => false,
                                                'host' => '',
                                                'username' => '',
                                                'password' => '',
                                                'port' => 21,
                                                'passive' => true,
                                                'ssl' => true,
                                                'timeout' => 30,
                                                'root' => '/',
                                                'directoryPerm' => 484,
                                            ],
                                            'sftp' => [
                                                'enabled' => false,
                                                'host' => '',
                                                'username' => '',
                                                'password' => '',
                                                'port' => 21,
                                                'privateKey' => '',
                                                'timeout' => 10,
                                                'root' => '/',
                                            ],
                                            'azure' => [
                                                'enabled' => false,
                                                'account_name' => '',
                                                'account_key' => '',
                                                'container_name' => '',
                                            ],
                                            'aws_s3_v2' => [
                                                'enabled' => false,
                                                'key' => '',
                                                'secret' => '',
                                                'region' => '',
                                                'bucket_name' => '',
                                                'optional_prefix' => '',
                                                'base_url' => '',
                                            ],
                                            'aws_s3_v3' => [
                                                'enabled' => false,
                                                'key' => '',
                                                'secret' => '',
                                                'region' => '',
                                                'version' => '',
                                                'bucket_name' => '',
                                                'optional_prefix' => '',
                                                'endpoint' => NULL,
                                                'use_path_style_endpoint' => false,
                                                'options' => [
                                                    'enabled' => false,
                                                    'ACL' => '',
                                                ],
                                            ],
                                            'copy_com' => [
                                                'enabled' => false,
                                                'consumer_key' => '',
                                                'consumer_secret' => '',
                                                'access_token' => '',
                                                'token_secret' => '',
                                                'optional_prefix' => '',
                                            ],
                                            'gridfs' => [
                                                'enabled' => false,
                                                'db_name' => '',
                                            ],
                                            'zip' => [
                                                'enabled' => false,
                                                'path' => '',
                                            ],
                                            'dropbox' => [
                                                'enabled' => false,
                                                'app' => '',
                                                'token' => '',
                                            ],
                                            'rackspace' => [
                                                'enabled' => false,
                                                'username' => '',
                                                'apikey' => '',
                                                'endpoint' => '',
                                                'container' => '',
                                                'region' => '',
                                            ],
                                        ],
                                        'enabled' => true,
                                        'filesystem' => '',
                                    ],
                                    'upload_allow' => [
                                        0 => 'image/png',
                                        1 => 'image/jpg',
                                        2 => 'image/jpeg',
                                        3 => 'image/gif',
                                    ],
                                    'upload_deny' => [
                                        0 => 'all',
                                    ],
                                    'accepted_name' => '/^[\\w\\x{0300}-\\x{036F}][\\w\\x{0300}-\\x{036F}\\s\\.\\%\\-]*$/u',
                                    'url' => $this->getEnv('resolve:MAUTIC_EL_FINDER_URL'),
                                    'tmb_path' => $this->getEnv('string:resolve:MAUTIC_EL_FINDER_PATH').'/.tmb/',
                                    'tmb_url' => $this->getEnv('string:resolve:MAUTIC_EL_FINDER_URL').'/.tmb/',
                                    'volume_id' => 0,
                                    'autoload' => false,
                                    'phash' => '',
                                    'trash_hash' => '',
                                    'locale' => '',
                                    'i18n_folder_name' => false,
                                    'mime_detect' => 'auto',
                                    'mimefile' => '',
                                    'security_voter' => '',
                                    'start_path' => '',
                                    'encoding' => 'UTF-8',
                                    'alias' => '',
                                    'img_lib' => 'auto',
                                    'tmb_path_mode' => 511,
                                    'tmb_size' => 48,
                                    'tmb_crop' => true,
                                    'tmb_bg_color' => '#ffffff',
                                    'quarantine' => NULL,
                                    'copy_overwrite' => true,
                                    'copy_join' => true,
                                    'copy_from' => true,
                                    'copy_to' => true,
                                    'upload_overwrite' => true,
                                    'fileMode' => 420,
                                    'upload_order' => [
                                        0 => 'deny',
                                        1 => 'allow',
                                    ],
                                    'upload_max_size' => 0,
                                    'upload_max_conn' => 3,
                                    'defaults' => [
                                        'read' => true,
                                        'write' => true,
                                    ],
                                    'attributes' => [

                                    ],
                                    'show_hidden' => false,
                                    'disabled_commands' => [

                                    ],
                                    'tree_deep' => 0,
                                    'check_subfolders' => 1,
                                    'separator' => '/',
                                    'date_format' => 'j M Y H:i',
                                    'time_format' => 'H:i',
                                    'archive_mimes' => [

                                    ],
                                    'archivers' => [
                                        'enabled' => false,
                                        'create' => [

                                        ],
                                        'extract' => [

                                        ],
                                    ],
                                    'glide_url' => '',
                                    'glide_key' => '',
                                    'plugins' => [

                                    ],
                                    'driver_options' => [

                                    ],
                                    'dropbox2_settings' => [
                                        'enabled' => false,
                                        'aliasFormat' => '%s@Dropbox',
                                        'path' => '/',
                                        'separator' => '/',
                                        'acceptedName' => '%s@Dropbox',
                                        'rootCssClass' => 'elfinder-navbar-root-dropbox',
                                        'getThumbSize' => 'medium',
                                    ],
                                    'box_settings' => [
                                        'enabled' => false,
                                        'root' => 'Box.com',
                                        'path' => '/',
                                        'separator' => '/',
                                        'tmbPath' => '',
                                        'tmbURL' => '',
                                        'tmpPath' => '',
                                        'acceptedName' => '#^[^/\\?*:|"<>]*[^./\\?*:|"<>]$#',
                                        'rootCssClass' => 'elfinder-navbar-root-box',
                                    ],
                                    'onedrive_settings' => [
                                        'enabled' => false,
                                        'root' => 'OneDrive.com',
                                        'OneDriveApiClient' => '',
                                        'path' => '/',
                                        'separator' => '/',
                                        'tmbPath' => '',
                                        'tmbURL' => '',
                                        'tmpPath' => '',
                                        'acceptedName' => '#^[^/\\?*:|"<>]*[^./\\?*:|"<>]$#',
                                        'rootCssClass' => 'elfinder-navbar-root-onedrive',
                                        'useApiThumbnail' => true,
                                    ],
                                    'ftp_settings' => [
                                        'enabled' => false,
                                    ],
                                    'mysql_settings' => [
                                        'enabled' => false,
                                        'port' => NULL,
                                        'socket' => NULL,
                                        'files_table' => 'elfinder_file',
                                        'tmbPath' => '',
                                        'tmpPath' => '',
                                        'rootCssClass' => 'elfinder-navbar-root-sql',
                                        'noSessionCache' => 'hasdirs',
                                    ],
                                ],
                            ],
                        ],
                        'multi_home_folder' => false,
                        'folder_separator' => '',
                        'theme' => 'smoothness',
                        'tinymce_popup_path' => '',
                        'path_prefix' => '/',
                        'where_is_multi' => [

                        ],
                        'visible_mime_types' => [

                        ],
                    ],
                ],
                'configuration_provider' => 'fm_elfinder.configurator.default',
                'loader' => 'fm_elfinder.loader.default',
            ]; break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/logs'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'FOSOAuthServerBundle' => 'FOS\\OAuthServerBundle\\FOSOAuthServerBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'OneupUploaderBundle' => 'Oneup\\UploaderBundle\\OneupUploaderBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'LightSamlSymfonyBridgeBundle' => 'LightSaml\\SymfonyBridgeBundle\\LightSamlSymfonyBridgeBundle',
                'LightSamlSpBundle' => 'LightSaml\\SpBundle\\LightSamlSpBundle',
                'NoxlogicRateLimitBundle' => 'Noxlogic\\RateLimitBundle\\NoxlogicRateLimitBundle',
                'FMElfinderBundle' => 'FM\\ElfinderBundle\\FMElfinderBundle',
                'ExerciseHTMLPurifierBundle' => 'Exercise\\HTMLPurifierBundle\\ExerciseHTMLPurifierBundle',
                'MauticApiBundle' => 'Mautic\\ApiBundle\\MauticApiBundle',
                'MauticAssetBundle' => 'Mautic\\AssetBundle\\MauticAssetBundle',
                'MauticCampaignBundle' => 'Mautic\\CampaignBundle\\MauticCampaignBundle',
                'MauticCategoryBundle' => 'Mautic\\CategoryBundle\\MauticCategoryBundle',
                'MauticChannelBundle' => 'Mautic\\ChannelBundle\\MauticChannelBundle',
                'MauticConfigBundle' => 'Mautic\\ConfigBundle\\MauticConfigBundle',
                'MauticCoreBundle' => 'Mautic\\CoreBundle\\MauticCoreBundle',
                'MauticDashboardBundle' => 'Mautic\\DashboardBundle\\MauticDashboardBundle',
                'MauticDynamicContentBundle' => 'Mautic\\DynamicContentBundle\\MauticDynamicContentBundle',
                'MauticEmailBundle' => 'Mautic\\EmailBundle\\MauticEmailBundle',
                'MauticFormBundle' => 'Mautic\\FormBundle\\MauticFormBundle',
                'MauticInstallBundle' => 'Mautic\\InstallBundle\\MauticInstallBundle',
                'IntegrationsBundle' => 'Mautic\\IntegrationsBundle\\IntegrationsBundle',
                'MauticLeadBundle' => 'Mautic\\LeadBundle\\MauticLeadBundle',
                'MarketplaceBundle' => 'Mautic\\MarketplaceBundle\\MarketplaceBundle',
                'MauticMessengerBundle' => 'Mautic\\MessengerBundle\\MauticMessengerBundle',
                'MauticNotificationBundle' => 'Mautic\\NotificationBundle\\MauticNotificationBundle',
                'MauticPageBundle' => 'Mautic\\PageBundle\\MauticPageBundle',
                'MauticPluginBundle' => 'Mautic\\PluginBundle\\MauticPluginBundle',
                'MauticPointBundle' => 'Mautic\\PointBundle\\MauticPointBundle',
                'MauticReportBundle' => 'Mautic\\ReportBundle\\MauticReportBundle',
                'MauticSmsBundle' => 'Mautic\\SmsBundle\\MauticSmsBundle',
                'MauticStageBundle' => 'Mautic\\StageBundle\\MauticStageBundle',
                'MauticStatsBundle' => 'Mautic\\StatsBundle\\MauticStatsBundle',
                'MauticUserBundle' => 'Mautic\\UserBundle\\MauticUserBundle',
                'MauticWebhookBundle' => 'Mautic\\WebhookBundle\\MauticWebhookBundle',
                'MauticCacheBundle' => 'Mautic\\CacheBundle\\MauticCacheBundle',
                'MauticQueueBundle' => 'Mautic\\QueueBundle\\MauticQueueBundle',
                'MauticGmailBundle' => 'MauticPlugin\\MauticGmailBundle\\MauticGmailBundle',
                'GrapesJsBuilderBundle' => 'MauticPlugin\\GrapesJsBuilderBundle\\GrapesJsBuilderBundle',
                'MauticCloudStorageBundle' => 'MauticPlugin\\MauticCloudStorageBundle\\MauticCloudStorageBundle',
                'MauticFullContactBundle' => 'MauticPlugin\\MauticFullContactBundle\\MauticFullContactBundle',
                'MauticClearbitBundle' => 'MauticPlugin\\MauticClearbitBundle\\MauticClearbitBundle',
                'MauticOutlookBundle' => 'MauticPlugin\\MauticOutlookBundle\\MauticOutlookBundle',
                'MauticTagManagerBundle' => 'MauticPlugin\\MauticTagManagerBundle\\MauticTagManagerBundle',
                'MauticCrmBundle' => 'MauticPlugin\\MauticCrmBundle\\MauticCrmBundle',
                'MauticFocusBundle' => 'MauticPlugin\\MauticFocusBundle\\MauticFocusBundle',
                'MauticSocialBundle' => 'MauticPlugin\\MauticSocialBundle\\MauticSocialBundle',
                'MauticZapierBundle' => 'MauticPlugin\\MauticZapierBundle\\MauticZapierBundle',
                'MauticEmailMarketingBundle' => 'MauticPlugin\\MauticEmailMarketingBundle\\MauticEmailMarketingBundle',
                'MauticCitrixBundle' => 'MauticPlugin\\MauticCitrixBundle\\MauticCitrixBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'DoctrineFixturesBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-fixtures-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ],
                'DoctrineMigrationsBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ],
                'KnpMenuBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/knplabs/knp-menu-bundle/src'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ],
                'FOSOAuthServerBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/oauth-server-bundle'),
                    'namespace' => 'FOS\\OAuthServerBundle',
                ],
                'FOSRestBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/friendsofsymfony/rest-bundle'),
                    'namespace' => 'FOS\\RestBundle',
                ],
                'JMSSerializerBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/jms/serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ],
                'OneupUploaderBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/oneup/uploader-bundle/src'),
                    'namespace' => 'Oneup\\UploaderBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'SensioFrameworkExtraBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/sensio/framework-extra-bundle/src'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ],
                'LightSamlSymfonyBridgeBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/lightsaml/symfony-bridge/src/LightSaml/SymfonyBridgeBundle'),
                    'namespace' => 'LightSaml\\SymfonyBridgeBundle',
                ],
                'LightSamlSpBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/lightsaml/sp-bundle/src/LightSaml/SpBundle'),
                    'namespace' => 'LightSaml\\SpBundle',
                ],
                'NoxlogicRateLimitBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/noxlogic/ratelimit-bundle'),
                    'namespace' => 'Noxlogic\\RateLimitBundle',
                ],
                'FMElfinderBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/helios-ag/fm-elfinder-bundle/src'),
                    'namespace' => 'FM\\ElfinderBundle',
                ],
                'ExerciseHTMLPurifierBundle' => [
                    'path' => (\dirname(__DIR__, 5).'/vendor/exercise/htmlpurifier-bundle/src'),
                    'namespace' => 'Exercise\\HTMLPurifierBundle',
                ],
                'MauticApiBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle'),
                    'namespace' => 'Mautic\\ApiBundle',
                ],
                'MauticAssetBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle'),
                    'namespace' => 'Mautic\\AssetBundle',
                ],
                'MauticCampaignBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle'),
                    'namespace' => 'Mautic\\CampaignBundle',
                ],
                'MauticCategoryBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle'),
                    'namespace' => 'Mautic\\CategoryBundle',
                ],
                'MauticChannelBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle'),
                    'namespace' => 'Mautic\\ChannelBundle',
                ],
                'MauticConfigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/ConfigBundle'),
                    'namespace' => 'Mautic\\ConfigBundle',
                ],
                'MauticCoreBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle'),
                    'namespace' => 'Mautic\\CoreBundle',
                ],
                'MauticDashboardBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle'),
                    'namespace' => 'Mautic\\DashboardBundle',
                ],
                'MauticDynamicContentBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle'),
                    'namespace' => 'Mautic\\DynamicContentBundle',
                ],
                'MauticEmailBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle'),
                    'namespace' => 'Mautic\\EmailBundle',
                ],
                'MauticFormBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/FormBundle'),
                    'namespace' => 'Mautic\\FormBundle',
                ],
                'MauticInstallBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/InstallBundle'),
                    'namespace' => 'Mautic\\InstallBundle',
                ],
                'IntegrationsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle'),
                    'namespace' => 'Mautic\\IntegrationsBundle',
                ],
                'MauticLeadBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle'),
                    'namespace' => 'Mautic\\LeadBundle',
                ],
                'MarketplaceBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle'),
                    'namespace' => 'Mautic\\MarketplaceBundle',
                ],
                'MauticMessengerBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/MessengerBundle'),
                    'namespace' => 'Mautic\\MessengerBundle',
                ],
                'MauticNotificationBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle'),
                    'namespace' => 'Mautic\\NotificationBundle',
                ],
                'MauticPageBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/PageBundle'),
                    'namespace' => 'Mautic\\PageBundle',
                ],
                'MauticPluginBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle'),
                    'namespace' => 'Mautic\\PluginBundle',
                ],
                'MauticPointBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/PointBundle'),
                    'namespace' => 'Mautic\\PointBundle',
                ],
                'MauticReportBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle'),
                    'namespace' => 'Mautic\\ReportBundle',
                ],
                'MauticSmsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle'),
                    'namespace' => 'Mautic\\SmsBundle',
                ],
                'MauticStageBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/StageBundle'),
                    'namespace' => 'Mautic\\StageBundle',
                ],
                'MauticStatsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/StatsBundle'),
                    'namespace' => 'Mautic\\StatsBundle',
                ],
                'MauticUserBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/UserBundle'),
                    'namespace' => 'Mautic\\UserBundle',
                ],
                'MauticWebhookBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle'),
                    'namespace' => 'Mautic\\WebhookBundle',
                ],
                'MauticCacheBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/CacheBundle'),
                    'namespace' => 'Mautic\\CacheBundle',
                ],
                'MauticQueueBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/app/bundles/QueueBundle'),
                    'namespace' => 'Mautic\\QueueBundle',
                ],
                'MauticGmailBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticGmailBundle'),
                    'namespace' => 'MauticPlugin\\MauticGmailBundle',
                ],
                'GrapesJsBuilderBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle'),
                    'namespace' => 'MauticPlugin\\GrapesJsBuilderBundle',
                ],
                'MauticCloudStorageBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticCloudStorageBundle'),
                    'namespace' => 'MauticPlugin\\MauticCloudStorageBundle',
                ],
                'MauticFullContactBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticFullContactBundle'),
                    'namespace' => 'MauticPlugin\\MauticFullContactBundle',
                ],
                'MauticClearbitBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticClearbitBundle'),
                    'namespace' => 'MauticPlugin\\MauticClearbitBundle',
                ],
                'MauticOutlookBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticOutlookBundle'),
                    'namespace' => 'MauticPlugin\\MauticOutlookBundle',
                ],
                'MauticTagManagerBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle'),
                    'namespace' => 'MauticPlugin\\MauticTagManagerBundle',
                ],
                'MauticCrmBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticCrmBundle'),
                    'namespace' => 'MauticPlugin\\MauticCrmBundle',
                ],
                'MauticFocusBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticFocusBundle'),
                    'namespace' => 'MauticPlugin\\MauticFocusBundle',
                ],
                'MauticSocialBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticSocialBundle'),
                    'namespace' => 'MauticPlugin\\MauticSocialBundle',
                ],
                'MauticZapierBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticZapierBundle'),
                    'namespace' => 'MauticPlugin\\MauticZapierBundle',
                ],
                'MauticEmailMarketingBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticEmailMarketingBundle'),
                    'namespace' => 'MauticPlugin\\MauticEmailMarketingBundle',
                ],
                'MauticCitrixBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle'),
                    'namespace' => 'MauticPlugin\\MauticCitrixBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'AppKernelProdContainer',
            'mautic.bundles' => [
                'MauticCoreBundle' => [
                    'isPlugin' => false,
                    'base' => 'Core',
                    'bundle' => 'CoreBundle',
                    'relative' => 'app/bundles/CoreBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/CoreBundle'),
                    'namespace' => 'Mautic\\CoreBundle',
                    'symfonyBundleName' => 'MauticCoreBundle',
                    'bundleClass' => 'Mautic\\CoreBundle\\MauticCoreBundle',
                    'permissionClasses' => [
                        'Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions' => 'Mautic\\CoreBundle\\Security\\Permissions\\SystemPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_core_ajax' => [
                                    'path' => '/ajax',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\AjaxController::delegateAjaxAction',
                                ],
                                'mautic_core_update' => [
                                    'path' => '/update',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::indexAction',
                                ],
                                'mautic_core_update_schema' => [
                                    'path' => '/update/schema',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\UpdateController::schemaAction',
                                ],
                                'mautic_core_form_action' => [
                                    'path' => '/action/{objectAction}/{objectModel}/{objectId}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\FormController::executeAction',
                                    'defaults' => [
                                        'objectModel' => '',
                                    ],
                                ],
                                'mautic_core_file_action' => [
                                    'path' => '/file/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\FileController::executeAction',
                                ],
                                'mautic_themes_index' => [
                                    'path' => '/themes',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::indexAction',
                                ],
                                'mautic_themes_action' => [
                                    'path' => '/themes/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\ThemeController::executeAction',
                                ],
                            ],
                            'public' => [
                                'mautic_js' => [
                                    'path' => '/mtc.js',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\JsController::indexAction',
                                ],
                                'mautic_base_index' => [
                                    'path' => '/',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::indexAction',
                                ],
                                'mautic_secure_root' => [
                                    'path' => '/s',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction',
                                ],
                                'mautic_secure_root_slash' => [
                                    'path' => '/s/',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\DefaultController::redirectSecureRootAction',
                                ],
                                'mautic_remove_trailing_slash' => [
                                    'path' => '/{url}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction',
                                    'method' => 'GET',
                                    'requirements' => [
                                        'url' => '.*/$',
                                    ],
                                ],
                            ],
                            'api' => [
                                'mautic_core_api_file_list' => [
                                    'path' => '/files/{dir}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::listAction',
                                ],
                                'mautic_core_api_file_create' => [
                                    'path' => '/files/{dir}/new',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::createAction',
                                    'method' => 'POST',
                                ],
                                'mautic_core_api_file_delete' => [
                                    'path' => '/files/{dir}/{file}/delete',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\FileApiController::deleteAction',
                                    'method' => 'DELETE',
                                ],
                                'mautic_core_api_theme_list' => [
                                    'path' => '/themes',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::listAction',
                                ],
                                'mautic_core_api_theme_get' => [
                                    'path' => '/themes/{theme}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::getAction',
                                ],
                                'mautic_core_api_theme_create' => [
                                    'path' => '/themes/new',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::newAction',
                                    'method' => 'POST',
                                ],
                                'mautic_core_api_theme_delete' => [
                                    'path' => '/themes/{theme}/delete',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\ThemeApiController::deleteAction',
                                    'method' => 'DELETE',
                                ],
                                'mautic_core_api_stats' => [
                                    'path' => '/stats/{table}',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\Api\\StatsApiController::listAction',
                                    'defaults' => [
                                        'table' => '',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.core.components' => [
                                    'id' => 'mautic_components_root',
                                    'iconClass' => 'fa-puzzle-piece',
                                    'priority' => 60,
                                ],
                                'mautic.core.channels' => [
                                    'id' => 'mautic_channels_root',
                                    'iconClass' => 'fa-rss',
                                    'priority' => 40,
                                ],
                            ],
                            'admin' => [
                                'mautic.theme.menu.index' => [
                                    'route' => 'mautic_themes_index',
                                    'iconClass' => 'fa-newspaper-o',
                                    'id' => 'mautic_themes_index',
                                    'access' => 'core:themes:view',
                                ],
                            ],
                            'extra' => [
                                'priority' => -1000,
                                'items' => [
                                    'name' => 'extra',
                                    'children' => [

                                    ],
                                ],
                            ],
                            'profile' => [
                                'priority' => -1000,
                                'items' => [
                                    'name' => 'profile',
                                    'children' => [

                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'main' => [
                                'mautic.core.service.flashbag' => [
                                    'class' => 'Mautic\\CoreBundle\\Service\\FlashBag',
                                    'arguments' => [
                                        0 => '@session',
                                        1 => 'translator',
                                        2 => 'request_stack',
                                        3 => 'mautic.core.model.notification',
                                    ],
                                ],
                                'mautic.core.service.bulk_notification' => [
                                    'class' => 'Mautic\\CoreBundle\\Service\\BulkNotification',
                                    'arguments' => [
                                        0 => 'mautic.core.model.notification',
                                    ],
                                ],
                                'mautic.core.service.local_file_adapter' => [
                                    'class' => 'Mautic\\CoreBundle\\Service\\LocalFileAdapterService',
                                    'arguments' => [
                                        0 => '%env(resolve:MAUTIC_EL_FINDER_PATH)%',
                                    ],
                                ],
                                'mautic.core.service.log_processor' => [
                                    'class' => 'Mautic\\CoreBundle\\Monolog\\LogProcessor',
                                    'tags' => [
                                        0 => 'monolog.processor',
                                    ],
                                ],
                            ],
                            'events' => [
                                'mautic.core.subscriber.router' => [
                                    'class' => 'Mautic\\CoreBundle\\EventListener\\RouterSubscriber',
                                    'arguments' => [
                                        0 => 'router',
                                        1 => '%router.request_context.scheme%',
                                        2 => '%router.request_context.host%',
                                        3 => '%request_listener.https_port%',
                                        4 => '%request_listener.http_port%',
                                        5 => '%router.request_context.base_url%',
                                    ],
                                ],
                            ],
                            'forms' => [
                                'mautic.form.type.coreconfig' => [
                                    'class' => 'Mautic\\CoreBundle\\Form\\Type\\ConfigType',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.language',
                                        2 => 'mautic.ip_lookup.factory',
                                        3 => '%mautic.ip_lookup_services%',
                                        4 => 'mautic.ip_lookup',
                                    ],
                                ],
                                'mautic.form.type.dynamic_content_filter_entry_filters' => [
                                    'class' => 'Mautic\\CoreBundle\\Form\\Type\\DynamicContentFilterEntryFiltersType',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                    'methodCalls' => [
                                        'setConnection' => [
                                            0 => 'database_connection',
                                        ],
                                    ],
                                ],
                            ],
                            'helpers' => [
                                'mautic.helper.app_version' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\AppVersion',
                                ],
                                'mautic.helper.twig.menu' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MenuHelper',
                                    'arguments' => [
                                        0 => 'knp_menu.helper',
                                    ],
                                    'alias' => 'menu',
                                ],
                                'mautic.helper.twig.date' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\DateHelper',
                                    'arguments' => [
                                        0 => '%mautic.date_format_full%',
                                        1 => '%mautic.date_format_short%',
                                        2 => '%mautic.date_format_dateonly%',
                                        3 => '%mautic.date_format_timeonly%',
                                        4 => 'translator',
                                        5 => 'mautic.helper.core_parameters',
                                    ],
                                    'alias' => 'date',
                                ],
                                'mautic.helper.twig.gravatar' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\GravatarHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.twig.default_avatar',
                                        1 => 'mautic.helper.core_parameters',
                                        2 => 'request_stack',
                                    ],
                                    'alias' => 'gravatar',
                                ],
                                'mautic.helper.twig.analytics' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\AnalyticsHelper',
                                    'alias' => 'analytics',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.helper.twig.config' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ConfigHelper',
                                    'alias' => 'config',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.helper.twig.mautibot' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\MautibotHelper',
                                    'alias' => 'mautibot',
                                ],
                                'mautic.helper.twig.button' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ButtonHelper',
                                    'arguments' => [
                                        0 => 'twig',
                                        1 => 'translator',
                                        2 => 'event_dispatcher',
                                    ],
                                    'alias' => 'buttons',
                                ],
                                'mautic.helper.twig.content' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\ContentHelper',
                                    'arguments' => [
                                        0 => 'twig',
                                        1 => 'event_dispatcher',
                                    ],
                                    'alias' => 'content',
                                ],
                                'mautic.helper.twig.formatter' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\FormatterHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.twig.date',
                                        1 => 'translator',
                                    ],
                                    'alias' => 'formatter',
                                ],
                                'mautic.helper.twig.version' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\VersionHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.app_version',
                                    ],
                                    'alias' => 'version',
                                ],
                                'mautic.helper.twig.security' => [
                                    'class' => 'Mautic\\CoreBundle\\Twig\\Helper\\SecurityHelper',
                                    'arguments' => [
                                        0 => 'mautic.security',
                                        1 => 'request_stack',
                                        2 => 'event_dispatcher',
                                        3 => 'security.csrf.token_manager',
                                    ],
                                    'alias' => 'security',
                                ],
                                'mautic.helper.paths' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\PathsHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.user',
                                        1 => 'mautic.helper.core_parameters',
                                        2 => '%kernel.cache_dir%',
                                        3 => '%kernel.logs_dir%',
                                        4 => '%kernel.project_dir%',
                                    ],
                                ],
                                'mautic.helper.ip_lookup' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\IpLookupHelper',
                                    'arguments' => [
                                        0 => 'request_stack',
                                        1 => 'doctrine.orm.entity_manager',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'mautic.ip_lookup',
                                    ],
                                ],
                                'mautic.helper.user' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\UserHelper',
                                    'arguments' => [
                                        0 => 'security.token_storage',
                                    ],
                                ],
                                'mautic.helper.core_parameters' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\CoreParametersHelper',
                                    'arguments' => [
                                        0 => 'service_container',
                                    ],
                                    'serviceAlias' => 'mautic.config',
                                ],
                                'mautic.helper.bundle' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\BundleHelper',
                                    'arguments' => [
                                        0 => '%mautic.bundles%',
                                        1 => '%mautic.plugin.bundles%',
                                    ],
                                ],
                                'mautic.helper.phone_number' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\PhoneNumberHelper',
                                ],
                                'mautic.helper.input_helper' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\InputHelper',
                                ],
                                'mautic.helper.file_uploader' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\FileUploader',
                                    'arguments' => [
                                        0 => 'mautic.helper.file_path_resolver',
                                    ],
                                ],
                                'mautic.helper.file_path_resolver' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\FilePathResolver',
                                    'arguments' => [
                                        0 => 'symfony.filesystem',
                                        1 => 'mautic.helper.input_helper',
                                    ],
                                ],
                                'mautic.helper.file_properties' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\FileProperties',
                                ],
                                'mautic.helper.trailing_slash' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\TrailingSlashHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.helper.token_builder' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelper',
                                    'arguments' => [
                                        0 => 'mautic.security',
                                        1 => 'mautic.model.factory',
                                        2 => 'database_connection',
                                        3 => 'mautic.helper.user',
                                    ],
                                ],
                                'mautic.helper.token_builder.factory' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\BuilderTokenHelperFactory',
                                    'arguments' => [
                                        0 => 'mautic.security',
                                        1 => 'mautic.model.factory',
                                        2 => 'database_connection',
                                        3 => 'mautic.helper.user',
                                    ],
                                ],
                                'mautic.helper.maxmind_do_not_sell_download' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\MaxMindDoNotSellDownloadHelper',
                                    'arguments' => [
                                        0 => '%mautic.ip_lookup_auth%',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.native.connector',
                                        3 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.helper.update_checks' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\PreUpdateCheckHelper',
                                ],
                            ],
                            'menus' => [
                                'mautic.menu.main' => [
                                    'alias' => 'main',
                                ],
                                'mautic.menu.admin' => [
                                    'alias' => 'admin',
                                    'options' => [
                                        'template' => '@MauticCore/Menu/admin.html.twig',
                                    ],
                                ],
                                'mautic.menu.extra' => [
                                    'alias' => 'extra',
                                    'options' => [
                                        'template' => '@MauticCore/Menu/extra.html.twig',
                                    ],
                                ],
                                'mautic.menu.profile' => [
                                    'alias' => 'profile',
                                    'options' => [
                                        'template' => '@MauticCore/Menu/profile_inline.html.twig',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.cache.warmer.middleware' => [
                                    'class' => 'Mautic\\CoreBundle\\Cache\\MiddlewareCacheWarmer',
                                    'tag' => 'kernel.cache_warmer',
                                    'arguments' => [
                                        0 => '%kernel.environment%',
                                    ],
                                ],
                                'symfony.filesystem' => [
                                    'class' => 'Symfony\\Component\\Filesystem\\Filesystem',
                                ],
                                'mautic.filesystem' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\Filesystem',
                                ],
                                'symfony.finder' => [
                                    'class' => 'Symfony\\Component\\Finder\\Finder',
                                ],
                                'mautic.core.errorhandler.subscriber' => [
                                    'class' => 'Mautic\\CoreBundle\\EventListener\\ErrorHandlingListener',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                        1 => 'monolog.logger',
                                        2 => '@=container.has(\'monolog.logger.chrome\') ? container.get(\'monolog.logger.chrome\') : null',
                                    ],
                                    'tag' => 'kernel.event_subscriber',
                                ],
                                'mautic.configurator' => [
                                    'class' => 'Mautic\\CoreBundle\\Configurator\\Configurator',
                                    'arguments' => [
                                        0 => 'mautic.helper.paths',
                                    ],
                                ],
                                'mautic.di.env_processor.nullable' => [
                                    'class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\NullableProcessor',
                                    'tag' => 'container.env_var_processor',
                                ],
                                'mautic.di.env_processor.int_nullable' => [
                                    'class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\IntNullableProcessor',
                                    'tag' => 'container.env_var_processor',
                                ],
                                'mautic.di.env_processor.mauticconst' => [
                                    'class' => 'Mautic\\CoreBundle\\DependencyInjection\\EnvProcessor\\MauticConstProcessor',
                                    'tag' => 'container.env_var_processor',
                                ],
                                'mautic.cipher.openssl' => [
                                    'class' => 'Mautic\\CoreBundle\\Security\\Cryptography\\Cipher\\Symmetric\\OpenSSLCipher',
                                    'arguments' => [
                                        0 => '%kernel.environment%',
                                    ],
                                ],
                                'mautic.route_loader' => [
                                    'class' => 'Mautic\\CoreBundle\\Loader\\RouteLoader',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                    'tag' => 'routing.loader',
                                ],
                                'mautic.security' => [
                                    'class' => 'Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions',
                                    'arguments' => [
                                        0 => 'mautic.helper.user',
                                        1 => 'translator',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => '%mautic.bundles%',
                                        4 => '%mautic.plugin.bundles%',
                                    ],
                                ],
                                'mautic.page.helper.factory' => [
                                    'class' => 'Mautic\\CoreBundle\\Factory\\PageHelperFactory',
                                    'arguments' => [
                                        0 => 'session',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.translation.loader' => [
                                    'class' => 'Mautic\\CoreBundle\\Loader\\TranslationLoader',
                                    'arguments' => [
                                        0 => 'mautic.helper.bundle',
                                        1 => 'mautic.helper.paths',
                                    ],
                                    'tag' => 'translation.loader',
                                    'alias' => 'mautic',
                                ],
                                'mautic.tblprefix_subscriber' => [
                                    'class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineEventsSubscriber',
                                    'tag' => 'doctrine.event_subscriber',
                                    'arguments' => '%mautic.db_table_prefix%',
                                ],
                                'mautic.database.version.provider' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\VersionProvider',
                                    'arguments' => [
                                        0 => 'database_connection',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.generated.columns.provider' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Provider\\GeneratedColumnsProvider',
                                    'arguments' => [
                                        0 => 'mautic.database.version.provider',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.generated.columns.doctrine.listener' => [
                                    'class' => 'Mautic\\CoreBundle\\EventListener\\DoctrineGeneratedColumnsListener',
                                    'tag' => 'doctrine.event_listener',
                                    'tagArguments' => [
                                        'event' => 'postGenerateSchema',
                                        'lazy' => true,
                                    ],
                                    'arguments' => [
                                        0 => 'mautic.generated.columns.provider',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.exception.listener' => [
                                    'class' => 'Mautic\\CoreBundle\\EventListener\\ExceptionListener',
                                    'arguments' => [
                                        0 => 'router',
                                        1 => 'Mautic\\CoreBundle\\Controller\\ExceptionController::showAction',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                    'tag' => 'kernel.event_listener',
                                    'tagArguments' => [
                                        'event' => 'kernel.exception',
                                        'method' => 'onKernelException',
                                        'priority' => 255,
                                    ],
                                ],
                                'mautic.helper.cookie' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\CookieHelper',
                                    'arguments' => [
                                        0 => '%mautic.cookie_path%',
                                        1 => '%mautic.cookie_domain%',
                                        2 => '%mautic.cookie_secure%',
                                        3 => '%mautic.cookie_httponly%',
                                        4 => 'request_stack',
                                    ],
                                    'tag' => 'kernel.event_subscriber',
                                ],
                                'mautic.helper.cache_storage' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\CacheStorageHelper',
                                    'arguments' => [
                                        0 => '"db"',
                                        1 => '%mautic.db_table_prefix%',
                                        2 => 'doctrine.dbal.default_connection',
                                        3 => '%kernel.cache_dir%',
                                    ],
                                ],
                                'mautic.helper.update' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\UpdateHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.paths',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'mautic.http.client',
                                        4 => 'mautic.helper.update.release_parser',
                                        5 => 'mautic.helper.update_checks',
                                    ],
                                ],
                                'mautic.helper.update.release_parser' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\Update\\Github\\ReleaseParser',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                    ],
                                ],
                                'mautic.helper.cache' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\CacheHelper',
                                    'arguments' => [
                                        0 => '%kernel.cache_dir%',
                                        1 => 'session',
                                        2 => 'mautic.helper.paths',
                                        3 => 'kernel',
                                    ],
                                ],
                                'mautic.helper.theme' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\ThemeHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.paths',
                                        1 => 'twig',
                                        2 => 'translator',
                                        3 => 'mautic.helper.core_parameters',
                                        4 => 'mautic.filesystem',
                                        5 => 'symfony.finder',
                                        6 => 'mautic.integrations.helper.builder_integrations',
                                    ],
                                    'methodCalls' => [
                                        'setDefaultTheme' => [
                                            0 => '%mautic.theme%',
                                        ],
                                    ],
                                ],
                                'mautic.helper.encryption' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\EncryptionHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'mautic.cipher.openssl',
                                    ],
                                ],
                                'mautic.helper.url' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\UrlHelper',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                        1 => '%mautic.link_shortener_url%',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.helper.export' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\ExportHelper',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.core_parameters',
                                        2 => 'mautic.helper.file_path_resolver',
                                    ],
                                ],
                                'mautic.helper.composer' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\ComposerHelper',
                                    'arguments' => [
                                        0 => 'kernel',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.helper.menu' => [
                                    'class' => 'Mautic\\CoreBundle\\Menu\\MenuHelper',
                                    'arguments' => [
                                        0 => 'mautic.security',
                                        1 => 'request_stack',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'mautic.helper.integration',
                                    ],
                                ],
                                'mautic.helper.hash' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\HashHelper\\HashHelper',
                                ],
                                'mautic.helper.random' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\RandomHelper\\RandomHelper',
                                ],
                                'mautic.helper.command' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\CommandHelper',
                                    'arguments' => 'kernel',
                                ],
                                'mautic.menu_renderer' => [
                                    'class' => 'Mautic\\CoreBundle\\Menu\\MenuRenderer',
                                    'arguments' => [
                                        0 => 'knp_menu.matcher',
                                        1 => 'twig',
                                    ],
                                    'tag' => 'knp_menu.renderer',
                                    'alias' => 'mautic',
                                ],
                                'mautic.menu.builder' => [
                                    'class' => 'Mautic\\CoreBundle\\Menu\\MenuBuilder',
                                    'arguments' => [
                                        0 => 'knp_menu.factory',
                                        1 => 'knp_menu.matcher',
                                        2 => 'event_dispatcher',
                                        3 => 'mautic.helper.menu',
                                    ],
                                ],
                                'mautic.ip_lookup.factory' => [
                                    'class' => 'Mautic\\CoreBundle\\Factory\\IpLookupFactory',
                                    'arguments' => [
                                        0 => '%mautic.ip_lookup_services%',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.http.client',
                                        3 => '%kernel.cache_dir%',
                                    ],
                                ],
                                'mautic.ip_lookup' => [
                                    'class' => 'Mautic\\CoreBundle\\IpLookup\\AbstractLookup',
                                    'factory' => [
                                        0 => '@mautic.ip_lookup.factory',
                                        1 => 'getService',
                                    ],
                                    'arguments' => [
                                        0 => '%mautic.ip_lookup_service%',
                                        1 => '%mautic.ip_lookup_auth%',
                                        2 => '%mautic.ip_lookup_config%',
                                        3 => 'mautic.http.client',
                                    ],
                                ],
                                'mautic.native.connector' => [
                                    'class' => 'Symfony\\Contracts\\HttpClient\\HttpClientInterface',
                                    'factory' => [
                                        0 => 'Symfony\\Component\\HttpClient\\HttpClient',
                                        1 => 'create',
                                    ],
                                ],
                                'twig.controller.exception.class' => 'Mautic\\CoreBundle\\Controller\\ExceptionController',
                                'mautic.doctrine.loader.mautic_fixtures_loader' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Loader\\MauticFixturesLoader',
                                    'arguments' => [
                                        0 => 'doctrine.fixtures.loader',
                                    ],
                                ],
                                'mautic.schema.helper.column' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\ColumnSchemaHelper',
                                    'arguments' => [
                                        0 => 'database_connection',
                                        1 => '%mautic.db_table_prefix%',
                                    ],
                                ],
                                'mautic.schema.helper.index' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\IndexSchemaHelper',
                                    'arguments' => [
                                        0 => 'database_connection',
                                        1 => '%mautic.db_table_prefix%',
                                    ],
                                ],
                                'mautic.schema.helper.table' => [
                                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Helper\\TableSchemaHelper',
                                    'arguments' => [
                                        0 => 'database_connection',
                                        1 => '%mautic.db_table_prefix%',
                                        2 => 'mautic.schema.helper.column',
                                    ],
                                ],
                                'mautic.form.list.validator.circular' => [
                                    'class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\CircularDependencyValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'request_stack',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                ],
                                'mautic.maxmind.doNotSellList' => [
                                    'class' => 'Mautic\\CoreBundle\\IpLookup\\DoNotSellList\\MaxMindDoNotSellList',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.monolog.handler' => [
                                    'class' => 'Mautic\\CoreBundle\\Monolog\\Handler\\FileLogHandler',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'mautic.monolog.fulltrace.formatter',
                                    ],
                                ],
                                'mautic.update.step_provider' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\StepProvider',
                                ],
                                'mautic.update.step.delete_cache' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\DeleteCacheStep',
                                    'arguments' => [
                                        0 => 'mautic.helper.cache',
                                        1 => 'translator',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.finalize' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\FinalizeUpdateStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.paths',
                                        2 => 'session',
                                        3 => 'mautic.helper.app_version',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.install_new_files' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\InstallNewFilesStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.update',
                                        2 => 'mautic.helper.paths',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.remove_deleted_files' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\RemoveDeletedFilesStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.paths',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.update_schema' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateSchemaStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'service_container',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.update_translations' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\UpdateTranslationsStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.language',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.step.checks' => [
                                    'class' => 'Mautic\\CoreBundle\\Update\\Step\\PreUpdateChecksStep',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.update',
                                    ],
                                    'tag' => 'mautic.update_step',
                                ],
                                'mautic.update.checks.php' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckPhpVersion',
                                    'tag' => 'mautic.update_check',
                                ],
                                'mautic.update.checks.database' => [
                                    'class' => 'Mautic\\CoreBundle\\Helper\\Update\\PreUpdateChecks\\CheckDatabaseDriverAndVersion',
                                    'arguments' => [
                                        0 => 'doctrine.orm.default_entity_manager',
                                    ],
                                    'tag' => 'mautic.update_check',
                                ],
                            ],
                            'validator' => [
                                'mautic.core.validator.file_upload' => [
                                    'class' => 'Mautic\\CoreBundle\\Validator\\FileUploadValidator',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                ],
                            ],
                        ],
                        'ip_lookup_services' => [
                            'extreme-ip' => [
                                'display_name' => 'Extreme-IP',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\ExtremeIpLookup',
                            ],
                            'freegeoip' => [
                                'display_name' => 'Ipstack.com',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\IpstackLookup',
                            ],
                            'geobytes' => [
                                'display_name' => 'Geobytes',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\GeobytesLookup',
                            ],
                            'geoips' => [
                                'display_name' => 'GeoIPs',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\GeoipsLookup',
                            ],
                            'ipinfodb' => [
                                'display_name' => 'IPInfoDB',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\IpinfodbLookup',
                            ],
                            'maxmind_country' => [
                                'display_name' => 'MaxMind - Country Geolocation',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindCountryLookup',
                            ],
                            'maxmind_omni' => [
                                'display_name' => 'MaxMind - Insights (formerly Omni]',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindOmniLookup',
                            ],
                            'maxmind_precision' => [
                                'display_name' => 'MaxMind - GeoIP2 Precision',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindPrecisionLookup',
                            ],
                            'maxmind_download' => [
                                'display_name' => 'MaxMind - GeoLite2 City Download',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindDownloadLookup',
                            ],
                            'telize' => [
                                'display_name' => 'Telize',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\TelizeLookup',
                            ],
                            'ip2loctionlocal' => [
                                'display_name' => 'IP2Location Local Bin File',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\IP2LocationBinLookup',
                            ],
                            'ip2loctionapi' => [
                                'display_name' => 'IP2Location Web Service',
                                'class' => 'Mautic\\CoreBundle\\IpLookup\\IP2LocationAPILookup',
                            ],
                        ],
                        'parameters' => [
                            'site_url' => '',
                            'webroot' => '',
                            '404_page' => '',
                            'cache_path' => '%kernel.project_dir%/var/cache',
                            'log_path' => '%kernel.project_dir%/var/logs',
                            'max_log_files' => 7,
                            'log_file_name' => 'mautic_%kernel.environment%.php',
                            'image_path' => 'media/images',
                            'tmp_path' => '%kernel.project_dir%/var/tmp',
                            'theme' => 'blank',
                            'theme_import_allowed_extensions' => [
                                0 => 'json',
                                1 => 'twig',
                                2 => 'css',
                                3 => 'js',
                                4 => 'htm',
                                5 => 'html',
                                6 => 'txt',
                                7 => 'jpg',
                                8 => 'jpeg',
                                9 => 'png',
                                10 => 'gif',
                            ],
                            'db_driver' => 'pdo_mysql',
                            'db_host' => '127.0.0.1',
                            'db_port' => 3306,
                            'db_name' => '',
                            'db_user' => '',
                            'db_password' => '',
                            'db_table_prefix' => '',
                            'db_host_ro' => NULL,
                            'locale' => 'en_US',
                            'secret_key' => 'temp',
                            'dev_hosts' => [

                            ],
                            'trusted_hosts' => [

                            ],
                            'trusted_proxies' => [

                            ],
                            'rememberme_key' => '%mautic.secret_key%',
                            'rememberme_lifetime' => 31536000,
                            'rememberme_path' => '/',
                            'rememberme_domain' => '',
                            'default_pagelimit' => 30,
                            'default_timezone' => 'UTC',
                            'date_format_full' => 'F j, Y g:i a T',
                            'date_format_short' => 'D, M d',
                            'date_format_dateonly' => 'F j, Y',
                            'date_format_timeonly' => 'g:i a',
                            'ip_lookup_service' => 'maxmind_download',
                            'ip_lookup_auth' => '',
                            'ip_lookup_config' => [

                            ],
                            'ip_lookup_create_organization' => false,
                            'transifex_api_token' => '',
                            'update_stability' => 'stable',
                            'cookie_path' => '/',
                            'cookie_domain' => '',
                            'cookie_secure' => true,
                            'cookie_httponly' => false,
                            'do_not_track_ips' => [

                            ],
                            'do_not_track_bots' => [
                                0 => 'MSNBOT',
                                1 => 'msnbot-media',
                                2 => 'bingbot',
                                3 => 'Googlebot',
                                4 => 'Google Web Preview',
                                5 => 'Mediapartners-Google',
                                6 => 'Baiduspider',
                                7 => 'Ezooms',
                                8 => 'YahooSeeker',
                                9 => 'Slurp',
                                10 => 'AltaVista',
                                11 => 'AVSearch',
                                12 => 'Mercator',
                                13 => 'Scooter',
                                14 => 'InfoSeek',
                                15 => 'Ultraseek',
                                16 => 'Lycos',
                                17 => 'Wget',
                                18 => 'YandexBot',
                                19 => 'Java/1.4.1_04',
                                20 => 'SiteBot',
                                21 => 'Exabot',
                                22 => 'AhrefsBot',
                                23 => 'MJ12bot',
                                24 => 'NetSeer crawler',
                                25 => 'TurnitinBot',
                                26 => 'magpie-crawler',
                                27 => 'Nutch Crawler',
                                28 => 'CMS Crawler',
                                29 => 'rogerbot',
                                30 => 'Domnutch',
                                31 => 'ssearch_bot',
                                32 => 'XoviBot',
                                33 => 'digincore',
                                34 => 'fr-crawler',
                                35 => 'SeznamBot',
                                36 => 'Seznam screenshot-generator',
                                37 => 'Facebot',
                                38 => 'facebookexternalhit',
                                39 => 'SimplePie',
                                40 => 'Riddler',
                                41 => '007ac9 Crawler',
                                42 => '360Spider',
                                43 => 'A6-Indexer',
                                44 => 'ADmantX',
                                45 => 'AHC',
                                46 => 'AISearchBot',
                                47 => 'APIs-Google',
                                48 => 'Aboundex',
                                49 => 'AddThis',
                                50 => 'Adidxbot',
                                51 => 'AdsBot-Google',
                                52 => 'AdsTxtCrawler',
                                53 => 'AdvBot',
                                54 => 'Ahrefs',
                                55 => 'AlphaBot',
                                56 => 'Amazon CloudFront',
                                57 => 'AndersPinkBot',
                                58 => 'Apache-HttpClient',
                                59 => 'Apercite',
                                60 => 'AppEngine-Google',
                                61 => 'Applebot',
                                62 => 'ArchiveBot',
                                63 => 'BDCbot',
                                64 => 'BIGLOTRON',
                                65 => 'BLEXBot',
                                66 => 'BLP_bbot',
                                67 => 'BTWebClient',
                                68 => 'BUbiNG',
                                69 => 'Baidu-YunGuanCe',
                                70 => 'Barkrowler',
                                71 => 'BehloolBot',
                                72 => 'BingPreview',
                                73 => 'BomboraBot',
                                74 => 'Bot.AraTurka.com',
                                75 => 'BoxcarBot',
                                76 => 'BrandVerity',
                                77 => 'Buck',
                                78 => 'CC Metadata Scaper',
                                79 => 'CCBot',
                                80 => 'CapsuleChecker',
                                81 => 'Cliqzbot',
                                82 => 'CloudFlare-AlwaysOnline',
                                83 => 'Companybook-Crawler',
                                84 => 'ContextAd Bot',
                                85 => 'CrunchBot',
                                86 => 'CrystalSemanticsBot',
                                87 => 'CyberPatrol',
                                88 => 'DareBoost',
                                89 => 'Datafeedwatch',
                                90 => 'Daum',
                                91 => 'DeuSu',
                                92 => 'developers.google.com',
                                93 => 'Diffbot',
                                94 => 'Digg Deeper',
                                95 => 'Digincore bot',
                                96 => 'Discordbot',
                                97 => 'Disqus',
                                98 => 'DnyzBot',
                                99 => 'Domain Re-Animator Bot',
                                100 => 'DomainStatsBot',
                                101 => 'DuckDuckBot',
                                102 => 'DuckDuckGo-Favicons-Bot',
                                103 => 'EZID',
                                104 => 'Embedly',
                                105 => 'EveryoneSocialBot',
                                106 => 'ExtLinksBot',
                                107 => 'FAST Enterprise Crawler',
                                108 => 'FAST-WebCrawler',
                                109 => 'Feedfetcher-Google',
                                110 => 'Feedly',
                                111 => 'Feedspotbot',
                                112 => 'FemtosearchBot',
                                113 => 'Fetch',
                                114 => 'Fever',
                                115 => 'Flamingo_SearchEngine',
                                116 => 'FlipboardProxy',
                                117 => 'Fyrebot',
                                118 => 'GarlikCrawler',
                                119 => 'Genieo',
                                120 => 'Gigablast',
                                121 => 'Gigabot',
                                122 => 'GingerCrawler',
                                123 => 'Gluten Free Crawler',
                                124 => 'GnowitNewsbot',
                                125 => 'Go-http-client',
                                126 => 'Google-Adwords-Instant',
                                127 => 'Gowikibot',
                                128 => 'GrapeshotCrawler',
                                129 => 'Grobbot',
                                130 => 'HTTrack',
                                131 => 'Hatena',
                                132 => 'IAS crawler',
                                133 => 'ICC-Crawler',
                                134 => 'IndeedBot',
                                135 => 'InterfaxScanBot',
                                136 => 'IstellaBot',
                                137 => 'James BOT',
                                138 => 'Jamie\'s Spider',
                                139 => 'Jetslide',
                                140 => 'Jetty',
                                141 => 'Jugendschutzprogramm-Crawler',
                                142 => 'K7MLWCBot',
                                143 => 'Kemvibot',
                                144 => 'KosmioBot',
                                145 => 'Landau-Media-Spider',
                                146 => 'Laserlikebot',
                                147 => 'Leikibot',
                                148 => 'Linguee Bot',
                                149 => 'LinkArchiver',
                                150 => 'LinkedInBot',
                                151 => 'LivelapBot',
                                152 => 'Luminator-robots',
                                153 => 'Mail.RU_Bot',
                                154 => 'Mastodon',
                                155 => 'MauiBot',
                                156 => 'Mediatoolkitbot',
                                157 => 'MegaIndex',
                                158 => 'MeltwaterNews',
                                159 => 'MetaJobBot',
                                160 => 'MetaURI',
                                161 => 'Miniflux',
                                162 => 'MojeekBot',
                                163 => 'Moreover',
                                164 => 'MuckRack',
                                165 => 'Multiviewbot',
                                166 => 'NING',
                                167 => 'NerdByNature.Bot',
                                168 => 'NetcraftSurveyAgent',
                                169 => 'Netvibes',
                                170 => 'Nimbostratus-Bot',
                                171 => 'Nuzzel',
                                172 => 'Ocarinabot',
                                173 => 'OpenHoseBot',
                                174 => 'OrangeBot',
                                175 => 'OutclicksBot',
                                176 => 'PR-CY.RU',
                                177 => 'PaperLiBot',
                                178 => 'Pcore-HTTP',
                                179 => 'PhantomJS',
                                180 => 'PiplBot',
                                181 => 'PocketParser',
                                182 => 'Primalbot',
                                183 => 'PrivacyAwareBot',
                                184 => 'Pulsepoint',
                                185 => 'Python-urllib',
                                186 => 'Qwantify',
                                187 => 'RankActiveLinkBot',
                                188 => 'RetrevoPageAnalyzer',
                                189 => 'SBL-BOT',
                                190 => 'SEMrushBot',
                                191 => 'SEOkicks',
                                192 => 'SWIMGBot',
                                193 => 'SafeDNSBot',
                                194 => 'SafeSearch microdata crawler',
                                195 => 'ScoutJet',
                                196 => 'Scrapy',
                                197 => 'Screaming Frog SEO Spider',
                                198 => 'SemanticScholarBot',
                                199 => 'SimpleCrawler',
                                200 => 'Siteimprove.com',
                                201 => 'SkypeUriPreview',
                                202 => 'Slack-ImgProxy',
                                203 => 'Slackbot',
                                204 => 'Snacktory',
                                205 => 'SocialRankIOBot',
                                206 => 'Sogou',
                                207 => 'Sonic',
                                208 => 'StorygizeBot',
                                209 => 'SurveyBot',
                                210 => 'Sysomos',
                                211 => 'TangibleeBot',
                                212 => 'TelegramBot',
                                213 => 'Teoma',
                                214 => 'Thinklab',
                                215 => 'TinEye',
                                216 => 'ToutiaoSpider',
                                217 => 'Traackr.com',
                                218 => 'Trove',
                                219 => 'TweetmemeBot',
                                220 => 'Twitterbot',
                                221 => 'Twurly',
                                222 => 'Upflow',
                                223 => 'UptimeRobot',
                                224 => 'UsineNouvelleCrawler',
                                225 => 'Veoozbot',
                                226 => 'WeSEE:Search',
                                227 => 'WhatsApp',
                                228 => 'Xenu Link Sleuth',
                                229 => 'Y!J',
                                230 => 'YaK',
                                231 => 'Yahoo Link Preview',
                                232 => 'Yeti',
                                233 => 'YisouSpider',
                                234 => 'Zabbix',
                                235 => 'ZoominfoBot',
                                236 => 'ZumBot',
                                237 => 'ZuperlistBot',
                                238 => '^LCC ',
                                239 => 'acapbot',
                                240 => 'acoonbot',
                                241 => 'adbeat_bot',
                                242 => 'adscanner',
                                243 => 'aiHitBot',
                                244 => 'antibot',
                                245 => 'arabot',
                                246 => 'archive.org_bot',
                                247 => 'axios',
                                248 => 'backlinkcrawler',
                                249 => 'betaBot',
                                250 => 'bibnum.bnf',
                                251 => 'binlar',
                                252 => 'bitlybot',
                                253 => 'blekkobot',
                                254 => 'blogmuraBot',
                                255 => 'bnf.fr_bot',
                                256 => 'bot-pge.chlooe.com',
                                257 => 'botify',
                                258 => 'brainobot',
                                259 => 'buzzbot',
                                260 => 'cXensebot',
                                261 => 'careerbot',
                                262 => 'centurybot9',
                                263 => 'changedetection',
                                264 => 'check_http',
                                265 => 'citeseerxbot',
                                266 => 'coccoc',
                                267 => 'collection@infegy.com',
                                268 => 'content crawler spider',
                                269 => 'contxbot',
                                270 => 'convera',
                                271 => 'crawler4j',
                                272 => 'curl',
                                273 => 'datagnionbot',
                                274 => 'dcrawl',
                                275 => 'deadlinkchecker',
                                276 => 'discobot',
                                277 => 'domaincrawler',
                                278 => 'dotbot',
                                279 => 'drupact',
                                280 => 'ec2linkfinder',
                                281 => 'edisterbot',
                                282 => 'electricmonk',
                                283 => 'elisabot',
                                284 => 'epicbot',
                                285 => 'eright',
                                286 => 'europarchive.org',
                                287 => 'exabot',
                                288 => 'ezooms',
                                289 => 'filterdb.iss.net',
                                290 => 'findlink',
                                291 => 'findthatfile',
                                292 => 'findxbot',
                                293 => 'fluffy',
                                294 => 'fuelbot',
                                295 => 'g00g1e.net',
                                296 => 'g2reader-bot',
                                297 => 'gnam gnam spider',
                                298 => 'google-xrawler',
                                299 => 'grub.org',
                                300 => 'gslfbot',
                                301 => 'heritrix',
                                302 => 'http_get',
                                303 => 'httpunit',
                                304 => 'ia_archiver',
                                305 => 'ichiro',
                                306 => 'imrbot',
                                307 => 'integromedb',
                                308 => 'intelium_bot',
                                309 => 'ip-web-crawler.com',
                                310 => 'ips-agent',
                                311 => 'iskanie',
                                312 => 'it2media-domain-crawler',
                                313 => 'jyxobot',
                                314 => 'lb-spider',
                                315 => 'libwww',
                                316 => 'linkapediabot',
                                317 => 'linkdex',
                                318 => 'lipperhey',
                                319 => 'lssbot',
                                320 => 'lssrocketcrawler',
                                321 => 'ltx71',
                                322 => 'mappydata',
                                323 => 'memorybot',
                                324 => 'mindUpBot',
                                325 => 'mlbot',
                                326 => 'moatbot',
                                327 => 'msnbot',
                                328 => 'msrbot',
                                329 => 'nerdybot',
                                330 => 'netEstate NE Crawler',
                                331 => 'netresearchserver',
                                332 => 'newsharecounts',
                                333 => 'newspaper',
                                334 => 'niki-bot',
                                335 => 'nutch',
                                336 => 'okhttp',
                                337 => 'omgili',
                                338 => 'openindexspider',
                                339 => 'page2rss',
                                340 => 'panscient',
                                341 => 'phpcrawl',
                                342 => 'pingdom',
                                343 => 'pinterest',
                                344 => 'postrank',
                                345 => 'proximic',
                                346 => 'psbot',
                                347 => 'purebot',
                                348 => 'python-requests',
                                349 => 'redditbot',
                                350 => 'scribdbot',
                                351 => 'seekbot',
                                352 => 'semanticbot',
                                353 => 'sentry',
                                354 => 'seoscanners',
                                355 => 'seznambot',
                                356 => 'sistrix crawler',
                                357 => 'sitebot',
                                358 => 'siteexplorer.info',
                                359 => 'smtbot',
                                360 => 'spbot',
                                361 => 'speedy',
                                362 => 'summify',
                                363 => 'tagoobot',
                                364 => 'toplistbot',
                                365 => 'tracemyfile',
                                366 => 'trendictionbot',
                                367 => 'turnitinbot',
                                368 => 'twengabot',
                                369 => 'um-LN',
                                370 => 'urlappendbot',
                                371 => 'vebidoobot',
                                372 => 'vkShare',
                                373 => 'voilabot',
                                374 => 'wbsearchbot',
                                375 => 'web-archive-net.com.bot',
                                376 => 'webcompanycrawler',
                                377 => 'webmon',
                                378 => 'wget',
                                379 => 'wocbot',
                                380 => 'woobot',
                                381 => 'woriobot',
                                382 => 'wotbox',
                                383 => 'xovibot',
                                384 => 'yacybot',
                                385 => 'yandex.com',
                                386 => 'yanga',
                                387 => 'yoozBot',
                                388 => 'zgrab',
                            ],
                            'do_not_track_internal_ips' => [

                            ],
                            'track_private_ip_ranges' => false,
                            'link_shortener_url' => NULL,
                            'cached_data_timeout' => 10,
                            'batch_sleep_time' => 1,
                            'batch_campaign_sleep_time' => false,
                            'transliterate_page_title' => false,
                            'cors_restrict_domains' => true,
                            'cors_valid_domains' => [

                            ],
                            'headers_sts' => false,
                            'headers_sts_expire_time' => 60,
                            'headers_sts_subdomains' => false,
                            'headers_sts_preload' => false,
                            'max_entity_lock_time' => 0,
                            'default_daterange_filter' => '-1 month',
                            'debug' => false,
                            'rss_notification_url' => '',
                            'translations_list_url' => 'https://language-packs.mautic.com/manifest.json',
                            'translations_fetch_url' => 'https://language-packs.mautic.com/',
                            'stats_update_url' => 'https://updates.mautic.org/stats/send',
                            'install_source' => 'Mautic',
                            'system_update_url' => 'https://api.github.com/repos/mautic/mautic/releases',
                            'editor_fonts' => [
                                0 => [
                                    'name' => 'Arial',
                                    'font' => 'Arial, Helvetica Neue, Helvetica, sans-serif',
                                ],
                                1 => [
                                    'name' => 'Bitter',
                                    'font' => 'Bitter, Georgia, Times, Times New Roman, serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Bitter',
                                ],
                                2 => [
                                    'name' => 'Courier New',
                                    'font' => 'Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace',
                                ],
                                3 => [
                                    'name' => 'Droid Serif',
                                    'font' => 'Droid Serif, Georgia, Times, Times New Roman, serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Droid+Serif',
                                ],
                                4 => [
                                    'name' => 'Georgia',
                                    'font' => 'Georgia, Times, Times New Roman, serif',
                                ],
                                5 => [
                                    'name' => 'Helvetica',
                                    'font' => 'Helvetica Neue, Helvetica, Arial, sans-serif',
                                ],
                                6 => [
                                    'name' => 'Lato',
                                    'font' => 'Lato, Tahoma, Verdana, Segoe, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Lato',
                                ],
                                7 => [
                                    'name' => 'Lucida Sans Unicode',
                                    'font' => 'Lucida Sans Unicode, Lucida Grande, Lucida Sans, Geneva, Verdana, sans-serif',
                                ],
                                8 => [
                                    'name' => 'Montserrat',
                                    'font' => 'Montserrat, Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Montserrat',
                                ],
                                9 => [
                                    'name' => 'Open Sans',
                                    'font' => 'Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Open+Sans',
                                ],
                                10 => [
                                    'name' => 'Roboto',
                                    'font' => 'Roboto, Tahoma, Verdana, Segoe, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Roboto',
                                ],
                                11 => [
                                    'name' => 'Source Sans Pro',
                                    'font' => 'Source Sans Pro, Tahoma, Verdana, Segoe, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Source+Sans+Pro',
                                ],
                                12 => [
                                    'name' => 'Tahoma',
                                    'font' => 'Tahoma, Geneva, Segoe, sans-serif',
                                ],
                                13 => [
                                    'name' => 'Times New Roman',
                                    'font' => 'TimesNewRoman, Times New Roman, Times, Beskerville, Georgia, serif',
                                ],
                                14 => [
                                    'name' => 'Trebuchet MS',
                                    'font' => 'Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans, Tahoma, sans-serif',
                                ],
                                15 => [
                                    'name' => 'Ubuntu',
                                    'font' => 'Ubuntu, Tahoma, Verdana, Segoe, sans-serif',
                                    'url' => 'https://fonts.googleapis.com/css?family=Ubuntu',
                                ],
                                16 => [
                                    'name' => 'Verdana',
                                    'font' => 'Verdana, Geneva, sans-serif',
                                ],
                                17 => [
                                    'name' => 'ヒラギノ角ゴ Pro W3',
                                    'font' => 'ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, sans-serif',
                                ],
                                18 => [
                                    'name' => 'メイリオ',
                                    'font' => 'メイリオ, Meiryo, ＭＳ Ｐゴシック, MS PGothic, ヒラギノ角ゴ Pro W3, Hiragino Kaku Gothic Pro,Osaka, sans-serif',
                                ],
                            ],
                            'composer_updates' => false,
                            'load_froala_assets' => false,
                            'redis_primary_only' => false,
                        ],
                    ],
                ],
                'MauticApiBundle' => [
                    'isPlugin' => false,
                    'base' => 'Api',
                    'bundle' => 'ApiBundle',
                    'relative' => 'app/bundles/ApiBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/ApiBundle'),
                    'namespace' => 'Mautic\\ApiBundle',
                    'symfonyBundleName' => 'MauticApiBundle',
                    'bundleClass' => 'Mautic\\ApiBundle\\MauticApiBundle',
                    'permissionClasses' => [
                        'Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions' => 'Mautic\\ApiBundle\\Security\\Permissions\\ApiPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'public' => [
                                'fos_oauth_server_token' => [
                                    'path' => '/oauth/v2/token',
                                    'controller' => 'fos_oauth_server.controller.token:tokenAction',
                                    'method' => 'GET|POST',
                                ],
                                'fos_oauth_server_authorize' => [
                                    'path' => '/oauth/v2/authorize',
                                    'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\AuthorizeController::authorizeAction',
                                    'method' => 'GET|POST',
                                ],
                                'mautic_oauth2_server_auth_login' => [
                                    'path' => '/oauth/v2/authorize_login',
                                    'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginAction',
                                    'method' => 'GET|POST',
                                ],
                                'mautic_oauth2_server_auth_login_check' => [
                                    'path' => '/oauth/v2/authorize_login_check',
                                    'controller' => 'Mautic\\ApiBundle\\Controller\\oAuth2\\SecurityController::loginCheckAction',
                                    'method' => 'GET|POST',
                                ],
                            ],
                            'main' => [
                                'mautic_client_index' => [
                                    'path' => '/credentials/{page}',
                                    'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::indexAction',
                                ],
                                'mautic_client_action' => [
                                    'path' => '/credentials/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\ApiBundle\\Controller\\ClientController::executeAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'admin' => [
                                'items' => [
                                    'mautic.api.client.menu.index' => [
                                        'route' => 'mautic_client_index',
                                        'iconClass' => 'fa-puzzle-piece',
                                        'access' => 'api:clients:view',
                                        'checks' => [
                                            'parameters' => [
                                                'api_enabled' => true,
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'helpers' => [
                                'mautic.api.helper.entity_result' => [
                                    'class' => 'Mautic\\ApiBundle\\Helper\\EntityResultHelper',
                                ],
                            ],
                            'other' => [
                                'mautic.api.oauth.event_listener' => [
                                    'class' => 'Mautic\\ApiBundle\\EventListener\\PreAuthorizationEventListener',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'mautic.security',
                                        2 => 'translator',
                                    ],
                                    'tags' => [
                                        0 => 'kernel.event_listener',
                                        1 => 'kernel.event_listener',
                                    ],
                                    'tagArguments' => [
                                        0 => [
                                            'event' => 'fos_oauth_server.pre_authorization_process',
                                            'method' => 'onPreAuthorizationProcess',
                                        ],
                                        1 => [
                                            'event' => 'fos_oauth_server.post_authorization_process',
                                            'method' => 'onPostAuthorizationProcess',
                                        ],
                                    ],
                                ],
                                'fos_oauth_server.security.authentication.listener.class' => 'Mautic\\ApiBundle\\Security\\OAuth2\\Firewall\\OAuthListener',
                                'mautic.validator.oauthcallback' => [
                                    'class' => 'Mautic\\ApiBundle\\Form\\Validator\\Constraints\\OAuthCallbackValidator',
                                    'tag' => 'validator.constraint_validator',
                                ],
                            ],
                        ],
                        'parameters' => [
                            'api_enabled' => false,
                            'api_enable_basic_auth' => false,
                            'api_oauth2_access_token_lifetime' => 60,
                            'api_oauth2_refresh_token_lifetime' => 14,
                            'api_batch_max_limit' => 200,
                            'api_rate_limiter_limit' => 0,
                            'api_rate_limiter_cache' => [
                                'adapter' => 'cache.adapter.filesystem',
                            ],
                        ],
                    ],
                ],
                'MauticAssetBundle' => [
                    'isPlugin' => false,
                    'base' => 'Asset',
                    'bundle' => 'AssetBundle',
                    'relative' => 'app/bundles/AssetBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/AssetBundle'),
                    'namespace' => 'Mautic\\AssetBundle',
                    'symfonyBundleName' => 'MauticAssetBundle',
                    'bundleClass' => 'Mautic\\AssetBundle\\MauticAssetBundle',
                    'permissionClasses' => [
                        'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_asset_index' => [
                                    'path' => '/assets/{page}',
                                    'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::indexAction',
                                ],
                                'mautic_asset_remote' => [
                                    'path' => '/assets/remote',
                                    'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::remoteAction',
                                ],
                                'mautic_asset_action' => [
                                    'path' => '/assets/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\AssetBundle\\Controller\\AssetController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_assetsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'assets',
                                    'path' => '/assets',
                                    'controller' => 'Mautic\\AssetBundle\\Controller\\Api\\AssetApiController',
                                ],
                            ],
                            'public' => [
                                'mautic_asset_download' => [
                                    'path' => '/asset/{slug}',
                                    'controller' => 'Mautic\\AssetBundle\\Controller\\PublicController::downloadAction',
                                    'defaults' => [
                                        'slug' => '',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.asset.assets' => [
                                        'route' => 'mautic_asset_index',
                                        'access' => [
                                            0 => 'asset:assets:viewown',
                                            1 => 'asset:assets:viewother',
                                        ],
                                        'parent' => 'mautic.core.components',
                                        'priority' => 300,
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'asset' => NULL,
                        ],
                        'services' => [
                            'permissions' => [
                                'mautic.asset.permissions' => [
                                    'class' => 'Mautic\\AssetBundle\\Security\\Permissions\\AssetPermissions',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                            ],
                            'others' => [
                                'mautic.asset.upload.error.handler' => [
                                    'class' => 'Mautic\\AssetBundle\\ErrorHandler\\DropzoneErrorHandler',
                                    'arguments' => 'mautic.factory',
                                ],
                                'oneup_uploader.controller.dropzone.class' => 'Mautic\\AssetBundle\\Controller\\UploadController',
                            ],
                            'fixtures' => [
                                'mautic.asset.fixture.asset' => [
                                    'class' => 'Mautic\\AssetBundle\\DataFixtures\\ORM\\LoadAssetData',
                                    'tag' => 'doctrine.fixture.orm',
                                ],
                            ],
                            'repositories' => [
                                'mautic.asset.repository.download' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => 'Mautic\\AssetBundle\\Entity\\Download',
                                ],
                            ],
                        ],
                        'parameters' => [
                            'upload_dir' => '%kernel.project_dir%/media/files',
                            'max_size' => '6',
                            'allowed_extensions' => [
                                0 => 'csv',
                                1 => 'doc',
                                2 => 'docx',
                                3 => 'epub',
                                4 => 'gif',
                                5 => 'jpg',
                                6 => 'jpeg',
                                7 => 'mpg',
                                8 => 'mpeg',
                                9 => 'mp3',
                                10 => 'odt',
                                11 => 'odp',
                                12 => 'ods',
                                13 => 'pdf',
                                14 => 'png',
                                15 => 'ppt',
                                16 => 'pptx',
                                17 => 'tif',
                                18 => 'tiff',
                                19 => 'txt',
                                20 => 'xls',
                                21 => 'xlsx',
                                22 => 'wav',
                            ],
                        ],
                    ],
                ],
                'MauticCampaignBundle' => [
                    'isPlugin' => false,
                    'base' => 'Campaign',
                    'bundle' => 'CampaignBundle',
                    'relative' => 'app/bundles/CampaignBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/CampaignBundle'),
                    'namespace' => 'Mautic\\CampaignBundle',
                    'symfonyBundleName' => 'MauticCampaignBundle',
                    'bundleClass' => 'Mautic\\CampaignBundle\\MauticCampaignBundle',
                    'permissionClasses' => [
                        'Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions' => 'Mautic\\CampaignBundle\\Security\\Permissions\\CampaignPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_campaignevent_action' => [
                                    'path' => '/campaigns/events/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\EventController::executeAction',
                                ],
                                'mautic_campaignsource_action' => [
                                    'path' => '/campaigns/sources/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\SourceController::executeAction',
                                ],
                                'mautic_campaign_index' => [
                                    'path' => '/campaigns/{page}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::indexAction',
                                ],
                                'mautic_campaign_action' => [
                                    'path' => '/campaigns/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::executeAction',
                                ],
                                'mautic_campaign_contacts' => [
                                    'path' => '/campaigns/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\CampaignController::contactsAction',
                                ],
                                'mautic_campaign_preview' => [
                                    'path' => '/campaign/preview/{objectId}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_campaignsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'campaigns',
                                    'path' => '/campaigns',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController',
                                ],
                                'mautic_api_campaigneventsstandard' => [
                                    'standard_entity' => true,
                                    'supported_endpoints' => [
                                        0 => 'getone',
                                        1 => 'getall',
                                    ],
                                    'name' => 'events',
                                    'path' => '/campaigns/events',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventApiController',
                                ],
                                'mautic_api_campaigns_events_contact' => [
                                    'path' => '/campaigns/events/contact/{contactId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction',
                                    'method' => 'GET',
                                ],
                                'mautic_api_campaigns_edit_contact_event' => [
                                    'path' => '/campaigns/events/{eventId}/contact/{contactId}/edit',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editContactEventAction',
                                    'method' => 'PUT',
                                ],
                                'mautic_api_campaigns_batchedit_events' => [
                                    'path' => '/campaigns/events/batch/edit',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::editEventsAction',
                                    'method' => 'PUT',
                                ],
                                'mautic_api_campaign_contact_events' => [
                                    'path' => '/campaigns/{campaignId}/events/contact/{contactId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\EventLogApiController::getContactEventsAction',
                                    'method' => 'GET',
                                ],
                                'mautic_api_campaigngetcontacts' => [
                                    'path' => '/campaigns/{id}/contacts',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::getContactsAction',
                                ],
                                'mautic_api_campaignaddcontact' => [
                                    'path' => '/campaigns/{id}/contact/{leadId}/add',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::addLeadAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_campaignremovecontact' => [
                                    'path' => '/campaigns/{id}/contact/{leadId}/remove',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::removeLeadAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_contact_clone_campaign' => [
                                    'path' => '/campaigns/clone/{campaignId}',
                                    'controller' => 'Mautic\\CampaignBundle\\Controller\\Api\\CampaignApiController::cloneCampaignAction',
                                    'method' => 'POST',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.campaign.menu.index' => [
                                    'iconClass' => 'fa-clock-o',
                                    'route' => 'mautic_campaign_index',
                                    'access' => 'campaign:campaigns:view',
                                    'priority' => 50,
                                ],
                            ],
                        ],
                        'categories' => [
                            'campaign' => NULL,
                        ],
                        'services' => [
                            'repositories' => [
                                'mautic.campaign.repository.campaign' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\CampaignBundle\\Entity\\Campaign',
                                    ],
                                ],
                                'mautic.campaign.repository.lead' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\CampaignBundle\\Entity\\Lead',
                                    ],
                                ],
                                'mautic.campaign.repository.event' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\CampaignBundle\\Entity\\Event',
                                    ],
                                ],
                                'mautic.campaign.repository.lead_event_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\CampaignBundle\\Entity\\LeadEventLog',
                                    ],
                                ],
                                'mautic.campaign.repository.summary' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\CampaignBundle\\Entity\\Summary',
                                    ],
                                ],
                            ],
                            'execution' => [
                                'mautic.campaign.contact_finder.kickoff' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\KickoffContactFinder',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead',
                                        1 => 'mautic.campaign.repository.campaign',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.campaign.contact_finder.scheduled' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\ScheduledContactFinder',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.campaign.contact_finder.inactive' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\ContactFinder\\InactiveContactFinder',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead',
                                        1 => 'mautic.campaign.repository.lead',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.campaign.dispatcher.action' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ActionDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.campaign.scheduler',
                                        3 => 'mautic.campaign.helper.notification',
                                        4 => 'mautic.campaign.legacy_event_dispatcher',
                                    ],
                                ],
                                'mautic.campaign.dispatcher.condition' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\ConditionDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.campaign.dispatcher.decision' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\DecisionDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.campaign.legacy_event_dispatcher',
                                    ],
                                ],
                                'mautic.campaign.event_logger' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Logger\\EventLogger',
                                    'arguments' => [
                                        0 => 'mautic.helper.ip_lookup',
                                        1 => 'mautic.tracker.contact',
                                        2 => 'mautic.campaign.repository.lead_event_log',
                                        3 => 'mautic.campaign.repository.lead',
                                        4 => 'mautic.campaign.model.summary',
                                    ],
                                ],
                                'mautic.campaign.event_collector' => [
                                    'class' => 'Mautic\\CampaignBundle\\EventCollector\\EventCollector',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.campaign.scheduler.datetime' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\DateTime',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.campaign.scheduler.interval' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\Mode\\Interval',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.campaign.scheduler' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Scheduler\\EventScheduler',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                        1 => 'mautic.campaign.event_logger',
                                        2 => 'mautic.campaign.scheduler.interval',
                                        3 => 'mautic.campaign.scheduler.datetime',
                                        4 => 'mautic.campaign.event_collector',
                                        5 => 'event_dispatcher',
                                        6 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.campaign.executioner.action' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ActionExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.dispatcher.action',
                                        1 => 'mautic.campaign.event_logger',
                                    ],
                                ],
                                'mautic.campaign.executioner.condition' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\ConditionExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.dispatcher.condition',
                                    ],
                                ],
                                'mautic.campaign.executioner.decision' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Event\\DecisionExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.event_logger',
                                        1 => 'mautic.campaign.dispatcher.decision',
                                    ],
                                ],
                                'mautic.campaign.event_executioner' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\EventExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.event_collector',
                                        1 => 'mautic.campaign.event_logger',
                                        2 => 'mautic.campaign.executioner.action',
                                        3 => 'mautic.campaign.executioner.condition',
                                        4 => 'mautic.campaign.executioner.decision',
                                        5 => 'monolog.logger.mautic',
                                        6 => 'mautic.campaign.scheduler',
                                        7 => 'mautic.campaign.helper.removed_contact_tracker',
                                        8 => 'mautic.campaign.repository.lead',
                                    ],
                                ],
                                'mautic.campaign.executioner.kickoff' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\KickoffExecutioner',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                        1 => 'mautic.campaign.contact_finder.kickoff',
                                        2 => 'translator',
                                        3 => 'mautic.campaign.event_executioner',
                                        4 => 'mautic.campaign.scheduler',
                                    ],
                                ],
                                'mautic.campaign.executioner.scheduled' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\ScheduledExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.repository.lead_event_log',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'translator',
                                        3 => 'mautic.campaign.event_executioner',
                                        4 => 'mautic.campaign.scheduler',
                                        5 => 'mautic.campaign.contact_finder.scheduled',
                                    ],
                                    'tag' => 'kernel.reset',
                                    'tagArguments' => [
                                        'method' => 'reset',
                                    ],
                                ],
                                'mautic.campaign.executioner.realtime' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\RealTimeExecutioner',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                        1 => 'mautic.lead.model.lead',
                                        2 => 'mautic.campaign.repository.event',
                                        3 => 'mautic.campaign.event_executioner',
                                        4 => 'mautic.campaign.executioner.decision',
                                        5 => 'mautic.campaign.event_collector',
                                        6 => 'mautic.campaign.scheduler',
                                        7 => 'mautic.tracker.contact',
                                        8 => 'mautic.campaign.helper.decision',
                                    ],
                                ],
                                'mautic.campaign.executioner.inactive' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\InactiveExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.campaign.contact_finder.inactive',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'translator',
                                        3 => 'mautic.campaign.scheduler',
                                        4 => 'mautic.campaign.helper.inactivity',
                                        5 => 'mautic.campaign.event_executioner',
                                    ],
                                ],
                                'mautic.campaign.helper.decision' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\DecisionHelper',
                                    'arguments' => [
                                        0 => 'mautic.campaign.repository.lead',
                                    ],
                                ],
                                'mautic.campaign.helper.inactivity' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\InactiveHelper',
                                    'arguments' => [
                                        0 => 'mautic.campaign.scheduler',
                                        1 => 'mautic.campaign.contact_finder.inactive',
                                        2 => 'mautic.campaign.repository.lead_event_log',
                                        3 => 'mautic.campaign.repository.event',
                                        4 => 'monolog.logger.mautic',
                                        5 => 'mautic.campaign.helper.decision',
                                    ],
                                ],
                                'mautic.campaign.helper.removed_contact_tracker' => [
                                    'class' => 'Mautic\\CampaignBundle\\Helper\\RemovedContactTracker',
                                ],
                                'mautic.campaign.helper.notification' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Helper\\NotificationHelper',
                                    'arguments' => [
                                        0 => 'mautic.user.model.user',
                                        1 => 'mautic.core.model.notification',
                                        2 => 'translator',
                                        3 => 'router',
                                        4 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.campaign.legacy_event_dispatcher' => [
                                    'class' => 'Mautic\\CampaignBundle\\Executioner\\Dispatcher\\LegacyEventDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.campaign.scheduler',
                                        2 => 'monolog.logger.mautic',
                                        3 => 'mautic.campaign.helper.notification',
                                        4 => 'mautic.factory',
                                        5 => 'mautic.tracker.contact',
                                    ],
                                ],
                            ],
                            'membership' => [
                                'mautic.campaign.membership.adder' => [
                                    'class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Adder',
                                    'arguments' => [
                                        0 => 'mautic.campaign.repository.lead',
                                        1 => 'mautic.campaign.repository.lead_event_log',
                                    ],
                                ],
                                'mautic.campaign.membership.remover' => [
                                    'class' => 'Mautic\\CampaignBundle\\Membership\\Action\\Remover',
                                    'arguments' => [
                                        0 => 'mautic.campaign.repository.lead',
                                        1 => 'mautic.campaign.repository.lead_event_log',
                                        2 => 'translator',
                                        3 => 'mautic.helper.twig.date',
                                    ],
                                ],
                                'mautic.campaign.membership.event_dispatcher' => [
                                    'class' => 'Mautic\\CampaignBundle\\Membership\\EventDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.campaign.membership.manager' => [
                                    'class' => 'Mautic\\CampaignBundle\\Membership\\MembershipManager',
                                    'arguments' => [
                                        0 => 'mautic.campaign.membership.adder',
                                        1 => 'mautic.campaign.membership.remover',
                                        2 => 'mautic.campaign.membership.event_dispatcher',
                                        3 => 'mautic.campaign.repository.lead',
                                        4 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.campaign.membership.builder' => [
                                    'class' => 'Mautic\\CampaignBundle\\Membership\\MembershipBuilder',
                                    'arguments' => [
                                        0 => 'mautic.campaign.membership.manager',
                                        1 => 'mautic.campaign.repository.lead',
                                        2 => 'mautic.lead.repository.lead',
                                        3 => 'translator',
                                    ],
                                ],
                            ],
                            'services' => [
                                'mautic.campaign.service.campaign' => [
                                    'class' => 'Mautic\\CampaignBundle\\Service\\Campaign',
                                    'arguments' => [
                                        0 => 'mautic.campaign.repository.campaign',
                                        1 => 'mautic.email.repository.email',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.campaign.fixture.campaign' => [
                                    'class' => 'Mautic\\CampaignBundle\\DataFixtures\\ORM\\CampaignData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'optional' => true,
                                ],
                            ],
                        ],
                        'parameters' => [
                            'campaign_time_wait_on_event_false' => 'PT1H',
                            'campaign_use_summary' => 0,
                            'campaign_by_range' => 0,
                        ],
                    ],
                ],
                'MauticCategoryBundle' => [
                    'isPlugin' => false,
                    'base' => 'Category',
                    'bundle' => 'CategoryBundle',
                    'relative' => 'app/bundles/CategoryBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/CategoryBundle'),
                    'namespace' => 'Mautic\\CategoryBundle',
                    'symfonyBundleName' => 'MauticCategoryBundle',
                    'bundleClass' => 'Mautic\\CategoryBundle\\MauticCategoryBundle',
                    'permissionClasses' => [
                        'Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions' => 'Mautic\\CategoryBundle\\Security\\Permissions\\CategoryPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_category_batch_contact_set' => [
                                    'path' => '/categories/batch/contact/set',
                                    'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::execAction',
                                ],
                                'mautic_category_batch_contact_view' => [
                                    'path' => '/categories/batch/contact/view',
                                    'controller' => 'Mautic\\CategoryBundle\\Controller\\BatchContactController::indexAction',
                                ],
                                'mautic_category_index' => [
                                    'path' => '/categories/{bundle}/{page}',
                                    'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::indexAction',
                                    'defaults' => [
                                        'bundle' => 'category',
                                    ],
                                ],
                                'mautic_category_action' => [
                                    'path' => '/categories/{bundle}/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\CategoryBundle\\Controller\\CategoryController::executeCategoryAction',
                                    'defaults' => [
                                        'bundle' => 'category',
                                    ],
                                ],
                            ],
                            'api' => [
                                'mautic_api_categoriesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'categories',
                                    'path' => '/categories',
                                    'controller' => 'Mautic\\CategoryBundle\\Controller\\Api\\CategoryApiController',
                                ],
                            ],
                        ],
                        'menu' => [
                            'admin' => [
                                'mautic.category.menu.index' => [
                                    'route' => 'mautic_category_index',
                                    'access' => 'category:categories:view',
                                    'iconClass' => 'fa-folder',
                                    'id' => 'mautic_category_index',
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticChannelBundle' => [
                    'isPlugin' => false,
                    'base' => 'Channel',
                    'bundle' => 'ChannelBundle',
                    'relative' => 'app/bundles/ChannelBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/ChannelBundle'),
                    'namespace' => 'Mautic\\ChannelBundle',
                    'symfonyBundleName' => 'MauticChannelBundle',
                    'bundleClass' => 'Mautic\\ChannelBundle\\MauticChannelBundle',
                    'permissionClasses' => [
                        'Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions' => 'Mautic\\ChannelBundle\\Security\\Permissions\\ChannelPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_message_index' => [
                                    'path' => '/messages/{page}',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::indexAction',
                                ],
                                'mautic_message_contacts' => [
                                    'path' => '/messages/contacts/{objectId}/{channel}/{page}',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::contactsAction',
                                ],
                                'mautic_message_action' => [
                                    'path' => '/messages/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\MessageController::executeAction',
                                ],
                                'mautic_channel_batch_contact_set' => [
                                    'path' => '/channels/batch/contact/set',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::setAction',
                                ],
                                'mautic_channel_batch_contact_view' => [
                                    'path' => '/channels/batch/contact/view',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\BatchContactController::indexAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_messagetandard' => [
                                    'standard_entity' => true,
                                    'name' => 'messages',
                                    'path' => '/messages',
                                    'controller' => 'Mautic\\ChannelBundle\\Controller\\Api\\MessageApiController',
                                ],
                            ],
                            'public' => [

                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.channel.messages' => [
                                    'route' => 'mautic_message_index',
                                    'access' => [
                                        0 => 'channel:messages:viewown',
                                        1 => 'channel:messages:viewother',
                                    ],
                                    'parent' => 'mautic.core.channels',
                                    'priority' => 110,
                                ],
                            ],
                            'admin' => [

                            ],
                            'profile' => [

                            ],
                            'extra' => [

                            ],
                        ],
                        'categories' => [
                            'messages' => NULL,
                        ],
                        'services' => [
                            'helpers' => [
                                'mautic.channel.helper.channel_list' => [
                                    'class' => 'Mautic\\ChannelBundle\\Helper\\ChannelListHelper',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'translator',
                                    ],
                                    'alias' => 'channel',
                                ],
                            ],
                            'repositories' => [
                                'mautic.channel.repository.message_queue' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\ChannelBundle\\Entity\\MessageQueue',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [

                        ],
                    ],
                ],
                'MauticConfigBundle' => [
                    'isPlugin' => false,
                    'base' => 'Config',
                    'bundle' => 'ConfigBundle',
                    'relative' => 'app/bundles/ConfigBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/ConfigBundle'),
                    'namespace' => 'Mautic\\ConfigBundle',
                    'symfonyBundleName' => 'MauticConfigBundle',
                    'bundleClass' => 'Mautic\\ConfigBundle\\MauticConfigBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_config_action' => [
                                    'path' => '/config/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\ConfigBundle\\Controller\\ConfigController::executeAction',
                                ],
                                'mautic_sysinfo_index' => [
                                    'path' => '/sysinfo',
                                    'controller' => 'Mautic\\ConfigBundle\\Controller\\SysinfoController::indexAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'admin' => [
                                'mautic.config.menu.index' => [
                                    'route' => 'mautic_config_action',
                                    'routeParameters' => [
                                        'objectAction' => 'edit',
                                    ],
                                    'iconClass' => 'fa-cogs',
                                    'id' => 'mautic_config_index',
                                    'access' => 'admin',
                                ],
                                'mautic.sysinfo.menu.index' => [
                                    'route' => 'mautic_sysinfo_index',
                                    'iconClass' => 'fa-life-ring',
                                    'id' => 'mautic_sysinfo_index',
                                    'access' => 'admin',
                                    'checks' => [
                                        'parameters' => [
                                            'sysinfo_disabled' => false,
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'config_allowed_parameters' => [
                                0 => 'kernel.project_dir',
                                1 => 'kernel.logs_dir',
                            ],
                        ],
                    ],
                ],
                'MauticDashboardBundle' => [
                    'isPlugin' => false,
                    'base' => 'Dashboard',
                    'bundle' => 'DashboardBundle',
                    'relative' => 'app/bundles/DashboardBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/DashboardBundle'),
                    'namespace' => 'Mautic\\DashboardBundle',
                    'symfonyBundleName' => 'MauticDashboardBundle',
                    'bundleClass' => 'Mautic\\DashboardBundle\\MauticDashboardBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_dashboard_index' => [
                                    'path' => '/dashboard',
                                    'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::indexAction',
                                ],
                                'mautic_dashboard_widget' => [
                                    'path' => '/dashboard/widget/{widgetId}',
                                    'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::widgetAction',
                                ],
                                'mautic_dashboard_action' => [
                                    'path' => '/dashboard/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\DashboardBundle\\Controller\\DashboardController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_widget_types' => [
                                    'path' => '/data',
                                    'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getTypesAction',
                                ],
                                'mautic_widget_data' => [
                                    'path' => '/data/{type}',
                                    'controller' => 'Mautic\\DashboardBundle\\Controller\\Api\\WidgetApiController::getDataAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'priority' => 100,
                                'items' => [
                                    'mautic.dashboard.menu.index' => [
                                        'route' => 'mautic_dashboard_index',
                                        'iconClass' => 'fa-th-large',
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'other' => [
                                'mautic.dashboard.widget' => [
                                    'class' => 'Mautic\\DashboardBundle\\Dashboard\\Widget',
                                    'arguments' => [
                                        0 => 'mautic.dashboard.model.dashboard',
                                        1 => 'mautic.helper.user',
                                        2 => 'session',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'dashboard_import_dir' => '%kernel.project_dir%/media/dashboards',
                            'dashboard_import_user_dir' => NULL,
                        ],
                    ],
                ],
                'MauticDynamicContentBundle' => [
                    'isPlugin' => false,
                    'base' => 'DynamicContent',
                    'bundle' => 'DynamicContentBundle',
                    'relative' => 'app/bundles/DynamicContentBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/DynamicContentBundle'),
                    'namespace' => 'Mautic\\DynamicContentBundle',
                    'symfonyBundleName' => 'MauticDynamicContentBundle',
                    'bundleClass' => 'Mautic\\DynamicContentBundle\\MauticDynamicContentBundle',
                    'permissionClasses' => [
                        'Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions' => 'Mautic\\DynamicContentBundle\\Security\\Permissions\\DynamicContentPermissions',
                    ],
                    'config' => [
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.dynamicContent.dynamicContent' => [
                                        'route' => 'mautic_dynamicContent_index',
                                        'access' => [
                                            0 => 'dynamiccontent:dynamiccontents:viewown',
                                            1 => 'dynamiccontent:dynamiccontents:viewother',
                                        ],
                                        'parent' => 'mautic.core.components',
                                        'priority' => 90,
                                    ],
                                ],
                            ],
                        ],
                        'routes' => [
                            'main' => [
                                'mautic_dynamicContent_index' => [
                                    'path' => '/dwc/{page}',
                                    'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::indexAction',
                                ],
                                'mautic_dynamicContent_action' => [
                                    'path' => '/dwc/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentController::executeAction',
                                ],
                            ],
                            'public' => [
                                'mautic_api_dynamicContent_index' => [
                                    'path' => '/dwc',
                                    'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::getAction',
                                ],
                                'mautic_api_dynamicContent_action' => [
                                    'path' => '/dwc/{objectAlias}',
                                    'controller' => 'Mautic\\DynamicContentBundle\\Controller\\DynamicContentApiController::processAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_dynamicContent_standard' => [
                                    'standard_entity' => true,
                                    'name' => 'dynamicContents',
                                    'path' => '/dynamiccontents',
                                    'controller' => 'Mautic\\DynamicContentBundle\\Controller\\Api\\DynamicContentApiController',
                                ],
                            ],
                        ],
                        'services' => [
                            'forms' => [
                                'mautic.form.type.dwc_entry_filters' => [
                                    'class' => 'Mautic\\DynamicContentBundle\\Form\\Type\\DwcEntryFiltersType',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                    'methodCalls' => [
                                        'setConnection' => [
                                            0 => 'database_connection',
                                        ],
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.dynamicContent.repository.stat' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => 'Mautic\\DynamicContentBundle\\Entity\\Stat',
                                ],
                            ],
                            'other' => [
                                'mautic.helper.dynamicContent' => [
                                    'class' => 'Mautic\\DynamicContentBundle\\Helper\\DynamicContentHelper',
                                    'arguments' => [
                                        0 => 'mautic.dynamicContent.model.dynamicContent',
                                        1 => 'mautic.campaign.executioner.realtime',
                                        2 => 'event_dispatcher',
                                        3 => 'mautic.lead.model.lead',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticEmailBundle' => [
                    'isPlugin' => false,
                    'base' => 'Email',
                    'bundle' => 'EmailBundle',
                    'relative' => 'app/bundles/EmailBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/EmailBundle'),
                    'namespace' => 'Mautic\\EmailBundle',
                    'symfonyBundleName' => 'MauticEmailBundle',
                    'bundleClass' => 'Mautic\\EmailBundle\\MauticEmailBundle',
                    'permissionClasses' => [
                        'Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions' => 'Mautic\\EmailBundle\\Security\\Permissions\\EmailPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_email_index' => [
                                    'path' => '/emails/{page}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::indexAction',
                                ],
                                'mautic_email_graph_stats' => [
                                    'path' => '/emails-graph-stats/{objectId}/{isVariant}/{dateFrom}/{dateTo}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\EmailGraphStatsController::viewAction',
                                ],
                                'mautic_email_action' => [
                                    'path' => '/emails/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::executeAction',
                                ],
                                'mautic_email_contacts' => [
                                    'path' => '/emails/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\EmailController::contactsAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_emailstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'emails',
                                    'path' => '/emails',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController',
                                ],
                                'mautic_api_sendemail' => [
                                    'path' => '/emails/{id}/send',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_sendcontactemail' => [
                                    'path' => '/emails/{id}/contact/{leadId}/send',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::sendLeadAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_reply' => [
                                    'path' => '/emails/reply/{trackingHash}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\Api\\EmailApiController::replyAction',
                                    'method' => 'POST',
                                ],
                            ],
                            'public' => [
                                'mautic_plugin_tracker' => [
                                    'path' => '/plugin/{integration}/tracking.gif',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::pluginTrackingGifAction',
                                    'requirements' => [
                                        'integration' => '.+',
                                    ],
                                ],
                                'mautic_email_tracker' => [
                                    'path' => '/email/{idHash}.gif',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::trackingImageAction',
                                ],
                                'mautic_email_webview' => [
                                    'path' => '/email/view/{idHash}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::indexAction',
                                ],
                                'mautic_email_unsubscribe' => [
                                    'path' => '/email/unsubscribe/{idHash}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::unsubscribeAction',
                                ],
                                'mautic_email_resubscribe' => [
                                    'path' => '/email/resubscribe/{idHash}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::resubscribeAction',
                                ],
                                'mautic_mailer_transport_callback' => [
                                    'path' => '/mailer/callback',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::mailerCallbackAction',
                                ],
                                'mautic_email_preview' => [
                                    'path' => '/email/preview/{objectId}',
                                    'controller' => 'Mautic\\EmailBundle\\Controller\\PublicController::previewAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.email.emails' => [
                                        'route' => 'mautic_email_index',
                                        'access' => [
                                            0 => 'email:emails:viewown',
                                            1 => 'email:emails:viewother',
                                        ],
                                        'parent' => 'mautic.core.channels',
                                        'priority' => 100,
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'email' => NULL,
                        ],
                        'services' => [
                            'other' => [
                                'mautic.di.env_processor.mailerdsn' => [
                                    'class' => 'Mautic\\EmailBundle\\DependencyInjection\\EnvProcessor\\MailerDsnEnvVarProcessor',
                                    'tag' => 'container.env_var_processor',
                                ],
                                'mautic.helper.mailbox' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Mailbox',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'mautic.helper.paths',
                                    ],
                                ],
                                'mautic.message.search.contact' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Search\\ContactFinder',
                                    'arguments' => [
                                        0 => 'mautic.email.repository.stat',
                                        1 => 'mautic.lead.repository.lead',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.message.processor.bounce' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce',
                                    'arguments' => [
                                        0 => 'mailer.default_transport',
                                        1 => 'mautic.message.search.contact',
                                        2 => 'mautic.email.repository.stat',
                                        3 => 'mautic.lead.model.lead',
                                        4 => 'translator',
                                        5 => 'monolog.logger.mautic',
                                        6 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.message.processor.unsubscribe' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Unsubscribe',
                                    'arguments' => [
                                        0 => 'mailer.default_transport',
                                        1 => 'mautic.message.search.contact',
                                        2 => 'translator',
                                        3 => 'monolog.logger.mautic',
                                        4 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.message.processor.feedbackloop' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\FeedbackLoop',
                                    'arguments' => [
                                        0 => 'mautic.message.search.contact',
                                        1 => 'translator',
                                        2 => 'monolog.logger.mautic',
                                        3 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.message.processor.replier' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Reply',
                                    'arguments' => [
                                        0 => 'mautic.email.repository.stat',
                                        1 => 'mautic.message.search.contact',
                                        2 => 'mautic.lead.model.lead',
                                        3 => 'event_dispatcher',
                                        4 => 'monolog.logger.mautic',
                                        5 => 'mautic.tracker.contact',
                                        6 => 'mautic.helper.email.address',
                                    ],
                                ],
                                'mautic.helper.mailer' => [
                                    'class' => 'Mautic\\EmailBundle\\Helper\\MailHelper',
                                    'arguments' => [
                                        0 => 'mautic.factory',
                                        1 => 'mailer',
                                    ],
                                ],
                                'mautic.validator.email' => [
                                    'class' => 'Mautic\\EmailBundle\\Helper\\EmailValidator',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.email.fetcher' => [
                                    'class' => 'Mautic\\EmailBundle\\MonitoredEmail\\Fetcher',
                                    'arguments' => [
                                        0 => 'mautic.helper.mailbox',
                                        1 => 'event_dispatcher',
                                        2 => 'translator',
                                    ],
                                ],
                                'mautic.email.helper.stat' => [
                                    'class' => 'Mautic\\EmailBundle\\Stat\\StatHelper',
                                    'arguments' => [
                                        0 => 'mautic.email.repository.stat',
                                    ],
                                ],
                                'mautic.email.helper.request.storage' => [
                                    'class' => 'Mautic\\EmailBundle\\Helper\\RequestStorageHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.cache_storage',
                                    ],
                                ],
                                'mautic.email.helper.stats_collection' => [
                                    'class' => 'Mautic\\EmailBundle\\Helper\\StatsCollectionHelper',
                                    'arguments' => [
                                        0 => 'mautic.email.stats.helper_container',
                                    ],
                                ],
                                'mautic.email.stats.helper_container' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\StatHelperContainer',
                                ],
                                'mautic.email.stats.helper_bounced' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\BouncedHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                                'mautic.email.stats.helper_clicked' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\ClickedHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                                'mautic.email.stats.helper_failed' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\FailedHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                                'mautic.email.stats.helper_opened' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\OpenedHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                                'mautic.email.stats.helper_sent' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\SentHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                                'mautic.email.stats.helper_unsubscribed' => [
                                    'class' => 'Mautic\\EmailBundle\\Stats\\Helper\\UnsubscribedHelper',
                                    'arguments' => [
                                        0 => 'mautic.stats.aggregate.collector',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.generated.columns.provider',
                                        3 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'mautic.email_stat_helper',
                                ],
                            ],
                            'validator' => [
                                'mautic.email.validator.multiple_emails_valid_validator' => [
                                    'class' => 'Mautic\\EmailBundle\\Validator\\MultipleEmailsValidValidator',
                                    'arguments' => [
                                        0 => 'mautic.validator.email',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                ],
                                'mautic.email.validator.email_or_token_list_validator' => [
                                    'class' => 'Mautic\\EmailBundle\\Validator\\EmailOrEmailTokenListValidator',
                                    'arguments' => [
                                        0 => 'mautic.validator.email',
                                        1 => 'mautic.lead.validator.custom_field',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                ],
                            ],
                            'repositories' => [
                                'mautic.email.repository.email' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\EmailBundle\\Entity\\Email',
                                    ],
                                ],
                                'mautic.email.repository.emailReply' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\EmailBundle\\Entity\\EmailReply',
                                    ],
                                ],
                                'mautic.email.repository.stat' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\EmailBundle\\Entity\\Stat',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.email.fixture.email' => [
                                    'class' => 'Mautic\\EmailBundle\\DataFixtures\\ORM\\LoadEmailData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.email.model.email',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'mailer_from_name' => 'Mautic',
                            'mailer_from_email' => 'email@yoursite.com',
                            'mailer_reply_to_email' => NULL,
                            'mailer_return_path' => NULL,
                            'mailer_append_tracking_pixel' => true,
                            'mailer_convert_embed_images' => false,
                            'mailer_custom_headers' => [

                            ],
                            'mailer_dsn' => 'smtp://localhost:25',
                            'unsubscribe_text' => NULL,
                            'webview_text' => NULL,
                            'unsubscribe_message' => NULL,
                            'resubscribe_message' => NULL,
                            'monitored_email' => [
                                'general' => [
                                    'address' => NULL,
                                    'host' => NULL,
                                    'port' => '993',
                                    'encryption' => '/ssl',
                                    'user' => NULL,
                                    'password' => NULL,
                                    'use_attachments' => false,
                                ],
                                'EmailBundle_bounces' => [
                                    'address' => NULL,
                                    'host' => NULL,
                                    'port' => '993',
                                    'encryption' => '/ssl',
                                    'user' => NULL,
                                    'password' => NULL,
                                    'override_settings' => 0,
                                    'folder' => NULL,
                                ],
                                'EmailBundle_unsubscribes' => [
                                    'address' => NULL,
                                    'host' => NULL,
                                    'port' => '993',
                                    'encryption' => '/ssl',
                                    'user' => NULL,
                                    'password' => NULL,
                                    'override_settings' => 0,
                                    'folder' => NULL,
                                ],
                                'EmailBundle_replies' => [
                                    'address' => NULL,
                                    'host' => NULL,
                                    'port' => '993',
                                    'encryption' => '/ssl',
                                    'user' => NULL,
                                    'password' => NULL,
                                    'override_settings' => 0,
                                    'folder' => NULL,
                                ],
                            ],
                            'mailer_is_owner' => false,
                            'default_signature_text' => NULL,
                            'email_frequency_number' => 0,
                            'email_frequency_time' => 'DAY',
                            'show_contact_preferences' => false,
                            'show_contact_frequency' => false,
                            'show_contact_pause_dates' => false,
                            'show_contact_preferred_channels' => false,
                            'show_contact_categories' => false,
                            'show_contact_segments' => false,
                            'disable_trackable_urls' => false,
                            'theme_email_default' => 'blank',
                            'mailer_memory_msg_limit' => 100,
                            'minify_email_html' => false,
                        ],
                    ],
                ],
                'MauticFormBundle' => [
                    'isPlugin' => false,
                    'base' => 'Form',
                    'bundle' => 'FormBundle',
                    'relative' => 'app/bundles/FormBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/FormBundle'),
                    'namespace' => 'Mautic\\FormBundle',
                    'symfonyBundleName' => 'MauticFormBundle',
                    'bundleClass' => 'Mautic\\FormBundle\\MauticFormBundle',
                    'permissionClasses' => [
                        'Mautic\\FormBundle\\Security\\Permissions\\FormPermissions' => 'Mautic\\FormBundle\\Security\\Permissions\\FormPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_formaction_action' => [
                                    'path' => '/forms/action/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\ActionController::executeAction',
                                ],
                                'mautic_formfield_action' => [
                                    'path' => '/forms/field/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\FieldController::executeAction',
                                ],
                                'mautic_form_index' => [
                                    'path' => '/forms/{page}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\FormController::indexAction',
                                ],
                                'mautic_form_results' => [
                                    'path' => '/forms/results/{objectId}/{page}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::indexAction',
                                ],
                                'mautic_form_export' => [
                                    'path' => '/forms/results/{objectId}/export/{format}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::exportAction',
                                    'defaults' => [
                                        'format' => 'csv',
                                    ],
                                ],
                                'mautic_form_results_action' => [
                                    'path' => '/forms/results/{formId}/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::executeAction',
                                    'defaults' => [
                                        'objectId' => 0,
                                    ],
                                ],
                                'mautic_form_action' => [
                                    'path' => '/forms/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\FormController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_formstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'forms',
                                    'path' => '/forms',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController',
                                ],
                                'mautic_api_formresults' => [
                                    'path' => '/forms/{formId}/submissions',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesAction',
                                ],
                                'mautic_api_formresult' => [
                                    'path' => '/forms/{formId}/submissions/{submissionId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntityAction',
                                ],
                                'mautic_api_contactformresults' => [
                                    'path' => '/forms/{formId}/submissions/contact/{contactId}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\SubmissionApiController::getEntitiesForContactAction',
                                ],
                                'mautic_api_formdeletefields' => [
                                    'path' => '/forms/{formId}/fields/delete',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteFieldsAction',
                                    'method' => 'DELETE',
                                ],
                                'mautic_api_formdeleteactions' => [
                                    'path' => '/forms/{formId}/actions/delete',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\Api\\FormApiController::deleteActionsAction',
                                    'method' => 'DELETE',
                                ],
                            ],
                            'public' => [
                                'mautic_form_file_download' => [
                                    'path' => '/forms/results/file/{submissionId}/{field}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\ResultController::downloadFileAction',
                                ],
                                'mautic_form_postresults' => [
                                    'path' => '/form/submit',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::submitAction',
                                ],
                                'mautic_form_generateform' => [
                                    'path' => '/form/generate.js',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::generateAction',
                                ],
                                'mautic_form_postmessage' => [
                                    'path' => '/form/message',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::messageAction',
                                ],
                                'mautic_form_preview' => [
                                    'path' => '/form/{id}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::previewAction',
                                    'defaults' => [
                                        'id' => '0',
                                    ],
                                ],
                                'mautic_form_embed' => [
                                    'path' => '/form/embed/{id}',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\PublicController::embedAction',
                                ],
                                'mautic_form_postresults_ajax' => [
                                    'path' => '/form/submit/ajax',
                                    'controller' => 'Mautic\\FormBundle\\Controller\\AjaxController::submitAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.form.forms' => [
                                        'route' => 'mautic_form_index',
                                        'access' => [
                                            0 => 'form:forms:viewown',
                                            1 => 'form:forms:viewother',
                                        ],
                                        'parent' => 'mautic.core.components',
                                        'priority' => 200,
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'form' => NULL,
                        ],
                        'services' => [
                            'forms' => [
                                'mautic.form.type.field' => [
                                    'class' => 'Mautic\\FormBundle\\Form\\Type\\FieldType',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.form.collector.object',
                                        2 => 'mautic.form.collector.field',
                                        3 => 'mautic.form.collector.already.mapped.field',
                                    ],
                                    'methodCalls' => [
                                        'setFieldModel' => [
                                            0 => 'mautic.form.model.field',
                                        ],
                                        'setFormModel' => [
                                            0 => 'mautic.form.model.form',
                                        ],
                                    ],
                                ],
                                'mautic.form.type.form_submitaction_sendemail' => [
                                    'class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionEmailType',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                    'methodCalls' => [
                                        'setFieldModel' => [
                                            0 => 'mautic.form.model.field',
                                        ],
                                        'setFormModel' => [
                                            0 => 'mautic.form.model.form',
                                        ],
                                    ],
                                ],
                                'mautic.form.type.form_submitaction_repost' => [
                                    'class' => 'Mautic\\FormBundle\\Form\\Type\\SubmitActionRepostType',
                                    'methodCalls' => [
                                        'setFieldModel' => [
                                            0 => 'mautic.form.model.field',
                                        ],
                                        'setFormModel' => [
                                            0 => 'mautic.form.model.form',
                                        ],
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.form.repository.form' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => 'Mautic\\FormBundle\\Entity\\Form',
                                ],
                                'mautic.form.repository.submission' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => 'Mautic\\FormBundle\\Entity\\Submission',
                                ],
                            ],
                            'other' => [
                                'mautic.form.collector.object' => [
                                    'class' => 'Mautic\\FormBundle\\Collector\\ObjectCollector',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.form.collector.field' => [
                                    'class' => 'Mautic\\FormBundle\\Collector\\FieldCollector',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.form.collector.mapped.object' => [
                                    'class' => 'Mautic\\FormBundle\\Collector\\MappedObjectCollector',
                                    'arguments' => [
                                        0 => 'mautic.form.collector.field',
                                    ],
                                ],
                                'mautic.form.collector.already.mapped.field' => [
                                    'class' => 'Mautic\\FormBundle\\Collector\\AlreadyMappedFieldCollector',
                                    'arguments' => [
                                        0 => 'mautic.cache.provider',
                                    ],
                                ],
                                'mautic.helper.form.field_helper' => [
                                    'class' => 'Mautic\\FormBundle\\Helper\\FormFieldHelper',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'validator',
                                    ],
                                ],
                                'mautic.form.helper.form_uploader' => [
                                    'class' => 'Mautic\\FormBundle\\Helper\\FormUploader',
                                    'arguments' => [
                                        0 => 'mautic.helper.file_uploader',
                                        1 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.form.helper.token' => [
                                    'class' => 'Mautic\\FormBundle\\Helper\\TokenHelper',
                                    'arguments' => [
                                        0 => 'mautic.form.model.form',
                                        1 => 'mautic.security',
                                    ],
                                ],
                                'mautic.form.service.field.value.transformer' => [
                                    'class' => 'Mautic\\FormBundle\\Event\\Service\\FieldValueTransformer',
                                    'arguments' => [
                                        0 => 'router',
                                    ],
                                ],
                                'mautic.form.helper.properties.accessor' => [
                                    'class' => 'Mautic\\FormBundle\\Helper\\PropertiesAccessor',
                                    'arguments' => [
                                        0 => 'mautic.form.model.form',
                                    ],
                                ],
                            ],
                            'validator' => [
                                'mautic.form.validator.upload_field_validator' => [
                                    'class' => 'Mautic\\FormBundle\\Validator\\UploadFieldValidator',
                                    'arguments' => [
                                        0 => 'mautic.core.validator.file_upload',
                                    ],
                                ],
                                'mautic.form.validator.constraint.file_extension_constraint_validator' => [
                                    'class' => 'Mautic\\FormBundle\\Validator\\Constraint\\FileExtensionConstraintValidator',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                    'tags' => [
                                        'name' => 'validator.constraint_validator',
                                        'alias' => 'file_extension_constraint_validator',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.form.fixture.form' => [
                                    'class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.form.model.form',
                                        1 => 'mautic.form.model.field',
                                        2 => 'mautic.form.model.action',
                                        3 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.form.fixture.form_result' => [
                                    'class' => 'Mautic\\FormBundle\\DataFixtures\\ORM\\LoadFormResultData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.page.model.page',
                                        1 => 'mautic.form.model.submission',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'form_upload_dir' => '%kernel.project_dir%/media/files/form',
                            'blacklisted_extensions' => [
                                0 => 'php',
                                1 => 'sh',
                            ],
                            'do_not_submit_emails' => [

                            ],
                            'form_results_data_sources' => false,
                            'successful_submit_action' => 'top',
                        ],
                    ],
                ],
                'MauticInstallBundle' => [
                    'isPlugin' => false,
                    'base' => 'Install',
                    'bundle' => 'InstallBundle',
                    'relative' => 'app/bundles/InstallBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/InstallBundle'),
                    'namespace' => 'Mautic\\InstallBundle',
                    'symfonyBundleName' => 'MauticInstallBundle',
                    'bundleClass' => 'Mautic\\InstallBundle\\MauticInstallBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'routes' => [
                            'public' => [
                                'mautic_installer_home' => [
                                    'path' => '/installer',
                                    'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction',
                                ],
                                'mautic_installer_remove_slash' => [
                                    'path' => '/installer/',
                                    'controller' => 'Mautic\\CoreBundle\\Controller\\CommonController::removeTrailingSlashAction',
                                ],
                                'mautic_installer_step' => [
                                    'path' => '/installer/step/{index}',
                                    'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction',
                                ],
                                'mautic_installer_final' => [
                                    'path' => '/installer/final',
                                    'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::finalAction',
                                ],
                                'mautic_installer_catchcall' => [
                                    'path' => '/installer/{noerror}',
                                    'controller' => 'Mautic\\InstallBundle\\Controller\\InstallController::stepAction',
                                    'requirements' => [
                                        'noerror' => '^(?).+',
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'fixtures' => [
                                'mautic.install.fixture.lead_field' => [
                                    'class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LeadFieldData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                ],
                                'mautic.install.fixture.role' => [
                                    'class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\RoleData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                ],
                                'mautic.install.fixture.report_data' => [
                                    'class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\LoadReportData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [

                                    ],
                                ],
                                'mautic.install.fixture.grape_js' => [
                                    'class' => 'Mautic\\InstallBundle\\InstallFixtures\\ORM\\GrapesJsData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [

                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.install.configurator.step.check' => [
                                    'class' => 'Mautic\\InstallBundle\\Configurator\\Step\\CheckStep',
                                    'arguments' => [
                                        0 => 'mautic.configurator',
                                        1 => '%kernel.project_dir%',
                                        2 => 'request_stack',
                                        3 => 'mautic.cipher.openssl',
                                    ],
                                    'tag' => 'mautic.configurator.step',
                                    'tagArguments' => [
                                        'priority' => 0,
                                    ],
                                ],
                                'mautic.install.configurator.step.doctrine' => [
                                    'class' => 'Mautic\\InstallBundle\\Configurator\\Step\\DoctrineStep',
                                    'arguments' => [
                                        0 => 'mautic.configurator',
                                    ],
                                    'tag' => 'mautic.configurator.step',
                                    'tagArguments' => [
                                        'priority' => 1,
                                    ],
                                ],
                                'mautic.install.configurator.step.user' => [
                                    'class' => 'Mautic\\InstallBundle\\Configurator\\Step\\UserStep',
                                    'tag' => 'mautic.configurator.step',
                                    'tagArguments' => [
                                        'priority' => 2,
                                    ],
                                ],
                                'mautic.install.service' => [
                                    'class' => 'Mautic\\InstallBundle\\Install\\InstallService',
                                    'arguments' => [
                                        0 => 'mautic.configurator',
                                        1 => 'mautic.helper.cache',
                                        2 => 'mautic.helper.paths',
                                        3 => 'doctrine.orm.entity_manager',
                                        4 => 'translator',
                                        5 => 'kernel',
                                        6 => 'validator',
                                        7 => 'security.password_hasher',
                                        8 => 'mautic.doctrine.loader.mautic_fixtures_loader',
                                    ],
                                ],
                                'mautic.install.leadcolumns' => [
                                    'class' => 'Mautic\\InstallBundle\\EventListener\\DoctrineEventSubscriber',
                                    'tag' => 'doctrine.event_subscriber',
                                    'arguments' => [

                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'IntegrationsBundle' => [
                    'isPlugin' => false,
                    'base' => 'Integrations',
                    'bundle' => 'IntegrationsBundle',
                    'relative' => 'app/bundles/IntegrationsBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/IntegrationsBundle'),
                    'namespace' => 'Mautic\\IntegrationsBundle',
                    'symfonyBundleName' => 'IntegrationsBundle',
                    'bundleClass' => 'Mautic\\IntegrationsBundle\\IntegrationsBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Integrations',
                        'description' => 'Adds support for plugin integrations',
                        'author' => 'Mautic, Inc.',
                        'routes' => [
                            'main' => [
                                'mautic_integration_config' => [
                                    'path' => '/integration/{integration}/config',
                                    'controller' => 'Mautic\\IntegrationsBundle\\Controller\\ConfigController::editAction',
                                ],
                                'mautic_integration_config_field_pagination' => [
                                    'path' => '/integration/{integration}/config/{object}/{page}',
                                    'controller' => 'Mautic\\IntegrationsBundle\\Controller\\FieldPaginationController::paginateAction',
                                    'defaults' => [
                                        'page' => 1,
                                    ],
                                ],
                                'mautic_integration_config_field_update' => [
                                    'path' => '/integration/{integration}/config/{object}/field/{field}',
                                    'controller' => 'Mautic\\IntegrationsBundle\\Controller\\UpdateFieldController::updateAction',
                                ],
                            ],
                            'public' => [
                                'mautic_integration_public_callback' => [
                                    'path' => '/integration/{integration}/callback',
                                    'controller' => 'Mautic\\IntegrationsBundle\\Controller\\AuthController::callbackAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'events' => [
                                'mautic.integrations.subscriber.controller' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\EventListener\\ControllerSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                        1 => 'controller_resolver',
                                    ],
                                ],
                            ],
                            'helpers' => [
                                'mautic.integrations.helper.variable_expresser' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\VariableExpresser\\VariableExpresserHelper',
                                ],
                                'mautic.integrations.helper' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.plugin.integrations.repository.integration',
                                        1 => 'mautic.integrations.service.encryption',
                                        2 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.helper.auth_integrations' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\AuthIntegrationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                    ],
                                ],
                                'mautic.integrations.helper.sync_integrations' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\SyncIntegrationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                        1 => 'mautic.integrations.internal.object_provider',
                                    ],
                                ],
                                'mautic.integrations.helper.config_integrations' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\ConfigIntegrationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                    ],
                                ],
                                'mautic.integrations.helper.builder_integrations' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\BuilderIntegrationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                    ],
                                ],
                                'mautic.integrations.helper.field_validator' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\FieldValidationHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
                                        1 => 'translator',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.integrations.service.encryption' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Facade\\EncryptionService',
                                    'arguments' => [
                                        0 => 'mautic.helper.encryption',
                                    ],
                                ],
                                'mautic.integrations.internal.object_provider' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.helper.owner_provider' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\OwnerProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.integrations.internal.object_provider',
                                    ],
                                ],
                                'mautic.integrations.auth_provider.api_key' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory',
                                ],
                                'mautic.integrations.auth_provider.basic_auth' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\HttpFactory',
                                ],
                                'mautic.integrations.auth_provider.oauth1atwolegged' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth1aTwoLegged\\HttpFactory',
                                ],
                                'mautic.integrations.auth_provider.oauth2twolegged' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory',
                                ],
                                'mautic.integrations.auth_provider.oauth2threelegged' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\HttpFactory',
                                ],
                                'mautic.integrations.auth_provider.token_persistence_factory' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                    ],
                                ],
                                'mautic.integrations.token.parser' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Helper\\TokenParser',
                                ],
                            ],
                            'repositories' => [
                                'mautic.integrations.repository.field_change' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\IntegrationsBundle\\Entity\\FieldChange',
                                    ],
                                ],
                                'mautic.integrations.repository.object_mapping' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\IntegrationsBundle\\Entity\\ObjectMapping',
                                    ],
                                ],
                                'mautic.plugin.integrations.repository.integration' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PluginBundle\\Entity\\Integration',
                                    ],
                                ],
                            ],
                            'sync' => [
                                'mautic.sync.logger' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Logger\\DebugLogger',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.integrations.helper.sync_judge' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncJudge\\SyncJudge',
                                ],
                                'mautic.integrations.helper.contact_object' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\ContactObjectHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead',
                                        1 => 'mautic.lead.repository.lead',
                                        2 => 'doctrine.dbal.default_connection',
                                        3 => 'mautic.lead.model.field',
                                        4 => 'mautic.lead.model.dnc',
                                        5 => 'mautic.lead.model.company',
                                    ],
                                ],
                                'mautic.integrations.helper.company_object' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ObjectHelper\\CompanyObjectHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.company',
                                        1 => 'mautic.lead.repository.company',
                                        2 => 'doctrine.dbal.default_connection',
                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic.order_executioner' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\OrderExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper.sync_mapping',
                                        1 => 'event_dispatcher',
                                        2 => 'mautic.integrations.internal.object_provider',
                                        3 => 'mautic.integrations.internal.reference_resolver',
                                        4 => 'mautic.integrations.internal.field_validator',
                                    ],
                                ],
                                'mautic.integrations.internal.field_validator' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\FieldValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.field',
                                        1 => 'mautic.integrations.sync.notification.bulk_notification',
                                    ],
                                ],
                                'mautic.integrations.internal.reference_resolver' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\Executioner\\ReferenceResolver',
                                    'arguments' => [
                                        0 => 'doctrine.dbal.default_connection',
                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic.field_helper' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Helper\\FieldHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.integrations.helper.variable_expresser',
                                        2 => 'mautic.channel.helper.channel_list',
                                        3 => 'translator',
                                        4 => 'event_dispatcher',
                                        5 => 'mautic.integrations.internal.object_provider',
                                    ],
                                ],
                                'mautic.integrations.sync.sync_process.value_helper' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Helper\\ValueHelper',
                                    'arguments' => [

                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic.field_builder' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FieldBuilder',
                                    'arguments' => [
                                        0 => 'router',
                                        1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
                                        2 => 'mautic.integrations.helper.contact_object',
                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\FullObjectReportBuilder',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.data_exchange.mautic.field_builder',
                                        1 => 'mautic.integrations.internal.object_provider',
                                        2 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\Internal\\ReportBuilder\\PartialObjectReportBuilder',
                                    'arguments' => [
                                        0 => 'mautic.integrations.repository.field_change',
                                        1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
                                        2 => 'mautic.integrations.sync.data_exchange.mautic.field_builder',
                                        3 => 'mautic.integrations.internal.object_provider',
                                        4 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.sync.data_exchange.mautic' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncDataExchange\\MauticSyncDataExchange',
                                    'arguments' => [
                                        0 => 'mautic.integrations.repository.field_change',
                                        1 => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
                                        2 => 'mautic.integrations.helper.sync_mapping',
                                        3 => 'mautic.integrations.sync.data_exchange.mautic.full_object_report_builder',
                                        4 => 'mautic.integrations.sync.data_exchange.mautic.partial_object_report_builder',
                                        5 => 'mautic.integrations.sync.data_exchange.mautic.order_executioner',
                                    ],
                                ],
                                'mautic.integrations.sync.integration_process.object_change_generator' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\ObjectChangeGenerator',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.sync_process.value_helper',
                                    ],
                                ],
                                'mautic.integrations.sync.integration_process' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Integration\\IntegrationSyncProcess',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper.sync_date',
                                        1 => 'mautic.integrations.helper.sync_mapping',
                                        2 => 'mautic.integrations.sync.integration_process.object_change_generator',
                                    ],
                                ],
                                'mautic.integrations.sync.internal_process.object_change_generator' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\ObjectChangeGenerator',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper.sync_judge',
                                        1 => 'mautic.integrations.sync.sync_process.value_helper',
                                        2 => 'mautic.integrations.sync.data_exchange.mautic.field_helper',
                                    ],
                                ],
                                'mautic.integrations.sync.internal_process' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncProcess\\Direction\\Internal\\MauticSyncProcess',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper.sync_date',
                                        1 => 'mautic.integrations.sync.internal_process.object_change_generator',
                                    ],
                                ],
                                'mautic.integrations.sync.service' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\SyncService\\SyncService',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.data_exchange.mautic',
                                        1 => 'mautic.integrations.helper.sync_date',
                                        2 => 'mautic.integrations.helper.sync_mapping',
                                        3 => 'mautic.integrations.sync.helper.relations',
                                        4 => 'mautic.integrations.helper.sync_integrations',
                                        5 => 'event_dispatcher',
                                        6 => 'mautic.integrations.sync.notifier',
                                        7 => 'mautic.integrations.sync.integration_process',
                                        8 => 'mautic.integrations.sync.internal_process',
                                    ],
                                    'methodCalls' => [
                                        'initiateDebugLogger' => [
                                            0 => 'mautic.sync.logger',
                                        ],
                                    ],
                                ],
                                'mautic.integrations.helper.sync_date' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\SyncDateHelper',
                                    'arguments' => [
                                        0 => 'doctrine.dbal.default_connection',
                                    ],
                                ],
                                'mautic.integrations.helper.sync_mapping' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\MappingHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.integrations.repository.object_mapping',
                                        2 => 'mautic.integrations.internal.object_provider',
                                        3 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.sync.helper.relations' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Helper\\RelationsHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper.sync_mapping',
                                    ],
                                ],
                                'mautic.integrations.sync.notifier' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Notifier',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.handler_container',
                                        1 => 'mautic.integrations.helper.sync_integrations',
                                        2 => 'mautic.integrations.helper.config_integrations',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.writer' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Writer',
                                    'arguments' => [
                                        0 => 'mautic.core.model.notification',
                                        1 => 'mautic.core.model.auditlog',
                                        2 => 'doctrine.orm.entity_manager',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.handler_container' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\HandlerContainer',
                                ],
                                'mautic.integrations.sync.notification.handler_company' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\CompanyNotificationHandler',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.writer',
                                        1 => 'mautic.integrations.sync.notification.helper_user_notification',
                                        2 => 'mautic.integrations.sync.notification.helper_company',
                                    ],
                                    'tag' => 'mautic.sync.notification_handler',
                                ],
                                'mautic.integrations.sync.notification.handler_contact' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Handler\\ContactNotificationHandler',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.writer',
                                        1 => 'mautic.lead.repository.lead_event_log',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'mautic.integrations.sync.notification.helper_user_summary_notification',
                                    ],
                                    'tag' => 'mautic.sync.notification_handler',
                                ],
                                'mautic.integrations.sync.notification.helper_company' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\CompanyHelper',
                                    'arguments' => [
                                        0 => 'doctrine.dbal.default_connection',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.helper_user' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserHelper',
                                    'arguments' => [
                                        0 => 'doctrine.dbal.default_connection',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.helper_route' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\RouteHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.internal.object_provider',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.helper_user_notification' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.writer',
                                        1 => 'mautic.integrations.sync.notification.user_notification_builder',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.user_notification_builder' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserNotificationBuilder',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.helper_user',
                                        1 => 'mautic.integrations.sync.notification.helper.owner_provider',
                                        2 => 'mautic.integrations.sync.notification.helper_route',
                                        3 => 'translator',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.bulk_notification' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\BulkNotification',
                                    'arguments' => [
                                        0 => 'mautic.core.service.bulk_notification',
                                        1 => 'mautic.integrations.sync.notification.user_notification_builder',
                                        2 => 'doctrine.orm.entity_manager',
                                    ],
                                ],
                                'mautic.integrations.sync.notification.helper_user_summary_notification' => [
                                    'class' => 'Mautic\\IntegrationsBundle\\Sync\\Notification\\Helper\\UserSummaryNotificationHelper',
                                    'arguments' => [
                                        0 => 'mautic.integrations.sync.notification.writer',
                                        1 => 'mautic.integrations.sync.notification.helper_user',
                                        2 => 'mautic.integrations.sync.notification.helper.owner_provider',
                                        3 => 'mautic.integrations.sync.notification.helper_route',
                                        4 => 'translator',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticLeadBundle' => [
                    'isPlugin' => false,
                    'base' => 'Lead',
                    'bundle' => 'LeadBundle',
                    'relative' => 'app/bundles/LeadBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/LeadBundle'),
                    'namespace' => 'Mautic\\LeadBundle',
                    'symfonyBundleName' => 'MauticLeadBundle',
                    'bundleClass' => 'Mautic\\LeadBundle\\MauticLeadBundle',
                    'permissionClasses' => [
                        'Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions' => 'Mautic\\LeadBundle\\Security\\Permissions\\LeadPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_plugin_timeline_index' => [
                                    'path' => '/plugin/{integration}/timeline/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginIndexAction',
                                    'requirements' => [
                                        'integration' => '.+',
                                    ],
                                ],
                                'mautic_plugin_timeline_view' => [
                                    'path' => '/plugin/{integration}/timeline/view/{leadId}/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::pluginViewAction',
                                    'requirements' => [
                                        'integration' => '.+',
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_segment_batch_contact_set' => [
                                    'path' => '/segments/batch/contact/set',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::setAction',
                                ],
                                'mautic_segment_batch_contact_view' => [
                                    'path' => '/segments/batch/contact/view',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\BatchSegmentController::indexAction',
                                ],
                                'mautic_segment_index' => [
                                    'path' => '/segments/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::indexAction',
                                ],
                                'mautic_segment_action' => [
                                    'path' => '/segments/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::executeAction',
                                ],
                                'mautic_contactfield_index' => [
                                    'path' => '/contacts/fields/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::indexAction',
                                ],
                                'mautic_contactfield_action' => [
                                    'path' => '/contacts/fields/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\FieldController::executeAction',
                                ],
                                'mautic_contact_index' => [
                                    'path' => '/contacts/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::indexAction',
                                ],
                                'mautic_contactnote_index' => [
                                    'path' => '/contacts/notes/{leadId}/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::indexAction',
                                    'defaults' => [
                                        'leadId' => 0,
                                    ],
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contactnote_action' => [
                                    'path' => '/contacts/notes/{leadId}/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\NoteController::executeNoteAction',
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contacttimeline_action' => [
                                    'path' => '/contacts/timeline/{leadId}/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::indexAction',
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contact_timeline_export_action' => [
                                    'path' => '/contacts/timeline/batchExport/{leadId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\TimelineController::batchExportAction',
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contact_auditlog_action' => [
                                    'path' => '/contacts/auditlog/{leadId}/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::indexAction',
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contact_auditlog_export_action' => [
                                    'path' => '/contacts/auditlog/batchExport/{leadId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\AuditlogController::batchExportAction',
                                    'requirements' => [
                                        'leadId' => '\\d+',
                                    ],
                                ],
                                'mautic_contact_export_action' => [
                                    'path' => '/contacts/contact/export/{contactId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactExportAction',
                                    'requirements' => [
                                        'contactId' => '\\d+',
                                    ],
                                ],
                                'mautic_import_index' => [
                                    'path' => '/{object}/import/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::indexAction',
                                ],
                                'mautic_import_action' => [
                                    'path' => '/{object}/import/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\ImportController::executeAction',
                                ],
                                'mautic_contact_action' => [
                                    'path' => '/contacts/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::executeAction',
                                ],
                                'mautic_company_index' => [
                                    'path' => '/companies/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::indexAction',
                                ],
                                'mautic_company_contacts_list' => [
                                    'path' => '/company/{objectId}/contacts/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::contactsListAction',
                                    'requirements' => [
                                        'objectId' => '\\d+',
                                    ],
                                ],
                                'mautic_company_action' => [
                                    'path' => '/companies/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::executeAction',
                                ],
                                'mautic_company_export_action' => [
                                    'path' => '/companies/company/export/{companyId}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\CompanyController::companyExportAction',
                                    'requirements' => [
                                        'companyId' => '\\d+',
                                    ],
                                ],
                                'mautic_segment_contacts' => [
                                    'path' => '/segment/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\ListController::contactsAction',
                                ],
                                'mautic_contact_stats' => [
                                    'path' => '/contacts/view/{objectId}/stats',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::contactStatsAction',
                                ],
                                'mautic_contact_export_download' => [
                                    'path' => '/contacts/export/download/{fileName}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\LeadController::downloadExportAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_contactsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'contacts',
                                    'path' => '/contacts',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController',
                                ],
                                'mautic_api_dncaddcontact' => [
                                    'path' => '/contacts/{id}/dnc/{channel}/add',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addDncAction',
                                    'method' => 'POST',
                                    'defaults' => [
                                        'channel' => 'email',
                                    ],
                                ],
                                'mautic_api_dncremovecontact' => [
                                    'path' => '/contacts/{id}/dnc/{channel}/remove',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeDncAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_getcontactevents' => [
                                    'path' => '/contacts/{id}/activity',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getActivityAction',
                                ],
                                'mautic_api_getcontactsevents' => [
                                    'path' => '/contacts/activity',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getAllActivityAction',
                                ],
                                'mautic_api_getcontactnotes' => [
                                    'path' => '/contacts/{id}/notes',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getNotesAction',
                                ],
                                'mautic_api_getcontactdevices' => [
                                    'path' => '/contacts/{id}/devices',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getDevicesAction',
                                ],
                                'mautic_api_getcontactcampaigns' => [
                                    'path' => '/contacts/{id}/campaigns',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCampaignsAction',
                                ],
                                'mautic_api_getcontactssegments' => [
                                    'path' => '/contacts/{id}/segments',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getListsAction',
                                ],
                                'mautic_api_getcontactscompanies' => [
                                    'path' => '/contacts/{id}/companies',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getCompaniesAction',
                                ],
                                'mautic_api_utmcreateevent' => [
                                    'path' => '/contacts/{id}/utm/add',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::addUtmTagsAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_utmremoveevent' => [
                                    'path' => '/contacts/{id}/utm/{utmid}/remove',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::removeUtmTagsAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_getcontactowners' => [
                                    'path' => '/contacts/list/owners',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getOwnersAction',
                                ],
                                'mautic_api_getcontactfields' => [
                                    'path' => '/contacts/list/fields',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\LeadApiController::getFieldsAction',
                                ],
                                'mautic_api_getcontactsegments' => [
                                    'path' => '/contacts/list/segments',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::getListsAction',
                                ],
                                'mautic_api_segmentsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'lists',
                                    'path' => '/segments',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController',
                                ],
                                'mautic_api_segmentaddcontact' => [
                                    'path' => '/segments/{id}/contact/{leadId}/add',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_segmentaddcontacts' => [
                                    'path' => '/segments/{id}/contacts/add',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::addLeadsAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_segmentremovecontact' => [
                                    'path' => '/segments/{id}/contact/{leadId}/remove',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\ListApiController::removeLeadAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_companiesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'companies',
                                    'path' => '/companies',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController',
                                ],
                                'mautic_api_companyaddcontact' => [
                                    'path' => '/companies/{companyId}/contact/{contactId}/add',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::addContactAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_companyremovecontact' => [
                                    'path' => '/companies/{companyId}/contact/{contactId}/remove',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\CompanyApiController::removeContactAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_fieldsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'fields',
                                    'path' => '/fields/{object}',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\FieldApiController',
                                    'defaults' => [
                                        'object' => 'contact',
                                    ],
                                ],
                                'mautic_api_notesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'notes',
                                    'path' => '/notes',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\NoteApiController',
                                ],
                                'mautic_api_devicesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'devices',
                                    'path' => '/devices',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\DeviceApiController',
                                ],
                                'mautic_api_tagsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'tags',
                                    'path' => '/tags',
                                    'controller' => 'Mautic\\LeadBundle\\Controller\\Api\\TagApiController',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.lead.leads' => [
                                        'iconClass' => 'fa-user',
                                        'access' => [
                                            0 => 'lead:leads:viewown',
                                            1 => 'lead:leads:viewother',
                                        ],
                                        'route' => 'mautic_contact_index',
                                        'priority' => 80,
                                    ],
                                    'mautic.companies.menu.index' => [
                                        'route' => 'mautic_company_index',
                                        'iconClass' => 'fa-building-o',
                                        'access' => [
                                            0 => 'lead:leads:viewother',
                                        ],
                                        'priority' => 75,
                                    ],
                                    'mautic.lead.list.menu.index' => [
                                        'iconClass' => 'fa-pie-chart',
                                        'access' => [
                                            0 => 'lead:leads:viewown',
                                            1 => 'lead:leads:viewother',
                                        ],
                                        'route' => 'mautic_segment_index',
                                        'priority' => 70,
                                    ],
                                ],
                            ],
                            'admin' => [
                                'priority' => 50,
                                'items' => [
                                    'mautic.lead.field.menu.index' => [
                                        'id' => 'mautic_lead_field',
                                        'iconClass' => 'fa-list',
                                        'route' => 'mautic_contactfield_index',
                                        'access' => 'lead:fields:full',
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'segment' => NULL,
                        ],
                        'services' => [
                            'events' => [
                                'mautic.lead.serializer.subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\SerializerSubscriber',
                                    'arguments' => [
                                        0 => 'request_stack',
                                    ],
                                    'tag' => 'jms_serializer.event_subscriber',
                                    'tagArguments' => [
                                        'event' => 'serializer.post_serialize',
                                    ],
                                ],
                                'mautic.lead.export_scheduled_audit_log_subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerAuditLogSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.core.model.auditlog',
                                        1 => 'mautic.helper.ip_lookup',
                                    ],
                                ],
                                'mautic.lead.export_scheduled_logger_subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerLoggerSubscriber',
                                    'arguments' => [
                                        0 => 'logger',
                                    ],
                                ],
                                'mautic.lead.export_scheduled_notification_subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\ContactExportSchedulerNotificationSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.core.model.notification',
                                        1 => 'translator',
                                    ],
                                ],
                                'mautic.lead.contact_scheduled_export.subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\ContactScheduledExportSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.export_scheduler',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.lead.doctrine.subscriber' => [
                                    'class' => 'Mautic\\LeadBundle\\EventListener\\DoctrineSubscriber',
                                    'tag' => 'doctrine.event_subscriber',
                                    'arguments' => [
                                        0 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.validator.leadlistaccess' => [
                                    'class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\LeadListAccessValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                    'alias' => 'leadlist_access',
                                ],
                                'mautic.validator.emailaddress' => [
                                    'class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\EmailAddressValidator',
                                    'arguments' => [
                                        0 => 'mautic.validator.email',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                ],
                                'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator' => [
                                    'class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\FieldAliasKeywordValidator',
                                    'tag' => 'validator.constraint_validator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'mautic.helper.field.alias',
                                        2 => '@doctrine.orm.entity_manager',
                                        3 => 'translator',
                                        4 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                    ],
                                ],
                                'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator' => [
                                    'class' => 'Mautic\\CoreBundle\\Form\\Validator\\Constraints\\FileEncodingValidator',
                                    'tag' => 'validator.constraint_validator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'mautic.helper.field.alias',
                                    ],
                                ],
                                'mautic.lead.constraint.alias' => [
                                    'class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\UniqueUserAliasValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead_list',
                                        1 => 'mautic.helper.user',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                    'alias' => 'uniqueleadlist',
                                ],
                                'mautic.lead.validator.custom_field' => [
                                    'class' => 'Mautic\\LeadBundle\\Validator\\CustomFieldValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'translator',
                                    ],
                                ],
                                'mautic.lead_list.constraint.in_use' => [
                                    'class' => 'Mautic\\LeadBundle\\Form\\Validator\\Constraints\\SegmentInUseValidator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                    'alias' => 'segment_in_use',
                                ],
                                'mautic.lead.event.dispatcher' => [
                                    'class' => 'Mautic\\LeadBundle\\Helper\\LeadChangeEventDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.merger' => [
                                    'class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactMerger',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead',
                                        1 => 'mautic.lead.repository.merged_records',
                                        2 => 'event_dispatcher',
                                        3 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.lead.deduper' => [
                                    'class' => 'Mautic\\LeadBundle\\Deduplicate\\ContactDeduper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.lead.merger',
                                        2 => 'mautic.lead.repository.lead',
                                    ],
                                ],
                                'mautic.company.deduper' => [
                                    'class' => 'Mautic\\LeadBundle\\Deduplicate\\CompanyDeduper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.lead.repository.company',
                                    ],
                                ],
                                'mautic.lead.helper.primary_company' => [
                                    'class' => 'Mautic\\LeadBundle\\Helper\\PrimaryCompanyHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.company_lead',
                                    ],
                                ],
                                'mautic.lead.helper.contact_request_helper' => [
                                    'class' => 'Mautic\\LeadBundle\\Helper\\ContactRequestHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead',
                                        1 => 'mautic.tracker.contact',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'mautic.helper.ip_lookup',
                                        4 => 'request_stack',
                                        5 => 'monolog.logger.mautic',
                                        6 => 'event_dispatcher',
                                        7 => 'mautic.lead.merger',
                                    ],
                                ],
                                'mautic.lead.validator.length' => [
                                    'class' => 'Mautic\\LeadBundle\\Validator\\Constraints\\LengthValidator',
                                    'tag' => 'validator.constraint_validator',
                                ],
                                'mautic.lead.segment.stat.dependencies' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentDependencies',
                                    'arguments' => [
                                        0 => 'mautic.email.model.email',
                                        1 => 'mautic.campaign.model.campaign',
                                        2 => 'mautic.form.model.action',
                                        3 => 'mautic.lead.model.list',
                                        4 => 'mautic.point.model.triggerevent',
                                        5 => 'mautic.report.model.report',
                                    ],
                                ],
                                'mautic.lead.segment.stat.chart.query.factory' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentChartQueryFactory',
                                    'arguments' => [

                                    ],
                                ],
                                'mautic.lead.segment.stat.campaign.share' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Stat\\SegmentCampaignShare',
                                    'arguments' => [
                                        0 => 'mautic.campaign.model.campaign',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => '@doctrine.orm.entity_manager',
                                    ],
                                ],
                                'mautic.lead.columns.dictionary' => [
                                    'class' => 'Mautic\\LeadBundle\\Services\\ContactColumnsDictionary',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'translator',
                                        2 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_filter_factory' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterFactory',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_schema_cache',
                                        1 => '@service_container',
                                        2 => 'mautic.lead.model.lead_segment_decorator_factory',
                                    ],
                                ],
                                'mautic.tracker.contact' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\ContactTracker',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead',
                                        1 => 'mautic.lead.service.contact_tracking_service',
                                        2 => 'mautic.tracker.device',
                                        3 => 'mautic.security',
                                        4 => 'monolog.logger.mautic',
                                        5 => 'mautic.helper.ip_lookup',
                                        6 => 'request_stack',
                                        7 => 'mautic.helper.core_parameters',
                                        8 => 'event_dispatcher',
                                        9 => 'mautic.lead.model.field',
                                    ],
                                ],
                                'mautic.tracker.device' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\DeviceTracker',
                                    'arguments' => [
                                        0 => 'mautic.lead.service.device_creator_service',
                                        1 => 'mautic.lead.factory.device_detector_factory',
                                        2 => 'mautic.lead.service.device_tracking_service',
                                        3 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.lead.field.custom_field_column' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\CustomFieldColumn',
                                    'arguments' => [
                                        0 => 'mautic.schema.helper.column',
                                        1 => 'mautic.lead.field.schema_definition',
                                        2 => 'monolog.logger.mautic',
                                        3 => 'mautic.lead.field.lead_field_saver',
                                        4 => 'mautic.lead.field.custom_field_index',
                                        5 => 'mautic.lead.field.dispatcher.field_column_dispatcher',
                                        6 => 'translator',
                                    ],
                                ],
                                'mautic.lead.field.custom_field_index' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\CustomFieldIndex',
                                    'arguments' => [
                                        0 => 'mautic.schema.helper.index',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.lead.field.fields_with_unique_identifier',
                                    ],
                                ],
                                'mautic.lead.repository.lead_segment_filter_descriptor' => [
                                    'class' => 'Mautic\\LeadBundle\\Services\\ContactSegmentFilterDictionary',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.service.segment_dependency_tree_factory' => [
                                    'class' => 'Mautic\\LeadBundle\\Services\\SegmentDependencyTreeFactory',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'router',
                                    ],
                                ],
                                'mautic.lead.repository.lead_segment_query_builder' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\ContactSegmentQueryBuilder',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'mautic.lead.model.random_parameter_name',
                                        2 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_service' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentService',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_filter_factory',
                                        1 => 'mautic.lead.repository.lead_segment_query_builder',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_schema_cache' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\TableSchemaColumnsCache',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                    ],
                                ],
                                'mautic.lead.model.relative_date' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\RelativeDate',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_filter_operator' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\ContactSegmentFilterOperator',
                                    'arguments' => [
                                        0 => 'mautic.lead.provider.fillterOperator',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_decorator_factory' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DecoratorFactory',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                        1 => 'mautic.lead.model.lead_segment_decorator_base',
                                        2 => 'mautic.lead.model.lead_segment_decorator_custom_mapped',
                                        3 => 'mautic.lead.model.lead_segment.decorator.date.optionFactory',
                                        4 => 'mautic.lead.model.lead_segment_decorator_company',
                                        5 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_decorator_base' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\BaseDecorator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_filter_operator',
                                        1 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_decorator_custom_mapped' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CustomMappedDecorator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_filter_operator',
                                        1 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_decorator_company' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\CompanyDecorator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_filter_operator',
                                        1 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment_decorator_date' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\DateDecorator',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_filter_operator',
                                        1 => 'mautic.lead.repository.lead_segment_filter_descriptor',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment.decorator.date.optionFactory' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\DateOptionFactory',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead_segment_decorator_date',
                                        1 => 'mautic.lead.model.relative_date',
                                        2 => 'mautic.lead.model.lead_segment.timezoneResolver',
                                    ],
                                ],
                                'mautic.lead.model.lead_segment.timezoneResolver' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Decorator\\Date\\TimezoneResolver',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.lead.provider.fillterOperator' => [
                                    'class' => 'Mautic\\LeadBundle\\Provider\\FilterOperatorProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'translator',
                                    ],
                                ],
                                'mautic.lead.provider.typeOperator' => [
                                    'class' => 'Mautic\\LeadBundle\\Provider\\TypeOperatorProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.lead.provider.fillterOperator',
                                    ],
                                ],
                                'mautic.lead.provider.fieldChoices' => [
                                    'class' => 'Mautic\\LeadBundle\\Provider\\FieldChoicesProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.provider.formAdjustments' => [
                                    'class' => 'Mautic\\LeadBundle\\Provider\\FormAdjustmentsProvider',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.model.random_parameter_name' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\RandomParameterName',
                                ],
                                'mautic.lead.segment.operator_options' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\OperatorOptions',
                                ],
                                'mautic.lead.reportbundle.fields_builder' => [
                                    'class' => 'Mautic\\LeadBundle\\Report\\FieldsBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.lead.model.list',
                                        2 => 'mautic.user.model.user',
                                        3 => 'mautic.lead.model.lead',
                                    ],
                                ],
                                'mautic.lead.factory.device_detector_factory' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\Factory\\DeviceDetectorFactory\\DeviceDetectorFactory',
                                    'arguments' => [
                                        0 => 'mautic.cache.provider',
                                    ],
                                ],
                                'mautic.lead.service.contact_tracking_service' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\Service\\ContactTrackingService\\ContactTrackingService',
                                    'arguments' => [
                                        0 => 'mautic.helper.cookie',
                                        1 => 'mautic.lead.repository.lead_device',
                                        2 => 'mautic.lead.repository.lead',
                                        3 => 'mautic.lead.repository.merged_records',
                                        4 => 'request_stack',
                                    ],
                                ],
                                'mautic.lead.service.device_creator_service' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceCreatorService\\DeviceCreatorService',
                                ],
                                'mautic.lead.service.device_tracking_service' => [
                                    'class' => 'Mautic\\LeadBundle\\Tracker\\Service\\DeviceTrackingService\\DeviceTrackingService',
                                    'arguments' => [
                                        0 => 'mautic.helper.cookie',
                                        1 => 'doctrine.orm.entity_manager',
                                        2 => 'mautic.lead.repository.lead_device',
                                        3 => 'mautic.helper.random',
                                        4 => 'request_stack',
                                        5 => 'mautic.security',
                                    ],
                                ],
                                'mautic.lead.field.schema_definition' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\SchemaDefinition',
                                ],
                                'mautic.lead.field.dispatcher.field_save_dispatcher' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldSaveDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'doctrine.orm.entity_manager',
                                    ],
                                ],
                                'mautic.lead.field.dispatcher.field_column_dispatcher' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.lead.field.settings.background_settings',
                                    ],
                                ],
                                'mautic.lead.field.dispatcher.field_column_background_dispatcher' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\Dispatcher\\FieldColumnBackgroundJobDispatcher',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.field.fields_with_unique_identifier' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\FieldsWithUniqueIdentifier',
                                    'arguments' => [
                                        0 => 'mautic.lead.field.field_list',
                                    ],
                                ],
                                'mautic.lead.field.field_list' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\FieldList',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.field',
                                        1 => 'translator',
                                    ],
                                ],
                                'mautic.lead.field.identifier_fields' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\IdentifierFields',
                                    'arguments' => [
                                        0 => 'mautic.lead.field.fields_with_unique_identifier',
                                        1 => 'mautic.lead.field.field_list',
                                    ],
                                ],
                                'mautic.lead.field.lead_field_saver' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\LeadFieldSaver',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.field',
                                        1 => 'mautic.lead.field.dispatcher.field_save_dispatcher',
                                    ],
                                ],
                                'mautic.lead.field.settings.background_settings' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\Settings\\BackgroundSettings',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.lead.field.settings.background_service' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\BackgroundService',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                        1 => 'mautic.lead.field.custom_field_column',
                                        2 => 'mautic.lead.field.lead_field_saver',
                                        3 => 'mautic.lead.field.dispatcher.field_column_background_dispatcher',
                                        4 => 'mautic.lead.field.notification.custom_field',
                                    ],
                                ],
                                'mautic.lead.field.notification.custom_field' => [
                                    'class' => 'Mautic\\LeadBundle\\Field\\Notification\\CustomFieldNotification',
                                    'arguments' => [
                                        0 => 'mautic.core.model.notification',
                                        1 => 'mautic.user.model.user',
                                        2 => 'translator',
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.lead.repository.company' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\Company',
                                    ],
                                    'methodCalls' => [
                                        'setUniqueIdentifiersOperator' => [
                                            0 => '%mautic.company_unique_identifiers_operator%',
                                        ],
                                    ],
                                ],
                                'mautic.lead.repository.company_lead' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\CompanyLead',
                                    ],
                                ],
                                'mautic.lead.repository.stages_lead_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\StagesChangeLog',
                                    ],
                                ],
                                'mautic.lead.repository.dnc' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\DoNotContact',
                                    ],
                                ],
                                'mautic.lead.repository.lead' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\Lead',
                                    ],
                                    'methodCalls' => [
                                        'setUniqueIdentifiersOperator' => [
                                            0 => '%mautic.contact_unique_identifiers_operator%',
                                        ],
                                        'setListLeadRepository' => [
                                            0 => '@mautic.lead.repository.list_lead',
                                        ],
                                    ],
                                ],
                                'mautic.lead.repository.list_lead' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\ListLead',
                                    ],
                                ],
                                'mautic.lead.repository.frequency_rule' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\FrequencyRule',
                                    ],
                                ],
                                'mautic.lead.repository.lead_event_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\LeadEventLog',
                                    ],
                                ],
                                'mautic.lead.repository.lead_device' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\LeadDevice',
                                    ],
                                ],
                                'mautic.lead.repository.lead_list' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\LeadList',
                                    ],
                                ],
                                'mautic.lead.repository.points_change_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\PointsChangeLog',
                                    ],
                                ],
                                'mautic.lead.repository.merged_records' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\MergeRecord',
                                    ],
                                ],
                                'mautic.lead.repository.field' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\LeadBundle\\Entity\\LeadField',
                                    ],
                                ],
                                'mautic.lead.query.builder.basic' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\BaseFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.foreign.value' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignValueFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.foreign.func' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ForeignFuncFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.special.dnc' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\DoNotContactFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.special.integration' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\IntegrationCampaignFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.special.sessions' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SessionsFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.complex_relation.value' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ComplexRelationValueFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.special.leadlist' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\SegmentReferenceFilterQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'mautic.lead.repository.lead_segment_query_builder',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'mautic.lead.model.lead_segment_filter_factory',
                                        4 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.lead.query.builder.channel_click.value' => [
                                    'class' => 'Mautic\\LeadBundle\\Segment\\Query\\Filter\\ChannelClickQueryBuilder',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.random_parameter_name',
                                        1 => 'event_dispatcher',
                                    ],
                                ],
                            ],
                            'helpers' => [
                                'mautic.helper.twig.avatar' => [
                                    'class' => 'Mautic\\LeadBundle\\Twig\\Helper\\AvatarHelper',
                                    'arguments' => [
                                        0 => 'twig.helper.assets',
                                        1 => 'mautic.helper.paths',
                                        2 => 'mautic.helper.twig.gravatar',
                                        3 => 'mautic.helper.twig.default_avatar',
                                    ],
                                    'alias' => 'lead_avatar',
                                ],
                                'mautic.helper.twig.default_avatar' => [
                                    'class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DefaultAvatarHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.paths',
                                        1 => 'twig.helper.assets',
                                    ],
                                    'alias' => 'default_avatar',
                                ],
                                'mautic.helper.field.alias' => [
                                    'class' => 'Mautic\\LeadBundle\\Helper\\FieldAliasHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.field',
                                    ],
                                ],
                                'mautic.helper.twig.dnc_reason' => [
                                    'class' => 'Mautic\\LeadBundle\\Twig\\Helper\\DncReasonHelper',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                    'alias' => 'lead_dnc_reason',
                                ],
                                'mautic.helper.segment.count.cache' => [
                                    'class' => 'Mautic\\LeadBundle\\Helper\\SegmentCountCacheHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.cache_storage',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.lead.fixture.company' => [
                                    'class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCompanyData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.company',
                                    ],
                                ],
                                'mautic.lead.fixture.contact' => [
                                    'class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.lead.fixture.segment' => [
                                    'class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadLeadListData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                    ],
                                ],
                                'mautic.lead.fixture.category' => [
                                    'class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategoryData',
                                    'tag' => 'doctrine.fixture.orm',
                                ],
                                'mautic.lead.fixture.categorizedleadlists' => [
                                    'class' => 'Mautic\\LeadBundle\\DataFixtures\\ORM\\LoadCategorizedLeadListData',
                                    'tag' => 'doctrine.fixture.orm',
                                ],
                                'mautic.lead.fixture.test.page_hit' => [
                                    'class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadPageHitData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'optional' => true,
                                ],
                                'mautic.lead.fixture.test.segment' => [
                                    'class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadSegmentsData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'mautic.lead.model.lead',
                                    ],
                                    'optional' => true,
                                ],
                                'mautic.lead.fixture.test.click' => [
                                    'class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadClickData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'mautic.lead.model.lead',
                                    ],
                                    'optional' => true,
                                ],
                                'mautic.lead.fixture.test.dnc' => [
                                    'class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadDncData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.list',
                                        1 => 'mautic.lead.model.lead',
                                    ],
                                    'optional' => true,
                                ],
                                'mautic.lead.fixture.test.tag' => [
                                    'class' => 'Mautic\\LeadBundle\\Tests\\DataFixtures\\ORM\\LoadTagData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'optional' => true,
                                ],
                            ],
                        ],
                        'parameters' => [
                            'parallel_import_limit' => 1,
                            'background_import_if_more_rows_than' => 0,
                            'contact_columns' => [
                                0 => 'name',
                                1 => 'email',
                                2 => 'location',
                                3 => 'stage',
                                4 => 'points',
                                5 => 'last_active',
                                6 => 'id',
                            ],
                            'create_custom_field_in_background' => false,
                            'company_unique_identifiers_operator' => 'OR',
                            'contact_unique_identifiers_operator' => 'OR',
                            'segment_rebuild_time_warning' => 30,
                            'segment_build_time_warning' => 30,
                            'contact_export_in_background' => true,
                            'contact_export_dir' => '%kernel.project_dir%/media/files/temp',
                            'contact_export_batch_size' => 20000,
                        ],
                    ],
                ],
                'MarketplaceBundle' => [
                    'isPlugin' => false,
                    'base' => 'Marketplace',
                    'bundle' => 'MarketplaceBundle',
                    'relative' => 'app/bundles/MarketplaceBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/MarketplaceBundle'),
                    'namespace' => 'Mautic\\MarketplaceBundle',
                    'symfonyBundleName' => 'MarketplaceBundle',
                    'bundleClass' => 'Mautic\\MarketplaceBundle\\MarketplaceBundle',
                    'permissionClasses' => [
                        'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_marketplace_list' => [
                                    'path' => '/marketplace/{page}',
                                    'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\ListController::listAction',
                                    'method' => 'GET|POST',
                                    'defaults' => [
                                        'page' => 1,
                                    ],
                                ],
                                'mautic_marketplace_detail' => [
                                    'path' => '/marketplace/detail/{vendor}/{package}',
                                    'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\DetailController::viewAction',
                                    'method' => 'GET',
                                ],
                                'mautic_marketplace_install' => [
                                    'path' => '/marketplace/install/{vendor}/{package}',
                                    'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\InstallController::viewAction',
                                    'method' => 'GET|POST',
                                ],
                                'mautic_marketplace_remove' => [
                                    'path' => '/marketplace/remove/{vendor}/{package}',
                                    'controller' => 'Mautic\\MarketplaceBundle\\Controller\\Package\\RemoveController::viewAction',
                                    'method' => 'GET|POST',
                                ],
                                'mautic_marketplace_clear_cache' => [
                                    'path' => '/marketplace/clear/cache',
                                    'controller' => 'Mautic\\MarketplaceBundle\\Controller\\CacheController::clearAction',
                                    'method' => 'GET',
                                ],
                            ],
                        ],
                        'services' => [
                            'permissions' => [
                                'marketplace.permissions' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Security\\Permissions\\MarketplacePermissions',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'marketplace.service.config',
                                    ],
                                ],
                            ],
                            'api' => [
                                'marketplace.api.connection' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Api\\Connection',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                            ],
                            'other' => [
                                'marketplace.service.plugin_collector' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Service\\PluginCollector',
                                    'arguments' => [
                                        0 => 'marketplace.api.connection',
                                        1 => 'marketplace.service.allowlist',
                                    ],
                                ],
                                'marketplace.service.route_provider' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Service\\RouteProvider',
                                    'arguments' => [
                                        0 => 'router',
                                    ],
                                ],
                                'marketplace.service.config' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Service\\Config',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'marketplace.service.allowlist' => [
                                    'class' => 'Mautic\\MarketplaceBundle\\Service\\Allowlist',
                                    'arguments' => [
                                        0 => 'marketplace.service.config',
                                        1 => 'mautic.cache.provider',
                                        2 => 'mautic.http.client',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'marketplace_enabled' => true,
                            'marketplace_allowlist_url' => 'https://raw.githubusercontent.com/mautic/marketplace-allowlist/main/allowlist.json',
                            'marketplace_allowlist_cache_ttl_seconds' => 3600,
                        ],
                    ],
                ],
                'MauticMessengerBundle' => [
                    'isPlugin' => false,
                    'base' => 'Messenger',
                    'bundle' => 'MessengerBundle',
                    'relative' => 'app/bundles/MessengerBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/MessengerBundle'),
                    'namespace' => 'Mautic\\MessengerBundle',
                    'symfonyBundleName' => 'MauticMessengerBundle',
                    'bundleClass' => 'Mautic\\MessengerBundle\\MauticMessengerBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'parameters' => [
                            'messenger_dsn_email' => 'sync://',
                            'messenger_dsn_failed' => NULL,
                            'messenger_retry_strategy_max_retries' => 3,
                            'messenger_retry_strategy_delay' => 1000,
                            'messenger_retry_strategy_multiplier' => 2.0,
                            'messenger_retry_strategy_max_delay' => 0,
                        ],
                    ],
                ],
                'MauticNotificationBundle' => [
                    'isPlugin' => false,
                    'base' => 'Notification',
                    'bundle' => 'NotificationBundle',
                    'relative' => 'app/bundles/NotificationBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/NotificationBundle'),
                    'namespace' => 'Mautic\\NotificationBundle',
                    'symfonyBundleName' => 'MauticNotificationBundle',
                    'bundleClass' => 'Mautic\\NotificationBundle\\MauticNotificationBundle',
                    'permissionClasses' => [
                        'Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions' => 'Mautic\\NotificationBundle\\Security\\Permissions\\NotificationPermissions',
                    ],
                    'config' => [
                        'services' => [
                            'events' => [
                                'mautic.notification.campaignbundle.subscriber' => [
                                    'class' => 'Mautic\\NotificationBundle\\EventListener\\CampaignSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'mautic.notification.model.notification',
                                        2 => 'mautic.notification.api',
                                        3 => 'event_dispatcher',
                                        4 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                            'helpers' => [
                                'mautic.helper.notification' => [
                                    'class' => 'Mautic\\NotificationBundle\\Helper\\NotificationHelper',
                                    'alias' => 'notification_helper',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'twig.helper.assets',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'mautic.helper.integration',
                                        4 => 'router',
                                        5 => 'request_stack',
                                        6 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.notification.api' => [
                                    'class' => 'Mautic\\NotificationBundle\\Api\\OneSignalApi',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                        1 => 'mautic.page.model.trackable',
                                        2 => 'mautic.helper.integration',
                                    ],
                                    'alias' => 'notification_api',
                                ],
                            ],
                            'repositories' => [
                                'mautic.notification.repository.stat' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\NotificationBundle\\Entity\\Stat',
                                    ],
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.onesignal' => [
                                    'class' => 'Mautic\\NotificationBundle\\Integration\\OneSignalIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                        'routes' => [
                            'main' => [
                                'mautic_notification_index' => [
                                    'path' => '/notifications/{page}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::indexAction',
                                ],
                                'mautic_notification_action' => [
                                    'path' => '/notifications/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::executeAction',
                                ],
                                'mautic_notification_contacts' => [
                                    'path' => '/notifications/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\NotificationController::contactsAction',
                                ],
                                'mautic_mobile_notification_index' => [
                                    'path' => '/mobile_notifications/{page}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::indexAction',
                                ],
                                'mautic_mobile_notification_action' => [
                                    'path' => '/mobile_notifications/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::executeAction',
                                ],
                                'mautic_mobile_notification_contacts' => [
                                    'path' => '/mobile_notifications/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\MobileNotificationController::contactsAction',
                                ],
                            ],
                            'public' => [
                                'mautic_receive_notification' => [
                                    'path' => '/notification/receive',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::receiveAction',
                                ],
                                'mautic_subscribe_notification' => [
                                    'path' => '/notification/subscribe',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController::subscribeAction',
                                ],
                                'mautic_notification_popup' => [
                                    'path' => '/notification',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\PopupController::indexAction',
                                ],
                                'mautic_onesignal_worker' => [
                                    'path' => '/OneSignalSDKWorker.js',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::workerAction',
                                ],
                                'mautic_onesignal_updater' => [
                                    'path' => '/OneSignalSDKUpdaterWorker.js',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::updaterAction',
                                ],
                                'mautic_onesignal_manifest' => [
                                    'path' => '/manifest.json',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\JsController::manifestAction',
                                ],
                                'mautic_app_notification' => [
                                    'path' => '/notification/appcallback',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\AppCallbackController::indexAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_notificationsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'notifications',
                                    'path' => '/notifications',
                                    'controller' => 'Mautic\\NotificationBundle\\Controller\\Api\\NotificationApiController',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.notification.notifications' => [
                                        'route' => 'mautic_notification_index',
                                        'access' => [
                                            0 => 'notification:notifications:viewown',
                                            1 => 'notification:notifications:viewother',
                                        ],
                                        'checks' => [
                                            'integration' => [
                                                'OneSignal' => [
                                                    'enabled' => true,
                                                ],
                                            ],
                                        ],
                                        'parent' => 'mautic.core.channels',
                                        'priority' => 80,
                                    ],
                                    'mautic.notification.mobile_notifications' => [
                                        'route' => 'mautic_mobile_notification_index',
                                        'access' => [
                                            0 => 'notification:mobile_notifications:viewown',
                                            1 => 'notification:mobile_notifications:viewother',
                                        ],
                                        'checks' => [
                                            'integration' => [
                                                'OneSignal' => [
                                                    'enabled' => true,
                                                    'features' => [
                                                        0 => 'mobile',
                                                    ],
                                                ],
                                            ],
                                        ],
                                        'parent' => 'mautic.core.channels',
                                        'priority' => 65,
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'notification_enabled' => false,
                            'notification_landing_page_enabled' => true,
                            'notification_tracking_page_enabled' => false,
                            'notification_app_id' => NULL,
                            'notification_rest_api_key' => NULL,
                            'notification_safari_web_id' => NULL,
                            'gcm_sender_id' => '482941778795',
                            'notification_subdomain_name' => NULL,
                            'welcomenotification_enabled' => true,
                            'campaign_send_notification_to_author' => true,
                            'campaign_notification_email_addresses' => NULL,
                            'webhook_send_notification_to_author' => true,
                            'webhook_notification_email_addresses' => NULL,
                        ],
                    ],
                ],
                'MauticPageBundle' => [
                    'isPlugin' => false,
                    'base' => 'Page',
                    'bundle' => 'PageBundle',
                    'relative' => 'app/bundles/PageBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/PageBundle'),
                    'namespace' => 'Mautic\\PageBundle',
                    'symfonyBundleName' => 'MauticPageBundle',
                    'bundleClass' => 'Mautic\\PageBundle\\MauticPageBundle',
                    'permissionClasses' => [
                        'Mautic\\PageBundle\\Security\\Permissions\\PagePermissions' => 'Mautic\\PageBundle\\Security\\Permissions\\PagePermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_page_index' => [
                                    'path' => '/pages/{page}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PageController::indexAction',
                                ],
                                'mautic_page_action' => [
                                    'path' => '/pages/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PageController::executeAction',
                                ],
                                'mautic_page_results' => [
                                    'path' => '/pages/results/{objectId}/{page}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PageController::resultsAction',
                                ],
                                'mautic_page_export' => [
                                    'path' => '/pages/results/{objectId}/export/{format}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PageController::exportAction',
                                    'defaults' => [
                                        'format' => 'csv',
                                    ],
                                ],
                            ],
                            'public' => [
                                'mautic_page_tracker' => [
                                    'path' => '/mtracking.gif',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingImageAction',
                                ],
                                'mautic_page_tracker_cors' => [
                                    'path' => '/mtc/event',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::trackingAction',
                                ],
                                'mautic_page_tracker_getcontact' => [
                                    'path' => '/mtc',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::getContactIdAction',
                                ],
                                'mautic_url_redirect' => [
                                    'path' => '/r/{redirectId}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction',
                                ],
                                'mautic_page_redirect' => [
                                    'path' => '/redirect/{redirectId}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::redirectAction',
                                ],
                                'mautic_page_preview' => [
                                    'path' => '/page/preview/{id}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::previewAction',
                                ],
                                'mautic_gated_video_hit' => [
                                    'path' => '/video/hit',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::hitVideoAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_pagesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'pages',
                                    'path' => '/pages',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\Api\\PageApiController',
                                ],
                            ],
                            'catchall' => [
                                'mautic_page_public' => [
                                    'path' => '/{slug}',
                                    'controller' => 'Mautic\\PageBundle\\Controller\\PublicController::indexAction',
                                    'requirements' => [
                                        'slug' => '^(?!(_(profiler|wdt)|css|images|js|favicon.ico|apps/bundles/|plugins/)).+',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.page.pages' => [
                                        'route' => 'mautic_page_index',
                                        'access' => [
                                            0 => 'page:pages:viewown',
                                            1 => 'page:pages:viewother',
                                        ],
                                        'parent' => 'mautic.core.components',
                                        'priority' => 100,
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'page' => NULL,
                        ],
                        'services' => [
                            'repositories' => [
                                'mautic.page.repository.hit' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PageBundle\\Entity\\Hit',
                                    ],
                                ],
                                'mautic.page.repository.page' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PageBundle\\Entity\\Page',
                                    ],
                                ],
                                'mautic.page.repository.redirect' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PageBundle\\Entity\\Redirect',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.page.fixture.page_category' => [
                                    'class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageCategoryData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.category.model.category',
                                    ],
                                ],
                                'mautic.page.fixture.page' => [
                                    'class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.page.model.page',
                                    ],
                                ],
                                'mautic.page.fixture.page_hit' => [
                                    'class' => 'Mautic\\PageBundle\\DataFixtures\\ORM\\LoadPageHitData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.page.model.page',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.page.helper.token' => [
                                    'class' => 'Mautic\\PageBundle\\Helper\\TokenHelper',
                                    'arguments' => 'mautic.page.model.page',
                                ],
                                'mautic.page.helper.tracking' => [
                                    'class' => 'Mautic\\PageBundle\\Helper\\TrackingHelper',
                                    'arguments' => [
                                        0 => 'session',
                                        1 => 'mautic.helper.core_parameters',
                                        2 => 'request_stack',
                                        3 => 'mautic.tracker.contact',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'cat_in_page_url' => false,
                            'google_analytics' => NULL,
                            'track_contact_by_ip' => false,
                            'track_by_tracking_url' => false,
                            'redirect_list_types' => [
                                301 => 'mautic.page.form.redirecttype.permanent',
                                302 => 'mautic.page.form.redirecttype.temporary',
                            ],
                            'google_analytics_id' => NULL,
                            'google_analytics_trackingpage_enabled' => false,
                            'google_analytics_landingpage_enabled' => false,
                            'google_analytics_anonymize_ip' => false,
                            'facebook_pixel_id' => NULL,
                            'facebook_pixel_trackingpage_enabled' => false,
                            'facebook_pixel_landingpage_enabled' => false,
                            'do_not_track_404_anonymous' => false,
                        ],
                    ],
                ],
                'MauticPluginBundle' => [
                    'isPlugin' => false,
                    'base' => 'Plugin',
                    'bundle' => 'PluginBundle',
                    'relative' => 'app/bundles/PluginBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/PluginBundle'),
                    'namespace' => 'Mautic\\PluginBundle',
                    'symfonyBundleName' => 'MauticPluginBundle',
                    'bundleClass' => 'Mautic\\PluginBundle\\MauticPluginBundle',
                    'permissionClasses' => [
                        'Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions' => 'Mautic\\PluginBundle\\Security\\Permissions\\PluginPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_integration_auth_callback_secure' => [
                                    'path' => '/plugins/integrations/authcallback/{integration}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction',
                                ],
                                'mautic_integration_auth_postauth_secure' => [
                                    'path' => '/plugins/integrations/authstatus/{integration}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction',
                                ],
                                'mautic_plugin_index' => [
                                    'path' => '/plugins',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::indexAction',
                                ],
                                'mautic_plugin_config' => [
                                    'path' => '/plugins/config/{name}/{page}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::configAction',
                                ],
                                'mautic_plugin_info' => [
                                    'path' => '/plugins/info/{name}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::infoAction',
                                ],
                                'mautic_plugin_reload' => [
                                    'path' => '/plugins/reload',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\PluginController::reloadAction',
                                ],
                            ],
                            'public' => [
                                'mautic_integration_auth_user' => [
                                    'path' => '/plugins/integrations/authuser/{integration}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authUserAction',
                                ],
                                'mautic_integration_auth_callback' => [
                                    'path' => '/plugins/integrations/authcallback/{integration}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authCallbackAction',
                                ],
                                'mautic_integration_auth_postauth' => [
                                    'path' => '/plugins/integrations/authstatus/{integration}',
                                    'controller' => 'Mautic\\PluginBundle\\Controller\\AuthController::authStatusAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'admin' => [
                                'priority' => 50,
                                'items' => [
                                    'mautic.plugin.plugins' => [
                                        'id' => 'mautic_plugin_root',
                                        'iconClass' => 'fa-plus-circle',
                                        'access' => 'plugin:plugins:manage',
                                        'route' => 'mautic_plugin_index',
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'other' => [
                                'mautic.helper.integration' => [
                                    'class' => 'Mautic\\PluginBundle\\Helper\\IntegrationHelper',
                                    'arguments' => [
                                        0 => 'service_container',
                                        1 => 'doctrine.orm.entity_manager',
                                        2 => 'mautic.helper.paths',
                                        3 => 'mautic.helper.bundle',
                                        4 => 'mautic.helper.core_parameters',
                                        5 => 'twig',
                                        6 => 'mautic.plugin.model.plugin',
                                    ],
                                ],
                                'mautic.plugin.helper.reload' => [
                                    'class' => 'Mautic\\PluginBundle\\Helper\\ReloadHelper',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.factory',
                                    ],
                                ],
                            ],
                            'facades' => [
                                'mautic.plugin.facade.reload' => [
                                    'class' => 'Mautic\\PluginBundle\\Facade\\ReloadFacade',
                                    'arguments' => [
                                        0 => 'mautic.plugin.model.plugin',
                                        1 => 'mautic.plugin.helper.reload',
                                        2 => 'translator',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticPointBundle' => [
                    'isPlugin' => false,
                    'base' => 'Point',
                    'bundle' => 'PointBundle',
                    'relative' => 'app/bundles/PointBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/PointBundle'),
                    'namespace' => 'Mautic\\PointBundle',
                    'symfonyBundleName' => 'MauticPointBundle',
                    'bundleClass' => 'Mautic\\PointBundle\\MauticPointBundle',
                    'permissionClasses' => [
                        'Mautic\\PointBundle\\Security\\Permissions\\PointPermissions' => 'Mautic\\PointBundle\\Security\\Permissions\\PointPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_pointtriggerevent_action' => [
                                    'path' => '/points/triggers/events/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\TriggerEventController::executeAction',
                                ],
                                'mautic_pointtrigger_index' => [
                                    'path' => '/points/triggers/{page}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::indexAction',
                                ],
                                'mautic_pointtrigger_action' => [
                                    'path' => '/points/triggers/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\TriggerController::executeAction',
                                ],
                                'mautic_point_index' => [
                                    'path' => '/points/{page}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\PointController::indexAction',
                                ],
                                'mautic_point_action' => [
                                    'path' => '/points/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\PointController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_pointactionsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'points',
                                    'path' => '/points',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController',
                                ],
                                'mautic_api_getpointactiontypes' => [
                                    'path' => '/points/actions/types',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::getPointActionTypesAction',
                                ],
                                'mautic_api_pointtriggersstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'triggers',
                                    'path' => '/points/triggers',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController',
                                ],
                                'mautic_api_getpointtriggereventtypes' => [
                                    'path' => '/points/triggers/events/types',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::getPointTriggerEventTypesAction',
                                ],
                                'mautic_api_pointtriggerdeleteevents' => [
                                    'path' => '/points/triggers/{triggerId}/events/delete',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\TriggerApiController::deletePointTriggerEventsAction',
                                    'method' => 'DELETE',
                                ],
                                'mautic_api_adjustcontactpoints' => [
                                    'path' => '/contacts/{leadId}/points/{operator}/{delta}',
                                    'controller' => 'Mautic\\PointBundle\\Controller\\Api\\PointApiController::adjustPointsAction',
                                    'method' => 'POST',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.points.menu.root' => [
                                    'id' => 'mautic_points_root',
                                    'iconClass' => 'fa-calculator',
                                    'access' => [
                                        0 => 'point:points:view',
                                        1 => 'point:triggers:view',
                                    ],
                                    'priority' => 30,
                                    'children' => [
                                        'mautic.point.menu.index' => [
                                            'route' => 'mautic_point_index',
                                            'access' => 'point:points:view',
                                        ],
                                        'mautic.point.trigger.menu.index' => [
                                            'route' => 'mautic_pointtrigger_index',
                                            'access' => 'point:triggers:view',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'point' => NULL,
                        ],
                        'services' => [
                            'repositories' => [
                                'mautic.point.repository.lead_point_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PointBundle\\Entity\\LeadPointLog',
                                    ],
                                ],
                                'mautic.point.repository.lead_trigger_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\PointBundle\\Entity\\LeadTriggerLog',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticReportBundle' => [
                    'isPlugin' => false,
                    'base' => 'Report',
                    'bundle' => 'ReportBundle',
                    'relative' => 'app/bundles/ReportBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/ReportBundle'),
                    'namespace' => 'Mautic\\ReportBundle',
                    'symfonyBundleName' => 'MauticReportBundle',
                    'bundleClass' => 'Mautic\\ReportBundle\\MauticReportBundle',
                    'permissionClasses' => [
                        'Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions' => 'Mautic\\ReportBundle\\Security\\Permissions\\ReportPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_report_index' => [
                                    'path' => '/reports/{page}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::indexAction',
                                ],
                                'mautic_report_export' => [
                                    'path' => '/reports/view/{objectId}/export/{format}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::exportAction',
                                    'defaults' => [
                                        'format' => 'csv',
                                    ],
                                ],
                                'mautic_report_download' => [
                                    'path' => '/reports/download/{reportId}/{format}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::downloadAction',
                                    'defaults' => [
                                        'format' => 'csv',
                                    ],
                                ],
                                'mautic_report_view' => [
                                    'path' => '/reports/view/{objectId}/{reportPage}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::viewAction',
                                    'defaults' => [
                                        'reportPage' => 1,
                                    ],
                                    'requirements' => [
                                        'reportPage' => '\\d+',
                                    ],
                                ],
                                'mautic_report_schedule_preview' => [
                                    'path' => '/reports/schedule/preview/{isScheduled}/{scheduleUnit}/{scheduleDay}/{scheduleMonthFrequency}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::indexAction',
                                    'defaults' => [
                                        'isScheduled' => 0,
                                        'scheduleUnit' => '',
                                        'scheduleDay' => '',
                                        'scheduleMonthFrequency' => '',
                                    ],
                                ],
                                'mautic_report_schedule' => [
                                    'path' => '/reports/schedule/{reportId}/now',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ScheduleController::nowAction',
                                ],
                                'mautic_report_action' => [
                                    'path' => '/reports/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\ReportController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_getreports' => [
                                    'path' => '/reports',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getEntitiesAction',
                                ],
                                'mautic_api_getreport' => [
                                    'path' => '/reports/{id}',
                                    'controller' => 'Mautic\\ReportBundle\\Controller\\Api\\ReportApiController::getReportAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.report.reports' => [
                                    'route' => 'mautic_report_index',
                                    'iconClass' => 'fa-line-chart',
                                    'access' => [
                                        0 => 'report:reports:viewown',
                                        1 => 'report:reports:viewother',
                                    ],
                                    'priority' => 20,
                                ],
                            ],
                        ],
                        'services' => [
                            'helpers' => [
                                'mautic.report.helper.report' => [
                                    'class' => 'Mautic\\ReportBundle\\Helper\\ReportHelper',
                                    'alias' => 'report',
                                ],
                            ],
                            'validator' => [
                                'mautic.report.validator.schedule_is_valid_validator' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Validator\\ScheduleIsValidValidator',
                                    'arguments' => [
                                        0 => 'mautic.report.model.scheduler_builder',
                                    ],
                                    'tag' => 'validator.constraint_validator',
                                ],
                            ],
                            'other' => [
                                'mautic.report.model.scheduler_builder' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Builder\\SchedulerBuilder',
                                    'arguments' => [
                                        0 => 'mautic.report.model.scheduler_template_factory',
                                    ],
                                ],
                                'mautic.report.model.scheduler_template_factory' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Factory\\SchedulerTemplateFactory',
                                    'arguments' => [

                                    ],
                                ],
                                'mautic.report.model.scheduler_date_builder' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Date\\DateBuilder',
                                    'arguments' => [
                                        0 => 'mautic.report.model.scheduler_builder',
                                    ],
                                ],
                                'mautic.report.model.scheduler_planner' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SchedulerPlanner',
                                    'arguments' => [
                                        0 => 'mautic.report.model.scheduler_date_builder',
                                        1 => 'doctrine.orm.default_entity_manager',
                                    ],
                                ],
                                'mautic.report.model.send_schedule' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\SendSchedule',
                                    'arguments' => [
                                        0 => 'mautic.helper.mailer',
                                        1 => 'mautic.report.model.message_schedule',
                                        2 => 'mautic.report.model.file_handler',
                                    ],
                                ],
                                'mautic.report.model.file_handler' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\FileHandler',
                                    'arguments' => [
                                        0 => 'mautic.helper.file_path_resolver',
                                        1 => 'mautic.helper.file_properties',
                                        2 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.report.model.message_schedule' => [
                                    'class' => 'Mautic\\ReportBundle\\Scheduler\\Model\\MessageSchedule',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'mautic.helper.file_properties',
                                        2 => 'mautic.helper.core_parameters',
                                        3 => 'router',
                                    ],
                                ],
                                'mautic.report.model.report_data_adapter' => [
                                    'class' => 'Mautic\\ReportBundle\\Adapter\\ReportDataAdapter',
                                    'arguments' => [
                                        0 => 'mautic.report.model.report',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'report_temp_dir' => '%kernel.project_dir%/media/files/temp',
                            'report_export_batch_size' => 1000,
                            'report_export_max_filesize_in_bytes' => 5000000,
                            'csv_always_enclose' => false,
                        ],
                    ],
                ],
                'MauticSmsBundle' => [
                    'isPlugin' => false,
                    'base' => 'Sms',
                    'bundle' => 'SmsBundle',
                    'relative' => 'app/bundles/SmsBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/SmsBundle'),
                    'namespace' => 'Mautic\\SmsBundle',
                    'symfonyBundleName' => 'MauticSmsBundle',
                    'bundleClass' => 'Mautic\\SmsBundle\\MauticSmsBundle',
                    'permissionClasses' => [
                        'Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions' => 'Mautic\\SmsBundle\\Security\\Permissions\\SmsPermissions',
                    ],
                    'config' => [
                        'services' => [
                            'helpers' => [
                                'mautic.helper.sms' => [
                                    'class' => 'Mautic\\SmsBundle\\Helper\\SmsHelper',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'mautic.lead.model.lead',
                                        2 => 'mautic.helper.phone_number',
                                        3 => 'mautic.sms.model.sms',
                                        4 => 'mautic.helper.integration',
                                        5 => 'mautic.lead.model.dnc',
                                    ],
                                    'alias' => 'sms_helper',
                                ],
                            ],
                            'other' => [
                                'mautic.sms.transport_chain' => [
                                    'class' => 'Mautic\\SmsBundle\\Sms\\TransportChain',
                                    'arguments' => [
                                        0 => '%mautic.sms_transport%',
                                        1 => 'mautic.helper.integration',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.sms.callback_handler_container' => [
                                    'class' => 'Mautic\\SmsBundle\\Callback\\HandlerContainer',
                                ],
                                'mautic.sms.helper.contact' => [
                                    'class' => 'Mautic\\SmsBundle\\Helper\\ContactHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.repository.lead',
                                        1 => 'doctrine.dbal.default_connection',
                                        2 => 'mautic.helper.phone_number',
                                    ],
                                ],
                                'mautic.sms.helper.reply' => [
                                    'class' => 'Mautic\\SmsBundle\\Helper\\ReplyHelper',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'monolog.logger.mautic',
                                        2 => 'mautic.tracker.contact',
                                    ],
                                ],
                                'mautic.sms.twilio.configuration' => [
                                    'class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\Configuration',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                    ],
                                ],
                                'mautic.sms.twilio.transport' => [
                                    'class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioTransport',
                                    'arguments' => [
                                        0 => 'mautic.sms.twilio.configuration',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                    'tag' => 'mautic.sms_transport',
                                    'tagArguments' => [
                                        'integrationAlias' => 'Twilio',
                                    ],
                                    'serviceAliases' => [
                                        0 => 'sms_api',
                                        1 => 'mautic.sms.api',
                                    ],
                                ],
                                'mautic.sms.twilio.callback' => [
                                    'class' => 'Mautic\\SmsBundle\\Integration\\Twilio\\TwilioCallback',
                                    'arguments' => [
                                        0 => 'mautic.sms.helper.contact',
                                        1 => 'mautic.sms.twilio.configuration',
                                    ],
                                    'tag' => 'mautic.sms_callback_handler',
                                ],
                                'mautic.sms.transport.twilio' => [
                                    'class' => 'Mautic\\SmsBundle\\Api\\TwilioApi',
                                    'arguments' => [
                                        0 => 'mautic.sms.twilio.configuration',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.sms.broadcast.executioner' => [
                                    'class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastExecutioner',
                                    'arguments' => [
                                        0 => 'mautic.sms.model.sms',
                                        1 => 'mautic.sms.broadcast.query',
                                        2 => 'translator',
                                        3 => 'mautic.lead.repository.lead',
                                    ],
                                ],
                                'mautic.sms.broadcast.query' => [
                                    'class' => 'Mautic\\SmsBundle\\Broadcast\\BroadcastQuery',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'mautic.sms.model.sms',
                                    ],
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.twilio' => [
                                    'class' => 'Mautic\\SmsBundle\\Integration\\TwilioIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.sms.repository.stat' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\SmsBundle\\Entity\\Stat',
                                    ],
                                ],
                            ],
                        ],
                        'routes' => [
                            'main' => [
                                'mautic_sms_index' => [
                                    'path' => '/sms/{page}',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::indexAction',
                                ],
                                'mautic_sms_action' => [
                                    'path' => '/sms/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::executeAction',
                                ],
                                'mautic_sms_contacts' => [
                                    'path' => '/sms/view/{objectId}/contact/{page}',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\SmsController::contactsAction',
                                ],
                            ],
                            'public' => [
                                'mautic_sms_callback' => [
                                    'path' => '/sms/{transport}/callback',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction',
                                ],
                                'mautic_receive_sms' => [
                                    'path' => '/sms/receive',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\ReplyController::callbackAction',
                                    'defaults' => [
                                        'transport' => 'twilio',
                                    ],
                                ],
                            ],
                            'api' => [
                                'mautic_api_smsesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'smses',
                                    'path' => '/smses',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController',
                                ],
                                'mautic_api_smses_send' => [
                                    'path' => '/smses/{id}/contact/{contactId}/send',
                                    'controller' => 'Mautic\\SmsBundle\\Controller\\Api\\SmsApiController::sendAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'items' => [
                                    'mautic.sms.smses' => [
                                        'route' => 'mautic_sms_index',
                                        'access' => [
                                            0 => 'sms:smses:viewown',
                                            1 => 'sms:smses:viewother',
                                        ],
                                        'parent' => 'mautic.core.channels',
                                        'checks' => [
                                            'integration' => [
                                                'Twilio' => [
                                                    'enabled' => true,
                                                ],
                                            ],
                                        ],
                                        'priority' => 70,
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'sms_enabled' => false,
                            'sms_username' => NULL,
                            'sms_password' => NULL,
                            'sms_sending_phone_number' => NULL,
                            'sms_frequency_number' => 0,
                            'sms_frequency_time' => 'DAY',
                            'sms_transport' => 'mautic.sms.twilio.transport',
                        ],
                    ],
                ],
                'MauticStageBundle' => [
                    'isPlugin' => false,
                    'base' => 'Stage',
                    'bundle' => 'StageBundle',
                    'relative' => 'app/bundles/StageBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/StageBundle'),
                    'namespace' => 'Mautic\\StageBundle',
                    'symfonyBundleName' => 'MauticStageBundle',
                    'bundleClass' => 'Mautic\\StageBundle\\MauticStageBundle',
                    'permissionClasses' => [
                        'Mautic\\StageBundle\\Security\\Permissions\\StagePermissions' => 'Mautic\\StageBundle\\Security\\Permissions\\StagePermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_stage_index' => [
                                    'path' => '/stages/{page}',
                                    'controller' => 'Mautic\\StageBundle\\Controller\\StageController::indexAction',
                                ],
                                'mautic_stage_action' => [
                                    'path' => '/stages/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\StageBundle\\Controller\\StageController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_stagesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'stages',
                                    'path' => '/stages',
                                    'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController',
                                ],
                                'mautic_api_stageddcontact' => [
                                    'path' => '/stages/{id}/contact/{contactId}/add',
                                    'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::addContactAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_stageremovecontact' => [
                                    'path' => '/stages/{id}/contact/{contactId}/remove',
                                    'controller' => 'Mautic\\StageBundle\\Controller\\Api\\StageApiController::removeContactAction',
                                    'method' => 'POST',
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.stages.menu.index' => [
                                    'route' => 'mautic_stage_index',
                                    'iconClass' => 'fa-tachometer',
                                    'access' => [
                                        0 => 'stage:stages:view',
                                    ],
                                    'priority' => 25,
                                ],
                            ],
                        ],
                        'categories' => [
                            'stage' => NULL,
                        ],
                        'services' => [
                            'repositories' => [
                                'mautic.stage.repository.lead_stage_log' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\StageBundle\\Entity\\LeadStageLog',
                                    ],
                                ],
                                'mautic.stage.repository.stage' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\StageBundle\\Entity\\Stage',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticStatsBundle' => [
                    'isPlugin' => false,
                    'base' => 'Stats',
                    'bundle' => 'StatsBundle',
                    'relative' => 'app/bundles/StatsBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/StatsBundle'),
                    'namespace' => 'Mautic\\StatsBundle',
                    'symfonyBundleName' => 'MauticStatsBundle',
                    'bundleClass' => 'Mautic\\StatsBundle\\MauticStatsBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'services' => [
                            'other' => [
                                'mautic.stats.aggregate.collector' => [
                                    'class' => 'Mautic\\StatsBundle\\Aggregate\\Collector',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticUserBundle' => [
                    'isPlugin' => false,
                    'base' => 'User',
                    'bundle' => 'UserBundle',
                    'relative' => 'app/bundles/UserBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/UserBundle'),
                    'namespace' => 'Mautic\\UserBundle',
                    'symfonyBundleName' => 'MauticUserBundle',
                    'bundleClass' => 'Mautic\\UserBundle\\MauticUserBundle',
                    'permissionClasses' => [
                        'Mautic\\UserBundle\\Security\\Permissions\\UserPermissions' => 'Mautic\\UserBundle\\Security\\Permissions\\UserPermissions',
                    ],
                    'config' => [
                        'menu' => [
                            'admin' => [
                                'mautic.user.users' => [
                                    'access' => 'user:users:view',
                                    'route' => 'mautic_user_index',
                                    'iconClass' => 'fa-users',
                                ],
                                'mautic.user.roles' => [
                                    'access' => 'user:roles:view',
                                    'route' => 'mautic_role_index',
                                    'iconClass' => 'fa-lock',
                                ],
                            ],
                        ],
                        'routes' => [
                            'main' => [
                                'login' => [
                                    'path' => '/login',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginAction',
                                ],
                                'mautic_user_logincheck' => [
                                    'path' => '/login_check',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::loginCheckAction',
                                ],
                                'mautic_user_logout' => [
                                    'path' => '/logout',
                                ],
                                'mautic_sso_login' => [
                                    'path' => '/sso_login/{integration}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginAction',
                                ],
                                'mautic_sso_login_check' => [
                                    'path' => '/sso_login_check/{integration}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\SecurityController::ssoLoginCheckAction',
                                ],
                                'lightsaml_sp.login' => [
                                    'path' => '/saml/login',
                                    'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::loginAction',
                                ],
                                'lightsaml_sp.login_check' => [
                                    'path' => '/saml/login_check',
                                ],
                                'mautic_user_index' => [
                                    'path' => '/users/{page}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\UserController::indexAction',
                                ],
                                'mautic_user_action' => [
                                    'path' => '/users/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\UserController::executeAction',
                                ],
                                'mautic_role_index' => [
                                    'path' => '/roles/{page}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::indexAction',
                                ],
                                'mautic_role_action' => [
                                    'path' => '/roles/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\RoleController::executeAction',
                                ],
                                'mautic_user_account' => [
                                    'path' => '/account',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\ProfileController::indexAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_usersstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'users',
                                    'path' => '/users',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController',
                                ],
                                'mautic_api_getself' => [
                                    'path' => '/users/self',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getSelfAction',
                                ],
                                'mautic_api_checkpermission' => [
                                    'path' => '/users/{id}/permissioncheck',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::isGrantedAction',
                                    'method' => 'POST',
                                ],
                                'mautic_api_getuserroles' => [
                                    'path' => '/users/list/roles',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\Api\\UserApiController::getRolesAction',
                                ],
                                'mautic_api_rolesstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'roles',
                                    'path' => '/roles',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\Api\\RoleApiController',
                                ],
                            ],
                            'public' => [
                                'mautic_user_passwordreset' => [
                                    'path' => '/passwordreset',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetAction',
                                ],
                                'mautic_user_passwordresetconfirm' => [
                                    'path' => '/passwordresetconfirm',
                                    'controller' => 'Mautic\\UserBundle\\Controller\\PublicController::passwordResetConfirmAction',
                                ],
                                'lightsaml_sp.metadata' => [
                                    'path' => '/saml/metadata.xml',
                                    'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::metadataAction',
                                ],
                                'lightsaml_sp.discovery' => [
                                    'path' => '/saml/discovery',
                                    'controller' => 'LightSaml\\SpBundle\\Controller\\DefaultController::discoveryAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'other' => [
                                'mautic.user.manager' => [
                                    'class' => 'Doctrine\\ORM\\EntityManager',
                                    'arguments' => 'Mautic\\UserBundle\\Entity\\User',
                                    'factory' => [
                                        0 => '@doctrine',
                                        1 => 'getManagerForClass',
                                    ],
                                ],
                                'mautic.permission.manager' => [
                                    'class' => 'Doctrine\\ORM\\EntityManager',
                                    'arguments' => 'Mautic\\UserBundle\\Entity\\Permission',
                                    'factory' => [
                                        0 => '@doctrine',
                                        1 => 'getManagerForClass',
                                    ],
                                ],
                                'mautic.user.form_guard_authenticator' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\Authenticator\\FormAuthenticator',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'security.password_hasher',
                                        2 => 'event_dispatcher',
                                        3 => 'request_stack',
                                        4 => 'security.csrf.token_manager',
                                        5 => 'router',
                                    ],
                                ],
                                'mautic.user.preauth_authenticator' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\Authenticator\\PreAuthAuthenticator',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'event_dispatcher',
                                        2 => 'request_stack',
                                        3 => '',
                                        4 => '',
                                    ],
                                    'public' => false,
                                ],
                                'mautic.user.provider' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\Provider\\UserProvider',
                                    'arguments' => [
                                        0 => 'mautic.user.repository',
                                        1 => 'mautic.permission.repository',
                                        2 => 'session',
                                        3 => 'event_dispatcher',
                                        4 => 'security.password_hasher',
                                    ],
                                ],
                                'mautic.security.authentication_listener' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\Firewall\\AuthenticationListener',
                                    'arguments' => [
                                        0 => 'mautic.security.authentication_handler',
                                        1 => 'security.token_storage',
                                        2 => 'security.authentication.manager',
                                        3 => 'monolog.logger',
                                        4 => 'event_dispatcher',
                                        5 => '',
                                        6 => 'mautic.permission.repository',
                                        7 => 'doctrine.orm.default_entity_manager',
                                    ],
                                    'public' => false,
                                ],
                                'mautic.security.authentication_handler' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\Authentication\\AuthenticationHandler',
                                    'arguments' => [
                                        0 => 'router',
                                    ],
                                ],
                                'mautic.security.logout_handler' => [
                                    'class' => 'Mautic\\UserBundle\\EventListener\\LogoutListener',
                                    'tagArguments' => [
                                        'event' => 'Symfony\\Component\\Security\\Http\\Event\\LogoutEvent',
                                    ],
                                    'tag' => 'kernel.event_listener',
                                    'arguments' => [
                                        0 => 'mautic.user.model.user',
                                        1 => 'event_dispatcher',
                                        2 => 'mautic.helper.user',
                                    ],
                                ],
                                'mautic.security.saml.credential_store' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\CredentialsStore',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => '%mautic.saml_idp_entity_id%',
                                    ],
                                    'tag' => 'lightsaml.own_credential_store',
                                ],
                                'mautic.security.saml.trust_store' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\TrustOptionsStore',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => '%mautic.saml_idp_entity_id%',
                                    ],
                                    'tag' => 'lightsaml.trust_options_store',
                                ],
                                'mautic.security.saml.entity_descriptor_store' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\EntityDescriptorStore',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                    ],
                                    'tag' => 'lightsaml.idp_entity_store',
                                ],
                                'mautic.security.saml.id_store' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\Store\\IdStore',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'lightsaml.system.time_provider',
                                    ],
                                ],
                                'mautic.security.saml.username_mapper' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserMapper',
                                    'arguments' => [
                                        0 => [
                                            'email' => '%mautic.saml_idp_email_attribute%',
                                            'username' => '%mautic.saml_idp_username_attribute%',
                                            'firstname' => '%mautic.saml_idp_firstname_attribute%',
                                            'lastname' => '%mautic.saml_idp_lastname_attribute%',
                                        ],
                                    ],
                                ],
                                'mautic.security.saml.user_creator' => [
                                    'class' => 'Mautic\\UserBundle\\Security\\SAML\\User\\UserCreator',
                                    'arguments' => [
                                        0 => 'doctrine.orm.entity_manager',
                                        1 => 'mautic.security.saml.username_mapper',
                                        2 => 'mautic.user.model.user',
                                        3 => 'security.password_hasher',
                                        4 => '%mautic.saml_idp_default_role%',
                                    ],
                                ],
                                'mautic.user.model.user_token_service' => [
                                    'class' => 'Mautic\\UserBundle\\Model\\UserToken\\UserTokenService',
                                    'arguments' => [
                                        0 => 'mautic.helper.random',
                                        1 => 'mautic.user.repository.user_token',
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.user.repository.user_token' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'arguments' => [
                                        0 => 'Mautic\\UserBundle\\Entity\\UserToken',
                                    ],
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                ],
                                'mautic.user.repository' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'arguments' => 'Mautic\\UserBundle\\Entity\\User',
                                    'factory' => [
                                        0 => '@mautic.user.manager',
                                        1 => 'getRepository',
                                    ],
                                ],
                                'mautic.permission.repository' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'arguments' => 'Mautic\\UserBundle\\Entity\\Permission',
                                    'factory' => [
                                        0 => '@mautic.permission.manager',
                                        1 => 'getRepository',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.user.fixture.role' => [
                                    'class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadRoleData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'mautic.user.model.role',
                                    ],
                                ],
                                'mautic.user.fixture.user' => [
                                    'class' => 'Mautic\\UserBundle\\DataFixtures\\ORM\\LoadUserData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'arguments' => [
                                        0 => 'security.password_hasher',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'saml_idp_metadata' => '',
                            'saml_idp_entity_id' => '',
                            'saml_idp_own_certificate' => '',
                            'saml_idp_own_private_key' => '',
                            'saml_idp_own_password' => '',
                            'saml_idp_email_attribute' => '',
                            'saml_idp_username_attribute' => '',
                            'saml_idp_firstname_attribute' => '',
                            'saml_idp_lastname_attribute' => '',
                            'saml_idp_default_role' => '',
                        ],
                    ],
                ],
                'MauticWebhookBundle' => [
                    'isPlugin' => false,
                    'base' => 'Webhook',
                    'bundle' => 'WebhookBundle',
                    'relative' => 'app/bundles/WebhookBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/WebhookBundle'),
                    'namespace' => 'Mautic\\WebhookBundle',
                    'symfonyBundleName' => 'MauticWebhookBundle',
                    'bundleClass' => 'Mautic\\WebhookBundle\\MauticWebhookBundle',
                    'permissionClasses' => [
                        'Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions' => 'Mautic\\WebhookBundle\\Security\\Permissions\\WebhookPermissions',
                    ],
                    'config' => [
                        'routes' => [
                            'main' => [
                                'mautic_webhook_index' => [
                                    'path' => '/webhooks/{page}',
                                    'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::indexAction',
                                ],
                                'mautic_webhook_action' => [
                                    'path' => '/webhooks/{objectAction}/{objectId}',
                                    'controller' => 'Mautic\\WebhookBundle\\Controller\\WebhookController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_webhookstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'hooks',
                                    'path' => '/hooks',
                                    'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController',
                                ],
                                'mautic_api_webhookevents' => [
                                    'path' => '/hooks/triggers',
                                    'controller' => 'Mautic\\WebhookBundle\\Controller\\Api\\WebhookApiController::getTriggersAction',
                                ],
                            ],
                        ],
                        'menu' => [
                            'admin' => [
                                'items' => [
                                    'mautic.webhook.webhooks' => [
                                        'id' => 'mautic_webhook_root',
                                        'iconClass' => 'fa-exchange',
                                        'access' => [
                                            0 => 'webhook:webhooks:viewown',
                                            1 => 'webhook:webhooks:viewother',
                                        ],
                                        'route' => 'mautic_webhook_index',
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'others' => [
                                'mautic.webhook.notificator.webhookkillnotificator' => [
                                    'class' => 'Mautic\\WebhookBundle\\Notificator\\WebhookKillNotificator',
                                    'arguments' => [
                                        0 => 'translator',
                                        1 => 'router',
                                        2 => 'mautic.core.model.notification',
                                        3 => 'doctrine.orm.entity_manager',
                                        4 => 'mautic.helper.mailer',
                                        5 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                                'mautic.webhook.campaign.helper' => [
                                    'class' => 'Mautic\\WebhookBundle\\Helper\\CampaignHelper',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                        1 => 'mautic.lead.model.company',
                                        2 => 'event_dispatcher',
                                    ],
                                ],
                                'mautic.webhook.http.client' => [
                                    'class' => 'Mautic\\WebhookBundle\\Http\\Client',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'mautic.http.client',
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.webhook.repository.queue' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'Mautic\\WebhookBundle\\Entity\\WebhookQueue',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'webhook_limit' => 10,
                            'webhook_time_limit' => 600,
                            'webhook_log_max' => 1000,
                            'clean_webhook_logs_in_background' => false,
                            'webhook_disable_limit' => 100,
                            'webhook_timeout' => 15,
                            'queue_mode' => 'immediate_process',
                            'events_orderby_dir' => 'ASC',
                            'webhook_email_details' => true,
                        ],
                    ],
                ],
                'MauticCacheBundle' => [
                    'isPlugin' => false,
                    'base' => 'Cache',
                    'bundle' => 'CacheBundle',
                    'relative' => 'app/bundles/CacheBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/CacheBundle'),
                    'namespace' => 'Mautic\\CacheBundle',
                    'symfonyBundleName' => 'MauticCacheBundle',
                    'bundleClass' => 'Mautic\\CacheBundle\\MauticCacheBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'routes' => [
                            'main' => [

                            ],
                            'public' => [

                            ],
                            'api' => [

                            ],
                        ],
                        'menu' => [

                        ],
                        'services' => [
                            'events' => [
                                'mautic.cache.clear_cache_subscriber' => [
                                    'class' => 'Mautic\\CacheBundle\\EventListener\\CacheClearSubscriber',
                                    'tags' => [
                                        0 => 'kernel.cache_clearer',
                                    ],
                                    'arguments' => [
                                        0 => 'mautic.cache.provider',
                                        1 => 'monolog.logger.mautic',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic.cache.provider' => [
                                    'class' => 'Mautic\\CacheBundle\\Cache\\CacheProvider',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'service_container',
                                    ],
                                ],
                                'mautic.cache.adapter.filesystem' => [
                                    'class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\FilesystemTagAwareAdapter',
                                    'arguments' => [
                                        0 => '%mautic.cache_prefix%',
                                        1 => '%mautic.cache_lifetime%',
                                        2 => '%mautic.tmp_path%',
                                    ],
                                    'tag' => 'mautic.cache.adapter',
                                ],
                                'mautic.cache.adapter.memcached' => [
                                    'class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\MemcachedTagAwareAdapter',
                                    'arguments' => [
                                        0 => '%mautic.cache_adapter_memcached%',
                                        1 => '%mautic.cache_prefix%',
                                        2 => '%mautic.cache_lifetime%',
                                    ],
                                    'tag' => 'mautic.cache.adapter',
                                ],
                                'mautic.cache.adapter.redis' => [
                                    'class' => 'Mautic\\CacheBundle\\Cache\\Adapter\\RedisTagAwareAdapter',
                                    'arguments' => [
                                        0 => '%mautic.cache_adapter_redis%',
                                        1 => '%mautic.cache_prefix%',
                                        2 => '%mautic.cache_lifetime%',
                                        3 => '%mautic.redis_primary_only%',
                                    ],
                                    'tag' => 'mautic.cache.adapter',
                                ],
                            ],
                            'models' => [

                            ],
                            'validator' => [

                            ],
                        ],
                        'parameters' => [
                            'cache_adapter' => 'mautic.cache.adapter.filesystem',
                            'cache_prefix' => '',
                            'cache_lifetime' => 86400,
                            'cache_adapter_memcached' => [
                                'servers' => [
                                    0 => 'memcached://localhost',
                                ],
                                'options' => [
                                    'compression' => true,
                                    'libketama_compatible' => true,
                                    'serializer' => 'igbinary',
                                ],
                            ],
                            'cache_adapter_redis' => [
                                'dsn' => 'redis://localhost',
                                'options' => [
                                    'lazy' => false,
                                    'persistent' => 0,
                                    'persistent_id' => NULL,
                                    'timeout' => 30,
                                    'read_timeout' => 0,
                                    'retry_interval' => 0,
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticQueueBundle' => [
                    'isPlugin' => false,
                    'base' => 'Queue',
                    'bundle' => 'QueueBundle',
                    'relative' => 'app/bundles/QueueBundle',
                    'directory' => (\dirname(__DIR__, 4).'/app/bundles/QueueBundle'),
                    'namespace' => 'Mautic\\QueueBundle',
                    'symfonyBundleName' => 'MauticQueueBundle',
                    'bundleClass' => 'Mautic\\QueueBundle\\MauticQueueBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'services' => [
                            'other' => [
                                'mautic.queue.service' => [
                                    'class' => 'Mautic\\QueueBundle\\Queue\\QueueService',
                                    'arguments' => [
                                        0 => 'mautic.helper.core_parameters',
                                        1 => 'event_dispatcher',
                                        2 => 'monolog.logger.mautic',
                                    ],
                                ],
                                'mautic.queue.helper.rabbitmq_consumer' => [
                                    'class' => 'Mautic\\QueueBundle\\Helper\\RabbitMqConsumer',
                                    'arguments' => [
                                        0 => 'mautic.queue.service',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'queue_protocol' => '',
                            'rabbitmq_host' => 'localhost',
                            'rabbitmq_port' => '5672',
                            'rabbitmq_vhost' => '/',
                            'rabbitmq_user' => 'guest',
                            'rabbitmq_password' => 'guest',
                            'rabbitmq_idle_timeout' => 0,
                            'rabbitmq_idle_timeout_exit_code' => 0,
                            'beanstalkd_host' => 'localhost',
                            'beanstalkd_port' => '11300',
                            'beanstalkd_timeout' => '60',
                        ],
                    ],
                ],
            ],
            'mautic.plugin.bundles' => [
                'MauticGmailBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticGmail',
                    'bundle' => 'MauticGmailBundle',
                    'relative' => 'plugins/MauticGmailBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticGmailBundle'),
                    'namespace' => 'MauticPlugin\\MauticGmailBundle',
                    'symfonyBundleName' => 'MauticGmailBundle',
                    'bundleClass' => 'MauticPlugin\\MauticGmailBundle\\MauticGmailBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Gmail',
                        'description' => 'Enables integrations with Gmail for email tracking',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'services' => [
                            'integrations' => [
                                'mautic.integration.gmail' => [
                                    'class' => 'MauticPlugin\\MauticGmailBundle\\Integration\\GmailIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'GrapesJsBuilderBundle' => [
                    'isPlugin' => true,
                    'base' => 'GrapesJsBuilder',
                    'bundle' => 'GrapesJsBuilderBundle',
                    'relative' => 'plugins/GrapesJsBuilderBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/GrapesJsBuilderBundle'),
                    'namespace' => 'MauticPlugin\\GrapesJsBuilderBundle',
                    'symfonyBundleName' => 'GrapesJsBuilderBundle',
                    'bundleClass' => 'MauticPlugin\\GrapesJsBuilderBundle\\GrapesJsBuilderBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'GrapesJS Builder',
                        'description' => 'GrapesJS Builder with MJML support for Mautic',
                        'version' => '1.0.0',
                        'author' => 'Mautic Community',
                        'routes' => [
                            'main' => [
                                'grapesjsbuilder_upload' => [
                                    'path' => '/grapesjsbuilder/upload',
                                    'controller' => 'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\FileManagerController::uploadAction',
                                ],
                                'grapesjsbuilder_delete' => [
                                    'path' => '/grapesjsbuilder/delete',
                                    'controller' => 'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\FileManagerController::deleteAction',
                                ],
                                'grapesjsbuilder_assets' => [
                                    'path' => '/grapesjsbuilder/assets',
                                    'controller' => 'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\FileManagerController::assetsAction',
                                ],
                                'grapesjsbuilder_builder' => [
                                    'path' => '/grapesjsbuilder/{objectType}/{objectId}',
                                    'controller' => 'MauticPlugin\\GrapesJsBuilderBundle\\Controller\\GrapesJsController::builderAction',
                                ],
                            ],
                            'public' => [

                            ],
                            'api' => [

                            ],
                        ],
                        'menu' => [

                        ],
                        'services' => [
                            'other' => [
                                'grapesjsbuilder.config' => [
                                    'class' => 'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Config',
                                    'arguments' => [
                                        0 => 'mautic.integrations.helper',
                                    ],
                                ],
                            ],
                            'sync' => [

                            ],
                            'integrations' => [
                                'mautic.integration.grapesjsbuilder' => [
                                    'class' => 'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\GrapesJsBuilderIntegration',
                                    'tags' => [
                                        0 => 'mautic.integration',
                                        1 => 'mautic.basic_integration',
                                    ],
                                ],
                                'grapesjsbuilder.integration.configuration' => [
                                    'class' => 'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Support\\ConfigSupport',
                                    'tags' => [
                                        0 => 'mautic.config_integration',
                                    ],
                                ],
                                'grapesjsbuilder.integration.builder' => [
                                    'class' => 'MauticPlugin\\GrapesJsBuilderBundle\\Integration\\Support\\BuilderSupport',
                                    'tags' => [
                                        0 => 'mautic.builder_integration',
                                    ],
                                ],
                            ],
                            'helpers' => [
                                'grapesjsbuilder.helper.filemanager' => [
                                    'class' => 'MauticPlugin\\GrapesJsBuilderBundle\\Helper\\FileManager',
                                    'arguments' => [
                                        0 => 'mautic.helper.file_uploader',
                                        1 => 'mautic.helper.core_parameters',
                                        2 => 'mautic.helper.paths',
                                    ],
                                ],
                            ],
                        ],
                        'parameters' => [
                            'image_path_exclude' => [
                                0 => 'flags',
                                1 => 'mejs',
                            ],
                            'static_url' => '',
                        ],
                    ],
                ],
                'MauticCloudStorageBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticCloudStorage',
                    'bundle' => 'MauticCloudStorageBundle',
                    'relative' => 'plugins/MauticCloudStorageBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticCloudStorageBundle'),
                    'namespace' => 'MauticPlugin\\MauticCloudStorageBundle',
                    'symfonyBundleName' => 'MauticCloudStorageBundle',
                    'bundleClass' => 'MauticPlugin\\MauticCloudStorageBundle\\MauticCloudStorageBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Cloud Storage',
                        'description' => 'Enables integrations with Mautic supported cloud storage services.',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'services' => [
                            'integrations' => [
                                'mautic.integration.amazons3' => [
                                    'class' => 'MauticPlugin\\MauticCloudStorageBundle\\Integration\\AmazonS3Integration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticFullContactBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticFullContact',
                    'bundle' => 'MauticFullContactBundle',
                    'relative' => 'plugins/MauticFullContactBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticFullContactBundle'),
                    'namespace' => 'MauticPlugin\\MauticFullContactBundle',
                    'symfonyBundleName' => 'MauticFullContactBundle',
                    'bundleClass' => 'MauticPlugin\\MauticFullContactBundle\\MauticFullContactBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'FullContact',
                        'description' => 'Enables integration with FullContact for contact and company lookup',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'routes' => [
                            'public' => [
                                'mautic_plugin_fullcontact_index' => [
                                    'path' => '/fullcontact/callback',
                                    'controller' => 'MauticPlugin\\MauticFullContactBundle\\Controller\\PublicController::callbackAction',
                                ],
                            ],
                            'main' => [
                                'mautic_plugin_fullcontact_action' => [
                                    'path' => '/fullcontact/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticFullContactBundle\\Controller\\FullContactController::executeAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'others' => [
                                'mautic.plugin.fullcontact.lookup_helper' => [
                                    'class' => 'MauticPlugin\\MauticFullContactBundle\\Helper\\LookupHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'mautic.helper.user',
                                        2 => 'monolog.logger.mautic',
                                        3 => 'router',
                                        4 => 'mautic.lead.model.lead',
                                        5 => 'mautic.lead.model.company',
                                    ],
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.fullcontact' => [
                                    'class' => 'MauticPlugin\\MauticFullContactBundle\\Integration\\FullContactIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticClearbitBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticClearbit',
                    'bundle' => 'MauticClearbitBundle',
                    'relative' => 'plugins/MauticClearbitBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticClearbitBundle'),
                    'namespace' => 'MauticPlugin\\MauticClearbitBundle',
                    'symfonyBundleName' => 'MauticClearbitBundle',
                    'bundleClass' => 'MauticPlugin\\MauticClearbitBundle\\MauticClearbitBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Clearbit',
                        'description' => 'Enables integration with Clearbit for contact and company lookup',
                        'version' => '1.0',
                        'author' => 'Werner Garcia',
                        'routes' => [
                            'public' => [
                                'mautic_plugin_clearbit_index' => [
                                    'path' => '/clearbit/callback',
                                    'controller' => 'MauticPlugin\\MauticClearbitBundle\\Controller\\PublicController::callbackAction',
                                ],
                            ],
                            'main' => [
                                'mautic_plugin_clearbit_action' => [
                                    'path' => '/clearbit/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticClearbitBundle\\Controller\\ClearbitController::executeAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'others' => [
                                'mautic.plugin.clearbit.lookup_helper' => [
                                    'class' => 'MauticPlugin\\MauticClearbitBundle\\Helper\\LookupHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'mautic.helper.user',
                                        2 => 'monolog.logger.mautic',
                                        3 => 'mautic.lead.model.lead',
                                        4 => 'mautic.lead.model.company',
                                    ],
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.clearbit' => [
                                    'class' => 'MauticPlugin\\MauticClearbitBundle\\Integration\\ClearbitIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticOutlookBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticOutlook',
                    'bundle' => 'MauticOutlookBundle',
                    'relative' => 'plugins/MauticOutlookBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticOutlookBundle'),
                    'namespace' => 'MauticPlugin\\MauticOutlookBundle',
                    'symfonyBundleName' => 'MauticOutlookBundle',
                    'bundleClass' => 'MauticPlugin\\MauticOutlookBundle\\MauticOutlookBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Outlook',
                        'description' => 'Enables integrations with Outlook for email tracking',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'services' => [
                            'integrations' => [
                                'mautic.integration.outlook' => [
                                    'class' => 'MauticPlugin\\MauticOutlookBundle\\Integration\\OutlookIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticTagManagerBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticTagManager',
                    'bundle' => 'MauticTagManagerBundle',
                    'relative' => 'plugins/MauticTagManagerBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticTagManagerBundle'),
                    'namespace' => 'MauticPlugin\\MauticTagManagerBundle',
                    'symfonyBundleName' => 'MauticTagManagerBundle',
                    'bundleClass' => 'MauticPlugin\\MauticTagManagerBundle\\MauticTagManagerBundle',
                    'permissionClasses' => [
                        'MauticPlugin\\MauticTagManagerBundle\\Security\\Permissions\\TagManagerPermissions' => 'MauticPlugin\\MauticTagManagerBundle\\Security\\Permissions\\TagManagerPermissions',
                    ],
                    'config' => [
                        'name' => 'Mautic tag manager bundle',
                        'description' => 'Provides an interface for tags management.',
                        'version' => '1.0',
                        'author' => 'Leuchtfeuer',
                        'routes' => [
                            'main' => [
                                'mautic_tagmanager_index' => [
                                    'path' => '/tags/{page}',
                                    'controller' => 'MauticPlugin\\MauticTagManagerBundle\\Controller\\TagController::indexAction',
                                ],
                                'mautic_tagmanager_action' => [
                                    'path' => '/tags/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticTagManagerBundle\\Controller\\TagController::executeAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'integrations' => [
                                'mautic.integration.tagmanager' => [
                                    'class' => 'MauticPlugin\\MauticTagManagerBundle\\Integration\\TagManagerIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                            'repositories' => [
                                'mautic.tagmanager.repository.tag' => [
                                    'class' => 'Doctrine\\ORM\\EntityRepository',
                                    'factory' => [
                                        0 => '@doctrine.orm.entity_manager',
                                        1 => 'getRepository',
                                    ],
                                    'arguments' => [
                                        0 => 'MauticPlugin\\MauticTagManagerBundle\\Entity\\Tag',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'tagmanager.menu.index' => [
                                    'id' => 'mautic_tagmanager_index',
                                    'route' => 'mautic_tagmanager_index',
                                    'access' => 'tagManager:tagManager:view',
                                    'iconClass' => 'fa-tag',
                                    'priority' => 1,
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticCrmBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticCrm',
                    'bundle' => 'MauticCrmBundle',
                    'relative' => 'plugins/MauticCrmBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticCrmBundle'),
                    'namespace' => 'MauticPlugin\\MauticCrmBundle',
                    'symfonyBundleName' => 'MauticCrmBundle',
                    'bundleClass' => 'MauticPlugin\\MauticCrmBundle\\MauticCrmBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'CRM',
                        'description' => 'Enables integration with Mautic supported CRMs.',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'routes' => [
                            'public' => [
                                'mautic_integration_contacts' => [
                                    'path' => '/plugin/{integration}/contact_data',
                                    'controller' => 'MauticPlugin\\MauticCrmBundle\\Controller\\PublicController::contactDataAction',
                                    'requirements' => [
                                        'integration' => '.+',
                                    ],
                                ],
                                'mautic_integration_companies' => [
                                    'path' => '/plugin/{integration}/company_data',
                                    'controller' => 'MauticPlugin\\MauticCrmBundle\\Controller\\PublicController::companyDataAction',
                                    'requirements' => [
                                        'integration' => '.+',
                                    ],
                                ],
                            ],
                        ],
                        'services' => [
                            'integrations' => [
                                'mautic.integration.hubspot' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\HubspotIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.helper.user',
                                    ],
                                ],
                                'mautic.integration.salesforce' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\SalesforceIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.sugarcrm' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\SugarcrmIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.user.model.user',
                                    ],
                                ],
                                'mautic.integration.vtiger' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\VtigerIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.zoho' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\ZohoIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.dynamics' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\DynamicsIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.connectwise' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Integration\\ConnectwiseIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'monolog.logger.mautic',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                            'other' => [
                                'mautic_integration.service.transport' => [
                                    'class' => 'MauticPlugin\\MauticCrmBundle\\Services\\Transport',
                                    'arguments' => [
                                        0 => 'mautic.http.client',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticFocusBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticFocus',
                    'bundle' => 'MauticFocusBundle',
                    'relative' => 'plugins/MauticFocusBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticFocusBundle'),
                    'namespace' => 'MauticPlugin\\MauticFocusBundle',
                    'symfonyBundleName' => 'MauticFocusBundle',
                    'bundleClass' => 'MauticPlugin\\MauticFocusBundle\\MauticFocusBundle',
                    'permissionClasses' => [
                        'MauticPlugin\\MauticFocusBundle\\Security\\Permissions\\FocusPermissions' => 'MauticPlugin\\MauticFocusBundle\\Security\\Permissions\\FocusPermissions',
                    ],
                    'config' => [
                        'name' => 'Mautic Focus',
                        'description' => 'Drive visitor\'s focus on your website with Mautic Focus',
                        'version' => '1.0',
                        'author' => 'Mautic, Inc',
                        'routes' => [
                            'main' => [
                                'mautic_focus_index' => [
                                    'path' => '/focus/{page}',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\FocusController::indexAction',
                                ],
                                'mautic_focus_action' => [
                                    'path' => '/focus/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\FocusController::executeAction',
                                ],
                            ],
                            'public' => [
                                'mautic_focus_generate' => [
                                    'path' => '/focus/{id}.js',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\PublicController::generateAction',
                                ],
                                'mautic_focus_pixel' => [
                                    'path' => '/focus/{id}/viewpixel.gif',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\PublicController::viewPixelAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_focusstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'focus',
                                    'path' => '/focus',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\Api\\FocusApiController',
                                ],
                                'mautic_api_focusjs' => [
                                    'path' => '/focus/{id}/js',
                                    'controller' => 'MauticPlugin\\MauticFocusBundle\\Controller\\Api\\FocusApiController::generateJsAction',
                                    'method' => 'POST',
                                ],
                            ],
                        ],
                        'services' => [
                            'other' => [
                                'mautic.focus.helper.token' => [
                                    'class' => 'MauticPlugin\\MauticFocusBundle\\Helper\\TokenHelper',
                                    'arguments' => [
                                        0 => 'mautic.focus.model.focus',
                                        1 => 'router',
                                        2 => 'mautic.security',
                                    ],
                                ],
                                'mautic.focus.helper.iframe_availability_checker' => [
                                    'class' => 'MauticPlugin\\MauticFocusBundle\\Helper\\IframeAvailabilityChecker',
                                    'arguments' => [
                                        0 => 'translator',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.focus' => [
                                    'route' => 'mautic_focus_index',
                                    'access' => 'focus:items:view',
                                    'parent' => 'mautic.core.channels',
                                    'priority' => 10,
                                ],
                            ],
                        ],
                        'categories' => [
                            'plugin:focus' => 'mautic.focus',
                        ],
                        'parameters' => [
                            'website_snapshot_url' => 'https://mautic.net/api/snapshot',
                            'website_snapshot_key' => '',
                        ],
                    ],
                ],
                'MauticSocialBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticSocial',
                    'bundle' => 'MauticSocialBundle',
                    'relative' => 'plugins/MauticSocialBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticSocialBundle'),
                    'namespace' => 'MauticPlugin\\MauticSocialBundle',
                    'symfonyBundleName' => 'MauticSocialBundle',
                    'bundleClass' => 'MauticPlugin\\MauticSocialBundle\\MauticSocialBundle',
                    'permissionClasses' => [
                        'MauticPlugin\\MauticSocialBundle\\Security\\Permissions\\MauticSocialPermissions' => 'MauticPlugin\\MauticSocialBundle\\Security\\Permissions\\MauticSocialPermissions',
                    ],
                    'config' => [
                        'name' => 'Social Media',
                        'description' => 'Enables integrations with Mautic supported social media services.',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'routes' => [
                            'main' => [
                                'mautic_social_index' => [
                                    'path' => '/monitoring/{page}',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\MonitoringController::indexAction',
                                ],
                                'mautic_social_action' => [
                                    'path' => '/monitoring/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\MonitoringController::executeAction',
                                ],
                                'mautic_social_contacts' => [
                                    'path' => '/monitoring/view/{objectId}/contacts/{page}',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\MonitoringController::contactsAction',
                                ],
                                'mautic_tweet_index' => [
                                    'path' => '/tweets/{page}',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\TweetController::indexAction',
                                ],
                                'mautic_tweet_action' => [
                                    'path' => '/tweets/{objectAction}/{objectId}',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\TweetController::executeAction',
                                ],
                            ],
                            'api' => [
                                'mautic_api_tweetsstandard' => [
                                    'standard_entity' => true,
                                    'name' => 'tweets',
                                    'path' => '/tweets',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\Api\\TweetApiController',
                                ],
                            ],
                            'public' => [
                                'mautic_social_js_generate' => [
                                    'path' => '/social/generate/{formName}.js',
                                    'controller' => 'MauticPlugin\\MauticSocialBundle\\Controller\\JsController::generateAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'others' => [
                                'mautic.social.helper.campaign' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Helper\\CampaignEventHelper',
                                    'arguments' => [
                                        0 => 'mautic.helper.integration',
                                        1 => 'mautic.page.model.trackable',
                                        2 => 'mautic.page.helper.token',
                                        3 => 'mautic.asset.helper.token',
                                        4 => 'mautic.social.model.tweet',
                                    ],
                                ],
                                'mautic.social.helper.twitter_command' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Helper\\TwitterCommandHelper',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead',
                                        1 => 'mautic.lead.model.field',
                                        2 => 'mautic.social.model.monitoring',
                                        3 => 'mautic.social.model.postcount',
                                        4 => 'translator',
                                        5 => 'doctrine.orm.entity_manager',
                                        6 => 'mautic.helper.core_parameters',
                                    ],
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.facebook' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Integration\\FacebookIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.helper.integration',
                                    ],
                                ],
                                'mautic.integration.foursquare' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Integration\\FoursquareIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.helper.integration',
                                    ],
                                ],
                                'mautic.integration.instagram' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Integration\\InstagramIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.helper.integration',
                                    ],
                                ],
                                'mautic.integration.twitter' => [
                                    'class' => 'MauticPlugin\\MauticSocialBundle\\Integration\\TwitterIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                        16 => 'mautic.helper.integration',
                                    ],
                                ],
                            ],
                        ],
                        'menu' => [
                            'main' => [
                                'mautic.social.monitoring' => [
                                    'route' => 'mautic_social_index',
                                    'parent' => 'mautic.core.channels',
                                    'access' => 'mauticSocial:monitoring:view',
                                    'priority' => 0,
                                ],
                                'mautic.social.tweets' => [
                                    'route' => 'mautic_tweet_index',
                                    'access' => [
                                        0 => 'mauticSocial:tweets:viewown',
                                        1 => 'mauticSocial:tweets:viewother',
                                    ],
                                    'parent' => 'mautic.core.channels',
                                    'priority' => 80,
                                    'checks' => [
                                        'integration' => [
                                            'Twitter' => [
                                                'enabled' => true,
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'categories' => [
                            'plugin:mauticSocial' => 'mautic.social.monitoring',
                        ],
                        'twitter' => [
                            'tweet_request_count' => 100,
                        ],
                        'parameters' => [
                            'twitter_handle_field' => 'twitter',
                        ],
                    ],
                ],
                'MauticZapierBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticZapier',
                    'bundle' => 'MauticZapierBundle',
                    'relative' => 'plugins/MauticZapierBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticZapierBundle'),
                    'namespace' => 'MauticPlugin\\MauticZapierBundle',
                    'symfonyBundleName' => 'MauticZapierBundle',
                    'bundleClass' => 'MauticPlugin\\MauticZapierBundle\\MauticZapierBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Zapier Integration',
                        'description' => 'Zapier lets you connect Mautic with 1100+ other apps'."\n".'---'."\n".'Learn more about Zapier integration in the <a href="https://mautic.org/docs/en/plugins/zapier.html">docs</a>. Make sure Mautic API and Basic Auth is enabled in the <a href="config/edit" target="_blank">configuration</a>.'."\n".'<br>'."\n".'<br>'."\n".'Use these predefined Zap templates as a starting point:'."\n".'<div id="zaps"></div>'."\n".'<script src="https://zapier.com/apps/embed/widget.js?services=mautic&html_id=zaps"></script>',
                        'version' => '1.0',
                        'author' => 'Mautic',
                    ],
                ],
                'MauticEmailMarketingBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticEmailMarketing',
                    'bundle' => 'MauticEmailMarketingBundle',
                    'relative' => 'plugins/MauticEmailMarketingBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticEmailMarketingBundle'),
                    'namespace' => 'MauticPlugin\\MauticEmailMarketingBundle',
                    'symfonyBundleName' => 'MauticEmailMarketingBundle',
                    'bundleClass' => 'MauticPlugin\\MauticEmailMarketingBundle\\MauticEmailMarketingBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Email Marketing',
                        'description' => 'Enables integration with Mautic supported email marketing services.',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'services' => [
                            'integrations' => [
                                'mautic.integration.constantcontact' => [
                                    'class' => 'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\ConstantContactIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.icontact' => [
                                    'class' => 'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\IcontactIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.mailchimp' => [
                                    'class' => 'MauticPlugin\\MauticEmailMarketingBundle\\Integration\\MailchimpIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
                'MauticCitrixBundle' => [
                    'isPlugin' => true,
                    'base' => 'MauticCitrix',
                    'bundle' => 'MauticCitrixBundle',
                    'relative' => 'plugins/MauticCitrixBundle',
                    'directory' => (\dirname(__DIR__, 4).'/plugins/MauticCitrixBundle'),
                    'namespace' => 'MauticPlugin\\MauticCitrixBundle',
                    'symfonyBundleName' => 'MauticCitrixBundle',
                    'bundleClass' => 'MauticPlugin\\MauticCitrixBundle\\MauticCitrixBundle',
                    'permissionClasses' => [

                    ],
                    'config' => [
                        'name' => 'Citrix',
                        'description' => 'Enables integration with Mautic supported Citrix collaboration products.',
                        'version' => '1.0',
                        'author' => 'Mautic',
                        'routes' => [
                            'public' => [
                                'mautic_citrix_proxy' => [
                                    'path' => '/citrix/proxy',
                                    'controller' => 'MauticPlugin\\MauticCitrixBundle\\Controller\\PublicController::proxyAction',
                                ],
                                'mautic_citrix_sessionchanged' => [
                                    'path' => '/citrix/sessionChanged',
                                    'controller' => 'MauticPlugin\\MauticCitrixBundle\\Controller\\PublicController::sessionChangedAction',
                                ],
                            ],
                        ],
                        'services' => [
                            'events' => [
                                'mautic.citrix.formbundle.subscriber' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\EventListener\\FormSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.citrix.model.citrix',
                                        1 => 'mautic.form.model.form',
                                        2 => 'mautic.form.model.submission',
                                        3 => 'translator',
                                        4 => 'doctrine.orm.entity_manager',
                                        5 => 'twig',
                                    ],
                                    'methodCalls' => [
                                        'setEmailModel' => [
                                            0 => 'mautic.email.model.email',
                                        ],
                                    ],
                                ],
                                'mautic.citrix.campaignbundle.subscriber' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\EventListener\\CampaignSubscriber',
                                    'arguments' => [
                                        0 => 'mautic.citrix.model.citrix',
                                        1 => 'translator',
                                        2 => 'twig',
                                    ],
                                    'methodCalls' => [
                                        'setEmailModel' => [
                                            0 => 'mautic.email.model.email',
                                        ],
                                    ],
                                ],
                            ],
                            'models' => [
                                'mautic.citrix.model.citrix' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Model\\CitrixModel',
                                    'arguments' => [
                                        0 => 'mautic.lead.model.lead',
                                        1 => 'mautic.campaign.model.event',
                                    ],
                                ],
                            ],
                            'fixtures' => [
                                'mautic.citrix.fixture.load_citrix_data' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Tests\\DataFixtures\\ORM\\LoadCitrixData',
                                    'tag' => 'doctrine.fixture.orm',
                                    'optional' => true,
                                ],
                            ],
                            'integrations' => [
                                'mautic.integration.gotoassist' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Integration\\GotoassistIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.gotomeeting' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Integration\\GotomeetingIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.gototraining' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Integration\\GototrainingIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                                'mautic.integration.gotowebinar' => [
                                    'class' => 'MauticPlugin\\MauticCitrixBundle\\Integration\\GotowebinarIntegration',
                                    'arguments' => [
                                        0 => 'event_dispatcher',
                                        1 => 'mautic.helper.cache_storage',
                                        2 => 'doctrine.orm.entity_manager',
                                        3 => 'session',
                                        4 => 'request_stack',
                                        5 => 'router',
                                        6 => 'translator',
                                        7 => 'logger',
                                        8 => 'mautic.helper.encryption',
                                        9 => 'mautic.lead.model.lead',
                                        10 => 'mautic.lead.model.company',
                                        11 => 'mautic.helper.paths',
                                        12 => 'mautic.core.model.notification',
                                        13 => 'mautic.lead.model.field',
                                        14 => 'mautic.plugin.model.integration_entity',
                                        15 => 'mautic.lead.model.dnc',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'mautic.ip_lookup_services' => [
                'extreme-ip' => [
                    'display_name' => 'Extreme-IP',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\ExtremeIpLookup',
                ],
                'freegeoip' => [
                    'display_name' => 'Ipstack.com',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\IpstackLookup',
                ],
                'geobytes' => [
                    'display_name' => 'Geobytes',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\GeobytesLookup',
                ],
                'geoips' => [
                    'display_name' => 'GeoIPs',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\GeoipsLookup',
                ],
                'ipinfodb' => [
                    'display_name' => 'IPInfoDB',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\IpinfodbLookup',
                ],
                'maxmind_country' => [
                    'display_name' => 'MaxMind - Country Geolocation',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindCountryLookup',
                ],
                'maxmind_omni' => [
                    'display_name' => 'MaxMind - Insights (formerly Omni]',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindOmniLookup',
                ],
                'maxmind_precision' => [
                    'display_name' => 'MaxMind - GeoIP2 Precision',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindPrecisionLookup',
                ],
                'maxmind_download' => [
                    'display_name' => 'MaxMind - GeoLite2 City Download',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\MaxmindDownloadLookup',
                ],
                'telize' => [
                    'display_name' => 'Telize',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\TelizeLookup',
                ],
                'ip2loctionlocal' => [
                    'display_name' => 'IP2Location Local Bin File',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\IP2LocationBinLookup',
                ],
                'ip2loctionapi' => [
                    'display_name' => 'IP2Location Web Service',
                    'class' => 'Mautic\\CoreBundle\\IpLookup\\IP2LocationAPILookup',
                ],
            ],
            'mautic.famework.csrf_protection' => true,
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\IdenticalPropertyNamingStrategy',
            'console_error_listener.class' => 'Mautic\\CoreBundle\\EventListener\\ConsoleErrorListener',
            'console_terminate_listener.class' => 'Mautic\\CoreBundle\\EventListener\\ConsoleTerminateListener',
            'mautic.security.restrictedConfigFields' => [
                0 => 'db_driver',
                1 => 'db_host',
                2 => 'db_table_prefix',
                3 => 'db_name',
                4 => 'db_user',
                5 => 'db_password',
                6 => 'db_path',
                7 => 'db_port',
                8 => 'secret_key',
                9 => 'transifex_username',
                10 => 'transifex_password',
            ],
            'mautic.security.restrictedConfigFields.displayMode' => 'remove',
            'mautic.security.disableUpdates' => false,
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationFailureEvent' => 'security.authentication.failure',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => [

            ],
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'debug.error_handler.throw_at' => 0,
            'router.resource' => (\dirname(__DIR__, 4).'/app/config/routing.php'),
            'session.metadata.storage_key' => '_sf2_meta',
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'security.role_hierarchy.roles' => [
                'ROLE_ADMIN' => [
                    0 => 'ROLE_USER',
                ],
            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'install',
                1 => 'dev',
                2 => 'login',
                3 => 'sso_login',
                4 => 'saml_login',
                5 => 'saml_discovery',
                6 => 'oauth2_token',
                7 => 'oauth2_area',
                8 => 'api',
                9 => 'main',
                10 => 'public',
            ],
            'security.dev._indexed_authenticators' => [

            ],
            'security.login._indexed_authenticators' => [

            ],
            'security.sso_login._indexed_authenticators' => [

            ],
            'security.saml_login._indexed_authenticators' => [

            ],
            'security.saml_discovery._indexed_authenticators' => [

            ],
            'security.oauth2_area._indexed_authenticators' => [

            ],
            'security.api._indexed_authenticators' => [

            ],
            'security.main._indexed_authenticators' => [

            ],
            'security.public._indexed_authenticators' => [

            ],
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.mautic' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'mautic',
                    ],
                ],
                'monolog.handler.main' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'mautic',
                    ],
                ],
            ],
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'array' => [
                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Type\\ArrayType',
                ],
                'datetime' => [
                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Type\\UTCDateTimeType',
                ],
                'generated' => [
                    'class' => 'Mautic\\CoreBundle\\Doctrine\\Type\\GeneratedType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
                'unbuffered' => 'doctrine.dbal.unbuffered_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => false,
            'doctrine.orm.enable_lazy_ghost_objects' => false,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine.migrations.preferred_em' => NULL,
            'doctrine.migrations.preferred_connection' => NULL,
            'knp_menu.renderer.list.options' => [

            ],
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => [

            ],
            'knp_menu.renderer.twig.template' => '@KnpMenu/menu.html.twig',
            'knp_menu.default_renderer' => 'mautic',
            'fos_oauth_server.server.class' => 'OAuth2\\OAuth2',
            'fos_oauth_server.security.authentication.provider.class' => 'FOS\\OAuthServerBundle\\Security\\Authentication\\Provider\\OAuthProvider',
            'fos_oauth_server.security.authentication.listener.class' => 'Mautic\\ApiBundle\\Security\\OAuth2\\Firewall\\OAuthListener',
            'fos_oauth_server.security.entry_point.class' => 'FOS\\OAuthServerBundle\\Security\\EntryPoint\\OAuthEntryPoint',
            'fos_oauth_server.model_manager_name' => NULL,
            'fos_oauth_server.model.client.class' => 'Mautic\\ApiBundle\\Entity\\oAuth2\\Client',
            'fos_oauth_server.model.access_token.class' => 'Mautic\\ApiBundle\\Entity\\oAuth2\\AccessToken',
            'fos_oauth_server.model.refresh_token.class' => 'Mautic\\ApiBundle\\Entity\\oAuth2\\RefreshToken',
            'fos_oauth_server.model.auth_code.class' => 'Mautic\\ApiBundle\\Entity\\oAuth2\\AuthCode',
            'fos_oauth_server.authorize.form.type' => 'FOS\\OAuthServerBundle\\Form\\Type\\AuthorizeFormType',
            'fos_oauth_server.authorize.form.name' => 'fos_oauth_server_authorize_form',
            'fos_oauth_server.authorize.form.validation_groups' => [
                0 => 'Authorize',
                1 => 'Default',
            ],
            'jms_serializer.twig_enabled' => 'default',
            'oneup_uploader.chunks.manager.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\ChunkManager',
            'oneup_uploader.chunks_storage.gaufrette.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\GaufretteStorage',
            'oneup_uploader.chunks_storage.flysystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\FlysystemStorage',
            'oneup_uploader.chunks_storage.filesystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\FilesystemStorage',
            'oneup_uploader.namer.urlsafename.class' => 'Oneup\\UploaderBundle\\Uploader\\Naming\\UrlSafeNamer',
            'oneup_uploader.namer.uniqid.class' => 'Oneup\\UploaderBundle\\Uploader\\Naming\\UniqidNamer',
            'oneup_uploader.routing.loader.class' => 'Oneup\\UploaderBundle\\Routing\\RouteLoader',
            'oneup_uploader.storage.gaufrette.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\GaufretteStorage',
            'oneup_uploader.storage.flysystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FlysystemStorage',
            'oneup_uploader.storage.filesystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FilesystemStorage',
            'oneup_uploader.orphanage.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FilesystemOrphanageStorage',
            'oneup_uploader.orphanage.manager.class' => 'Oneup\\UploaderBundle\\Uploader\\Orphanage\\OrphanageManager',
            'oneup_uploader.controller.fineuploader.class' => 'Oneup\\UploaderBundle\\Controller\\FineUploaderController',
            'oneup_uploader.controller.blueimp.class' => 'Oneup\\UploaderBundle\\Controller\\BlueimpController',
            'oneup_uploader.controller.uploadify.class' => 'Oneup\\UploaderBundle\\Controller\\UploadifyController',
            'oneup_uploader.controller.yui3.class' => 'Oneup\\UploaderBundle\\Controller\\YUI3Controller',
            'oneup_uploader.controller.fancyupload.class' => 'Oneup\\UploaderBundle\\Controller\\FancyUploadController',
            'oneup_uploader.controller.mooupload.class' => 'Oneup\\UploaderBundle\\Controller\\MooUploadController',
            'oneup_uploader.controller.plupload.class' => 'Oneup\\UploaderBundle\\Controller\\PluploadController',
            'oneup_uploader.controller.dropzone.class' => 'Mautic\\AssetBundle\\Controller\\UploadController',
            'oneup_uploader.command.clear_chunks.class' => 'Oneup\\UploaderBundle\\Command\\ClearChunkCommand',
            'oneup_uploader.command.clear_orphans.class' => 'Oneup\\UploaderBundle\\Command\\ClearOrphansCommand',
            'oneup_uploader.error_handler.noop.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\NoopErrorHandler',
            'oneup_uploader.error_handler.blueimp.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\BlueimpErrorHandler',
            'oneup_uploader.error_handler.plupload.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\PluploadErrorHandler',
            'oneup_uploader.error_handler.dropzone.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\DropzoneErrorHandler',
            'oneup_uploader.controllers' => [
                'asset' => [
                    0 => 'oneup_uploader.controller.mautic',
                    1 => [
                        'enable_progress' => false,
                        'enable_cancelation' => false,
                        'route_prefix' => '',
                        'endpoints' => [
                            'upload' => NULL,
                            'progress' => NULL,
                            'cancel' => NULL,
                        ],
                    ],
                ],
            ],
            'oneup_uploader.maxsize' => [
                'asset' => 2097152,
            ],
            'twig.form.resources' => [
                0 => '@FMElfinder/Form/elfinder_widget.html.twig',
                1 => 'form_div_layout.html.twig',
                2 => '@MauticCore/FormTheme/mautic_form_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'lightsaml.route.login_check' => 'lightsaml_sp.login_check',
            'lightsaml.store.request_session_prefix' => 'main',
            'lightsaml.store.request_session_sufix' => 'saml_request_state_',
            'lightsaml.store.sso_state_session_key' => 'samlsso',
            'lightsaml_sp.route.discovery' => 'lightsaml_sp.discovery',
            'noxlogic_rate_limit.header_modification_listener.class' => 'Noxlogic\\RateLimitBundle\\EventListener\\HeaderModificationListener',
            'noxlogic_rate_limit.rate_limit_annotation_listener.class' => 'Noxlogic\\RateLimitBundle\\EventListener\\RateLimitAnnotationListener',
            'noxlogic_rate_limit.rate_limit_service.class' => 'Noxlogic\\RateLimitBundle\\Service\\RateLimitService',
            'noxlogic_rate_limit.oauth_key_generate_listener.class' => 'Noxlogic\\RateLimitBundle\\EventListener\\OauthKeyGenerateListener',
            'noxlogic_rate_limit.path_limit_processor.class' => 'Noxlogic\\RateLimitBundle\\Util\\PathLimitProcessor',
            'noxlogic_rate_limit.enabled' => false,
            'noxlogic_rate_limit.rate_response_exception' => NULL,
            'noxlogic_rate_limit.rate_response_code' => 429,
            'noxlogic_rate_limit.rate_response_message' => '{ "errors": [ { "code": 429, "message": "You exceeded the rate limit of 0 API calls per hour.", "details": [] } ]}',
            'noxlogic_rate_limit.display_headers' => true,
            'noxlogic_rate_limit.headers.limit.name' => 'X-RateLimit-Limit',
            'noxlogic_rate_limit.headers.remaining.name' => 'X-RateLimit-Remaining',
            'noxlogic_rate_limit.headers.reset.name' => 'X-RateLimit-Reset',
            'noxlogic_rate_limit.path_limits' => [
                0 => [
                    'path' => '/api',
                    'limit' => 0,
                    'period' => 3600,
                    'methods' => [
                        0 => '*',
                    ],
                ],
            ],
            'noxlogic_rate_limit.storage.class' => 'Noxlogic\\RateLimitBundle\\Service\\Storage\\PsrCache',
            'fm_elfinder.loader' => 'FM\\ElfinderBundle\\Loader\\ElFinderLoader',
            'fm_elfinder.configurator' => 'FM\\ElfinderBundle\\Configuration\\ElFinderConfigurationReader',
            'elfinder.form.type.class' => 'FM\\ElfinderBundle\\Form\\Type\\ElFinderType',
            'twig.controller.exception.class' => 'Mautic\\CoreBundle\\Controller\\ExceptionController',
            'console.command.ids' => [
                0 => 'Mautic\\CampaignBundle\\Command\\ExecuteEventCommand',
                1 => 'Mautic\\CampaignBundle\\Command\\SummarizeCommand',
                2 => 'Mautic\\CampaignBundle\\Command\\TriggerCampaignCommand',
                3 => 'Mautic\\CampaignBundle\\Command\\UpdateLeadCampaignsCommand',
                4 => 'Mautic\\CampaignBundle\\Command\\ValidateEventCommand',
                5 => 'Mautic\\ChannelBundle\\Command\\ProcessMarketingMessagesQueueCommand',
                6 => 'Mautic\\ChannelBundle\\Command\\SendChannelBroadcastCommand',
                7 => 'Mautic\\CacheBundle\\Command\\ClearCacheCommand',
                8 => 'Mautic\\CoreBundle\\Command\\ApplyUpdatesCommand',
                9 => 'Mautic\\CoreBundle\\Command\\CleanupMaintenanceCommand',
                10 => 'Mautic\\CoreBundle\\Command\\ConvertConfigCommand',
                11 => 'Mautic\\CoreBundle\\Command\\FindUpdatesCommand',
                12 => 'Mautic\\CoreBundle\\Command\\GenerateProductionAssetsCommand',
                13 => 'Mautic\\CoreBundle\\Command\\InstallDataCommand',
                14 => 'Mautic\\CoreBundle\\Command\\MaxMindDoNotSellPurgeCommand',
                15 => 'Mautic\\CoreBundle\\Command\\PullTransifexCommand',
                16 => 'Mautic\\CoreBundle\\Command\\PushTransifexCommand',
                17 => 'Mautic\\CoreBundle\\Command\\UnusedIpDeleteCommand',
                18 => 'Mautic\\CoreBundle\\Command\\UpdateDoNotSellListCommand',
                19 => 'Mautic\\CoreBundle\\Command\\UpdateIpDataStoreCommand',
                20 => 'Mautic\\EmailBundle\\Command\\ProcessFetchEmailCommand',
                21 => 'Mautic\\InstallBundle\\Command\\InstallCommand',
                22 => 'Mautic\\IntegrationsBundle\\Command\\SyncCommand',
                23 => 'Mautic\\LeadBundle\\Command\\ContactScheduledExportCommand',
                24 => 'Mautic\\LeadBundle\\Command\\DeduplicateCommand',
                25 => 'Mautic\\LeadBundle\\Command\\DeduplicateIdsCommand',
                26 => 'Mautic\\LeadBundle\\Command\\ImportCommand',
                27 => 'Mautic\\LeadBundle\\Command\\UpdateLeadListsCommand',
                28 => 'Mautic\\LeadBundle\\Field\\Command\\CreateCustomFieldCommand',
                29 => 'Mautic\\MarketplaceBundle\\Command\\InstallCommand',
                30 => 'Mautic\\MarketplaceBundle\\Command\\ListCommand',
                31 => 'Mautic\\MarketplaceBundle\\Command\\RemoveCommand',
                32 => 'Mautic\\PluginBundle\\Command\\FetchLeadsCommand',
                33 => 'Mautic\\PluginBundle\\Command\\PushLeadActivityCommand',
                34 => 'Mautic\\PluginBundle\\Command\\ReloadCommand',
                35 => 'Mautic\\ReportBundle\\Scheduler\\Command\\ExportSchedulerCommand',
                36 => 'Mautic\\WebhookBundle\\Command\\DeleteWebhookLogsCommand',
                37 => 'Mautic\\WebhookBundle\\Command\\ProcessWebhookQueuesCommand',
                38 => 'Mautic\\QueueBundle\\Command\\ConsumeQueueCommand',
                39 => 'MauticPlugin\\MauticSocialBundle\\Command\\MauticSocialMonitoringCommand',
                40 => 'MauticPlugin\\MauticSocialBundle\\Command\\MonitorTwitterHashtagsCommand',
                41 => 'MauticPlugin\\MauticSocialBundle\\Command\\MonitorTwitterMentionsCommand',
                42 => 'MauticPlugin\\MauticCitrixBundle\\Command\\SyncCommand',
            ],
        ];
    }

    protected function throw($message)
    {
        throw new RuntimeException($message);
    }
}

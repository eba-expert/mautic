<?php

namespace ContainerTJJPQO2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getRouting_LoaderService extends AppKernelProdContainer
{
    /*
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.route_loader'] ?? $container->load('getMautic_RouteLoaderService'));

        if (isset($container->services['routing.loader'])) {
            return $container->services['routing.loader'];
        }
        $b = new \Symfony\Component\Config\Loader\LoaderResolver();

        $c = new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)));
        $d = new \Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), 'prod');

        $b->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($c, 'prod'));
        $b->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($c, 'prod'));
        $b->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($c, 'prod'));
        $b->addLoader(new \Symfony\Component\Routing\Loader\GlobFileLoader($c, 'prod'));
        $b->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($c, 'prod'));
        $b->addLoader(new \Symfony\Component\Routing\Loader\ContainerLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [], []), 'prod'));
        $b->addLoader(($container->services['oneup_uploader.routing.loader'] ?? $container->load('getOneupUploader_Routing_LoaderService')));
        $b->addLoader($a);
        $b->addLoader($d);
        $b->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($c, $d));
        $b->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($c, $d));

        return $container->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($b, [], []);
    }
}

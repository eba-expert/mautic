<?php

namespace ContainerTJJPQO2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getWebhookModelService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\WebhookBundle\Model\WebhookModel' shared autowired service.
     *
     * @return \Mautic\WebhookBundle\Model\WebhookModel
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->services['Mautic\\WebhookBundle\\Model\\WebhookModel'])) {
            return $container->services['Mautic\\WebhookBundle\\Model\\WebhookModel'];
        }
        $b = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->services['Mautic\\WebhookBundle\\Model\\WebhookModel'])) {
            return $container->services['Mautic\\WebhookBundle\\Model\\WebhookModel'];
        }

        return $container->services['Mautic\\WebhookBundle\\Model\\WebhookModel'] = new \Mautic\WebhookBundle\Model\WebhookModel(($container->services['mautic.helper.core_parameters'] ?? ($container->services['mautic.helper.core_parameters'] = new \Mautic\CoreBundle\Helper\CoreParametersHelper($container))), ($container->services['jms_serializer'] ?? $container->load('getJmsSerializerService')), ($container->services['mautic.webhook.http.client'] ?? $container->load('getMautic_Webhook_Http_ClientService')), ($container->services['mautic.permission.manager'] ?? $container->getMautic_Permission_ManagerService()), ($container->services['mautic.security'] ?? $container->getMautic_SecurityService()), $a, $b, ($container->services['Mautic\\CoreBundle\\Translation\\Translator'] ?? $container->getTranslatorService()), ($container->services['mautic.helper.user'] ?? $container->getMautic_Helper_UserService()), ($container->services['monolog.logger.mautic'] ?? $container->getMonolog_Logger_MauticService()));
    }
}

<?php

namespace ContainerTJJPQO2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Firewall_Map_Context_MainService extends AppKernelProdContainer
{
    /*
     * Gets the private 'security.firewall.map.context.main' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['http_kernel'] ?? $container->getHttpKernelService());

        if (isset($container->privates['security.firewall.map.context.main'])) {
            return $container->privates['security.firewall.map.context.main'];
        }
        $b = ($container->privates['security.event_dispatcher.main'] ?? $container->load('getSecurity_EventDispatcher_MainService'));

        if (isset($container->privates['security.firewall.map.context.main'])) {
            return $container->privates['security.firewall.map.context.main'];
        }
        $c = ($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService());
        $d = ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService'));

        return $container->privates['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.channel_listener'] ?? $container->load('getSecurity_ChannelListenerService'));
            yield 1 => ($container->privates['security.context_listener.1'] ?? $container->load('getSecurity_ContextListener_1Service'));
            yield 2 => ($container->privates['security.authentication.listener.guard.main'] ?? $container->load('getSecurity_Authentication_Listener_Guard_MainService'));
            yield 3 => ($container->privates['security.authentication.listener.fos_oauth_server.main'] ?? $container->load('getSecurity_Authentication_Listener_FosOauthServer_MainService'));
            yield 4 => ($container->privates['security.authentication.listener.form.main'] ?? $container->load('getSecurity_Authentication_Listener_Form_MainService'));
            yield 5 => ($container->privates['security.authentication.listener.lightsaml_sp.main'] ?? $container->load('getSecurity_Authentication_Listener_LightsamlSp_MainService'));
            yield 6 => ($container->privates['security.authentication.listener.rememberme.main'] ?? $container->load('getSecurity_Authentication_Listener_Rememberme_MainService'));
            yield 7 => ($container->privates['security.access_listener'] ?? $container->load('getSecurity_AccessListenerService'));
        }, 8), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($c, ($container->privates['security.authentication.trust_resolver'] ?? ($container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver())), $d, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($a, $d, $container->getEnv('MAUTIC_SAML_LOGIN_PATH'), false), NULL, NULL, ($container->privates['monolog.logger.security'] ?? $container->load('getMonolog_Logger_SecurityService')), false), new \Symfony\Component\Security\Http\Firewall\LogoutListener($c, $d, $b, ['csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => '/s/logout']), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('main', 'security.user_checker', '.security.request_matcher.rr37K7x', true, false, 'mautic.user.provider', 'mautic', 'security.authentication.form_entry_point.main', NULL, NULL, [0 => 'guard', 1 => 'fos_oauth', 2 => 'form_login', 3 => 'light_saml_sp', 4 => 'remember_me'], NULL));
    }
}

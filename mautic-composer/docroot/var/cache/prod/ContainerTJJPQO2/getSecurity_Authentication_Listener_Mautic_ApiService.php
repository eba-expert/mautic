<?php

namespace ContainerTJJPQO2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authentication_Listener_Mautic_ApiService extends AppKernelProdContainer
{
    /*
     * Gets the private 'security.authentication.listener.mautic.api' shared service.
     *
     * @return \Mautic\UserBundle\Security\Firewall\AuthenticationListener
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['mautic.security.authentication_handler'] ?? $container->load('getMautic_Security_AuthenticationHandlerService'));

        if (isset($container->privates['security.authentication.listener.mautic.api'])) {
            return $container->privates['security.authentication.listener.mautic.api'];
        }
        $b = ($container->privates['security.authentication.manager'] ?? $container->load('getSecurity_Authentication_ManagerService'));

        if (isset($container->privates['security.authentication.listener.mautic.api'])) {
            return $container->privates['security.authentication.listener.mautic.api'];
        }
        $c = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['security.authentication.listener.mautic.api'])) {
            return $container->privates['security.authentication.listener.mautic.api'];
        }
        $d = ($container->services['doctrine.orm.default_entity_manager'] ?? $container->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($container->privates['security.authentication.listener.mautic.api'])) {
            return $container->privates['security.authentication.listener.mautic.api'];
        }

        return $container->privates['security.authentication.listener.mautic.api'] = new \Mautic\UserBundle\Security\Firewall\AuthenticationListener($a, ($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), $b, ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()), $c, 'api', ($container->services['mautic.permission.repository'] ?? $container->getMautic_Permission_RepositoryService()), $d);
    }
}
